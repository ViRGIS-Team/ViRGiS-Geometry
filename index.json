{
  "api/g3.AddTrianglesMeshChange.html": {
    "href": "api/g3.AddTrianglesMeshChange.html",
    "title": "Class AddTrianglesMeshChange | ViRGIS VR GIS",
    "keywords": "Class AddTrianglesMeshChange Add triangles from mesh and store necessary data to be able to reverse the change. Vertex and Triangle IDs will be restored on Revert() Currently does not restore the same EdgeIDs Inheritance Object AddTrianglesMeshChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class AddTrianglesMeshChange Constructors AddTrianglesMeshChange() Declaration public AddTrianglesMeshChange() Fields AddedT Declaration protected DVector<int> AddedT Field Value Type Description DVector < Int32 > AddedV Declaration protected DVector<int> AddedV Field Value Type Description DVector < Int32 > Colors Declaration protected DVector<Vector3f> Colors Field Value Type Description DVector < Vector3f > Normals Declaration protected DVector<Vector3f> Normals Field Value Type Description DVector < Vector3f > OnApplyF Declaration public Action<IEnumerable<int>, IEnumerable<int>> OnApplyF Field Value Type Description Action < IEnumerable < Int32 >, IEnumerable < Int32 >> OnRevertF Declaration public Action<IEnumerable<int>, IEnumerable<int>> OnRevertF Field Value Type Description Action < IEnumerable < Int32 >, IEnumerable < Int32 >> Positions Declaration protected DVector<Vector3d> Positions Field Value Type Description DVector < Vector3d > Triangles Declaration protected DVector<Index4i> Triangles Field Value Type Description DVector < Index4i > UVs Declaration protected DVector<Vector2f> UVs Field Value Type Description DVector < Vector2f > Methods Apply(DMesh3) Declaration public void Apply(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh InitializeFromExisting(DMesh3, IEnumerable<Int32>, IEnumerable<Int32>) Declaration public void InitializeFromExisting(DMesh3 mesh, IEnumerable<int> added_v, IEnumerable<int> added_t) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > added_v IEnumerable < Int32 > added_t Revert(DMesh3) Declaration public void Revert(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh"
  },
  "api/g3.Arc2d.html": {
    "href": "api/g3.Arc2d.html",
    "title": "Class Arc2d | ViRGIS VR GIS",
    "keywords": "Class Arc2d Inheritance Object Arc2d Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Arc2d : IParametricCurve2d Constructors Arc2d(Vector2d, Vector2d, Vector2d) Create Arc around center, clockwise from start to end points. Points must both be the same distance from center (ie on circle) Declaration public Arc2d(Vector2d vCenter, Vector2d vStart, Vector2d vEnd) Parameters Type Name Description Vector2d vCenter Vector2d vStart Vector2d vEnd Arc2d(Vector2d, Double, Double, Double) Declaration public Arc2d(Vector2d center, double radius, double startDeg, double endDeg) Parameters Type Name Description Vector2d center Double radius Double startDeg Double endDeg Fields AngleEndDeg Declaration public double AngleEndDeg Field Value Type Description Double AngleStartDeg Declaration public double AngleStartDeg Field Value Type Description Double Center Declaration public Vector2d Center Field Value Type Description Vector2d IsReversed Declaration public bool IsReversed Field Value Type Description Boolean Radius Declaration public double Radius Field Value Type Description Double Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d Curvature Declaration public double Curvature { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean P0 Declaration public Vector2d P0 { get; } Property Value Type Description Vector2d P1 Declaration public Vector2d P1 { get; } Property Value Type Description Vector2d ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double SignedCurvature Declaration public double SignedCurvature { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Distance(Vector2d) Declaration public double Distance(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Double NearestPoint(Vector2d) Declaration public Vector2d NearestPoint(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Vector2d Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d SetFromCenterAndPoints(Vector2d, Vector2d, Vector2d) Initialize Arc around center, clockwise from start to end points. Points must both be the same distance from center (ie on circle) Declaration public void SetFromCenterAndPoints(Vector2d vCenter, Vector2d vStart, Vector2d vEnd) Parameters Type Name Description Vector2d vCenter Vector2d vStart Vector2d vEnd TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.ArcLengthSoftTranslation.html": {
    "href": "api/g3.ArcLengthSoftTranslation.html",
    "title": "Class ArcLengthSoftTranslation | ViRGIS VR GIS",
    "keywords": "Class ArcLengthSoftTranslation Inheritance Object ArcLengthSoftTranslation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ArcLengthSoftTranslation Constructors ArcLengthSoftTranslation() Declaration public ArcLengthSoftTranslation() Fields roi_index Declaration public int[] roi_index Field Value Type Description Int32 [] roi_weights Declaration public double[] roi_weights Field Value Type Description Double [] start_positions Declaration public Vector3d[] start_positions Field Value Type Description Vector3d [] Properties ArcRadius Declaration public double ArcRadius { get; set; } Property Value Type Description Double Curve Declaration public DCurve3 Curve { get; set; } Property Value Type Description DCurve3 Handle Declaration public Vector3d Handle { get; set; } Property Value Type Description Vector3d WeightFunc Declaration public Func<double, double, double> WeightFunc { get; set; } Property Value Type Description Func < Double , Double , Double > Methods BeginDeformation() Declaration public void BeginDeformation() EndDeformation() Declaration public void EndDeformation() UpdateDeformation(Vector3d) Declaration public void UpdateDeformation(Vector3d newHandlePos) Parameters Type Name Description Vector3d newHandlePos UpdateROI(Int32) Declaration public void UpdateROI(int nNearVertexHint = -1) Parameters Type Name Description Int32 nNearVertexHint"
  },
  "api/g3.Arrangement2d.html": {
    "href": "api/g3.Arrangement2d.html",
    "title": "Class Arrangement2d | ViRGIS VR GIS",
    "keywords": "Class Arrangement2d Arrangement2d constructs a planar arrangement of a set of 2D line segments. When a segment is inserted, existing edges are split, and the inserted segment becomes multiple graph edges. So, the resulting DGraph2 should not have any edges that intersect. Calculations are performed in double-precision, so there is no guarantee of correctness. [TODO] multi-level segment has to accelerate find_intersecting_edges() [TODO] maybe smarter handling Inheritance Object Arrangement2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Arrangement2d Constructors Arrangement2d(AxisAlignedBox2d) Declaration public Arrangement2d(AxisAlignedBox2d boundsHint) Parameters Type Name Description AxisAlignedBox2d boundsHint Fields Graph Declaration public DGraph2 Graph Field Value Type Description DGraph2 PointHash Declaration public PointHashGrid2d<int> PointHash Field Value Type Description PointHashGrid2d < Int32 > VertexSnapTol Declaration public double VertexSnapTol Field Value Type Description Double Methods ConnectOpenBoundaries(Double) connect open boundary vertices within distThresh, by inserting new segments Declaration public void ConnectOpenBoundaries(double distThresh) Parameters Type Name Description Double distThresh find_existing_vertex(Vector2d) find existing vertex at point, if it exists Declaration protected int find_existing_vertex(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Int32 find_intersecting_edges(ref Vector2d, ref Vector2d, List<Arrangement2d.Intersection>, Double) find set of edges in graph that intersect with edge [a,b] Declaration protected bool find_intersecting_edges(ref Vector2d a, ref Vector2d b, List<Arrangement2d.Intersection> hits, double tol = 0) Parameters Type Name Description Vector2d a Vector2d b List < Arrangement2d.Intersection > hits Double tol Returns Type Description Boolean find_nearest_boundary_vertex(Vector2d, Double, Int32) find nearest boundary vertex, within searchRadius Declaration protected int find_nearest_boundary_vertex(Vector2d pt, double searchRadius, int ignore_vid = -1) Parameters Type Name Description Vector2d pt Double searchRadius Int32 ignore_vid Returns Type Description Int32 find_nearest_vertex(Vector2d, Double, Int32) find closest vertex, within searchRadius Declaration protected int find_nearest_vertex(Vector2d pt, double searchRadius, int ignore_vid = -1) Parameters Type Name Description Vector2d pt Double searchRadius Int32 ignore_vid Returns Type Description Int32 Insert(Polygon2d, Int32) sequentially insert segments of polygon Declaration public void Insert(Polygon2d poly, int gid = -1) Parameters Type Name Description Polygon2d poly Int32 gid Insert(PolyLine2d, Int32) sequentially insert segments of polyline Declaration public void Insert(PolyLine2d pline, int gid = -1) Parameters Type Name Description PolyLine2d pline Int32 gid Insert(Segment2d, Int32) insert segment into the arrangement Declaration public void Insert(Segment2d segment, int gid = -1) Parameters Type Name Description Segment2d segment Int32 gid Insert(Vector2d, Vector2d, Int32) insert segment [a,b] into the arrangement Declaration public void Insert(Vector2d a, Vector2d b, int gid = -1) Parameters Type Name Description Vector2d a Vector2d b Int32 gid insert_segment(Vector2d, Vector2d, Int32, Double) Declaration protected bool insert_segment(Vector2d a, Vector2d b, int gid = -1, double tol = 0) Parameters Type Name Description Vector2d a Vector2d b Int32 gid Double tol Returns Type Description Boolean insert_segment(ref Vector2d, ref Vector2d, Int32, Double) insert edge [a,b] into the arrangement, splitting existing edges as necessary Declaration protected bool insert_segment(ref Vector2d a, ref Vector2d b, int gid = -1, double tol = 0) Parameters Type Name Description Vector2d a Vector2d b Int32 gid Double tol Returns Type Description Boolean split_segment_at_t(Int32, Double, Double) insert new point into segment eid at parameter value t If t is within tol of endpoint of segment, we use that instead. Declaration protected Index2i split_segment_at_t(int eid, double t, double tol) Parameters Type Name Description Int32 eid Double t Double tol Returns Type Description Index2i"
  },
  "api/g3.Arrangement2d.Intersection.html": {
    "href": "api/g3.Arrangement2d.Intersection.html",
    "title": "Struct Arrangement2d.Intersection | ViRGIS VR GIS",
    "keywords": "Struct Arrangement2d.Intersection Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected struct Intersection Fields eid Declaration public int eid Field Value Type Description Int32 intr Declaration public IntrSegment2Segment2 intr Field Value Type Description IntrSegment2Segment2 sidex Declaration public int sidex Field Value Type Description Int32 sidey Declaration public int sidey Field Value Type Description Int32"
  },
  "api/g3.Arrangement2d.SegmentPoint.html": {
    "href": "api/g3.Arrangement2d.SegmentPoint.html",
    "title": "Struct Arrangement2d.SegmentPoint | ViRGIS VR GIS",
    "keywords": "Struct Arrangement2d.SegmentPoint Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected struct SegmentPoint Fields t Declaration public double t Field Value Type Description Double vid Declaration public int vid Field Value Type Description Int32"
  },
  "api/g3.ArrayAlias-1.html": {
    "href": "api/g3.ArrayAlias-1.html",
    "title": "Struct ArrayAlias<T> | ViRGIS VR GIS",
    "keywords": "Struct ArrayAlias<T> Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ArrayAlias<T> Type Parameters Name Description T Constructors ArrayAlias(T[], Int32) Declaration public ArrayAlias(T[] source, int i) Parameters Type Name Description T[] source Int32 i Fields Index Declaration public int Index Field Value Type Description Int32 Source Declaration public T[] Source Field Value Type Description T[] Properties Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description T"
  },
  "api/g3.AxisAlignedBox2d.html": {
    "href": "api/g3.AxisAlignedBox2d.html",
    "title": "Struct AxisAlignedBox2d | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox2d Constructors AxisAlignedBox2d(AxisAlignedBox2d) Declaration public AxisAlignedBox2d(AxisAlignedBox2d o) Parameters Type Name Description AxisAlignedBox2d o AxisAlignedBox2d(Vector2d) Declaration public AxisAlignedBox2d(Vector2d vCenter) Parameters Type Name Description Vector2d vCenter AxisAlignedBox2d(Vector2d, Vector2d) Declaration public AxisAlignedBox2d(Vector2d vMin, Vector2d vMax) Parameters Type Name Description Vector2d vMin Vector2d vMax AxisAlignedBox2d(Vector2d, Double) Declaration public AxisAlignedBox2d(Vector2d vCenter, double fHalfWidth) Parameters Type Name Description Vector2d vCenter Double fHalfWidth AxisAlignedBox2d(Vector2d, Double, Double) Declaration public AxisAlignedBox2d(Vector2d vCenter, double fHalfWidth, double fHalfHeight) Parameters Type Name Description Vector2d vCenter Double fHalfWidth Double fHalfHeight AxisAlignedBox2d(Boolean) Declaration public AxisAlignedBox2d(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox2d(Double) Declaration public AxisAlignedBox2d(double fSquareSize) Parameters Type Name Description Double fSquareSize AxisAlignedBox2d(Double, Double) Declaration public AxisAlignedBox2d(double fWidth, double fHeight) Parameters Type Name Description Double fWidth Double fHeight AxisAlignedBox2d(Double, Double, Double, Double) Declaration public AxisAlignedBox2d(double xmin, double ymin, double xmax, double ymax) Parameters Type Name Description Double xmin Double ymin Double xmax Double ymax Fields Empty Declaration public static readonly AxisAlignedBox2d Empty Field Value Type Description AxisAlignedBox2d Infinite Declaration public static readonly AxisAlignedBox2d Infinite Field Value Type Description AxisAlignedBox2d Max Declaration public Vector2d Max Field Value Type Description Vector2d Min Declaration public Vector2d Min Field Value Type Description Vector2d UnitPositive Declaration public static readonly AxisAlignedBox2d UnitPositive Field Value Type Description AxisAlignedBox2d Zero Declaration public static readonly AxisAlignedBox2d Zero Field Value Type Description AxisAlignedBox2d Properties Area Declaration public double Area { get; } Property Value Type Description Double Center Declaration public Vector2d Center { get; } Property Value Type Description Vector2d Diagonal Declaration public Vector2d Diagonal { get; } Property Value Type Description Vector2d DiagonalLength Declaration public double DiagonalLength { get; } Property Value Type Description Double Height Declaration public double Height { get; } Property Value Type Description Double MaxDim Declaration public double MaxDim { get; } Property Value Type Description Double MaxUnsignedCoordinate returns absolute value of largest min/max x/y coordinate (ie max axis distance to origin) Declaration public double MaxUnsignedCoordinate { get; } Property Value Type Description Double MinDim Declaration public double MinDim { get; } Property Value Type Description Double Width Declaration public double Width { get; } Property Value Type Description Double Methods Add(Double, Double, Double, Double) Declaration public void Add(double left, double right, double bottom, double top) Parameters Type Name Description Double left Double right Double bottom Double top Contain(AxisAlignedBox2d) Declaration public void Contain(AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box Contain(ref AxisAlignedBox2d) Declaration public void Contain(ref AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box Contain(Vector2d) Declaration public void Contain(Vector2d v) Parameters Type Name Description Vector2d v Contain(ref Vector2d) Declaration public void Contain(ref Vector2d v) Parameters Type Name Description Vector2d v Contain(IList<Vector2d>) Declaration public void Contain(IList<Vector2d> points) Parameters Type Name Description IList < Vector2d > points Contains(AxisAlignedBox2d) Declaration public bool Contains(AxisAlignedBox2d box2) Parameters Type Name Description AxisAlignedBox2d box2 Returns Type Description Boolean Contains(ref AxisAlignedBox2d) Declaration public bool Contains(ref AxisAlignedBox2d box2) Parameters Type Name Description AxisAlignedBox2d box2 Returns Type Description Boolean Contains(Vector2d) Declaration public bool Contains(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Boolean Contains(ref Vector2d) Declaration public bool Contains(ref Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Boolean Contract(Double) Declaration public void Contract(double fRadius) Parameters Type Name Description Double fRadius Distance(Vector2d) Declaration public double Distance(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Double Expand(Double) Declaration public void Expand(double fRadius) Parameters Type Name Description Double fRadius GetCorner(Int32) Declaration public Vector2d GetCorner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d Intersect(AxisAlignedBox2d) Declaration public AxisAlignedBox2d Intersect(AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box Returns Type Description AxisAlignedBox2d Intersects(AxisAlignedBox2d) Declaration public bool Intersects(AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box Returns Type Description Boolean Intersects(ref AxisAlignedBox2d) Declaration public bool Intersects(ref AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box Returns Type Description Boolean MoveMin(Vector2d) Declaration public void MoveMin(Vector2d vNewMin) Parameters Type Name Description Vector2d vNewMin MoveMin(Double, Double) Declaration public void MoveMin(double fNewX, double fNewY) Parameters Type Name Description Double fNewX Double fNewY Pad(Double, Double, Double, Double) Declaration [Obsolete(\"This method name is confusing. Will remove in future. Use Add() instead\")] public void Pad(double fPadLeft, double fPadRight, double fPadBottom, double fPadTop) Parameters Type Name Description Double fPadLeft Double fPadRight Double fPadBottom Double fPadTop SampleT(Double, Double) Point inside box where t,s are in range [0,1] Declaration public Vector2d SampleT(double tx, double sy) Parameters Type Name Description Double tx Double sy Returns Type Description Vector2d Scale(Double) Declaration public void Scale(double scale) Parameters Type Name Description Double scale Scale(Double, Vector2d) Declaration public void Scale(double scale, Vector2d origin) Parameters Type Name Description Double scale Vector2d origin SetHeight(Double, AxisAlignedBox2d.ScaleMode) Declaration public void SetHeight(double fNewHeight, AxisAlignedBox2d.ScaleMode eScaleMode) Parameters Type Name Description Double fNewHeight AxisAlignedBox2d.ScaleMode eScaleMode SetWidth(Double, AxisAlignedBox2d.ScaleMode) Declaration public void SetWidth(double fNewWidth, AxisAlignedBox2d.ScaleMode eScaleMode) Parameters Type Name Description Double fNewWidth AxisAlignedBox2d.ScaleMode eScaleMode ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector2d) Declaration public void Translate(Vector2d vTranslate) Parameters Type Name Description Vector2d vTranslate"
  },
  "api/g3.AxisAlignedBox2d.ScaleMode.html": {
    "href": "api/g3.AxisAlignedBox2d.ScaleMode.html",
    "title": "Enum AxisAlignedBox2d.ScaleMode | ViRGIS VR GIS",
    "keywords": "Enum AxisAlignedBox2d.ScaleMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum ScaleMode Fields Name Description ScaleCenter ScaleDown ScaleLeft ScaleRight ScaleUp"
  },
  "api/g3.AxisAlignedBox2f.html": {
    "href": "api/g3.AxisAlignedBox2f.html",
    "title": "Struct AxisAlignedBox2f | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox2f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox2f Constructors AxisAlignedBox2f(AxisAlignedBox2f) Declaration public AxisAlignedBox2f(AxisAlignedBox2f o) Parameters Type Name Description AxisAlignedBox2f o AxisAlignedBox2f(Vector2f) Declaration public AxisAlignedBox2f(Vector2f vCenter) Parameters Type Name Description Vector2f vCenter AxisAlignedBox2f(Vector2f, Vector2f) Declaration public AxisAlignedBox2f(Vector2f vMin, Vector2f vMax) Parameters Type Name Description Vector2f vMin Vector2f vMax AxisAlignedBox2f(Vector2f, Single) Declaration public AxisAlignedBox2f(Vector2f vCenter, float fHalfWidth) Parameters Type Name Description Vector2f vCenter Single fHalfWidth AxisAlignedBox2f(Vector2f, Single, Single) Declaration public AxisAlignedBox2f(Vector2f vCenter, float fHalfWidth, float fHalfHeight) Parameters Type Name Description Vector2f vCenter Single fHalfWidth Single fHalfHeight AxisAlignedBox2f(Boolean) Declaration public AxisAlignedBox2f(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox2f(Single) Declaration public AxisAlignedBox2f(float fSquareSize) Parameters Type Name Description Single fSquareSize AxisAlignedBox2f(Single, Single) Declaration public AxisAlignedBox2f(float fWidth, float fHeight) Parameters Type Name Description Single fWidth Single fHeight AxisAlignedBox2f(Single, Single, Single, Single) Declaration public AxisAlignedBox2f(float xmin, float ymin, float xmax, float ymax) Parameters Type Name Description Single xmin Single ymin Single xmax Single ymax Fields Empty Declaration public static readonly AxisAlignedBox2f Empty Field Value Type Description AxisAlignedBox2f Infinite Declaration public static readonly AxisAlignedBox2f Infinite Field Value Type Description AxisAlignedBox2f Max Declaration public Vector2f Max Field Value Type Description Vector2f Min Declaration public Vector2f Min Field Value Type Description Vector2f UnitPositive Declaration public static readonly AxisAlignedBox2f UnitPositive Field Value Type Description AxisAlignedBox2f Zero Declaration public static readonly AxisAlignedBox2f Zero Field Value Type Description AxisAlignedBox2f Properties Area Declaration public float Area { get; } Property Value Type Description Single BottomLeft Declaration public Vector2f BottomLeft { get; } Property Value Type Description Vector2f BottomRight Declaration public Vector2f BottomRight { get; } Property Value Type Description Vector2f Center Declaration public Vector2f Center { get; } Property Value Type Description Vector2f CenterBottom Declaration public Vector2f CenterBottom { get; } Property Value Type Description Vector2f CenterLeft Declaration public Vector2f CenterLeft { get; } Property Value Type Description Vector2f CenterRight Declaration public Vector2f CenterRight { get; } Property Value Type Description Vector2f CenterTop Declaration public Vector2f CenterTop { get; } Property Value Type Description Vector2f Diagonal Declaration public Vector2f Diagonal { get; } Property Value Type Description Vector2f DiagonalLength Declaration public float DiagonalLength { get; } Property Value Type Description Single Height Declaration public float Height { get; } Property Value Type Description Single MaxDim Declaration public float MaxDim { get; } Property Value Type Description Single TopLeft Declaration public Vector2f TopLeft { get; } Property Value Type Description Vector2f TopRight Declaration public Vector2f TopRight { get; } Property Value Type Description Vector2f Width Declaration public float Width { get; } Property Value Type Description Single Methods Add(Single, Single, Single, Single) Declaration public void Add(float left, float right, float bottom, float top) Parameters Type Name Description Single left Single right Single bottom Single top Contain(AxisAlignedBox2f) Declaration public void Contain(AxisAlignedBox2f box) Parameters Type Name Description AxisAlignedBox2f box Contain(Vector2f) Declaration public void Contain(Vector2f v) Parameters Type Name Description Vector2f v Contains(Vector2f) Declaration public bool Contains(Vector2f v) Parameters Type Name Description Vector2f v Returns Type Description Boolean Contract(Single) Declaration public void Contract(float fRadius) Parameters Type Name Description Single fRadius Distance(Vector2f) Declaration public float Distance(Vector2f v) Parameters Type Name Description Vector2f v Returns Type Description Single Expand(Single) Declaration public void Expand(float fRadius) Parameters Type Name Description Single fRadius GetCorner(Int32) Declaration public Vector2f GetCorner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f Intersect(AxisAlignedBox2f) Declaration public AxisAlignedBox2f Intersect(AxisAlignedBox2f box) Parameters Type Name Description AxisAlignedBox2f box Returns Type Description AxisAlignedBox2f Intersects(AxisAlignedBox2f) Declaration public bool Intersects(AxisAlignedBox2f box) Parameters Type Name Description AxisAlignedBox2f box Returns Type Description Boolean MoveMin(Vector2f) Declaration public void MoveMin(Vector2f vNewMin) Parameters Type Name Description Vector2f vNewMin MoveMin(Single, Single) Declaration public void MoveMin(float fNewX, float fNewY) Parameters Type Name Description Single fNewX Single fNewY Pad(Single, Single, Single, Single) Declaration [Obsolete(\"This method name is confusing. Will remove in future. Use Add() instead\")] public void Pad(float fPadLeft, float fPadRight, float fPadBottom, float fPadTop) Parameters Type Name Description Single fPadLeft Single fPadRight Single fPadBottom Single fPadTop SetHeight(Single, AxisAlignedBox2f.ScaleMode) Declaration public void SetHeight(float fNewHeight, AxisAlignedBox2f.ScaleMode eScaleMode) Parameters Type Name Description Single fNewHeight AxisAlignedBox2f.ScaleMode eScaleMode SetWidth(Single, AxisAlignedBox2f.ScaleMode) Declaration public void SetWidth(float fNewWidth, AxisAlignedBox2f.ScaleMode eScaleMode) Parameters Type Name Description Single fNewWidth AxisAlignedBox2f.ScaleMode eScaleMode ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector2f) Declaration public void Translate(Vector2f vTranslate) Parameters Type Name Description Vector2f vTranslate"
  },
  "api/g3.AxisAlignedBox2f.ScaleMode.html": {
    "href": "api/g3.AxisAlignedBox2f.ScaleMode.html",
    "title": "Enum AxisAlignedBox2f.ScaleMode | ViRGIS VR GIS",
    "keywords": "Enum AxisAlignedBox2f.ScaleMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum ScaleMode Fields Name Description ScaleCenter ScaleDown ScaleLeft ScaleRight ScaleUp"
  },
  "api/g3.AxisAlignedBox2i.html": {
    "href": "api/g3.AxisAlignedBox2i.html",
    "title": "Struct AxisAlignedBox2i | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox2i Implements IComparable < AxisAlignedBox2i > IEquatable < AxisAlignedBox2i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox2i : IComparable<AxisAlignedBox2i>, IEquatable<AxisAlignedBox2i> Constructors AxisAlignedBox2i(Vector2i) Declaration public AxisAlignedBox2i(Vector2i vCenter) Parameters Type Name Description Vector2i vCenter AxisAlignedBox2i(Vector2i, Vector2i) Declaration public AxisAlignedBox2i(Vector2i vMin, Vector2i vMax) Parameters Type Name Description Vector2i vMin Vector2i vMax AxisAlignedBox2i(Vector2i, Int32) Declaration public AxisAlignedBox2i(Vector2i vCenter, int fHalfSize) Parameters Type Name Description Vector2i vCenter Int32 fHalfSize AxisAlignedBox2i(Vector2i, Int32, Int32, Int32) Declaration public AxisAlignedBox2i(Vector2i vCenter, int fHalfWidth, int fHalfHeight, int fHalfDepth) Parameters Type Name Description Vector2i vCenter Int32 fHalfWidth Int32 fHalfHeight Int32 fHalfDepth AxisAlignedBox2i(Boolean) Declaration public AxisAlignedBox2i(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox2i(Int32) Declaration public AxisAlignedBox2i(int fCubeSize) Parameters Type Name Description Int32 fCubeSize AxisAlignedBox2i(Int32, Int32) Declaration public AxisAlignedBox2i(int fWidth, int fHeight) Parameters Type Name Description Int32 fWidth Int32 fHeight AxisAlignedBox2i(Int32, Int32, Int32, Int32) Declaration public AxisAlignedBox2i(int xmin, int ymin, int xmax, int ymax) Parameters Type Name Description Int32 xmin Int32 ymin Int32 xmax Int32 ymax Fields Empty Declaration public static readonly AxisAlignedBox2i Empty Field Value Type Description AxisAlignedBox2i Infinite Declaration public static readonly AxisAlignedBox2i Infinite Field Value Type Description AxisAlignedBox2i Max Declaration public Vector2i Max Field Value Type Description Vector2i Min Declaration public Vector2i Min Field Value Type Description Vector2i UnitPositive Declaration public static readonly AxisAlignedBox2i UnitPositive Field Value Type Description AxisAlignedBox2i Zero Declaration public static readonly AxisAlignedBox2i Zero Field Value Type Description AxisAlignedBox2i Properties Area Declaration public int Area { get; } Property Value Type Description Int32 Center Declaration public Vector2i Center { get; } Property Value Type Description Vector2i Diagonal Declaration public Vector2i Diagonal { get; } Property Value Type Description Vector2i DiagonalLength Declaration public int DiagonalLength { get; } Property Value Type Description Int32 Extents Declaration public Vector2i Extents { get; } Property Value Type Description Vector2i Height Declaration public int Height { get; } Property Value Type Description Int32 MaxDim Declaration public int MaxDim { get; } Property Value Type Description Int32 Width Declaration public int Width { get; } Property Value Type Description Int32 Methods CompareTo(AxisAlignedBox2i) Declaration public int CompareTo(AxisAlignedBox2i other) Parameters Type Name Description AxisAlignedBox2i other Returns Type Description Int32 Contain(AxisAlignedBox2i) Declaration public void Contain(AxisAlignedBox2i box) Parameters Type Name Description AxisAlignedBox2i box Contain(AxisAlignedBox3d) Declaration public void Contain(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Contain(Vector2i) Declaration public void Contain(Vector2i v) Parameters Type Name Description Vector2i v Contain(Vector3d) Declaration public void Contain(Vector3d v) Parameters Type Name Description Vector3d v Contains(AxisAlignedBox2i) Declaration public bool Contains(AxisAlignedBox2i box) Parameters Type Name Description AxisAlignedBox2i box Returns Type Description Boolean Contains(ref AxisAlignedBox2i) Declaration public bool Contains(ref AxisAlignedBox2i box) Parameters Type Name Description AxisAlignedBox2i box Returns Type Description Boolean Contains(Vector2i) Declaration public bool Contains(Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Boolean Contains(ref Vector2i) Declaration public bool Contains(ref Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Boolean Contract(Int32) Declaration public void Contract(int nRadius) Parameters Type Name Description Int32 nRadius Distance(Vector2i) Declaration public int Distance(Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Int32 DistanceSquared(Vector2i) Declaration public double DistanceSquared(Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Double Equals(AxisAlignedBox2i) Declaration public bool Equals(AxisAlignedBox2i other) Parameters Type Name Description AxisAlignedBox2i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Expand(Int32) Declaration public void Expand(int nRadius) Parameters Type Name Description Int32 nRadius GetCorner(Int32) Declaration public Vector2i GetCorner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2i GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() IndicesExclusive() Declaration public IEnumerable<Vector2i> IndicesExclusive() Returns Type Description IEnumerable < Vector2i > IndicesInclusive() Declaration public IEnumerable<Vector2i> IndicesInclusive() Returns Type Description IEnumerable < Vector2i > Intersect(AxisAlignedBox2i) Declaration public AxisAlignedBox2i Intersect(AxisAlignedBox2i box) Parameters Type Name Description AxisAlignedBox2i box Returns Type Description AxisAlignedBox2i Intersects(AxisAlignedBox2i) Declaration public bool Intersects(AxisAlignedBox2i box) Parameters Type Name Description AxisAlignedBox2i box Returns Type Description Boolean MoveMin(Vector2i) Declaration public void MoveMin(Vector2i vNewMin) Parameters Type Name Description Vector2i vNewMin MoveMin(Int32, Int32) Declaration public void MoveMin(int fNewX, int fNewY) Parameters Type Name Description Int32 fNewX Int32 fNewY NearestPoint(Vector2i) Declaration public Vector2i NearestPoint(Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Vector2i Scale(Int32, Int32, Int32) Declaration public void Scale(int sx, int sy, int sz) Parameters Type Name Description Int32 sx Int32 sy Int32 sz ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector2i) Declaration public void Translate(Vector2i vTranslate) Parameters Type Name Description Vector2i vTranslate Operators Equality(AxisAlignedBox2i, AxisAlignedBox2i) Declaration public static bool operator ==(AxisAlignedBox2i a, AxisAlignedBox2i b) Parameters Type Name Description AxisAlignedBox2i a AxisAlignedBox2i b Returns Type Description Boolean Inequality(AxisAlignedBox2i, AxisAlignedBox2i) Declaration public static bool operator !=(AxisAlignedBox2i a, AxisAlignedBox2i b) Parameters Type Name Description AxisAlignedBox2i a AxisAlignedBox2i b Returns Type Description Boolean Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.AxisAlignedBox3d.html": {
    "href": "api/g3.AxisAlignedBox3d.html",
    "title": "Struct AxisAlignedBox3d | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox3d Implements IComparable < AxisAlignedBox3d > IEquatable < AxisAlignedBox3d > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox3d : IComparable<AxisAlignedBox3d>, IEquatable<AxisAlignedBox3d> Constructors AxisAlignedBox3d(Vector3d) Declaration public AxisAlignedBox3d(Vector3d vCenter) Parameters Type Name Description Vector3d vCenter AxisAlignedBox3d(Vector3d, Vector3d) Declaration public AxisAlignedBox3d(Vector3d vMin, Vector3d vMax) Parameters Type Name Description Vector3d vMin Vector3d vMax AxisAlignedBox3d(Vector3d, Double) Declaration public AxisAlignedBox3d(Vector3d vCenter, double fHalfSize) Parameters Type Name Description Vector3d vCenter Double fHalfSize AxisAlignedBox3d(Vector3d, Double, Double, Double) Declaration public AxisAlignedBox3d(Vector3d vCenter, double fHalfWidth, double fHalfHeight, double fHalfDepth) Parameters Type Name Description Vector3d vCenter Double fHalfWidth Double fHalfHeight Double fHalfDepth AxisAlignedBox3d(ref Vector3d, ref Vector3d) Declaration public AxisAlignedBox3d(ref Vector3d vMin, ref Vector3d vMax) Parameters Type Name Description Vector3d vMin Vector3d vMax AxisAlignedBox3d(ref Vector3d, Double, Double, Double) Declaration public AxisAlignedBox3d(ref Vector3d vCenter, double fHalfWidth, double fHalfHeight, double fHalfDepth) Parameters Type Name Description Vector3d vCenter Double fHalfWidth Double fHalfHeight Double fHalfDepth AxisAlignedBox3d(Boolean) Declaration public AxisAlignedBox3d(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox3d(Double) init box [0,size] x [0,size] x [0,size] Declaration public AxisAlignedBox3d(double fCubeSize) Parameters Type Name Description Double fCubeSize AxisAlignedBox3d(Double, Double, Double) Init box [0,width] x [0,height] x [0,depth] Declaration public AxisAlignedBox3d(double fWidth, double fHeight, double fDepth) Parameters Type Name Description Double fWidth Double fHeight Double fDepth AxisAlignedBox3d(Double, Double, Double, Double, Double, Double) Declaration public AxisAlignedBox3d(double xmin, double ymin, double zmin, double xmax, double ymax, double zmax) Parameters Type Name Description Double xmin Double ymin Double zmin Double xmax Double ymax Double zmax Fields Empty Declaration public static readonly AxisAlignedBox3d Empty Field Value Type Description AxisAlignedBox3d Infinite Declaration public static readonly AxisAlignedBox3d Infinite Field Value Type Description AxisAlignedBox3d Max Declaration public Vector3d Max Field Value Type Description Vector3d Min Declaration public Vector3d Min Field Value Type Description Vector3d UnitPositive Declaration public static readonly AxisAlignedBox3d UnitPositive Field Value Type Description AxisAlignedBox3d Zero Declaration public static readonly AxisAlignedBox3d Zero Field Value Type Description AxisAlignedBox3d Properties Center Declaration public Vector3d Center { get; } Property Value Type Description Vector3d Depth Declaration public double Depth { get; } Property Value Type Description Double Diagonal Declaration public Vector3d Diagonal { get; } Property Value Type Description Vector3d DiagonalLength Declaration public double DiagonalLength { get; } Property Value Type Description Double Extents Declaration public Vector3d Extents { get; } Property Value Type Description Vector3d Height Declaration public double Height { get; } Property Value Type Description Double MaxDim Declaration public double MaxDim { get; } Property Value Type Description Double Volume Declaration public double Volume { get; } Property Value Type Description Double Width Declaration public double Width { get; } Property Value Type Description Double Methods CompareTo(AxisAlignedBox3d) Declaration public int CompareTo(AxisAlignedBox3d other) Parameters Type Name Description AxisAlignedBox3d other Returns Type Description Int32 Contain(AxisAlignedBox3d) Declaration public void Contain(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Contain(ref AxisAlignedBox3d) Declaration public void Contain(ref AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Contain(Vector3d) Declaration public void Contain(Vector3d v) Parameters Type Name Description Vector3d v Contain(ref Vector3d) Declaration public void Contain(ref Vector3d v) Parameters Type Name Description Vector3d v Contains(AxisAlignedBox3d) Declaration public bool Contains(AxisAlignedBox3d box2) Parameters Type Name Description AxisAlignedBox3d box2 Returns Type Description Boolean Contains(ref AxisAlignedBox3d) Declaration public bool Contains(ref AxisAlignedBox3d box2) Parameters Type Name Description AxisAlignedBox3d box2 Returns Type Description Boolean Contains(Vector3d) Declaration public bool Contains(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Boolean Contains(ref Vector3d) Declaration public bool Contains(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Boolean Contract(Double) Declaration public void Contract(double fRadius) Parameters Type Name Description Double fRadius Contracted(Double) Declaration public AxisAlignedBox3d Contracted(double fRadius) Parameters Type Name Description Double fRadius Returns Type Description AxisAlignedBox3d Corner(Int32) Declaration public Vector3d Corner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d Distance(Vector3d) Declaration public double Distance(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Double DistanceSquared(ref AxisAlignedBox3d) Declaration public double DistanceSquared(ref AxisAlignedBox3d box2) Parameters Type Name Description AxisAlignedBox3d box2 Returns Type Description Double DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Double Equals(AxisAlignedBox3d) Declaration public bool Equals(AxisAlignedBox3d other) Parameters Type Name Description AxisAlignedBox3d other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Expand(Double) Declaration public void Expand(double fRadius) Parameters Type Name Description Double fRadius Expanded(Double) Declaration public AxisAlignedBox3d Expanded(double fRadius) Parameters Type Name Description Double fRadius Returns Type Description AxisAlignedBox3d GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Intersect(AxisAlignedBox3d) Declaration public AxisAlignedBox3d Intersect(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Returns Type Description AxisAlignedBox3d Intersects(AxisAlignedBox3d) Declaration public bool Intersects(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Returns Type Description Boolean MoveMin(Vector3d) Declaration public void MoveMin(Vector3d vNewMin) Parameters Type Name Description Vector3d vNewMin MoveMin(Double, Double, Double) Declaration public void MoveMin(double fNewX, double fNewY, double fNewZ) Parameters Type Name Description Double fNewX Double fNewY Double fNewZ Point(Int32, Int32, Int32) Returns point on face/edge/corner. For each coord value neg==min, 0==center, pos==max Declaration public Vector3d Point(int xi, int yi, int zi) Parameters Type Name Description Int32 xi Int32 yi Int32 zi Returns Type Description Vector3d Scale(Double, Double, Double) Declaration public void Scale(double sx, double sy, double sz) Parameters Type Name Description Double sx Double sy Double sz SignedDistance(Vector3d) Declaration public double SignedDistance(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Double ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector3d) Declaration public void Translate(Vector3d vTranslate) Parameters Type Name Description Vector3d vTranslate Operators Equality(AxisAlignedBox3d, AxisAlignedBox3d) Declaration public static bool operator ==(AxisAlignedBox3d a, AxisAlignedBox3d b) Parameters Type Name Description AxisAlignedBox3d a AxisAlignedBox3d b Returns Type Description Boolean Explicit(AxisAlignedBox3d to AxisAlignedBox3f) Declaration public static explicit operator AxisAlignedBox3f(AxisAlignedBox3d v) Parameters Type Name Description AxisAlignedBox3d v Returns Type Description AxisAlignedBox3f Implicit(AxisAlignedBox3f to AxisAlignedBox3d) Declaration public static implicit operator AxisAlignedBox3d(AxisAlignedBox3f v) Parameters Type Name Description AxisAlignedBox3f v Returns Type Description AxisAlignedBox3d Inequality(AxisAlignedBox3d, AxisAlignedBox3d) Declaration public static bool operator !=(AxisAlignedBox3d a, AxisAlignedBox3d b) Parameters Type Name Description AxisAlignedBox3d a AxisAlignedBox3d b Returns Type Description Boolean Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.AxisAlignedBox3f.html": {
    "href": "api/g3.AxisAlignedBox3f.html",
    "title": "Struct AxisAlignedBox3f | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox3f Implements IComparable < AxisAlignedBox3f > IEquatable < AxisAlignedBox3f > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox3f : IComparable<AxisAlignedBox3f>, IEquatable<AxisAlignedBox3f> Constructors AxisAlignedBox3f(Vector3f) Declaration public AxisAlignedBox3f(Vector3f vCenter) Parameters Type Name Description Vector3f vCenter AxisAlignedBox3f(Vector3f, Vector3f) Declaration public AxisAlignedBox3f(Vector3f vMin, Vector3f vMax) Parameters Type Name Description Vector3f vMin Vector3f vMax AxisAlignedBox3f(Vector3f, Single) Declaration public AxisAlignedBox3f(Vector3f vCenter, float fHalfSize) Parameters Type Name Description Vector3f vCenter Single fHalfSize AxisAlignedBox3f(Vector3f, Single, Single, Single) Declaration public AxisAlignedBox3f(Vector3f vCenter, float fHalfWidth, float fHalfHeight, float fHalfDepth) Parameters Type Name Description Vector3f vCenter Single fHalfWidth Single fHalfHeight Single fHalfDepth AxisAlignedBox3f(ref Vector3f, ref Vector3f) Declaration public AxisAlignedBox3f(ref Vector3f vMin, ref Vector3f vMax) Parameters Type Name Description Vector3f vMin Vector3f vMax AxisAlignedBox3f(ref Vector3f, Single, Single, Single) Declaration public AxisAlignedBox3f(ref Vector3f vCenter, float fHalfWidth, float fHalfHeight, float fHalfDepth) Parameters Type Name Description Vector3f vCenter Single fHalfWidth Single fHalfHeight Single fHalfDepth AxisAlignedBox3f(Boolean) Declaration public AxisAlignedBox3f(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox3f(Single) Declaration public AxisAlignedBox3f(float fCubeSize) Parameters Type Name Description Single fCubeSize AxisAlignedBox3f(Single, Single, Single) Declaration public AxisAlignedBox3f(float fWidth, float fHeight, float fDepth) Parameters Type Name Description Single fWidth Single fHeight Single fDepth AxisAlignedBox3f(Single, Single, Single, Single, Single, Single) Declaration public AxisAlignedBox3f(float xmin, float ymin, float zmin, float xmax, float ymax, float zmax) Parameters Type Name Description Single xmin Single ymin Single zmin Single xmax Single ymax Single zmax Fields Empty Declaration public static readonly AxisAlignedBox3f Empty Field Value Type Description AxisAlignedBox3f Infinite Declaration public static readonly AxisAlignedBox3f Infinite Field Value Type Description AxisAlignedBox3f Max Declaration public Vector3f Max Field Value Type Description Vector3f Min Declaration public Vector3f Min Field Value Type Description Vector3f UnitPositive Declaration public static readonly AxisAlignedBox3f UnitPositive Field Value Type Description AxisAlignedBox3f Zero Declaration public static readonly AxisAlignedBox3f Zero Field Value Type Description AxisAlignedBox3f Properties Center Declaration public Vector3f Center { get; } Property Value Type Description Vector3f Depth Declaration public float Depth { get; } Property Value Type Description Single Diagonal Declaration public Vector3f Diagonal { get; } Property Value Type Description Vector3f DiagonalLength Declaration public float DiagonalLength { get; } Property Value Type Description Single Extents Declaration public Vector3f Extents { get; } Property Value Type Description Vector3f Height Declaration public float Height { get; } Property Value Type Description Single MaxDim Declaration public float MaxDim { get; } Property Value Type Description Single Volume Declaration public float Volume { get; } Property Value Type Description Single Width Declaration public float Width { get; } Property Value Type Description Single Methods CompareTo(AxisAlignedBox3f) Declaration public int CompareTo(AxisAlignedBox3f other) Parameters Type Name Description AxisAlignedBox3f other Returns Type Description Int32 Contain(AxisAlignedBox3d) Declaration public void Contain(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Contain(AxisAlignedBox3f) Declaration public void Contain(AxisAlignedBox3f box) Parameters Type Name Description AxisAlignedBox3f box Contain(Vector3d) Declaration public void Contain(Vector3d v) Parameters Type Name Description Vector3d v Contain(Vector3f) Declaration public void Contain(Vector3f v) Parameters Type Name Description Vector3f v Contains(Vector3f) Declaration public bool Contains(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Boolean Contract(Single) Declaration public void Contract(float fRadius) Parameters Type Name Description Single fRadius Corner(Int32) Declaration public Vector3f Corner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f Distance(Vector3f) Declaration public float Distance(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Single DistanceSquared(Vector3f) Declaration public double DistanceSquared(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Double Equals(AxisAlignedBox3f) Declaration public bool Equals(AxisAlignedBox3f other) Parameters Type Name Description AxisAlignedBox3f other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Expand(Single) Declaration public void Expand(float fRadius) Parameters Type Name Description Single fRadius GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Intersect(AxisAlignedBox3f) Declaration public AxisAlignedBox3f Intersect(AxisAlignedBox3f box) Parameters Type Name Description AxisAlignedBox3f box Returns Type Description AxisAlignedBox3f Intersects(AxisAlignedBox3f) Declaration public bool Intersects(AxisAlignedBox3f box) Parameters Type Name Description AxisAlignedBox3f box Returns Type Description Boolean MoveMin(Vector3f) Declaration public void MoveMin(Vector3f vNewMin) Parameters Type Name Description Vector3f vNewMin MoveMin(Single, Single, Single) Declaration public void MoveMin(float fNewX, float fNewY, float fNewZ) Parameters Type Name Description Single fNewX Single fNewY Single fNewZ NearestPoint(Vector3f) Declaration public Vector3f NearestPoint(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f Point(Int32, Int32, Int32) Returns point on face/edge/corner. For each coord value neg==min, 0==center, pos==max Declaration public Vector3f Point(int xi, int yi, int zi) Parameters Type Name Description Int32 xi Int32 yi Int32 zi Returns Type Description Vector3f Scale(Single, Single, Single) Declaration public void Scale(float sx, float sy, float sz) Parameters Type Name Description Single sx Single sy Single sz ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector3f) Declaration public void Translate(Vector3f vTranslate) Parameters Type Name Description Vector3f vTranslate Operators Equality(AxisAlignedBox3f, AxisAlignedBox3f) Declaration public static bool operator ==(AxisAlignedBox3f a, AxisAlignedBox3f b) Parameters Type Name Description AxisAlignedBox3f a AxisAlignedBox3f b Returns Type Description Boolean Inequality(AxisAlignedBox3f, AxisAlignedBox3f) Declaration public static bool operator !=(AxisAlignedBox3f a, AxisAlignedBox3f b) Parameters Type Name Description AxisAlignedBox3f a AxisAlignedBox3f b Returns Type Description Boolean Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.AxisAlignedBox3i.html": {
    "href": "api/g3.AxisAlignedBox3i.html",
    "title": "Struct AxisAlignedBox3i | ViRGIS VR GIS",
    "keywords": "Struct AxisAlignedBox3i Implements IComparable < AxisAlignedBox3i > IEquatable < AxisAlignedBox3i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct AxisAlignedBox3i : IComparable<AxisAlignedBox3i>, IEquatable<AxisAlignedBox3i> Constructors AxisAlignedBox3i(Vector3i) Declaration public AxisAlignedBox3i(Vector3i vCenter) Parameters Type Name Description Vector3i vCenter AxisAlignedBox3i(Vector3i, Vector3i) Declaration public AxisAlignedBox3i(Vector3i vMin, Vector3i vMax) Parameters Type Name Description Vector3i vMin Vector3i vMax AxisAlignedBox3i(Vector3i, Int32) Declaration public AxisAlignedBox3i(Vector3i vCenter, int fHalfSize) Parameters Type Name Description Vector3i vCenter Int32 fHalfSize AxisAlignedBox3i(Vector3i, Int32, Int32, Int32) Declaration public AxisAlignedBox3i(Vector3i vCenter, int fHalfWidth, int fHalfHeight, int fHalfDepth) Parameters Type Name Description Vector3i vCenter Int32 fHalfWidth Int32 fHalfHeight Int32 fHalfDepth AxisAlignedBox3i(Boolean) Declaration public AxisAlignedBox3i(bool bIgnore) Parameters Type Name Description Boolean bIgnore AxisAlignedBox3i(Int32) Declaration public AxisAlignedBox3i(int fCubeSize) Parameters Type Name Description Int32 fCubeSize AxisAlignedBox3i(Int32, Int32, Int32) Declaration public AxisAlignedBox3i(int fWidth, int fHeight, int fDepth) Parameters Type Name Description Int32 fWidth Int32 fHeight Int32 fDepth AxisAlignedBox3i(Int32, Int32, Int32, Int32, Int32, Int32) Declaration public AxisAlignedBox3i(int xmin, int ymin, int zmin, int xmax, int ymax, int zmax) Parameters Type Name Description Int32 xmin Int32 ymin Int32 zmin Int32 xmax Int32 ymax Int32 zmax Fields Empty Declaration public static readonly AxisAlignedBox3i Empty Field Value Type Description AxisAlignedBox3i Infinite Declaration public static readonly AxisAlignedBox3i Infinite Field Value Type Description AxisAlignedBox3i Max Declaration public Vector3i Max Field Value Type Description Vector3i Min Declaration public Vector3i Min Field Value Type Description Vector3i UnitPositive Declaration public static readonly AxisAlignedBox3i UnitPositive Field Value Type Description AxisAlignedBox3i Zero Declaration public static readonly AxisAlignedBox3i Zero Field Value Type Description AxisAlignedBox3i Properties Center Declaration public Vector3i Center { get; } Property Value Type Description Vector3i Depth Declaration public int Depth { get; } Property Value Type Description Int32 Diagonal Declaration public Vector3i Diagonal { get; } Property Value Type Description Vector3i DiagonalLength Declaration public int DiagonalLength { get; } Property Value Type Description Int32 Extents Declaration public Vector3i Extents { get; } Property Value Type Description Vector3i Height Declaration public int Height { get; } Property Value Type Description Int32 MaxDim Declaration public int MaxDim { get; } Property Value Type Description Int32 Volume Declaration public int Volume { get; } Property Value Type Description Int32 Width Declaration public int Width { get; } Property Value Type Description Int32 Methods ClampExclusive(Vector3i) clamp v to grid bounds [min,max) Declaration public Vector3i ClampExclusive(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3i ClampInclusive(Vector3i) Clamp v to grid bounds [min, max] Declaration public Vector3i ClampInclusive(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3i CompareTo(AxisAlignedBox3i) Declaration public int CompareTo(AxisAlignedBox3i other) Parameters Type Name Description AxisAlignedBox3i other Returns Type Description Int32 Contain(AxisAlignedBox3d) Declaration public void Contain(AxisAlignedBox3d box) Parameters Type Name Description AxisAlignedBox3d box Contain(AxisAlignedBox3i) Declaration public void Contain(AxisAlignedBox3i box) Parameters Type Name Description AxisAlignedBox3i box Contain(Vector3d) Declaration public void Contain(Vector3d v) Parameters Type Name Description Vector3d v Contain(Vector3i) Declaration public void Contain(Vector3i v) Parameters Type Name Description Vector3i v Contains(Vector3i) Declaration public bool Contains(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Boolean Contract(Int32) Declaration public void Contract(int nRadius) Parameters Type Name Description Int32 nRadius Distance(Vector3i) Declaration public int Distance(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Int32 DistanceSquared(Vector3i) Declaration public double DistanceSquared(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Double Equals(AxisAlignedBox3i) Declaration public bool Equals(AxisAlignedBox3i other) Parameters Type Name Description AxisAlignedBox3i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) Expand(Int32) Declaration public void Expand(int nRadius) Parameters Type Name Description Int32 nRadius GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() IndicesExclusive() Declaration public IEnumerable<Vector3i> IndicesExclusive() Returns Type Description IEnumerable < Vector3i > IndicesInclusive() Declaration public IEnumerable<Vector3i> IndicesInclusive() Returns Type Description IEnumerable < Vector3i > Intersect(AxisAlignedBox3i) Declaration public AxisAlignedBox3i Intersect(AxisAlignedBox3i box) Parameters Type Name Description AxisAlignedBox3i box Returns Type Description AxisAlignedBox3i Intersects(AxisAlignedBox3i) Declaration public bool Intersects(AxisAlignedBox3i box) Parameters Type Name Description AxisAlignedBox3i box Returns Type Description Boolean MoveMin(Vector3i) Declaration public void MoveMin(Vector3i vNewMin) Parameters Type Name Description Vector3i vNewMin MoveMin(Int32, Int32, Int32) Declaration public void MoveMin(int fNewX, int fNewY, int fNewZ) Parameters Type Name Description Int32 fNewX Int32 fNewY Int32 fNewZ NearestPoint(Vector3i) Declaration public Vector3i NearestPoint(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3i Scale(Int32, Int32, Int32) Declaration public void Scale(int sx, int sy, int sz) Parameters Type Name Description Int32 sx Int32 sy Int32 sz ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Translate(Vector3i) Declaration public void Translate(Vector3i vTranslate) Parameters Type Name Description Vector3i vTranslate Operators Equality(AxisAlignedBox3i, AxisAlignedBox3i) Declaration public static bool operator ==(AxisAlignedBox3i a, AxisAlignedBox3i b) Parameters Type Name Description AxisAlignedBox3i a AxisAlignedBox3i b Returns Type Description Boolean Inequality(AxisAlignedBox3i, AxisAlignedBox3i) Declaration public static bool operator !=(AxisAlignedBox3i a, AxisAlignedBox3i b) Parameters Type Name Description AxisAlignedBox3i a AxisAlignedBox3i b Returns Type Description Boolean Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.BaseCurve2.html": {
    "href": "api/g3.BaseCurve2.html",
    "title": "Class BaseCurve2 | ViRGIS VR GIS",
    "keywords": "Class BaseCurve2 Inheritance Object BaseCurve2 BezierCurve2 NURBSCurve2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class BaseCurve2 Constructors BaseCurve2(Double, Double) Declaration public BaseCurve2(double tmin, double tmax) Parameters Type Name Description Double tmin Double tmax Fields mTMax Declaration protected double mTMax Field Value Type Description Double mTMin Declaration protected double mTMin Field Value Type Description Double Methods GetCurvature(Double) Declaration public double GetCurvature(double t) Parameters Type Name Description Double t Returns Type Description Double GetFirstDerivative(Double) Declaration public abstract Vector2d GetFirstDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetFrame(Double, ref Vector2d, ref Vector2d, ref Vector2d) Declaration public void GetFrame(double t, ref Vector2d position, ref Vector2d tangent, ref Vector2d normal) Parameters Type Name Description Double t Vector2d position Vector2d tangent Vector2d normal GetLength(Double, Double) Declaration public virtual double GetLength(double t0, double t1) Parameters Type Name Description Double t0 Double t1 Returns Type Description Double GetMaxTime() Declaration public double GetMaxTime() Returns Type Description Double GetMinTime() Declaration public double GetMinTime() Returns Type Description Double GetNormal(Double) Declaration public Vector2d GetNormal(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetPosition(Double) Declaration public abstract Vector2d GetPosition(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetSecondDerivative(Double) Declaration public abstract Vector2d GetSecondDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetSpeed(Double) Declaration public double GetSpeed(double t) Parameters Type Name Description Double t Returns Type Description Double GetTangent(Double) Declaration public Vector2d GetTangent(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetThirdDerivative(Double) Declaration public abstract Vector2d GetThirdDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d GetTime(Double, Int32, Double) Declaration public virtual double GetTime(double length, int iterations = 32, double tolerance = 1E-06) Parameters Type Name Description Double length Int32 iterations Double tolerance Returns Type Description Double GetTotalLength() Declaration public double GetTotalLength() Returns Type Description Double SetTimeInterval(Double, Double) Declaration public void SetTimeInterval(double tmin, double tmax) Parameters Type Name Description Double tmin Double tmax"
  },
  "api/g3.BezierCurve2.html": {
    "href": "api/g3.BezierCurve2.html",
    "title": "Class BezierCurve2 | ViRGIS VR GIS",
    "keywords": "Class BezierCurve2 2D Bezier curve of arbitrary degree Ported from WildMagic5 Wm5BezierCurve2 Inheritance Object BaseCurve2 BezierCurve2 Implements IParametricCurve2d Inherited Members BaseCurve2.mTMin BaseCurve2.mTMax BaseCurve2.GetMinTime() BaseCurve2.GetMaxTime() BaseCurve2.SetTimeInterval(Double, Double) BaseCurve2.GetSpeed(Double) BaseCurve2.GetLength(Double, Double) BaseCurve2.GetTotalLength() BaseCurve2.GetTangent(Double) BaseCurve2.GetNormal(Double) BaseCurve2.GetFrame(Double, Vector2d, Vector2d, Vector2d) BaseCurve2.GetCurvature(Double) BaseCurve2.GetTime(Double, Int32, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BezierCurve2 : BaseCurve2, IParametricCurve2d Constructors BezierCurve2() Declaration protected BezierCurve2() BezierCurve2(Int32, Vector2d[], Boolean) Declaration public BezierCurve2(int degree, Vector2d[] ctrlPoint, bool bTakeOwnership = false) Parameters Type Name Description Int32 degree Vector2d [] ctrlPoint Boolean bTakeOwnership Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double ControlPoints Declaration public Vector2d[] ControlPoints { get; } Property Value Type Description Vector2d [] Degree Declaration public int Degree { get; } Property Value Type Description Int32 HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d GetFirstDerivative(Double) Declaration public override Vector2d GetFirstDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetFirstDerivative(Double) GetPosition(Double) Declaration public override Vector2d GetPosition(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetPosition(Double) GetSecondDerivative(Double) Declaration public override Vector2d GetSecondDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetSecondDerivative(Double) GetThirdDerivative(Double) Declaration public override Vector2d GetThirdDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetThirdDerivative(Double) Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.BiArcFit2.html": {
    "href": "api/g3.BiArcFit2.html",
    "title": "Class BiArcFit2 | ViRGIS VR GIS",
    "keywords": "Class BiArcFit2 Inheritance Object BiArcFit2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BiArcFit2 Constructors BiArcFit2(Vector2d, Vector2d, Vector2d, Vector2d) Declaration public BiArcFit2(Vector2d point1, Vector2d tangent1, Vector2d point2, Vector2d tangent2) Parameters Type Name Description Vector2d point1 Vector2d tangent1 Vector2d point2 Vector2d tangent2 BiArcFit2(Vector2d, Vector2d, Vector2d, Vector2d, Double) Declaration public BiArcFit2(Vector2d point1, Vector2d tangent1, Vector2d point2, Vector2d tangent2, double d1) Parameters Type Name Description Vector2d point1 Vector2d tangent1 Vector2d point2 Vector2d tangent2 Double d1 Fields Arc1 Declaration public Arc2d Arc1 Field Value Type Description Arc2d Arc1IsSegment Declaration public bool Arc1IsSegment Field Value Type Description Boolean Arc2 Declaration public Arc2d Arc2 Field Value Type Description Arc2d Arc2IsSegment Declaration public bool Arc2IsSegment Field Value Type Description Boolean Epsilon Declaration public double Epsilon Field Value Type Description Double FitD1 Declaration public double FitD1 Field Value Type Description Double FitD2 Declaration public double FitD2 Field Value Type Description Double Point1 Declaration public Vector2d Point1 Field Value Type Description Vector2d Point2 Declaration public Vector2d Point2 Field Value Type Description Vector2d Segment1 Declaration public Segment2d Segment1 Field Value Type Description Segment2d Segment2 Declaration public Segment2d Segment2 Field Value Type Description Segment2d Tangent1 Declaration public Vector2d Tangent1 Field Value Type Description Vector2d Tangent2 Declaration public Vector2d Tangent2 Field Value Type Description Vector2d Properties Curve1 Declaration public IParametricCurve2d Curve1 { get; } Property Value Type Description IParametricCurve2d Curve2 Declaration public IParametricCurve2d Curve2 { get; } Property Value Type Description IParametricCurve2d Curves Declaration public List<IParametricCurve2d> Curves { get; } Property Value Type Description List < IParametricCurve2d > Methods DebugPrint() Declaration public void DebugPrint() Distance(Vector2d) Declaration public double Distance(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Double NearestPoint(Vector2d) Declaration public Vector2d NearestPoint(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Vector2d"
  },
  "api/g3.BiGrid3-1.html": {
    "href": "api/g3.BiGrid3-1.html",
    "title": "Class BiGrid3<BlockType> | ViRGIS VR GIS",
    "keywords": "Class BiGrid3<BlockType> BiGrid3 is a two-level multiresolution grid data structure. You provide exemplar object that implements suitable interfaces, and the class automatically generates necessary data structures. Functions to act on parent/child grids are in-progress... Inheritance Object BiGrid3<BlockType> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BiGrid3<BlockType> where BlockType : class, IGridElement3, IFixedGrid3 Type Parameters Name Description BlockType Constructors BiGrid3(BlockType) Declaration public BiGrid3(BlockType exemplar) Parameters Type Name Description BlockType exemplar Properties BlockGrid Declaration public DSparseGrid3<BlockType> BlockGrid { get; } Property Value Type Description DSparseGrid3 <BlockType> BlockSize Declaration public Vector3i BlockSize { get; } Property Value Type Description Vector3i Indexer Declaration public MultigridIndexer3 Indexer { get; } Property Value Type Description MultigridIndexer3 Methods AllocatedBlocks() Declaration public IEnumerable<KeyValuePair<Vector3i, BlockType>> AllocatedBlocks() Returns Type Description IEnumerable < KeyValuePair < Vector3i , BlockType>> Update(Index3i, Action<BlockType, Vector3i>) map index into correct block and let client update that block at the correct local index Declaration public void Update(Index3i index, Action<BlockType, Vector3i> UpdateF) Parameters Type Name Description Index3i index Action <BlockType, Vector3i > UpdateF"
  },
  "api/g3.BinaryG3FormatReader.html": {
    "href": "api/g3.BinaryG3FormatReader.html",
    "title": "Class BinaryG3FormatReader | ViRGIS VR GIS",
    "keywords": "Class BinaryG3FormatReader Inheritance Object BinaryG3FormatReader Implements MeshFormatReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BinaryG3FormatReader : MeshFormatReader Properties SupportedExtensions Declaration public List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult Implements MeshFormatReader"
  },
  "api/g3.BinaryG3Reader.html": {
    "href": "api/g3.BinaryG3Reader.html",
    "title": "Class BinaryG3Reader | ViRGIS VR GIS",
    "keywords": "Class BinaryG3Reader Inheritance Object BinaryG3Reader Implements IMeshReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BinaryG3Reader : IMeshReader Methods Read(BinaryReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(BinaryReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description BinaryReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Read(TextReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(TextReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description TextReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Implements IMeshReader"
  },
  "api/g3.BinaryG3Writer.html": {
    "href": "api/g3.BinaryG3Writer.html",
    "title": "Class BinaryG3Writer | ViRGIS VR GIS",
    "keywords": "Class BinaryG3Writer Inheritance Object BinaryG3Writer Implements IMeshWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BinaryG3Writer : IMeshWriter Methods Write(BinaryWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(BinaryWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description BinaryWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Write(TextWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(TextWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description TextWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Implements IMeshWriter"
  },
  "api/g3.Bitmap2.html": {
    "href": "api/g3.Bitmap2.html",
    "title": "Class Bitmap2 | ViRGIS VR GIS",
    "keywords": "Class Bitmap2 Inheritance Object Bitmap2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Bitmap2 Constructors Bitmap2(Vector2i) Declaration public Bitmap2(Vector2i dims) Parameters Type Name Description Vector2i dims Bitmap2(Int32, Int32) Declaration public Bitmap2(int Width, int Height) Parameters Type Name Description Int32 Width Int32 Height Fields Bits Declaration public BitArray Bits Field Value Type Description BitArray Properties Dimensions Declaration public Vector2i Dimensions { get; } Property Value Type Description Vector2i GridBounds Declaration public AxisAlignedBox2i GridBounds { get; } Property Value Type Description AxisAlignedBox2i Item[Vector2i] Declaration public bool this[Vector2i idx] { get; set; } Parameters Type Name Description Vector2i idx Property Value Type Description Boolean Item[Int32] Declaration public bool this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Boolean Item[Int32, Int32] Declaration public bool this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Boolean Methods Get(Vector2i) Declaration public bool Get(Vector2i idx) Parameters Type Name Description Vector2i idx Returns Type Description Boolean Indices() Declaration public IEnumerable<Vector2i> Indices() Returns Type Description IEnumerable < Vector2i > NonZeros() Declaration public IEnumerable<Vector2i> NonZeros() Returns Type Description IEnumerable < Vector2i > Resize(Vector2i) Declaration public void Resize(Vector2i dims) Parameters Type Name Description Vector2i dims Set(Vector2i, Boolean) Declaration public void Set(Vector2i idx, bool val) Parameters Type Name Description Vector2i idx Boolean val ToIndex(Int32) Declaration public Vector2i ToIndex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2i ToLinear(Vector2i) Declaration public int ToLinear(Vector2i idx) Parameters Type Name Description Vector2i idx Returns Type Description Int32"
  },
  "api/g3.Bitmap3.html": {
    "href": "api/g3.Bitmap3.html",
    "title": "Class Bitmap3 | ViRGIS VR GIS",
    "keywords": "Class Bitmap3 Inheritance Object Bitmap3 Implements IBinaryVoxelGrid IGridElement3 IFixedGrid3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Bitmap3 : IBinaryVoxelGrid, IGridElement3, IFixedGrid3 Constructors Bitmap3(Vector3i) Declaration public Bitmap3(Vector3i dims) Parameters Type Name Description Vector3i dims Fields Bits Declaration public BitArray Bits Field Value Type Description BitArray Properties Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i GridBounds Declaration public AxisAlignedBox3i GridBounds { get; } Property Value Type Description AxisAlignedBox3i Item[Vector3i] Declaration public bool this[Vector3i idx] { get; set; } Parameters Type Name Description Vector3i idx Property Value Type Description Boolean Item[Int32] Declaration public bool this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Boolean Methods CreateNewGridElement(Boolean) Declaration public virtual IGridElement3 CreateNewGridElement(bool bCopy) Parameters Type Name Description Boolean bCopy Returns Type Description IGridElement3 Filter(Int32) Declaration public void Filter(int nMinNbrs) Parameters Type Name Description Int32 nMinNbrs Get(Vector3i) Declaration public bool Get(Vector3i idx) Parameters Type Name Description Vector3i idx Returns Type Description Boolean Indices() Declaration public IEnumerable<Vector3i> Indices() Returns Type Description IEnumerable < Vector3i > NonZeros() Declaration public IEnumerable<Vector3i> NonZeros() Returns Type Description IEnumerable < Vector3i > SafeSet(Vector3i, Boolean) Declaration public void SafeSet(Vector3i idx, bool val) Parameters Type Name Description Vector3i idx Boolean val Set(Vector3i, Boolean) Declaration public void Set(Vector3i idx, bool val) Parameters Type Name Description Vector3i idx Boolean val ToIndex(Int32) Declaration public Vector3i ToIndex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3i ToLinear(Vector3i) Declaration public int ToLinear(Vector3i idx) Parameters Type Name Description Vector3i idx Returns Type Description Int32 Implements IBinaryVoxelGrid IGridElement3 IFixedGrid3"
  },
  "api/g3.BlockSupportGenerator.html": {
    "href": "api/g3.BlockSupportGenerator.html",
    "title": "Class BlockSupportGenerator | ViRGIS VR GIS",
    "keywords": "Class BlockSupportGenerator Inheritance Object BlockSupportGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BlockSupportGenerator Constructors BlockSupportGenerator(DMesh3, Double) Declaration public BlockSupportGenerator(DMesh3 mesh, double cellSize) Parameters Type Name Description DMesh3 mesh Double cellSize BlockSupportGenerator(DMesh3, Int32) Declaration public BlockSupportGenerator(DMesh3 mesh, int grid_resolution) Parameters Type Name Description DMesh3 mesh Int32 grid_resolution Fields CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellSize Declaration public double CellSize Field Value Type Description Double DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean ForceMinY If this is not set, 'ground' is Mesh.CachedBounds.Min.y (eg, if mesh is floating off ground, set this to 0, otherwise support stops at bottom of mesh) Declaration public float ForceMinY Field Value Type Description Single Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OverhangAngleDeg overhang angle requiring support Declaration public double OverhangAngleDeg Field Value Type Description Double SubtractMesh subtract mesh from generated support Declaration public bool SubtractMesh Field Value Type Description Boolean SubtractMeshOffset offset applied to subtracted mesh. Note that this is uniform offset, and so it leaves space at top and bottom of support as well! Declaration public double SubtractMeshOffset Field Value Type Description Double SupportMesh Declaration public DMesh3 SupportMesh Field Value Type Description DMesh3 Properties Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid winding-number grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the winding-number grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single Methods CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f Generate() Declaration public void Generate()"
  },
  "api/g3.BlockTimer.html": {
    "href": "api/g3.BlockTimer.html",
    "title": "Class BlockTimer | ViRGIS VR GIS",
    "keywords": "Class BlockTimer Inheritance Object BlockTimer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BlockTimer Constructors BlockTimer(String, Boolean) Declaration public BlockTimer(string label, bool bStart) Parameters Type Name Description String label Boolean bStart Fields Accumulated Declaration public TimeSpan Accumulated Field Value Type Description TimeSpan Label Declaration public string Label Field Value Type Description String Watch Declaration public Stopwatch Watch Field Value Type Description Stopwatch Properties AccumulatedString Declaration public string AccumulatedString { get; } Property Value Type Description String Running Declaration public bool Running { get; } Property Value Type Description Boolean Methods Accumulate(Boolean) Declaration public void Accumulate(bool bReset = false) Parameters Type Name Description Boolean bReset Reset() Declaration public void Reset() Start() Declaration public void Start() Stop() Declaration public void Stop() TimeFormatString(TimeSpan) Declaration public static string TimeFormatString(TimeSpan span) Parameters Type Name Description TimeSpan span Returns Type Description String ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/g3.BoundedImplicitFunction3d.html": {
    "href": "api/g3.BoundedImplicitFunction3d.html",
    "title": "Interface BoundedImplicitFunction3d | ViRGIS VR GIS",
    "keywords": "Interface BoundedImplicitFunction3d Bounded implicit function has a bounding box within which the \"interesting\" part of the function is contained (eg the surface) Inherited Members ImplicitFunction3d.Value(Vector3d) Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface BoundedImplicitFunction3d : ImplicitFunction3d Methods Bounds() Declaration AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d"
  },
  "api/g3.BoundsUtil.html": {
    "href": "api/g3.BoundsUtil.html",
    "title": "Class BoundsUtil | ViRGIS VR GIS",
    "keywords": "Class BoundsUtil Inheritance Object BoundsUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class BoundsUtil Methods Bounds(ref AxisAlignedBox3d, Func<Vector3d, Vector3d>) Declaration public static AxisAlignedBox3d Bounds(ref AxisAlignedBox3d boxIn, Func<Vector3d, Vector3d> TransformF) Parameters Type Name Description AxisAlignedBox3d boxIn Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d Bounds(IPointSet) Declaration public static AxisAlignedBox3d Bounds(IPointSet source) Parameters Type Name Description IPointSet source Returns Type Description AxisAlignedBox3d Bounds(ref Triangle3d) Declaration public static AxisAlignedBox3d Bounds(ref Triangle3d tri) Parameters Type Name Description Triangle3d tri Returns Type Description AxisAlignedBox3d Bounds(ref Vector2d, ref Vector2d, ref Vector2d) Declaration public static AxisAlignedBox2d Bounds(ref Vector2d v0, ref Vector2d v1, ref Vector2d v2) Parameters Type Name Description Vector2d v0 Vector2d v1 Vector2d v2 Returns Type Description AxisAlignedBox2d Bounds(ref Vector3d, ref Vector3d, ref Vector3d) Declaration public static AxisAlignedBox3d Bounds(ref Vector3d v0, ref Vector3d v1, ref Vector3d v2) Parameters Type Name Description Vector3d v0 Vector3d v1 Vector3d v2 Returns Type Description AxisAlignedBox3d Bounds(IEnumerable<DMesh3>) Declaration public static AxisAlignedBox3d Bounds(IEnumerable<DMesh3> meshes) Parameters Type Name Description IEnumerable < DMesh3 > meshes Returns Type Description AxisAlignedBox3d Bounds(IEnumerable<Vector2d>) Declaration public static AxisAlignedBox2d Bounds(IEnumerable<Vector2d> positions) Parameters Type Name Description IEnumerable < Vector2d > positions Returns Type Description AxisAlignedBox2d Bounds(IEnumerable<Vector2f>) Declaration public static AxisAlignedBox2f Bounds(IEnumerable<Vector2f> positions) Parameters Type Name Description IEnumerable < Vector2f > positions Returns Type Description AxisAlignedBox2f Bounds(IEnumerable<Vector3d>) Declaration public static AxisAlignedBox3d Bounds(IEnumerable<Vector3d> positions) Parameters Type Name Description IEnumerable < Vector3d > positions Returns Type Description AxisAlignedBox3d Bounds(IEnumerable<Vector3d>, TransformSequence) compute axis-aligned bounds of set of points after transforming Declaration public static AxisAlignedBox3d Bounds(IEnumerable<Vector3d> values, TransformSequence xform) Parameters Type Name Description IEnumerable < Vector3d > values TransformSequence xform Returns Type Description AxisAlignedBox3d Bounds(IEnumerable<Vector3f>) Declaration public static AxisAlignedBox3f Bounds(IEnumerable<Vector3f> positions) Parameters Type Name Description IEnumerable < Vector3f > positions Returns Type Description AxisAlignedBox3f Bounds<T>(IEnumerable<T>, Func<T, Vector3d>) Declaration public static AxisAlignedBox3d Bounds<T>(IEnumerable<T> values, Func<T, Vector3d> PositionF) Parameters Type Name Description IEnumerable <T> values Func <T, Vector3d > PositionF Returns Type Description AxisAlignedBox3d Type Parameters Name Description T Bounds<T>(IEnumerable<T>, Func<T, Vector3f>) Declaration public static AxisAlignedBox3f Bounds<T>(IEnumerable<T> values, Func<T, Vector3f> PositionF) Parameters Type Name Description IEnumerable <T> values Func <T, Vector3f > PositionF Returns Type Description AxisAlignedBox3f Type Parameters Name Description T BoundsInFrame(IEnumerable<Vector3d>, Frame3f) compute axis-aligned bounds of set of points after transforming into frame f Declaration public static AxisAlignedBox3d BoundsInFrame(IEnumerable<Vector3d> values, Frame3f f) Parameters Type Name Description IEnumerable < Vector3d > values Frame3f f Returns Type Description AxisAlignedBox3d TrianglesContained(DMesh3, Func<Vector3d, Int32, Boolean>, Action<Int32>, Int32) Declaration public static void TrianglesContained(DMesh3 mesh, Func<Vector3d, int, bool> ContainF, Action<int> AddF, int nMode = 0) Parameters Type Name Description DMesh3 mesh Func < Vector3d , Int32 , Boolean > ContainF Action < Int32 > AddF Int32 nMode"
  },
  "api/g3.Box2d.html": {
    "href": "api/g3.Box2d.html",
    "title": "Struct Box2d | ViRGIS VR GIS",
    "keywords": "Struct Box2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Box2d Constructors Box2d(AxisAlignedBox2d) Declaration public Box2d(AxisAlignedBox2d aaBox) Parameters Type Name Description AxisAlignedBox2d aaBox Box2d(Segment2d) Declaration public Box2d(Segment2d seg) Parameters Type Name Description Segment2d seg Box2d(Vector2d) Declaration public Box2d(Vector2d center) Parameters Type Name Description Vector2d center Box2d(Vector2d, Vector2d) Declaration public Box2d(Vector2d center, Vector2d extent) Parameters Type Name Description Vector2d center Vector2d extent Box2d(Vector2d, Vector2d, Vector2d, Vector2d) Declaration public Box2d(Vector2d center, Vector2d x, Vector2d y, Vector2d extent) Parameters Type Name Description Vector2d center Vector2d x Vector2d y Vector2d extent Fields AxisX Declaration public Vector2d AxisX Field Value Type Description Vector2d AxisY Declaration public Vector2d AxisY Field Value Type Description Vector2d Center Declaration public Vector2d Center Field Value Type Description Vector2d Empty Declaration public static readonly Box2d Empty Field Value Type Description Box2d Extent Declaration public Vector2d Extent Field Value Type Description Vector2d Properties Area Declaration public double Area { get; } Property Value Type Description Double Diagonal Declaration public Vector2d Diagonal { get; } Property Value Type Description Vector2d MaxExtent Declaration public double MaxExtent { get; } Property Value Type Description Double MinExtent Declaration public double MinExtent { get; } Property Value Type Description Double Methods Axis(Int32) Declaration public Vector2d Axis(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d ClosestPoint(Vector2d) Declaration public Vector2d ClosestPoint(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Vector2d ComputeVertices() Declaration public Vector2d[] ComputeVertices() Returns Type Description Vector2d [] ComputeVertices(Vector2d[]) Declaration public void ComputeVertices(Vector2d[] vertex) Parameters Type Name Description Vector2d [] vertex ComputeVertices(ref Vector2dTuple4) Declaration public void ComputeVertices(ref Vector2dTuple4 vertex) Parameters Type Name Description Vector2dTuple4 vertex Contain(Box2d) Declaration public void Contain(Box2d o) Parameters Type Name Description Box2d o Contain(Vector2d) Declaration public void Contain(Vector2d v) Parameters Type Name Description Vector2d v Contains(Vector2d) Declaration public bool Contains(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Boolean DistanceSquared(Vector2d) Returns distance to box, or 0 if point is inside box. Ported from WildMagic5 Wm5DistPoint2Box2.cpp Declaration public double DistanceSquared(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Double Expand(Double) Declaration public void Expand(double f) Parameters Type Name Description Double f Merge(ref Box2d, ref Box2d) Declaration public static Box2d Merge(ref Box2d box0, ref Box2d box1) Parameters Type Name Description Box2d box0 Box2d box1 Returns Type Description Box2d RotateAxes(Matrix2d) Declaration public void RotateAxes(Matrix2d m) Parameters Type Name Description Matrix2d m Translate(Vector2d) Declaration public void Translate(Vector2d v) Parameters Type Name Description Vector2d v Operators Explicit(Box2d to Box2f) Declaration public static explicit operator Box2f(Box2d v) Parameters Type Name Description Box2d v Returns Type Description Box2f Implicit(Box2f to Box2d) Declaration public static implicit operator Box2d(Box2f v) Parameters Type Name Description Box2f v Returns Type Description Box2d"
  },
  "api/g3.Box2f.html": {
    "href": "api/g3.Box2f.html",
    "title": "Struct Box2f | ViRGIS VR GIS",
    "keywords": "Struct Box2f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Box2f Constructors Box2f(AxisAlignedBox2f) Declaration public Box2f(AxisAlignedBox2f aaBox) Parameters Type Name Description AxisAlignedBox2f aaBox Box2f(Vector2f) Declaration public Box2f(Vector2f center) Parameters Type Name Description Vector2f center Box2f(Vector2f, Vector2f) Declaration public Box2f(Vector2f center, Vector2f extent) Parameters Type Name Description Vector2f center Vector2f extent Box2f(Vector2f, Vector2f, Vector2f, Vector2f) Declaration public Box2f(Vector2f center, Vector2f x, Vector2f y, Vector2f extent) Parameters Type Name Description Vector2f center Vector2f x Vector2f y Vector2f extent Fields AxisX Declaration public Vector2f AxisX Field Value Type Description Vector2f AxisY Declaration public Vector2f AxisY Field Value Type Description Vector2f Center Declaration public Vector2f Center Field Value Type Description Vector2f Empty Declaration public static readonly Box2f Empty Field Value Type Description Box2f Extent Declaration public Vector2f Extent Field Value Type Description Vector2f Properties Area Declaration public double Area { get; } Property Value Type Description Double Diagonal Declaration public Vector2f Diagonal { get; } Property Value Type Description Vector2f MaxExtent Declaration public double MaxExtent { get; } Property Value Type Description Double MinExtent Declaration public double MinExtent { get; } Property Value Type Description Double Methods Axis(Int32) Declaration public Vector2f Axis(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f ComputeVertices() Declaration public Vector2f[] ComputeVertices() Returns Type Description Vector2f [] ComputeVertices(Vector2f[]) Declaration public void ComputeVertices(Vector2f[] vertex) Parameters Type Name Description Vector2f [] vertex Contain(Box2f) Declaration public void Contain(Box2f o) Parameters Type Name Description Box2f o Contain(Vector2f) Declaration public void Contain(Vector2f v) Parameters Type Name Description Vector2f v Contains(Vector2f) Declaration public bool Contains(Vector2f v) Parameters Type Name Description Vector2f v Returns Type Description Boolean Expand(Single) Declaration public void Expand(float f) Parameters Type Name Description Single f Translate(Vector2f) Declaration public void Translate(Vector2f v) Parameters Type Name Description Vector2f v"
  },
  "api/g3.Box3d.html": {
    "href": "api/g3.Box3d.html",
    "title": "Struct Box3d | ViRGIS VR GIS",
    "keywords": "Struct Box3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Box3d Constructors Box3d(AxisAlignedBox3d) Declaration public Box3d(AxisAlignedBox3d aaBox) Parameters Type Name Description AxisAlignedBox3d aaBox Box3d(Frame3f, Vector3d) Declaration public Box3d(Frame3f frame, Vector3d extent) Parameters Type Name Description Frame3f frame Vector3d extent Box3d(Segment3d) Declaration public Box3d(Segment3d seg) Parameters Type Name Description Segment3d seg Box3d(Vector3d) Declaration public Box3d(Vector3d center) Parameters Type Name Description Vector3d center Box3d(Vector3d, Vector3d) Declaration public Box3d(Vector3d center, Vector3d extent) Parameters Type Name Description Vector3d center Vector3d extent Box3d(Vector3d, Vector3d, Vector3d, Vector3d, Vector3d) Declaration public Box3d(Vector3d center, Vector3d x, Vector3d y, Vector3d z, Vector3d extent) Parameters Type Name Description Vector3d center Vector3d x Vector3d y Vector3d z Vector3d extent Fields AxisX Declaration public Vector3d AxisX Field Value Type Description Vector3d AxisY Declaration public Vector3d AxisY Field Value Type Description Vector3d AxisZ Declaration public Vector3d AxisZ Field Value Type Description Vector3d Center Declaration public Vector3d Center Field Value Type Description Vector3d Empty Declaration public static readonly Box3d Empty Field Value Type Description Box3d Extent Declaration public Vector3d Extent Field Value Type Description Vector3d UnitPositive Declaration public static readonly Box3d UnitPositive Field Value Type Description Box3d UnitZeroCentered Declaration public static readonly Box3d UnitZeroCentered Field Value Type Description Box3d Properties Diagonal Declaration public Vector3d Diagonal { get; } Property Value Type Description Vector3d MaxExtent Declaration public double MaxExtent { get; } Property Value Type Description Double MinExtent Declaration public double MinExtent { get; } Property Value Type Description Double Volume Declaration public double Volume { get; } Property Value Type Description Double Methods Axis(Int32) Declaration public Vector3d Axis(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d ClosestPoint(Vector3d) Returns distance to box, or 0 if point is inside box. Ported from WildMagic5 Wm5DistPoint3Box3.cpp Declaration public Vector3d ClosestPoint(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ComputeVertices() Declaration public Vector3d[] ComputeVertices() Returns Type Description Vector3d [] ComputeVertices(Vector3d[]) Declaration public void ComputeVertices(Vector3d[] vertex) Parameters Type Name Description Vector3d [] vertex Contain(Box3d) Declaration public void Contain(Box3d o) Parameters Type Name Description Box3d o Contain(Vector3d) Declaration public void Contain(Vector3d v) Parameters Type Name Description Vector3d v Contain(IEnumerable<Vector3d>) update the box to contain set of input points. More efficient tha ncalling Contain() many times code ported from GTEngine GteContOrientedBox3.h Declaration public void Contain(IEnumerable<Vector3d> points) Parameters Type Name Description IEnumerable < Vector3d > points Contains(Vector3d) Declaration public bool Contains(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Boolean Corner(Int32) Declaration public Vector3d Corner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d DistanceSquared(Vector3d) Returns distance to box, or 0 if point is inside box. Ported from WildMagic5 Wm5DistPoint3Box3.cpp Declaration public double DistanceSquared(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Double Expand(Double) Declaration public void Expand(double f) Parameters Type Name Description Double f Merge(ref Box3d, ref Box3d) Declaration public static Box3d Merge(ref Box3d box0, ref Box3d box1) Parameters Type Name Description Box3d box0 Box3d box1 Returns Type Description Box3d Scale(Vector3d) Declaration public void Scale(Vector3d s) Parameters Type Name Description Vector3d s ScaleExtents(Vector3d) Declaration public void ScaleExtents(Vector3d s) Parameters Type Name Description Vector3d s ToAABB() Declaration public AxisAlignedBox3d ToAABB() Returns Type Description AxisAlignedBox3d Translate(Vector3d) Declaration public void Translate(Vector3d v) Parameters Type Name Description Vector3d v VerticesItr() Declaration public IEnumerable<Vector3d> VerticesItr() Returns Type Description IEnumerable < Vector3d > Operators Explicit(Box3d to Box3f) Declaration public static explicit operator Box3f(Box3d v) Parameters Type Name Description Box3d v Returns Type Description Box3f Implicit(Box3f to Box3d) Declaration public static implicit operator Box3d(Box3f v) Parameters Type Name Description Box3f v Returns Type Description Box3d"
  },
  "api/g3.Box3f.html": {
    "href": "api/g3.Box3f.html",
    "title": "Struct Box3f | ViRGIS VR GIS",
    "keywords": "Struct Box3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Box3f Constructors Box3f(AxisAlignedBox3f) Declaration public Box3f(AxisAlignedBox3f aaBox) Parameters Type Name Description AxisAlignedBox3f aaBox Box3f(Vector3f) Declaration public Box3f(Vector3f center) Parameters Type Name Description Vector3f center Box3f(Vector3f, Vector3f) Declaration public Box3f(Vector3f center, Vector3f extent) Parameters Type Name Description Vector3f center Vector3f extent Box3f(Vector3f, Vector3f, Vector3f, Vector3f, Vector3f) Declaration public Box3f(Vector3f center, Vector3f x, Vector3f y, Vector3f z, Vector3f extent) Parameters Type Name Description Vector3f center Vector3f x Vector3f y Vector3f z Vector3f extent Fields AxisX Declaration public Vector3f AxisX Field Value Type Description Vector3f AxisY Declaration public Vector3f AxisY Field Value Type Description Vector3f AxisZ Declaration public Vector3f AxisZ Field Value Type Description Vector3f Center Declaration public Vector3f Center Field Value Type Description Vector3f Empty Declaration public static readonly Box3f Empty Field Value Type Description Box3f Extent Declaration public Vector3f Extent Field Value Type Description Vector3f Properties Diagonal Declaration public Vector3f Diagonal { get; } Property Value Type Description Vector3f MaxExtent Declaration public double MaxExtent { get; } Property Value Type Description Double MinExtent Declaration public double MinExtent { get; } Property Value Type Description Double Volume Declaration public double Volume { get; } Property Value Type Description Double Methods Axis(Int32) Declaration public Vector3f Axis(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f ComputeVertices() Declaration public Vector3f[] ComputeVertices() Returns Type Description Vector3f [] ComputeVertices(Vector3f[]) Declaration public void ComputeVertices(Vector3f[] vertex) Parameters Type Name Description Vector3f [] vertex Contain(Box3f) Declaration public void Contain(Box3f o) Parameters Type Name Description Box3f o Contain(Vector3f) Declaration public void Contain(Vector3f v) Parameters Type Name Description Vector3f v Contains(Vector3f) Declaration public bool Contains(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Boolean Expand(Single) Declaration public void Expand(float f) Parameters Type Name Description Single f Scale(Vector3f) Declaration public void Scale(Vector3f s) Parameters Type Name Description Vector3f s ScaleExtents(Vector3f) Declaration public void ScaleExtents(Vector3f s) Parameters Type Name Description Vector3f s ToAABB() Declaration public AxisAlignedBox3f ToAABB() Returns Type Description AxisAlignedBox3f Translate(Vector3f) Declaration public void Translate(Vector3f v) Parameters Type Name Description Vector3f v VerticesItr() Declaration public IEnumerable<Vector3f> VerticesItr() Returns Type Description IEnumerable < Vector3f >"
  },
  "api/g3.BSplineBasis.html": {
    "href": "api/g3.BSplineBasis.html",
    "title": "Class BSplineBasis | ViRGIS VR GIS",
    "keywords": "Class BSplineBasis Inheritance Object BSplineBasis Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BSplineBasis Constructors BSplineBasis() Declaration protected BSplineBasis() BSplineBasis(Int32, Int32, Boolean) Declaration public BSplineBasis(int numCtrlPoints, int degree, bool open) Parameters Type Name Description Int32 numCtrlPoints Int32 degree Boolean open BSplineBasis(Int32, Int32, Double[], Boolean) Declaration public BSplineBasis(int numCtrlPoints, int degree, double[] knots, bool bIsInteriorKnots) Parameters Type Name Description Int32 numCtrlPoints Int32 degree Double [] knots Boolean bIsInteriorKnots Fields mBD0 Declaration protected double[, ] mBD0 Field Value Type Description Double [,] mBD1 Declaration protected double[, ] mBD1 Field Value Type Description Double [,] mBD2 Declaration protected double[, ] mBD2 Field Value Type Description Double [,] mBD3 Declaration protected double[, ] mBD3 Field Value Type Description Double [,] mDegree Declaration protected int mDegree Field Value Type Description Int32 mKnot Declaration protected double[] mKnot Field Value Type Description Double [] mNumCtrlPoints Declaration protected int mNumCtrlPoints Field Value Type Description Int32 mOpen Declaration protected bool mOpen Field Value Type Description Boolean mUniform Declaration protected bool mUniform Field Value Type Description Boolean Properties InteriorKnotCount Declaration public int InteriorKnotCount { get; } Property Value Type Description Int32 KnotCount Declaration public int KnotCount { get; } Property Value Type Description Int32 Methods Allocate() Declaration protected double[, ] Allocate() Returns Type Description Double [,] Clone() Declaration public BSplineBasis Clone() Returns Type Description BSplineBasis Compute(Double, Int32, ref Int32, ref Int32) Declaration public void Compute(double t, int order, ref int minIndex, ref int maxIndex) Parameters Type Name Description Double t Int32 order Int32 minIndex Int32 maxIndex GetD0(Int32) Declaration public double GetD0(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetD1(Int32) Declaration public double GetD1(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetD2(Int32) Declaration public double GetD2(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetD3(Int32) Declaration public double GetD3(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetDegree() Declaration public int GetDegree() Returns Type Description Int32 GetInteriorKnot(Int32) Declaration public double GetInteriorKnot(int j) Parameters Type Name Description Int32 j Returns Type Description Double GetKey(ref Double) Declaration protected int GetKey(ref double t) Parameters Type Name Description Double t Returns Type Description Int32 GetKnot(Int32) Declaration public double GetKnot(int j) Parameters Type Name Description Int32 j Returns Type Description Double GetNumCtrlPoints() Declaration public int GetNumCtrlPoints() Returns Type Description Int32 Initialize(Int32, Int32, Boolean) Declaration protected int Initialize(int numCtrlPoints, int degree, bool open) Parameters Type Name Description Int32 numCtrlPoints Int32 degree Boolean open Returns Type Description Int32 IsOpen() Declaration public bool IsOpen() Returns Type Description Boolean IsUniform() Declaration public bool IsUniform() Returns Type Description Boolean SetInteriorKnot(Int32, Double) Declaration public void SetInteriorKnot(int j, double value) Parameters Type Name Description Int32 j Double value SetKnot(Int32, Double) Declaration public void SetKnot(int j, double value) Parameters Type Name Description Int32 j Double value"
  },
  "api/g3.BufferUtil.html": {
    "href": "api/g3.BufferUtil.html",
    "title": "Class BufferUtil | ViRGIS VR GIS",
    "keywords": "Class BufferUtil Inheritance Object BufferUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class BufferUtil Methods AllocNxM(Int32, Int32) Declaration public static double[][] AllocNxM(int N, int M) Parameters Type Name Description Int32 N Int32 M Returns Type Description Double [][] CompressZLib(Byte[], Boolean) Compress a byte buffer using Deflate/ZLib compression. Declaration public static byte[] CompressZLib(byte[] buffer, bool bFast) Parameters Type Name Description Byte [] buffer Boolean bFast Returns Type Description Byte [] CountValid<T>(T[], Func<T, Boolean>, Int32) Count number of elements in array (or up to max_i) that pass FilterF test Declaration public static int CountValid<T>(T[] data, Func<T, bool> FilterF, int max_i = -1) Parameters Type Name Description T[] data Func <T, Boolean > FilterF Int32 max_i Returns Type Description Int32 Type Parameters Name Description T DecompressZLib(Byte[]) Decompress a byte buffer that has been compressed using Deflate/ZLib compression Declaration public static byte[] DecompressZLib(byte[] zBuffer) Parameters Type Name Description Byte [] zBuffer Returns Type Description Byte [] DistanceSquared(Double[], Double[]) Declaration public static double DistanceSquared(double[] a, double[] b) Parameters Type Name Description Double [] a Double [] b Returns Type Description Double Dot(Double[], Double[]) Declaration public static double Dot(double[] a, double[] b) Parameters Type Name Description Double [] a Double [] b Returns Type Description Double Filter<T>(T[], Func<T, Boolean>, Int32) return a new array containing only elements (or up to max_i) that pass FilterF test Declaration public static T[] Filter<T>(T[] data, Func<T, bool> FilterF, int max_i = -1) Parameters Type Name Description T[] data Func <T, Boolean > FilterF Int32 max_i Returns Type Description T[] Type Parameters Name Description T FilterInPlace<T>(T[], Func<T, Boolean>, Int32) shifts elements of array (or up to max_i) that pass FilterF to front of list, and returns number that passed Declaration public static int FilterInPlace<T>(T[] data, Func<T, bool> FilterF, int max_i = -1) Parameters Type Name Description T[] data Func <T, Boolean > FilterF Int32 max_i Returns Type Description Int32 Type Parameters Name Description T InitNxM(Int32, Int32, Double[][]) Declaration public static double[][] InitNxM(int N, int M, double[][] init) Parameters Type Name Description Int32 N Int32 M Double [][] init Returns Type Description Double [][] MultiplyAdd(Double[], Double, Double[]) Declaration public static void MultiplyAdd(double[] dest, double multiply, double[] add) Parameters Type Name Description Double [] dest Double multiply Double [] add MultiplyAdd(Double[], Double[], Double[]) Declaration public static void MultiplyAdd(double[] dest, double[] multiply, double[] add) Parameters Type Name Description Double [] dest Double [] multiply Double [] add MultiplyAdd_GetSqrSum(Double[], Double, Double[]) Declaration public static double MultiplyAdd_GetSqrSum(double[] dest, double multiply, double[] add) Parameters Type Name Description Double [] dest Double multiply Double [] add Returns Type Description Double ParallelDot(Double[], Double[][], Double[][]) Declaration public static void ParallelDot(double[] a, double[][] b, double[][] result) Parameters Type Name Description Double [] a Double [][] b Double [][] result SetTriangle(Int32[], Int32, Int32, Int32, Int32) Declaration public static void SetTriangle(int[] v, int i, int a, int b, int c) Parameters Type Name Description Int32 [] v Int32 i Int32 a Int32 b Int32 c SetVertex2(Double[], Int32, Double, Double) Declaration public static void SetVertex2(double[] v, int i, double x, double y) Parameters Type Name Description Double [] v Int32 i Double x Double y SetVertex2(Single[], Int32, Single, Single) Declaration public static void SetVertex2(float[] v, int i, float x, float y) Parameters Type Name Description Single [] v Int32 i Single x Single y SetVertex3(Double[], Int32, Double, Double, Double) Declaration public static void SetVertex3(double[] v, int i, double x, double y, double z) Parameters Type Name Description Double [] v Int32 i Double x Double y Double z SetVertex3(Single[], Int32, Single, Single, Single) Declaration public static void SetVertex3(float[] v, int i, float x, float y, float z) Parameters Type Name Description Single [] v Int32 i Single x Single y Single z ToBytes(Double[]) convert double array to bytes Declaration public static byte[] ToBytes(double[] array) Parameters Type Name Description Double [] array Returns Type Description Byte [] ToBytes(Int16[]) convert short array to bytes Declaration public static byte[] ToBytes(short[] array) Parameters Type Name Description Int16 [] array Returns Type Description Byte [] ToBytes(Int32[]) convert int array to bytes Declaration public static byte[] ToBytes(int[] array) Parameters Type Name Description Int32 [] array Returns Type Description Byte [] ToBytes(Single[]) convert float array to bytes Declaration public static byte[] ToBytes(float[] array) Parameters Type Name Description Single [] array Returns Type Description Byte [] ToDouble(Byte[]) convert byte array to double array Declaration public static double[] ToDouble(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Double [] ToFloat(Byte[]) convert byte array to float array Declaration public static float[] ToFloat(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Single [] ToIndex3i<T>(IEnumerable<T>) convert input set into Index3i. Supports packed list of int tuples, list of Vector3i/Index3i Declaration public static Index3i[] ToIndex3i<T>(IEnumerable<T> values) Parameters Type Name Description IEnumerable <T> values Returns Type Description Index3i [] Type Parameters Name Description T ToIndexArray4i(Byte[]) convert byte array to IndexArray4i Declaration public static IndexArray4i ToIndexArray4i(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description IndexArray4i ToInt(Byte[]) convert byte array to int array Declaration public static int[] ToInt(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Int32 [] ToShort(Byte[]) convert byte array to short array Declaration public static short[] ToShort(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description Int16 [] ToVector3d<T>(IEnumerable<T>) convert input set into Vector3d. Supports packed list of float/double tuples, list of Vector3f/Vector3d Declaration public static Vector3d[] ToVector3d<T>(IEnumerable<T> values) Parameters Type Name Description IEnumerable <T> values Returns Type Description Vector3d [] Type Parameters Name Description T ToVector3f<T>(IEnumerable<T>) convert input set into Vector3f. Supports packed list of float/double tuples, list of Vector3f/Vector3d Declaration public static Vector3f[] ToVector3f<T>(IEnumerable<T> values) Parameters Type Name Description IEnumerable <T> values Returns Type Description Vector3f [] Type Parameters Name Description T ToVectorArray2f(Byte[]) convert byte array to VectorArray2f Declaration public static VectorArray2f ToVectorArray2f(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description VectorArray2f ToVectorArray3d(Byte[]) convert byte array to VectorArray3d Declaration public static VectorArray3d ToVectorArray3d(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description VectorArray3d ToVectorArray3f(Byte[]) convert byte array to VectorArray3f Declaration public static VectorArray3f ToVectorArray3f(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description VectorArray3f ToVectorArray3i(Byte[]) convert byte array to VectorArray3i Declaration public static VectorArray3i ToVectorArray3i(byte[] buffer) Parameters Type Name Description Byte [] buffer Returns Type Description VectorArray3i"
  },
  "api/g3.CachingDenseGridTrilinearImplicit.html": {
    "href": "api/g3.CachingDenseGridTrilinearImplicit.html",
    "title": "Class CachingDenseGridTrilinearImplicit | ViRGIS VR GIS",
    "keywords": "Class CachingDenseGridTrilinearImplicit [RMS] variant of DenseGridTrilinearImplicit that does lazy evaluation of Grid values. Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. Inheritance Object CachingDenseGridTrilinearImplicit Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CachingDenseGridTrilinearImplicit : BoundedImplicitFunction3d, ImplicitFunction3d Constructors CachingDenseGridTrilinearImplicit(Vector3d, Double, Vector3i) Declaration public CachingDenseGridTrilinearImplicit(Vector3d gridOrigin, double cellSize, Vector3i gridDimensions) Parameters Type Name Description Vector3d gridOrigin Double cellSize Vector3i gridDimensions Fields AnalyticF Declaration public ImplicitFunction3d AnalyticF Field Value Type Description ImplicitFunction3d CellSize Declaration public double CellSize Field Value Type Description Double Grid Declaration public DenseGrid3f Grid Field Value Type Description DenseGrid3f GridOrigin Declaration public Vector3d GridOrigin Field Value Type Description Vector3d Invalid Declaration public float Invalid Field Value Type Description Single Outside Declaration public double Outside Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Gradient(ref Vector3d) Declaration public Vector3d Gradient(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Vector3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.CachingMeshSDF.html": {
    "href": "api/g3.CachingMeshSDF.html",
    "title": "Class CachingMeshSDF | ViRGIS VR GIS",
    "keywords": "Class CachingMeshSDF [RMS] this is variant of MeshSignedDistanceGrid that does lazy evaluation of actual distances, using mesh spatial data structure. This is much faster if we are doing continuation-method marching cubes as only values on surface will be computed! Compute discretely-sampled (ie gridded) signed distance field for a mesh The basic approach is, first compute exact distances in a narrow band, and then extend out to rest of grid using fast \"sweeping\" (ie like a distance transform). The resulting unsigned grid is then signed using ray-intersection counting, which is also computed on the grid, so no BVH is necessary If you set ComputeMode to NarrowBandOnly, result is a narrow-band signed distance field. This is quite a bit faster as the sweeping is the most computationally-intensive step. Caveats: the \"narrow band\" is based on triangle bounding boxes, so it is not necessarily that \"narrow\" if you have large triangles on a diagonal to grid axes Potential optimizations: Often we have a spatial data structure that would allow faster computation of the narrow-band distances (which become quite expensive if we want a wider band!) Not clear how to take advantage of this though. Perhaps we could have a binary grid that, in first pass, we set bits inside triangle bboxes to 1? Or perhaps same as current code, but we use spatial-dist, and so for each ijk we only compute once? (then have to test for computed value at each cell of each triangle...) This code is based on the C++ implementation found at https://github.com/christopherbatty/SDFGen Original license was public domain. Permission granted by Christopher Batty to include C# port under Boost license. Inheritance Object CachingMeshSDF Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CachingMeshSDF Constructors CachingMeshSDF(DMesh3, Double, DMeshAABBTree3) Declaration public CachingMeshSDF(DMesh3 mesh, double cellSize, DMeshAABBTree3 spatial) Parameters Type Name Description DMesh3 mesh Double cellSize DMeshAABBTree3 spatial Fields CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellSize Declaration public float CellSize Field Value Type Description Single ComputeSigns Declaration public bool ComputeSigns Field Value Type Description Boolean DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean ExpandBounds Declaration public Vector3d ExpandBounds Field Value Type Description Vector3d InsideMode Declaration public CachingMeshSDF.InsideModes InsideMode Field Value Type Description CachingMeshSDF.InsideModes MaxOffsetDistance Declaration public float MaxOffsetDistance Field Value Type Description Single Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Spatial Declaration public DMeshAABBTree3 Spatial Field Value Type Description DMeshAABBTree3 UseParallel Declaration public bool UseParallel Field Value Type Description Boolean WantClosestTriGrid Declaration public bool WantClosestTriGrid Field Value Type Description Boolean WantIntersectionsGrid Declaration public bool WantIntersectionsGrid Field Value Type Description Boolean Properties ClosestTriGrid Declaration public DenseGrid3i ClosestTriGrid { get; } Property Value Type Description DenseGrid3i Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid SDF grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the SDF grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f IntersectionsGrid Declaration public DenseGrid3i IntersectionsGrid { get; } Property Value Type Description DenseGrid3i Item[Vector3i] Declaration public float this[Vector3i idx] { get; } Parameters Type Name Description Vector3i idx Property Value Type Description Single Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single Methods CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f GetValue(Vector3i) Declaration public float GetValue(Vector3i idx) Parameters Type Name Description Vector3i idx Returns Type Description Single Initialize() Declaration public void Initialize() orientation(Double, Double, Double, Double, out Double) Declaration public static int orientation(double x1, double y1, double x2, double y2, out double twice_signed_area) Parameters Type Name Description Double x1 Double y1 Double x2 Double y2 Double twice_signed_area Returns Type Description Int32 point_in_triangle_2d(Double, Double, Double, Double, Double, Double, Double, Double, out Double, out Double, out Double) Declaration public static bool point_in_triangle_2d(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, out double a, out double b, out double c) Parameters Type Name Description Double x0 Double y0 Double x1 Double y1 Double x2 Double y2 Double x3 Double y3 Double a Double b Double c Returns Type Description Boolean"
  },
  "api/g3.CachingMeshSDF.InsideModes.html": {
    "href": "api/g3.CachingMeshSDF.InsideModes.html",
    "title": "Enum CachingMeshSDF.InsideModes | ViRGIS VR GIS",
    "keywords": "Enum CachingMeshSDF.InsideModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum InsideModes Fields Name Description CrossingCount ParityCount"
  },
  "api/g3.CachingMeshSDFImplicit.html": {
    "href": "api/g3.CachingMeshSDFImplicit.html",
    "title": "Class CachingMeshSDFImplicit | ViRGIS VR GIS",
    "keywords": "Class CachingMeshSDFImplicit Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. Inheritance Object CachingMeshSDFImplicit Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CachingMeshSDFImplicit : BoundedImplicitFunction3d, ImplicitFunction3d Constructors CachingMeshSDFImplicit(CachingMeshSDF) Declaration public CachingMeshSDFImplicit(CachingMeshSDF sdf) Parameters Type Name Description CachingMeshSDF sdf Fields CellSize Declaration public double CellSize Field Value Type Description Double GridOrigin Declaration public Vector3d GridOrigin Field Value Type Description Vector3d Outside Declaration public double Outside Field Value Type Description Double SDF Declaration public CachingMeshSDF SDF Field Value Type Description CachingMeshSDF Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Gradient(ref Vector3d) Declaration public Vector3d Gradient(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Vector3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.CancelFunction.html": {
    "href": "api/g3.CancelFunction.html",
    "title": "Class CancelFunction | ViRGIS VR GIS",
    "keywords": "Class CancelFunction Inheritance Object CancelFunction Implements ICancelSource Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CancelFunction : ICancelSource Constructors CancelFunction(Func<Boolean>) Declaration public CancelFunction(Func<bool> cancelF) Parameters Type Name Description Func < Boolean > cancelF Fields CancelF Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > Methods Cancelled() Declaration public bool Cancelled() Returns Type Description Boolean Implements ICancelSource"
  },
  "api/g3.CappedCylinderGenerator.html": {
    "href": "api/g3.CappedCylinderGenerator.html",
    "title": "Class CappedCylinderGenerator | ViRGIS VR GIS",
    "keywords": "Class CappedCylinderGenerator Generate a Cylinder with caps. Supports sections of cylinder as well (eg wedges). Curently UV islands are overlapping for different mesh components, if NoSharedVertices Positioned along Y axis such that base-center is at Origin, and top is at Y=Height You get a cone unless BaseRadius = TopRadius No subdivisions along top/base rings or height steps. cylinder triangles have groupid = 1, top cap = 2, bottom cap = 3, wedge faces 5 and 6 Inheritance Object MeshGenerator CappedCylinderGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CappedCylinderGenerator : MeshGenerator Fields BaseRadius Declaration public float BaseRadius Field Value Type Description Single EndAngleDeg Declaration public float EndAngleDeg Field Value Type Description Single Height Declaration public float Height Field Value Type Description Single NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Slices Declaration public int Slices Field Value Type Description Int32 StartAngleDeg Declaration public float StartAngleDeg Field Value Type Description Single TopRadius Declaration public float TopRadius Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.CholeskyDecomposition.html": {
    "href": "api/g3.CholeskyDecomposition.html",
    "title": "Class CholeskyDecomposition | ViRGIS VR GIS",
    "keywords": "Class CholeskyDecomposition Computes Cholesky decomposition/factorization L of matrix A A must be symmetric and positive-definite computed lower-triangular matrix L satisfies L*L^T = A. https://en.wikipedia.org/wiki/Cholesky_decomposition Inheritance Object CholeskyDecomposition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CholeskyDecomposition Constructors CholeskyDecomposition(DenseMatrix) Declaration public CholeskyDecomposition(DenseMatrix m) Parameters Type Name Description DenseMatrix m Fields A Declaration public DenseMatrix A Field Value Type Description DenseMatrix L Declaration public DenseMatrix L Field Value Type Description DenseMatrix Methods Compute() Declaration public bool Compute() Returns Type Description Boolean ComputeParallel() Parallel version of Cholesky Decomposition, is about 2x faster on 4-cpu/8-HT Declaration public bool ComputeParallel() Returns Type Description Boolean Solve(Double[], Double[], Double[]) Solve A*X=B via backsubstitution in cholesky factorization Requires temporary vector Y Declaration public void Solve(double[] B, double[] X, double[] Y) Parameters Type Name Description Double [] B Double [] X Double [] Y"
  },
  "api/g3.Circle2d.html": {
    "href": "api/g3.Circle2d.html",
    "title": "Class Circle2d | ViRGIS VR GIS",
    "keywords": "Class Circle2d Inheritance Object Circle2d Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Circle2d : IParametricCurve2d Constructors Circle2d(Vector2d, Double) Declaration public Circle2d(Vector2d center, double radius) Parameters Type Name Description Vector2d center Double radius Circle2d(Double) Declaration public Circle2d(double radius) Parameters Type Name Description Double radius Fields Center Declaration public Vector2d Center Field Value Type Description Vector2d IsReversed Declaration public bool IsReversed Field Value Type Description Boolean Radius Declaration public double Radius Field Value Type Description Double Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Area Declaration public double Area { get; set; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d Circumference Declaration public double Circumference { get; set; } Property Value Type Description Double Curvature Declaration public double Curvature { get; } Property Value Type Description Double Diameter Declaration public double Diameter { get; set; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double SignedCurvature Declaration public double SignedCurvature { get; } Property Value Type Description Double Methods BoundingPolygonRadius(Double, Int32) Radius of n-sided regular polygon that contains circle of radius r Declaration public static double BoundingPolygonRadius(double r, int n) Parameters Type Name Description Double r Int32 n Returns Type Description Double Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Contains(Vector2d) Declaration public bool Contains(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Boolean Distance(Vector2d) Declaration public double Distance(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double RadiusArea(Double) Declaration public static double RadiusArea(double r) Parameters Type Name Description Double r Returns Type Description Double RadiusCircumference(Double) Declaration public static double RadiusCircumference(double r) Parameters Type Name Description Double r Returns Type Description Double Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleDeg(Double) Declaration public Vector2d SampleDeg(double degrees) Parameters Type Name Description Double degrees Returns Type Description Vector2d SampleRad(Double) Declaration public Vector2d SampleRad(double radians) Parameters Type Name Description Double radians Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d SignedDistance(Vector2d) Declaration public double SignedDistance(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.Circle3d.html": {
    "href": "api/g3.Circle3d.html",
    "title": "Class Circle3d | ViRGIS VR GIS",
    "keywords": "Class Circle3d Inheritance Object Circle3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Circle3d Constructors Circle3d(Frame3f, Double, Int32) Declaration public Circle3d(Frame3f frame, double radius, int nNormalAxis = 1) Parameters Type Name Description Frame3f frame Double radius Int32 nNormalAxis Circle3d(Vector3d, Double) Declaration public Circle3d(Vector3d center, double radius) Parameters Type Name Description Vector3d center Double radius Circle3d(Vector3d, Double, Vector3d, Vector3d, Vector3d) Declaration public Circle3d(Vector3d center, double radius, Vector3d axis0, Vector3d axis1, Vector3d normal) Parameters Type Name Description Vector3d center Double radius Vector3d axis0 Vector3d axis1 Vector3d normal Fields Center Declaration public Vector3d Center Field Value Type Description Vector3d IsReversed Declaration public bool IsReversed Field Value Type Description Boolean Normal Declaration public Vector3d Normal Field Value Type Description Vector3d PlaneX Declaration public Vector3d PlaneX Field Value Type Description Vector3d PlaneY Declaration public Vector3d PlaneY Field Value Type Description Vector3d Radius Declaration public double Radius Field Value Type Description Double Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Area Declaration public double Area { get; } Property Value Type Description Double Circumference Declaration public double Circumference { get; } Property Value Type Description Double Diameter Declaration public double Diameter { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector3d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector3d SampleDeg(Double) Declaration public Vector3d SampleDeg(double degrees) Parameters Type Name Description Double degrees Returns Type Description Vector3d SampleRad(Double) Declaration public Vector3d SampleRad(double radians) Parameters Type Name Description Double radians Returns Type Description Vector3d SampleT(Double) Declaration public Vector3d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector3d"
  },
  "api/g3.CircleProjectionTarget.html": {
    "href": "api/g3.CircleProjectionTarget.html",
    "title": "Class CircleProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class CircleProjectionTarget Inheritance Object CircleProjectionTarget Implements IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CircleProjectionTarget : IProjectionTarget Fields Circle Declaration public Circle3d Circle Field Value Type Description Circle3d Methods Project(Vector3d, Int32) Declaration public Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Implements IProjectionTarget"
  },
  "api/g3.Colorb.html": {
    "href": "api/g3.Colorb.html",
    "title": "Struct Colorb | ViRGIS VR GIS",
    "keywords": "Struct Colorb Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Colorb Constructors Colorb(Colorb) Declaration public Colorb(Colorb copy) Parameters Type Name Description Colorb copy Colorb(Colorb, Byte) Declaration public Colorb(Colorb copy, byte newAlpha) Parameters Type Name Description Colorb copy Byte newAlpha Colorb(Byte, Byte) Declaration public Colorb(byte greylevel, byte a = 1) Parameters Type Name Description Byte greylevel Byte a Colorb(Byte, Byte, Byte, Byte) Declaration public Colorb(byte r, byte g, byte b, byte a = 1) Parameters Type Name Description Byte r Byte g Byte b Byte a Colorb(Byte[]) Declaration public Colorb(byte[] v2) Parameters Type Name Description Byte [] v2 Colorb(Single, Single, Single, Single) Declaration public Colorb(float r, float g, float b, float a = 1F) Parameters Type Name Description Single r Single g Single b Single a Fields a Declaration public byte a Field Value Type Description Byte b Declaration public byte b Field Value Type Description Byte g Declaration public byte g Field Value Type Description Byte r Declaration public byte r Field Value Type Description Byte Properties Item[Int32] Declaration public byte this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Byte"
  },
  "api/g3.Colorf.html": {
    "href": "api/g3.Colorf.html",
    "title": "Struct Colorf | ViRGIS VR GIS",
    "keywords": "Struct Colorf Implements IComparable < Colorf > IEquatable < Colorf > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Colorf : IComparable<Colorf>, IEquatable<Colorf> Constructors Colorf(Colorf) Declaration public Colorf(Colorf copy) Parameters Type Name Description Colorf copy Colorf(Colorf, Single) Declaration public Colorf(Colorf copy, float newAlpha) Parameters Type Name Description Colorf copy Single newAlpha Colorf(Int32, Int32, Int32, Int32) Declaration public Colorf(int r, int g, int b, int a = 255) Parameters Type Name Description Int32 r Int32 g Int32 b Int32 a Colorf(Single, Single) Declaration public Colorf(float greylevel, float a = 1F) Parameters Type Name Description Single greylevel Single a Colorf(Single, Single, Single, Single) Declaration public Colorf(float r, float g, float b, float a = 1F) Parameters Type Name Description Single r Single g Single b Single a Colorf(Single[]) Declaration public Colorf(float[] v2) Parameters Type Name Description Single [] v2 Fields a Declaration public float a Field Value Type Description Single b Declaration public float b Field Value Type Description Single Black Declaration public static readonly Colorf Black Field Value Type Description Colorf Blue Declaration public static readonly Colorf Blue Field Value Type Description Colorf BlueMetal Declaration public static readonly Colorf BlueMetal Field Value Type Description Colorf CornflowerBlue Declaration public static readonly Colorf CornflowerBlue Field Value Type Description Colorf Cyan Declaration public static readonly Colorf Cyan Field Value Type Description Colorf DarkBlue Declaration public static readonly Colorf DarkBlue Field Value Type Description Colorf DarkGrey Declaration public static readonly Colorf DarkGrey Field Value Type Description Colorf DarkRed Declaration public static readonly Colorf DarkRed Field Value Type Description Colorf DarkSlateBlue Declaration public static readonly Colorf DarkSlateBlue Field Value Type Description Colorf DarkSlateGrey Declaration public static readonly Colorf DarkSlateGrey Field Value Type Description Colorf DarkYellow Declaration public static readonly Colorf DarkYellow Field Value Type Description Colorf DimGrey Declaration public static readonly Colorf DimGrey Field Value Type Description Colorf FireBrick Declaration public static readonly Colorf FireBrick Field Value Type Description Colorf ForestGreen Declaration public static readonly Colorf ForestGreen Field Value Type Description Colorf g Declaration public float g Field Value Type Description Single Gold Declaration public static readonly Colorf Gold Field Value Type Description Colorf Goldenrod Declaration public static readonly Colorf Goldenrod Field Value Type Description Colorf Green Declaration public static readonly Colorf Green Field Value Type Description Colorf Grey Declaration public static readonly Colorf Grey Field Value Type Description Colorf HotPink Declaration public static readonly Colorf HotPink Field Value Type Description Colorf LightGreen Declaration public static readonly Colorf LightGreen Field Value Type Description Colorf LightGrey Declaration public static readonly Colorf LightGrey Field Value Type Description Colorf LightPink Declaration public static readonly Colorf LightPink Field Value Type Description Colorf LightSlateGrey Declaration public static readonly Colorf LightSlateGrey Field Value Type Description Colorf LightSteelBlue Declaration public static readonly Colorf LightSteelBlue Field Value Type Description Colorf Magenta Declaration public static readonly Colorf Magenta Field Value Type Description Colorf Navy Declaration public static readonly Colorf Navy Field Value Type Description Colorf Orange Declaration public static readonly Colorf Orange Field Value Type Description Colorf PivotYellow Declaration public static readonly Colorf PivotYellow Field Value Type Description Colorf Purple Declaration public static readonly Colorf Purple Field Value Type Description Colorf r Declaration public float r Field Value Type Description Single Red Declaration public static readonly Colorf Red Field Value Type Description Colorf SaddleBrown Declaration public static readonly Colorf SaddleBrown Field Value Type Description Colorf SelectionGold Declaration public static readonly Colorf SelectionGold Field Value Type Description Colorf SiennaBrown Declaration public static readonly Colorf SiennaBrown Field Value Type Description Colorf Silver Declaration public static readonly Colorf Silver Field Value Type Description Colorf SlateGrey Declaration public static readonly Colorf SlateGrey Field Value Type Description Colorf StandardBeige Declaration public static readonly Colorf StandardBeige Field Value Type Description Colorf Teal Declaration public static readonly Colorf Teal Field Value Type Description Colorf TransparentBlack Declaration public static readonly Colorf TransparentBlack Field Value Type Description Colorf TransparentWhite Declaration public static readonly Colorf TransparentWhite Field Value Type Description Colorf VideoBlack Declaration public static readonly Colorf VideoBlack Field Value Type Description Colorf VideoBlue Declaration public static readonly Colorf VideoBlue Field Value Type Description Colorf VideoCyan Declaration public static readonly Colorf VideoCyan Field Value Type Description Colorf VideoGreen Declaration public static readonly Colorf VideoGreen Field Value Type Description Colorf VideoMagenta Declaration public static readonly Colorf VideoMagenta Field Value Type Description Colorf VideoRed Declaration public static readonly Colorf VideoRed Field Value Type Description Colorf VideoWhite Declaration public static readonly Colorf VideoWhite Field Value Type Description Colorf VideoYellow Declaration public static readonly Colorf VideoYellow Field Value Type Description Colorf Wheat Declaration public static readonly Colorf Wheat Field Value Type Description Colorf White Declaration public static readonly Colorf White Field Value Type Description Colorf Yellow Declaration public static readonly Colorf Yellow Field Value Type Description Colorf Properties Item[Int32] Declaration public float this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Single Methods Add(Colorf) Declaration public void Add(Colorf o) Parameters Type Name Description Colorf o Clone(Single) Declaration public Colorf Clone(float fAlphaMultiply = 1F) Parameters Type Name Description Single fAlphaMultiply Returns Type Description Colorf CompareTo(Colorf) Declaration public int CompareTo(Colorf other) Parameters Type Name Description Colorf other Returns Type Description Int32 Equals(Colorf) Declaration public bool Equals(Colorf other) Parameters Type Name Description Colorf other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Lerp(Colorf, Colorf, Single) Declaration public static Colorf Lerp(Colorf a, Colorf b, float t) Parameters Type Name Description Colorf a Colorf b Single t Returns Type Description Colorf Set(Colorf) Declaration public void Set(Colorf o) Parameters Type Name Description Colorf o Set(Single, Single, Single, Single) Declaration public void Set(float fR, float fG, float fB, float fA) Parameters Type Name Description Single fR Single fG Single fB Single fA SetAlpha(Single) Declaration public Colorf SetAlpha(float a) Parameters Type Name Description Single a Returns Type Description Colorf SqrDistance(Colorf) Declaration public float SqrDistance(Colorf v2) Parameters Type Name Description Colorf v2 Returns Type Description Single Subtract(Colorf) Declaration public void Subtract(Colorf o) Parameters Type Name Description Colorf o ToBytes() Declaration public Colorb ToBytes() Returns Type Description Colorb ToRGB() Declaration public Vector3f ToRGB() Returns Type Description Vector3f ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String WithAlpha(Single) Declaration public Colorf WithAlpha(float newAlpha) Parameters Type Name Description Single newAlpha Returns Type Description Colorf Operators Addition(Colorf, Colorf) Declaration public static Colorf operator +(Colorf v0, Colorf v1) Parameters Type Name Description Colorf v0 Colorf v1 Returns Type Description Colorf Addition(Colorf, Single) Declaration public static Colorf operator +(Colorf v0, float f) Parameters Type Name Description Colorf v0 Single f Returns Type Description Colorf Equality(Colorf, Colorf) Declaration public static bool operator ==(Colorf a, Colorf b) Parameters Type Name Description Colorf a Colorf b Returns Type Description Boolean Implicit(Colorf to Vector3f) Declaration public static implicit operator Vector3f(Colorf c) Parameters Type Name Description Colorf c Returns Type Description Vector3f Implicit(Vector3f to Colorf) Declaration public static implicit operator Colorf(Vector3f c) Parameters Type Name Description Vector3f c Returns Type Description Colorf Inequality(Colorf, Colorf) Declaration public static bool operator !=(Colorf a, Colorf b) Parameters Type Name Description Colorf a Colorf b Returns Type Description Boolean Multiply(Colorf, Single) Declaration public static Colorf operator *(Colorf v, float f) Parameters Type Name Description Colorf v Single f Returns Type Description Colorf Multiply(Single, Colorf) Declaration public static Colorf operator *(float f, Colorf v) Parameters Type Name Description Single f Colorf v Returns Type Description Colorf Subtraction(Colorf, Colorf) Declaration public static Colorf operator -(Colorf v0, Colorf v1) Parameters Type Name Description Colorf v0 Colorf v1 Returns Type Description Colorf Subtraction(Colorf, Single) Declaration public static Colorf operator -(Colorf v0, float f) Parameters Type Name Description Colorf v0 Single f Returns Type Description Colorf UnaryNegation(Colorf) Declaration public static Colorf operator -(Colorf v) Parameters Type Name Description Colorf v Returns Type Description Colorf Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.ColorHSV.html": {
    "href": "api/g3.ColorHSV.html",
    "title": "Class ColorHSV | ViRGIS VR GIS",
    "keywords": "Class ColorHSV Inheritance Object ColorHSV Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ColorHSV Constructors ColorHSV(Colorf) Declaration public ColorHSV(Colorf rgb) Parameters Type Name Description Colorf rgb ColorHSV(Single, Single, Single, Single) Declaration public ColorHSV(float h, float s, float v, float a = 1F) Parameters Type Name Description Single h Single s Single v Single a Fields a Declaration public float a Field Value Type Description Single h Declaration public float h Field Value Type Description Single s Declaration public float s Field Value Type Description Single v Declaration public float v Field Value Type Description Single Properties RGBA Declaration public Colorf RGBA { get; set; } Property Value Type Description Colorf Methods ConvertFromRGB(Colorf) Declaration public void ConvertFromRGB(Colorf rgb) Parameters Type Name Description Colorf rgb ConvertToRGB() Declaration public Colorf ConvertToRGB() Returns Type Description Colorf"
  },
  "api/g3.ColorMap.html": {
    "href": "api/g3.ColorMap.html",
    "title": "Class ColorMap | ViRGIS VR GIS",
    "keywords": "Class ColorMap Inheritance Object ColorMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ColorMap Constructors ColorMap() Declaration public ColorMap() ColorMap(Single[], Colorf[]) Declaration public ColorMap(float[] t, Colorf[] c) Parameters Type Name Description Single [] t Colorf [] c Methods AddPoint(Single, Colorf) Declaration public void AddPoint(float t, Colorf c) Parameters Type Name Description Single t Colorf c Linear(Single) Declaration public Colorf Linear(float t) Parameters Type Name Description Single t Returns Type Description Colorf"
  },
  "api/g3.ColorMixer.html": {
    "href": "api/g3.ColorMixer.html",
    "title": "Class ColorMixer | ViRGIS VR GIS",
    "keywords": "Class ColorMixer Inheritance Object ColorMixer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class ColorMixer Methods CopyHue(Colorf, Colorf, Single) Declaration public static Colorf CopyHue(Colorf BaseColor, Colorf TakeHue, float fBlendAlpha) Parameters Type Name Description Colorf BaseColor Colorf TakeHue Single fBlendAlpha Returns Type Description Colorf Darken(Colorf, Single) Declaration public static Colorf Darken(Colorf baseColor, float fValueMult = 0.75F) Parameters Type Name Description Colorf baseColor Single fValueMult Returns Type Description Colorf Lighten(Colorf, Single) Declaration public static Colorf Lighten(Colorf baseColor, float fValueMult = 1.25F) Parameters Type Name Description Colorf baseColor Single fValueMult Returns Type Description Colorf"
  },
  "api/g3.CommandArgumentSet.html": {
    "href": "api/g3.CommandArgumentSet.html",
    "title": "Class CommandArgumentSet | ViRGIS VR GIS",
    "keywords": "Class CommandArgumentSet Inheritance Object CommandArgumentSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CommandArgumentSet Fields Filenames Declaration public List<string> Filenames Field Value Type Description List < String > Flags Declaration public Dictionary<string, bool> Flags Field Value Type Description Dictionary < String , Boolean > Floats Declaration public Dictionary<string, float> Floats Field Value Type Description Dictionary < String , Single > Integers Declaration public Dictionary<string, int> Integers Field Value Type Description Dictionary < String , Int32 > SawArguments Declaration public HashSet<string> SawArguments Field Value Type Description HashSet < String > Strings Declaration public Dictionary<string, string> Strings Field Value Type Description Dictionary < String , String > Methods error_invalid_value(String, String) Declaration protected virtual void error_invalid_value(string arg, string value) Parameters Type Name Description String arg String value error_missing_argument(String) Declaration protected virtual void error_missing_argument(string arg) Parameters Type Name Description String arg Parse(String[]) Declaration public bool Parse(string[] arguments) Parameters Type Name Description String [] arguments Returns Type Description Boolean Register(String, Boolean) Declaration public void Register(string argument, bool defaultValue) Parameters Type Name Description String argument Boolean defaultValue Register(String, Int32) Declaration public void Register(string argument, int defaultValue) Parameters Type Name Description String argument Int32 defaultValue Register(String, Single) Declaration public void Register(string argument, float defaultValue) Parameters Type Name Description String argument Single defaultValue Register(String, String) Declaration public void Register(string argument, string defaultValue) Parameters Type Name Description String argument String defaultValue Saw(String) Declaration public bool Saw(string argument) Parameters Type Name Description String argument Returns Type Description Boolean Validate(String, String[]) Declaration public bool Validate(string sParam, params string[] values) Parameters Type Name Description String sParam String [] values Returns Type Description Boolean"
  },
  "api/g3.ComplexEndpoint2d.html": {
    "href": "api/g3.ComplexEndpoint2d.html",
    "title": "Struct ComplexEndpoint2d | ViRGIS VR GIS",
    "keywords": "Struct ComplexEndpoint2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ComplexEndpoint2d Fields element Declaration public PlanarComplex.SmoothCurveElement element Field Value Type Description PlanarComplex.SmoothCurveElement isStart Declaration public bool isStart Field Value Type Description Boolean v Declaration public Vector2d v Field Value Type Description Vector2d"
  },
  "api/g3.ComplexSegment2d.html": {
    "href": "api/g3.ComplexSegment2d.html",
    "title": "Struct ComplexSegment2d | ViRGIS VR GIS",
    "keywords": "Struct ComplexSegment2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ComplexSegment2d Fields element Declaration public PlanarComplex.Element element Field Value Type Description PlanarComplex.Element isClosed Declaration public bool isClosed Field Value Type Description Boolean seg Declaration public Segment2d seg Field Value Type Description Segment2d"
  },
  "api/g3.ConeGenerator.html": {
    "href": "api/g3.ConeGenerator.html",
    "title": "Class ConeGenerator | ViRGIS VR GIS",
    "keywords": "Class ConeGenerator Inheritance Object MeshGenerator ConeGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ConeGenerator : MeshGenerator Fields BaseRadius Declaration public float BaseRadius Field Value Type Description Single EndAngleDeg Declaration public float EndAngleDeg Field Value Type Description Single Height Declaration public float Height Field Value Type Description Single NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Slices Declaration public int Slices Field Value Type Description Int32 StartAngleDeg Declaration public float StartAngleDeg Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.ConstantIndexMap.html": {
    "href": "api/g3.ConstantIndexMap.html",
    "title": "Class ConstantIndexMap | ViRGIS VR GIS",
    "keywords": "Class ConstantIndexMap Inheritance Object ConstantIndexMap Implements IIndexMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ConstantIndexMap : IIndexMap Constructors ConstantIndexMap(Int32) Declaration public ConstantIndexMap(int c) Parameters Type Name Description Int32 c Fields Constant Declaration public int Constant Field Value Type Description Int32 Properties Item[Int32] Declaration public int this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Implements IIndexMap"
  },
  "api/g3.ConstantItr-1.html": {
    "href": "api/g3.ConstantItr-1.html",
    "title": "Class ConstantItr<T> | ViRGIS VR GIS",
    "keywords": "Class ConstantItr<T> Iterator that just returns a constant value N times Inheritance Object ConstantItr<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ConstantItr<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors ConstantItr(Int32, T) Declaration public ConstantItr(int count, T constant) Parameters Type Name Description Int32 count T constant Fields ConstantValue Declaration public T ConstantValue Field Value Type Description T N Declaration public int N Field Value Type Description Int32 Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.ContMinBox2.html": {
    "href": "api/g3.ContMinBox2.html",
    "title": "Class ContMinBox2 | ViRGIS VR GIS",
    "keywords": "Class ContMinBox2 Fit minimal bounding-box to a set of 2D points. Result is in MinBox. Inheritance Object ContMinBox2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ContMinBox2 Constructors ContMinBox2(IList<Vector2d>, Double, QueryNumberType, Boolean) Declaration public ContMinBox2(IList<Vector2d> points, double epsilon, QueryNumberType queryType, bool isConvexPolygon) Parameters Type Name Description IList < Vector2d > points Double epsilon QueryNumberType queryType Boolean isConvexPolygon Properties MinBox Declaration public Box2d MinBox { get; } Property Value Type Description Box2d Methods UpdateBox(Vector2d, Vector2d, Vector2d, Vector2d, ref Vector2d, ref Vector2d, ref Double) Declaration protected void UpdateBox(Vector2d LPoint, Vector2d RPoint, Vector2d BPoint, Vector2d TPoint, ref Vector2d U, ref Vector2d V, ref double minAreaDiv4) Parameters Type Name Description Vector2d LPoint Vector2d RPoint Vector2d BPoint Vector2d TPoint Vector2d U Vector2d V Double minAreaDiv4"
  },
  "api/g3.ContMinBox2.RCFlags.html": {
    "href": "api/g3.ContMinBox2.RCFlags.html",
    "title": "Enum ContMinBox2.RCFlags | ViRGIS VR GIS",
    "keywords": "Enum ContMinBox2.RCFlags Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected enum RCFlags Fields Name Description F_BOTTOM F_LEFT F_NONE F_RIGHT F_TOP"
  },
  "api/g3.ContMinCircle2.html": {
    "href": "api/g3.ContMinCircle2.html",
    "title": "Class ContMinCircle2 | ViRGIS VR GIS",
    "keywords": "Class ContMinCircle2 Fit minimal bounding-circle to a set of 2D points Inheritance Object ContMinCircle2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ContMinCircle2 Constructors ContMinCircle2(IList<Vector2d>, Double) Declaration public ContMinCircle2(IList<Vector2d> pointsIn, double epsilon = 1E-05) Parameters Type Name Description IList < Vector2d > pointsIn Double epsilon Fields Result Declaration public Circle2d Result Field Value Type Description Circle2d"
  },
  "api/g3.ContMinCircle2.Support.html": {
    "href": "api/g3.ContMinCircle2.Support.html",
    "title": "Class ContMinCircle2.Support | ViRGIS VR GIS",
    "keywords": "Class ContMinCircle2.Support Inheritance Object ContMinCircle2.Support Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected class Support Fields Index Declaration public Index3i Index Field Value Type Description Index3i Quantity Declaration public int Quantity Field Value Type Description Int32 Methods Contains(Int32, IList<Vector2d>, Int32[], Double) Declaration public bool Contains(int index, IList<Vector2d> Points, int[] permutation, double epsilon) Parameters Type Name Description Int32 index IList < Vector2d > Points Int32 [] permutation Double epsilon Returns Type Description Boolean"
  },
  "api/g3.ContOrientedBox3.html": {
    "href": "api/g3.ContOrientedBox3.html",
    "title": "Class ContOrientedBox3 | ViRGIS VR GIS",
    "keywords": "Class ContOrientedBox3 Inheritance Object ContOrientedBox3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ContOrientedBox3 Constructors ContOrientedBox3(IEnumerable<Vector3d>) Declaration public ContOrientedBox3(IEnumerable<Vector3d> points) Parameters Type Name Description IEnumerable < Vector3d > points ContOrientedBox3(IEnumerable<Vector3d>, IEnumerable<Double>) Declaration public ContOrientedBox3(IEnumerable<Vector3d> points, IEnumerable<double> pointWeights) Parameters Type Name Description IEnumerable < Vector3d > points IEnumerable < Double > pointWeights Fields Box Declaration public Box3d Box Field Value Type Description Box3d ResultValid Declaration public bool ResultValid Field Value Type Description Boolean"
  },
  "api/g3.ConvexHull2.Edge.html": {
    "href": "api/g3.ConvexHull2.Edge.html",
    "title": "Class ConvexHull2.Edge | ViRGIS VR GIS",
    "keywords": "Class ConvexHull2.Edge Internal class that represents edge of hull, and neighbours Inheritance Object ConvexHull2.Edge Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected class Edge Constructors Edge(Int32, Int32) Declaration public Edge(int v0, int v1) Parameters Type Name Description Int32 v0 Int32 v1 Fields E0 Declaration public ConvexHull2.Edge E0 Field Value Type Description ConvexHull2.Edge E1 Declaration public ConvexHull2.Edge E1 Field Value Type Description ConvexHull2.Edge Sign Declaration public int Sign Field Value Type Description Int32 Time Declaration public int Time Field Value Type Description Int32 V Declaration public Vector2i V Field Value Type Description Vector2i Methods DeleteSelf() Declaration public void DeleteSelf() GetIndices(ref Int32, ref Int32[]) Declaration public void GetIndices(ref int numIndices, ref int[] indices) Parameters Type Name Description Int32 numIndices Int32 [] indices GetSign(Int32, Query2) Declaration public int GetSign(int i, Query2 query) Parameters Type Name Description Int32 i Query2 query Returns Type Description Int32 Insert(ConvexHull2.Edge, ConvexHull2.Edge) Declaration public void Insert(ConvexHull2.Edge adj0, ConvexHull2.Edge adj1) Parameters Type Name Description ConvexHull2.Edge adj0 ConvexHull2.Edge adj1"
  },
  "api/g3.ConvexHull2.html": {
    "href": "api/g3.ConvexHull2.html",
    "title": "Class ConvexHull2 | ViRGIS VR GIS",
    "keywords": "Class ConvexHull2 Construct convex hull of a set of 2D points, with various accuracy levels. HullIndices provides ordered indices of vertices of input points that form hull. Inheritance Object ConvexHull2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ConvexHull2 Constructors ConvexHull2(IList<Vector2d>, Double, QueryNumberType) Compute convex hull of input points. epsilon is only used for check if points lie on a line (1d hull), not for rest of compute. Declaration public ConvexHull2(IList<Vector2d> vertices, double epsilon, QueryNumberType queryType) Parameters Type Name Description IList < Vector2d > vertices Double epsilon QueryNumberType queryType Properties Dimension Declaration public int Dimension { get; } Property Value Type Description Int32 HullIndices array of indices into V that represent the convex polygon edges (NumSimplices total elements) The i-th edge has vertices vertex[0] = V[I[i]] vertex[1] = V[I[(i+1) % SQ]] Declaration public int[] HullIndices { get; } Property Value Type Description Int32 [] NumSimplices Number of convex polygon edges Declaration public int NumSimplices { get; } Property Value Type Description Int32 Methods Get1DHullInfo(out Vector2d, out Vector2d) If the resulting Dimension == 1, then you can use this to get some info... Declaration public void Get1DHullInfo(out Vector2d origin, out Vector2d direction) Parameters Type Name Description Vector2d origin Vector2d direction GetHullPolygon() Extract convex hull polygon from input points Declaration public Polygon2d GetHullPolygon() Returns Type Description Polygon2d"
  },
  "api/g3.Curve3Axis3RevolveGenerator.html": {
    "href": "api/g3.Curve3Axis3RevolveGenerator.html",
    "title": "Class Curve3Axis3RevolveGenerator | ViRGIS VR GIS",
    "keywords": "Class Curve3Axis3RevolveGenerator Inheritance Object MeshGenerator Curve3Axis3RevolveGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Curve3Axis3RevolveGenerator : MeshGenerator Fields Axis Declaration public Frame3f Axis Field Value Type Description Frame3f Capped Declaration public bool Capped Field Value Type Description Boolean Curve Declaration public Vector3d[] Curve Field Value Type Description Vector3d [] endCapCenterIndex Declaration public int endCapCenterIndex Field Value Type Description Int32 NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean RevolveAxis Declaration public int RevolveAxis Field Value Type Description Int32 Slices Declaration public int Slices Field Value Type Description Int32 startCapCenterIndex Declaration public int startCapCenterIndex Field Value Type Description Int32 Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.Curve3Curve3RevolveGenerator.html": {
    "href": "api/g3.Curve3Curve3RevolveGenerator.html",
    "title": "Class Curve3Curve3RevolveGenerator | ViRGIS VR GIS",
    "keywords": "Class Curve3Curve3RevolveGenerator Inheritance Object MeshGenerator Curve3Curve3RevolveGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Curve3Curve3RevolveGenerator : MeshGenerator Fields Axis Declaration public Vector3d[] Axis Field Value Type Description Vector3d [] Capped Declaration public bool Capped Field Value Type Description Boolean Curve Declaration public Vector3d[] Curve Field Value Type Description Vector3d [] endCapCenterIndex Declaration public int endCapCenterIndex Field Value Type Description Int32 NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Slices Declaration public int Slices Field Value Type Description Int32 startCapCenterIndex Declaration public int startCapCenterIndex Field Value Type Description Int32 Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.CurveGenerator.html": {
    "href": "api/g3.CurveGenerator.html",
    "title": "Class CurveGenerator | ViRGIS VR GIS",
    "keywords": "Class CurveGenerator Inheritance Object CurveGenerator LineGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class CurveGenerator Fields closed Declaration public bool closed Field Value Type Description Boolean vertices Declaration public VectorArray3d vertices Field Value Type Description VectorArray3d Methods Generate() Declaration public abstract void Generate() Make(DCurve3) Declaration public void Make(DCurve3 c) Parameters Type Name Description DCurve3 c"
  },
  "api/g3.CurveResampler.html": {
    "href": "api/g3.CurveResampler.html",
    "title": "Class CurveResampler | ViRGIS VR GIS",
    "keywords": "Class CurveResampler Inheritance Object CurveResampler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CurveResampler Methods SplitCollapseResample(ISampledCurve3d, Double, Double) Declaration public List<Vector3d> SplitCollapseResample(ISampledCurve3d curve, double fMaxEdgeLen, double fMinEdgeLen) Parameters Type Name Description ISampledCurve3d curve Double fMaxEdgeLen Double fMinEdgeLen Returns Type Description List < Vector3d > SplitResample(ISampledCurve3d, Double) Declaration public List<Vector3d> SplitResample(ISampledCurve3d curve, double fMaxEdgeLen) Parameters Type Name Description ISampledCurve3d curve Double fMaxEdgeLen Returns Type Description List < Vector3d >"
  },
  "api/g3.CurveSample.html": {
    "href": "api/g3.CurveSample.html",
    "title": "Struct CurveSample | ViRGIS VR GIS",
    "keywords": "Struct CurveSample Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct CurveSample Constructors CurveSample(Vector3d, Vector3d) Declaration public CurveSample(Vector3d p, Vector3d t) Parameters Type Name Description Vector3d p Vector3d t Fields position Declaration public Vector3d position Field Value Type Description Vector3d tangent Declaration public Vector3d tangent Field Value Type Description Vector3d"
  },
  "api/g3.CurveSample2d.html": {
    "href": "api/g3.CurveSample2d.html",
    "title": "Struct CurveSample2d | ViRGIS VR GIS",
    "keywords": "Struct CurveSample2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct CurveSample2d Constructors CurveSample2d(Vector2d, Vector2d) Declaration public CurveSample2d(Vector2d p, Vector2d t) Parameters Type Name Description Vector2d p Vector2d t Fields position Declaration public Vector2d position Field Value Type Description Vector2d tangent Declaration public Vector2d tangent Field Value Type Description Vector2d"
  },
  "api/g3.CurveSampler2.html": {
    "href": "api/g3.CurveSampler2.html",
    "title": "Class CurveSampler2 | ViRGIS VR GIS",
    "keywords": "Class CurveSampler2 Inheritance Object CurveSampler2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class CurveSampler2 Methods AutoSample(IParametricCurve2d, Double, Double) Declaration public static VectorArray2d AutoSample(IParametricCurve2d curve, double fSpacingLength, double fSpacingT) Parameters Type Name Description IParametricCurve2d curve Double fSpacingLength Double fSpacingT Returns Type Description VectorArray2d AutoSample(ParametricCurveSequence2, Double, Double) Declaration public static VectorArray2d AutoSample(ParametricCurveSequence2 curves, double fSpacingLength, double fSpacingT) Parameters Type Name Description ParametricCurveSequence2 curves Double fSpacingLength Double fSpacingT Returns Type Description VectorArray2d SampleArcLen(IParametricCurve2d, Double) Declaration public static VectorArray2d SampleArcLen(IParametricCurve2d curve, double fSpacing) Parameters Type Name Description IParametricCurve2d curve Double fSpacing Returns Type Description VectorArray2d SampleNURBSHybrid(NURBSCurve2, Double) Declaration public static VectorArray2d SampleNURBSHybrid(NURBSCurve2 curve, double fSpacing) Parameters Type Name Description NURBSCurve2 curve Double fSpacing Returns Type Description VectorArray2d SampleT(IParametricCurve2d, Double) Declaration public static VectorArray2d SampleT(IParametricCurve2d curve, double fSpacing) Parameters Type Name Description IParametricCurve2d curve Double fSpacing Returns Type Description VectorArray2d SampleT(IParametricCurve2d, Int32) Declaration public static VectorArray2d SampleT(IParametricCurve2d curve, int N) Parameters Type Name Description IParametricCurve2d curve Int32 N Returns Type Description VectorArray2d SampleTRange(IParametricCurve2d, Int32, Double, Double) Declaration public static VectorArray2d SampleTRange(IParametricCurve2d curve, int N, double t0, double t1) Parameters Type Name Description IParametricCurve2d curve Int32 N Double t0 Double t1 Returns Type Description VectorArray2d"
  },
  "api/g3.CurveUtils.html": {
    "href": "api/g3.CurveUtils.html",
    "title": "Class CurveUtils | ViRGIS VR GIS",
    "keywords": "Class CurveUtils Inheritance Object CurveUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CurveUtils Methods ArcLength(Vector3d[], Boolean) Declaration public static double ArcLength(Vector3d[] vertices, bool bLoop = false) Parameters Type Name Description Vector3d [] vertices Boolean bLoop Returns Type Description Double ArcLength(IEnumerable<Vector3d>) Declaration public static double ArcLength(IEnumerable<Vector3d> vertices) Parameters Type Name Description IEnumerable < Vector3d > vertices Returns Type Description Double ArcLength(List<Vector3d>, Boolean) Declaration public static double ArcLength(List<Vector3d> vertices, bool bLoop = false) Parameters Type Name Description List < Vector3d > vertices Boolean bLoop Returns Type Description Double FindClosestRayIntersection(ISampledCurve3d, Double, Ray3d, out Double) Declaration public static bool FindClosestRayIntersection(ISampledCurve3d c, double segRadius, Ray3d ray, out double minRayT) Parameters Type Name Description ISampledCurve3d c Double segRadius Ray3d ray Double minRayT Returns Type Description Boolean FindNearestIndex(ISampledCurve3d, Vector3d) Declaration public static int FindNearestIndex(ISampledCurve3d c, Vector3d v) Parameters Type Name Description ISampledCurve3d c Vector3d v Returns Type Description Int32 GetTangent(List<Vector3d>, Int32, Boolean) Declaration public static Vector3d GetTangent(List<Vector3d> vertices, int i, bool bLoop = false) Parameters Type Name Description List < Vector3d > vertices Int32 i Boolean bLoop Returns Type Description Vector3d InPlaceSmooth(IList<Vector3d>, Double, Int32, Boolean) smooth set of vertices in-place (will not produce a symmetric result, but does not require extra buffer) Declaration public static void InPlaceSmooth(IList<Vector3d> vertices, double alpha, int nIterations, bool bClosed) Parameters Type Name Description IList < Vector3d > vertices Double alpha Int32 nIterations Boolean bClosed InPlaceSmooth(IList<Vector3d>, Int32, Int32, Double, Int32, Boolean) smooth set of vertices in-place (will not produce a symmetric result, but does not require extra buffer) Declaration public static void InPlaceSmooth(IList<Vector3d> vertices, int iStart, int iEnd, double alpha, int nIterations, bool bClosed) Parameters Type Name Description IList < Vector3d > vertices Int32 iStart Int32 iEnd Double alpha Int32 nIterations Boolean bClosed IterativeSmooth(IList<Vector3d>, Double, Int32, Boolean) smooth set of vertices using extra buffer Declaration public static void IterativeSmooth(IList<Vector3d> vertices, double alpha, int nIterations, bool bClosed) Parameters Type Name Description IList < Vector3d > vertices Double alpha Int32 nIterations Boolean bClosed IterativeSmooth(IList<Vector3d>, Int32, Int32, Double, Int32, Boolean, Vector3d[]) smooth set of vertices using extra buffer Declaration public static void IterativeSmooth(IList<Vector3d> vertices, int iStart, int iEnd, double alpha, int nIterations, bool bClosed, Vector3d[] buffer = null) Parameters Type Name Description IList < Vector3d > vertices Int32 iStart Int32 iEnd Double alpha Int32 nIterations Boolean bClosed Vector3d [] buffer"
  },
  "api/g3.CurveUtils2.html": {
    "href": "api/g3.CurveUtils2.html",
    "title": "Class CurveUtils2 | ViRGIS VR GIS",
    "keywords": "Class CurveUtils2 Inheritance Object CurveUtils2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class CurveUtils2 Methods CentroidVtx(IEnumerable<Vector2d>) Declaration public static Vector2d CentroidVtx(IEnumerable<Vector2d> vertices) Parameters Type Name Description IEnumerable < Vector2d > vertices Returns Type Description Vector2d Convert(Polygon2d) Declaration public static IParametricCurve2d Convert(Polygon2d poly) Parameters Type Name Description Polygon2d poly Returns Type Description IParametricCurve2d Filter<T>(List<T>, Func<T, Boolean>) return list of objects for which keepF(obj) returns true Declaration public static List<T> Filter<T>(List<T> objects, Func<T, bool> keepF) Parameters Type Name Description List <T> objects Func <T, Boolean > keepF Returns Type Description List <T> Type Parameters Name Description T FilterDegenerate(List<GeneralPolygon2d>, Double) Remove polygons and polygon-holes smaller than minArea Declaration public static List<GeneralPolygon2d> FilterDegenerate(List<GeneralPolygon2d> polygons, double minArea) Parameters Type Name Description List < GeneralPolygon2d > polygons Double minArea Returns Type Description List < GeneralPolygon2d > FindNearestVertex(Vector2d, IEnumerable<Vector2d>) Declaration public static int FindNearestVertex(Vector2d pt, IEnumerable<Vector2d> vertices) Parameters Type Name Description Vector2d pt IEnumerable < Vector2d > vertices Returns Type Description Int32 Flatten(IParametricCurve2d) Declaration public static List<IParametricCurve2d> Flatten(IParametricCurve2d curve) Parameters Type Name Description IParametricCurve2d curve Returns Type Description List < IParametricCurve2d > Flatten(List<IParametricCurve2d>) Declaration public static List<IParametricCurve2d> Flatten(List<IParametricCurve2d> curves) Parameters Type Name Description List < IParametricCurve2d > curves Returns Type Description List < IParametricCurve2d > GetMaxOriginDistances(IEnumerable<Vector2d>) Declaration public static Vector2d GetMaxOriginDistances(IEnumerable<Vector2d> vertices) Parameters Type Name Description IEnumerable < Vector2d > vertices Returns Type Description Vector2d LaplacianSmooth(IList<Vector2d>, Double, Int32, Boolean, Boolean) Declaration public static void LaplacianSmooth(IList<Vector2d> vertices, double alpha, int iterations, bool is_loop, bool in_place = false) Parameters Type Name Description IList < Vector2d > vertices Double alpha Int32 iterations Boolean is_loop Boolean in_place LaplacianSmoothConstrained(GeneralPolygon2d, Double, Int32, Double, Boolean, Boolean) Declaration public static void LaplacianSmoothConstrained(GeneralPolygon2d solid, double alpha, int iterations, double max_dist, bool bAllowShrink, bool bAllowGrow) Parameters Type Name Description GeneralPolygon2d solid Double alpha Int32 iterations Double max_dist Boolean bAllowShrink Boolean bAllowGrow LaplacianSmoothConstrained(Polygon2d, Double, Int32, Double, Boolean, Boolean, Boolean) Constrained laplacian smoothing of input polygon, alpha X iterations. vertices are only allowed to move at most max_dist from constraint if bAllowShrink == false, vertices are kept outside input polygon if bAllowGrow == false, vertices are kept inside input polygon max_dist is measured from vertex[i] to original_vertex[i], unless you set bPerVertexDistances = false, then distance to original polygon is used (which is much more expensive) [TODO] this is pretty hacky...could be better in lots of ways... Declaration public static void LaplacianSmoothConstrained(Polygon2d poly, double alpha, int iterations, double max_dist, bool bAllowShrink, bool bAllowGrow, bool bPerVertexDistances = true) Parameters Type Name Description Polygon2d poly Double alpha Int32 iterations Double max_dist Boolean bAllowShrink Boolean bAllowGrow Boolean bPerVertexDistances LeafCurvesIteration(IParametricCurve2d) if the children of C are a tree, iterate through all the leaves Declaration public static IEnumerable<IParametricCurve2d> LeafCurvesIteration(IParametricCurve2d c) Parameters Type Name Description IParametricCurve2d c Returns Type Description IEnumerable < IParametricCurve2d > SampledDistance(IParametricCurve2d, Vector2d, Int32) Declaration public static double SampledDistance(IParametricCurve2d c, Vector2d point, int N = 100) Parameters Type Name Description IParametricCurve2d c Vector2d point Int32 N Returns Type Description Double Split<T>(List<T>, out List<T>, out List<T>, Func<T, Boolean>) Split the input list into two new lists, based on predicate (set1 == true) Declaration public static void Split<T>(List<T> objects, out List<T> set1, out List<T> set2, Func<T, bool> splitF) Parameters Type Name Description List <T> objects List <T> set1 List <T> set2 Func <T, Boolean > splitF Type Parameters Name Description T SplitToTargetLength(Polygon2d, Double) Declaration public static Polygon2d SplitToTargetLength(Polygon2d poly, double length) Parameters Type Name Description Polygon2d poly Double length Returns Type Description Polygon2d"
  },
  "api/g3.Cylinder3d.html": {
    "href": "api/g3.Cylinder3d.html",
    "title": "Class Cylinder3d | ViRGIS VR GIS",
    "keywords": "Class Cylinder3d Inheritance Object Cylinder3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Cylinder3d Constructors Cylinder3d(Frame3f, Double, Double, Int32) Declaration public Cylinder3d(Frame3f frame, double radius, double height, int nNormalAxis = 1) Parameters Type Name Description Frame3f frame Double radius Double height Int32 nNormalAxis Cylinder3d(Line3d, Double, Double) Declaration public Cylinder3d(Line3d axis, double radius, double height) Parameters Type Name Description Line3d axis Double radius Double height Cylinder3d(Vector3d, Vector3d, Double, Double) Declaration public Cylinder3d(Vector3d center, Vector3d axis, double radius, double height) Parameters Type Name Description Vector3d center Vector3d axis Double radius Double height Cylinder3d(Double, Double) Declaration public Cylinder3d(double radius, double height) Parameters Type Name Description Double radius Double height Fields Axis Declaration public Line3d Axis Field Value Type Description Line3d Height Declaration public double Height Field Value Type Description Double Radius Declaration public double Radius Field Value Type Description Double Properties Circumference Declaration public double Circumference { get; } Property Value Type Description Double Diameter Declaration public double Diameter { get; } Property Value Type Description Double Volume Declaration public double Volume { get; } Property Value Type Description Double"
  },
  "api/g3.CylinderProjectionTarget.html": {
    "href": "api/g3.CylinderProjectionTarget.html",
    "title": "Class CylinderProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class CylinderProjectionTarget Inheritance Object CylinderProjectionTarget Implements IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CylinderProjectionTarget : IProjectionTarget Fields Cylinder Declaration public Cylinder3d Cylinder Field Value Type Description Cylinder3d Methods Project(Vector3d, Int32) Declaration public Vector3d Project(Vector3d vPoint, int identifer = -1) Parameters Type Name Description Vector3d vPoint Int32 identifer Returns Type Description Vector3d Implements IProjectionTarget"
  },
  "api/g3.DCurve3.html": {
    "href": "api/g3.DCurve3.html",
    "title": "Class DCurve3 | ViRGIS VR GIS",
    "keywords": "Class DCurve3 DCurve3 is a 3D polyline, either open or closed (via .Closed) Despite the D prefix, it is not dynamic Inheritance Object DCurve3 Implements ISampledCurve3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DCurve3 : ISampledCurve3d Constructors DCurve3() Declaration public DCurve3() DCurve3(DCurve3) Declaration public DCurve3(DCurve3 copy) Parameters Type Name Description DCurve3 copy DCurve3(ISampledCurve3d) Declaration public DCurve3(ISampledCurve3d icurve) Parameters Type Name Description ISampledCurve3d icurve DCurve3(Polygon2d, Int32, Int32) Declaration public DCurve3(Polygon2d poly, int ix = 0, int iy = 1) Parameters Type Name Description Polygon2d poly Int32 ix Int32 iy DCurve3(IEnumerable<Vector3d>, Boolean) Declaration public DCurve3(IEnumerable<Vector3d> verticesIn, bool bClosed) Parameters Type Name Description IEnumerable < Vector3d > verticesIn Boolean bClosed DCurve3(List<Vector3d>, Boolean, Boolean) Declaration public DCurve3(List<Vector3d> verticesIn, bool bClosed, bool bTakeOwnership = false) Parameters Type Name Description List < Vector3d > verticesIn Boolean bClosed Boolean bTakeOwnership Fields Timestamp Declaration public int Timestamp Field Value Type Description Int32 vertices Declaration protected List<Vector3d> vertices Field Value Type Description List < Vector3d > Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Closed Declaration public bool Closed { get; set; } Property Value Type Description Boolean End Declaration public Vector3d End { get; } Property Value Type Description Vector3d Item[Int32] Declaration public Vector3d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3d SegmentCount Declaration public int SegmentCount { get; } Property Value Type Description Int32 Start Declaration public Vector3d Start { get; } Property Value Type Description Vector3d VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public IEnumerable<Vector3d> Vertices { get; } Property Value Type Description IEnumerable < Vector3d > Methods AppendVertex(Vector3d) Declaration public void AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v Centroid(Int32) Declaration public Vector3d Centroid(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d ClearVertices() Declaration public void ClearVertices() DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double DistanceSquared(Vector3d, out Int32, out Double) find squared distance from p to nearest segment on polyline Declaration public double DistanceSquared(Vector3d p, out int iNearSeg, out double fNearSegT) Parameters Type Name Description Vector3d p Int32 iNearSeg Double fNearSegT Returns Type Description Double GetBoundingBox() Declaration public AxisAlignedBox3d GetBoundingBox() Returns Type Description AxisAlignedBox3d GetSegment(Int32) Declaration public Segment3d GetSegment(int iSegment) Parameters Type Name Description Int32 iSegment Returns Type Description Segment3d GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d NearestVertex(Vector3d) Find nearest vertex to point p Declaration public int NearestVertex(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Int32 Neighbours(Int32) Declaration public Index2i Neighbours(int i) Parameters Type Name Description Int32 i Returns Type Description Index2i OpeningAngleDeg(Int32) Compute opening angle at vertex i in degrees Declaration public double OpeningAngleDeg(int i) Parameters Type Name Description Int32 i Returns Type Description Double PointAt(Int32, Double) Declaration public Vector3d PointAt(int iSegment, double fSegT) Parameters Type Name Description Int32 iSegment Double fSegT Returns Type Description Vector3d RemoveVertex(Int32) Declaration public void RemoveVertex(int idx) Parameters Type Name Description Int32 idx ResampleSharpTurns(Double, Double, Double) Resample curve so that: if opening angle at vertex is > sharp_thresh, we emit two more vertices at +/- corner_t, where the t is used in prev/next lerps if opening angle is > flat_thresh, we skip the vertex entirely (simplification) This is mainly useful to get nicer polylines to use as the basis for (eg) creating 3D tubes, rendering, etc [TODO] skip tiny segments? Declaration public DCurve3 ResampleSharpTurns(double sharp_thresh = 90, double flat_thresh = 189, double corner_t = 0.01) Parameters Type Name Description Double sharp_thresh Double flat_thresh Double corner_t Returns Type Description DCurve3 Reverse() Declaration public void Reverse() SegmentItr() Declaration public IEnumerable<Segment3d> SegmentItr() Returns Type Description IEnumerable < Segment3d > SetVertex(Int32, Vector3d) Declaration public void SetVertex(int i, Vector3d v) Parameters Type Name Description Int32 i Vector3d v SetVertices(VectorArray3d) Declaration public void SetVertices(VectorArray3d v) Parameters Type Name Description VectorArray3d v SetVertices(IEnumerable<Vector3d>) Declaration public void SetVertices(IEnumerable<Vector3d> v) Parameters Type Name Description IEnumerable < Vector3d > v SetVertices(List<Vector3d>, Boolean) Declaration public void SetVertices(List<Vector3d> vertices, bool bTakeOwnership) Parameters Type Name Description List < Vector3d > vertices Boolean bTakeOwnership Tangent(Int32) Declaration public Vector3d Tangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d Implements ISampledCurve3d"
  },
  "api/g3.DCurve3BoxTree.html": {
    "href": "api/g3.DCurve3BoxTree.html",
    "title": "Class DCurve3BoxTree | ViRGIS VR GIS",
    "keywords": "Class DCurve3BoxTree tree of Oriented Boxes (OBB) for a DCurve3. Construction is sequential, ie pairs of segments are merged into boxes, then pairs of boxes, and so on [TODO] is this the best strategy? is there maybe some kind of sorting/sweepline algo? [TODO] would it make more sense to have more than just 2 segments at lowest level? Inheritance Object DCurve3BoxTree Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DCurve3BoxTree Constructors DCurve3BoxTree(DCurve3) Declaration public DCurve3BoxTree(DCurve3 curve) Parameters Type Name Description DCurve3 curve Fields Curve Declaration public DCurve3 Curve Field Value Type Description DCurve3 Methods Distance(Vector3d) Declaration public double Distance(Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double FindClosestRayIntersction(Ray3d, Double, out Int32, out Double) Find min-distance between ray and curve. Pass max_dist if you only care about a certain distance TODO: not 100% sure this is working properly... ? Declaration public bool FindClosestRayIntersction(Ray3d ray, double radius, out int hitSegment, out double fRayT) Parameters Type Name Description Ray3d ray Double radius Int32 hitSegment Double fRayT Returns Type Description Boolean NearestPoint(Vector3d) Declaration public Vector3d NearestPoint(Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Vector3d SquaredDistance(Ray3d, out Int32, out Double, out Double, Double) Find min-distance between ray and curve. Pass max_dist if you only care about a certain distance TODO: not 100% sure this is working properly... ? Declaration public double SquaredDistance(Ray3d ray, out int iNearSeg, out double fNearSegT, out double fRayT, double max_dist = 1.7976931348623157E+308) Parameters Type Name Description Ray3d ray Int32 iNearSeg Double fNearSegT Double fRayT Double max_dist Returns Type Description Double SquaredDistance(Vector3d, out Int32, out Double, Double) Declaration public double SquaredDistance(Vector3d pt, out int iNearSeg, out double fNearSegT, double max_dist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d pt Int32 iNearSeg Double fNearSegT Double max_dist Returns Type Description Double"
  },
  "api/g3.DCurveProjectionTarget.html": {
    "href": "api/g3.DCurveProjectionTarget.html",
    "title": "Class DCurveProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class DCurveProjectionTarget Inheritance Object DCurveProjectionTarget Implements IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DCurveProjectionTarget : IProjectionTarget Constructors DCurveProjectionTarget(DCurve3) Declaration public DCurveProjectionTarget(DCurve3 curve) Parameters Type Name Description DCurve3 curve Fields Curve Declaration public DCurve3 Curve Field Value Type Description DCurve3 Methods Project(Vector3d, Int32) Declaration public Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Implements IProjectionTarget"
  },
  "api/g3.DeepCopy.html": {
    "href": "api/g3.DeepCopy.html",
    "title": "Class DeepCopy | ViRGIS VR GIS",
    "keywords": "Class DeepCopy Collection of utility functions for one-line deep copies of lists Inheritance Object DeepCopy Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class DeepCopy Methods Array<T>(IEnumerable<T>) Declaration public static T[] Array<T>(IEnumerable<T> Input) where T : IDuplicatable<T> Parameters Type Name Description IEnumerable <T> Input Returns Type Description T[] Type Parameters Name Description T List<T>(IEnumerable<T>) Declaration public static List<T> List<T>(IEnumerable<T> Input) where T : IDuplicatable<T> Parameters Type Name Description IEnumerable <T> Input Returns Type Description List <T> Type Parameters Name Description T"
  },
  "api/g3.DenseGrid2f.html": {
    "href": "api/g3.DenseGrid2f.html",
    "title": "Class DenseGrid2f | ViRGIS VR GIS",
    "keywords": "Class DenseGrid2f 2D dense grid of floating-point scalar values. Inheritance Object DenseGrid2f Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseGrid2f Constructors DenseGrid2f() Declaration public DenseGrid2f() DenseGrid2f(DenseGrid2f) Declaration public DenseGrid2f(DenseGrid2f copy) Parameters Type Name Description DenseGrid2f copy DenseGrid2f(Int32, Int32, Single) Declaration public DenseGrid2f(int ni, int nj, float initialValue) Parameters Type Name Description Int32 ni Int32 nj Single initialValue Fields Buffer Declaration public float[] Buffer Field Value Type Description Single [] ni Declaration public int ni Field Value Type Description Int32 nj Declaration public int nj Field Value Type Description Int32 Properties Bounds Declaration public AxisAlignedBox2i Bounds { get; } Property Value Type Description AxisAlignedBox2i Item[Vector2i] Declaration public float this[Vector2i ijk] { get; set; } Parameters Type Name Description Vector2i ijk Property Value Type Description Single Item[Int32] Declaration public float this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Single Item[Int32, Int32] Declaration public float this[int i, int j] { get; set; } Parameters Type Name Description Int32 i Int32 j Property Value Type Description Single size Declaration public int size { get; } Property Value Type Description Int32 Methods apply(Func<Single, Single>) Declaration public void apply(Func<float, float> f) Parameters Type Name Description Func < Single , Single > f assign(Single) Declaration public void assign(float value) Parameters Type Name Description Single value assign_border(Single, Int32) Declaration public void assign_border(float value, int rings) Parameters Type Name Description Single value Int32 rings clear() Declaration public void clear() copy(DenseGrid2f) Declaration public void copy(DenseGrid2f copy) Parameters Type Name Description DenseGrid2f copy get_x_pair(Int32, Int32, out Double, out Double) Declaration public void get_x_pair(int i0, int j, out double a, out double b) Parameters Type Name Description Int32 i0 Int32 j Double a Double b Indices() Declaration public IEnumerable<Vector2i> Indices() Returns Type Description IEnumerable < Vector2i > InsetIndices(Int32) Declaration public IEnumerable<Vector2i> InsetIndices(int border_width) Parameters Type Name Description Int32 border_width Returns Type Description IEnumerable < Vector2i > resize(Int32, Int32) Declaration public void resize(int ni, int nj) Parameters Type Name Description Int32 ni Int32 nj set_max(DenseGrid2f) Declaration public void set_max(DenseGrid2f grid2) Parameters Type Name Description DenseGrid2f grid2 set_min(DenseGrid2f) Declaration public void set_min(DenseGrid2f grid2) Parameters Type Name Description DenseGrid2f grid2 swap(DenseGrid2f) Declaration public void swap(DenseGrid2f g2) Parameters Type Name Description DenseGrid2f g2"
  },
  "api/g3.DenseGrid2i.html": {
    "href": "api/g3.DenseGrid2i.html",
    "title": "Class DenseGrid2i | ViRGIS VR GIS",
    "keywords": "Class DenseGrid2i 2D dense grid of integers. Inheritance Object DenseGrid2i Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseGrid2i Constructors DenseGrid2i() Declaration public DenseGrid2i() DenseGrid2i(DenseGrid2i) Declaration public DenseGrid2i(DenseGrid2i copy) Parameters Type Name Description DenseGrid2i copy DenseGrid2i(Int32, Int32, Int32) Declaration public DenseGrid2i(int ni, int nj, int initialValue) Parameters Type Name Description Int32 ni Int32 nj Int32 initialValue Fields Buffer Declaration public int[] Buffer Field Value Type Description Int32 [] ni Declaration public int ni Field Value Type Description Int32 nj Declaration public int nj Field Value Type Description Int32 Properties Item[Vector2i] Declaration public int this[Vector2i ijk] { get; set; } Parameters Type Name Description Vector2i ijk Property Value Type Description Int32 Item[Int32] Declaration public int this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Int32 Item[Int32, Int32] Declaration public int this[int i, int j] { get; set; } Parameters Type Name Description Int32 i Int32 j Property Value Type Description Int32 size Declaration public int size { get; } Property Value Type Description Int32 Methods assign(Int32) Declaration public void assign(int value) Parameters Type Name Description Int32 value atomic_decrement(Int32, Int32) Declaration public void atomic_decrement(int i, int j) Parameters Type Name Description Int32 i Int32 j atomic_incdec(Int32, Int32, Boolean) Declaration public void atomic_incdec(int i, int j, bool decrement = false) Parameters Type Name Description Int32 i Int32 j Boolean decrement atomic_increment(Int32, Int32) Declaration public void atomic_increment(int i, int j) Parameters Type Name Description Int32 i Int32 j clear() Declaration public void clear() copy(DenseGrid2i) Declaration public void copy(DenseGrid2i copy) Parameters Type Name Description DenseGrid2i copy decrement(Int32, Int32) Declaration public void decrement(int i, int j) Parameters Type Name Description Int32 i Int32 j increment(Int32, Int32) Declaration public void increment(int i, int j) Parameters Type Name Description Int32 i Int32 j Indices() Declaration public IEnumerable<Vector2i> Indices() Returns Type Description IEnumerable < Vector2i > InsetIndices(Int32) Declaration public IEnumerable<Vector2i> InsetIndices(int border_width) Parameters Type Name Description Int32 border_width Returns Type Description IEnumerable < Vector2i > resize(Int32, Int32) Declaration public void resize(int ni, int nj) Parameters Type Name Description Int32 ni Int32 nj sum() Declaration public int sum() Returns Type Description Int32"
  },
  "api/g3.DenseGrid3f.html": {
    "href": "api/g3.DenseGrid3f.html",
    "title": "Class DenseGrid3f | ViRGIS VR GIS",
    "keywords": "Class DenseGrid3f 3D dense grid of floating-point scalar values. Inheritance Object DenseGrid3f Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseGrid3f Constructors DenseGrid3f() Declaration public DenseGrid3f() DenseGrid3f(DenseGrid3f) Declaration public DenseGrid3f(DenseGrid3f copy) Parameters Type Name Description DenseGrid3f copy DenseGrid3f(Int32, Int32, Int32, Single) Declaration public DenseGrid3f(int ni, int nj, int nk, float initialValue) Parameters Type Name Description Int32 ni Int32 nj Int32 nk Single initialValue Fields Buffer Declaration public float[] Buffer Field Value Type Description Single [] ni Declaration public int ni Field Value Type Description Int32 nj Declaration public int nj Field Value Type Description Int32 nk Declaration public int nk Field Value Type Description Int32 Properties Bounds Declaration public AxisAlignedBox3i Bounds { get; } Property Value Type Description AxisAlignedBox3i BoundsInclusive Declaration public AxisAlignedBox3i BoundsInclusive { get; } Property Value Type Description AxisAlignedBox3i Item[Vector3i] Declaration public float this[Vector3i ijk] { get; set; } Parameters Type Name Description Vector3i ijk Property Value Type Description Single Item[Int32] Declaration public float this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Single Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; set; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single size Declaration public int size { get; } Property Value Type Description Int32 Methods apply(Func<Single, Single>) Declaration public void apply(Func<float, float> f) Parameters Type Name Description Func < Single , Single > f assign(Single) Declaration public void assign(float value) Parameters Type Name Description Single value get_slice(Int32, Int32) Declaration public DenseGrid2f get_slice(int slice_i, int dimension) Parameters Type Name Description Int32 slice_i Int32 dimension Returns Type Description DenseGrid2f get_x_pair(Int32, Int32, Int32, out Double, out Double) Declaration public void get_x_pair(int i0, int j, int k, out double a, out double b) Parameters Type Name Description Int32 i0 Int32 j Int32 k Double a Double b get_x_pair(Int32, Int32, Int32, out Single, out Single) Declaration public void get_x_pair(int i0, int j, int k, out float a, out float b) Parameters Type Name Description Int32 i0 Int32 j Int32 k Single a Single b Indices() Declaration public IEnumerable<Vector3i> Indices() Returns Type Description IEnumerable < Vector3i > InsetIndices(Int32) Declaration public IEnumerable<Vector3i> InsetIndices(int border_width) Parameters Type Name Description Int32 border_width Returns Type Description IEnumerable < Vector3i > resize(Int32, Int32, Int32) Declaration public void resize(int ni, int nj, int nk) Parameters Type Name Description Int32 ni Int32 nj Int32 nk set_max(ref Vector3i, Single) Declaration public void set_max(ref Vector3i ijk, float f) Parameters Type Name Description Vector3i ijk Single f set_min(ref Vector3i, Single) Declaration public void set_min(ref Vector3i ijk, float f) Parameters Type Name Description Vector3i ijk Single f set_slice(DenseGrid2f, Int32, Int32) Declaration public void set_slice(DenseGrid2f slice, int slice_i, int dimension) Parameters Type Name Description DenseGrid2f slice Int32 slice_i Int32 dimension swap(DenseGrid3f) Declaration public void swap(DenseGrid3f g2) Parameters Type Name Description DenseGrid3f g2 to_index(Int32) Declaration public Vector3i to_index(int idx) Parameters Type Name Description Int32 idx Returns Type Description Vector3i to_linear(Vector3i) Declaration public int to_linear(Vector3i ijk) Parameters Type Name Description Vector3i ijk Returns Type Description Int32 to_linear(ref Vector3i) Declaration public int to_linear(ref Vector3i ijk) Parameters Type Name Description Vector3i ijk Returns Type Description Int32 to_linear(Int32, Int32, Int32) Declaration public int to_linear(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Int32"
  },
  "api/g3.DenseGrid3i.html": {
    "href": "api/g3.DenseGrid3i.html",
    "title": "Class DenseGrid3i | ViRGIS VR GIS",
    "keywords": "Class DenseGrid3i 3D dense grid of integers. Inheritance Object DenseGrid3i Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseGrid3i Constructors DenseGrid3i() Declaration public DenseGrid3i() DenseGrid3i(Int32, Int32, Int32, Int32) Declaration public DenseGrid3i(int ni, int nj, int nk, int initialValue) Parameters Type Name Description Int32 ni Int32 nj Int32 nk Int32 initialValue Fields Buffer Declaration public int[] Buffer Field Value Type Description Int32 [] ni Declaration public int ni Field Value Type Description Int32 nj Declaration public int nj Field Value Type Description Int32 nk Declaration public int nk Field Value Type Description Int32 Properties Item[Vector3i] Declaration public int this[Vector3i ijk] { get; set; } Parameters Type Name Description Vector3i ijk Property Value Type Description Int32 Item[Int32] Declaration public int this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Int32 Item[Int32, Int32, Int32] Declaration public int this[int i, int j, int k] { get; set; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Int32 size Declaration public int size { get; } Property Value Type Description Int32 Methods assign(Int32) Declaration public void assign(int value) Parameters Type Name Description Int32 value atomic_decrement(Int32, Int32, Int32) Declaration public void atomic_decrement(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k atomic_incdec(Int32, Int32, Int32, Boolean) Declaration public void atomic_incdec(int i, int j, int k, bool decrement = false) Parameters Type Name Description Int32 i Int32 j Int32 k Boolean decrement atomic_increment(Int32, Int32, Int32) Declaration public void atomic_increment(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k decrement(Int32, Int32, Int32) Declaration public void decrement(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k get_bitmap(Int32) convert to binary bitmap Declaration public Bitmap3 get_bitmap(int thresh = 0) Parameters Type Name Description Int32 thresh Returns Type Description Bitmap3 get_slice(Int32, Int32) Declaration public DenseGrid2i get_slice(int slice_i, int dimension) Parameters Type Name Description Int32 slice_i Int32 dimension Returns Type Description DenseGrid2i increment(Int32, Int32, Int32) Declaration public void increment(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Indices() Declaration public IEnumerable<Vector3i> Indices() Returns Type Description IEnumerable < Vector3i > InsetIndices(Int32) Declaration public IEnumerable<Vector3i> InsetIndices(int border_width) Parameters Type Name Description Int32 border_width Returns Type Description IEnumerable < Vector3i > resize(Int32, Int32, Int32) Declaration public void resize(int ni, int nj, int nk) Parameters Type Name Description Int32 ni Int32 nj Int32 nk"
  },
  "api/g3.DenseGridTrilinearImplicit.html": {
    "href": "api/g3.DenseGridTrilinearImplicit.html",
    "title": "Class DenseGridTrilinearImplicit | ViRGIS VR GIS",
    "keywords": "Class DenseGridTrilinearImplicit Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. Inheritance Object DenseGridTrilinearImplicit Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseGridTrilinearImplicit : BoundedImplicitFunction3d, ImplicitFunction3d Constructors DenseGridTrilinearImplicit(DenseGrid3f, Vector3d, Double) Declaration public DenseGridTrilinearImplicit(DenseGrid3f grid, Vector3d gridOrigin, double cellSize) Parameters Type Name Description DenseGrid3f grid Vector3d gridOrigin Double cellSize DenseGridTrilinearImplicit(MeshSignedDistanceGrid) Declaration public DenseGridTrilinearImplicit(MeshSignedDistanceGrid sdf_grid) Parameters Type Name Description MeshSignedDistanceGrid sdf_grid Fields CellSize Declaration public double CellSize Field Value Type Description Double Grid Declaration public DenseGrid3f Grid Field Value Type Description DenseGrid3f GridOrigin Declaration public Vector3d GridOrigin Field Value Type Description Vector3d Outside Declaration public double Outside Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Gradient(ref Vector3d) Declaration public Vector3d Gradient(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Vector3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.DenseMatrix.html": {
    "href": "api/g3.DenseMatrix.html",
    "title": "Class DenseMatrix | ViRGIS VR GIS",
    "keywords": "Class DenseMatrix Row-major dense matrix Inheritance Object DenseMatrix Implements IMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseMatrix : IMatrix Constructors DenseMatrix(DenseMatrix) Declaration public DenseMatrix(DenseMatrix copy) Parameters Type Name Description DenseMatrix copy DenseMatrix(Int32, Int32) Declaration public DenseMatrix(int Nrows, int Mcols) Parameters Type Name Description Int32 Nrows Int32 Mcols Properties Buffer Declaration public double[] Buffer { get; } Property Value Type Description Double [] Columns Declaration public int Columns { get; } Property Value Type Description Int32 Item[Int32] Declaration public double this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Double Item[Int32, Int32] Declaration public double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Length Declaration public int Length { get; } Property Value Type Description Int32 Rows Declaration public int Rows { get; } Property Value Type Description Int32 Size Declaration public Index2i Size { get; } Property Value Type Description Index2i Methods Add(DenseMatrix) Declaration public void Add(DenseMatrix M2) Parameters Type Name Description DenseMatrix M2 Add(IMatrix) Declaration public void Add(IMatrix M2) Parameters Type Name Description IMatrix M2 Column(Int32) Declaration public DenseVector Column(int c) Parameters Type Name Description Int32 c Returns Type Description DenseVector Diagonal() Declaration public DenseVector Diagonal() Returns Type Description DenseVector EpsilonEquals(DenseMatrix, Double) Declaration public bool EpsilonEquals(DenseMatrix m2, double epsilon = 1E-08) Parameters Type Name Description DenseMatrix m2 Double epsilon Returns Type Description Boolean IsPositiveDefinite() Declaration public bool IsPositiveDefinite() Returns Type Description Boolean IsSymmetric(Double) Declaration public bool IsSymmetric(double dTolerance = 2.2204460492503131E-16) Parameters Type Name Description Double dTolerance Returns Type Description Boolean MulAdd(DenseMatrix, Double) Declaration public void MulAdd(DenseMatrix M2, double s) Parameters Type Name Description DenseMatrix M2 Double s MulAdd(IMatrix, Double) Declaration public void MulAdd(IMatrix M2, double s) Parameters Type Name Description IMatrix M2 Double s Multiply(DenseMatrix, ref DenseMatrix, Boolean) Declaration public void Multiply(DenseMatrix M2, ref DenseMatrix R, bool bParallel = true) Parameters Type Name Description DenseMatrix M2 DenseMatrix R Boolean bParallel Multiply(DenseMatrix, Boolean) Declaration public DenseMatrix Multiply(DenseMatrix M2, bool bParallel = true) Parameters Type Name Description DenseMatrix M2 Boolean bParallel Returns Type Description DenseMatrix Multiply(DenseVector) Declaration public DenseVector Multiply(DenseVector X) Parameters Type Name Description DenseVector X Returns Type Description DenseVector Multiply(DenseVector, DenseVector) Declaration public void Multiply(DenseVector X, DenseVector R) Parameters Type Name Description DenseVector X DenseVector R Multiply(Double[], Double[]) Declaration public void Multiply(double[] X, double[] Result) Parameters Type Name Description Double [] X Double [] Result Row(Int32) Declaration public DenseVector Row(int r) Parameters Type Name Description Int32 r Returns Type Description DenseVector Set(Double[]) Declaration public void Set(double[] values) Parameters Type Name Description Double [] values Set(Int32, Int32, Double) Declaration public void Set(int r, int c, double value) Parameters Type Name Description Int32 r Int32 c Double value Transpose() Declaration public DenseMatrix Transpose() Returns Type Description DenseMatrix TransposeInPlace() Declaration public void TransposeInPlace() Implements IMatrix"
  },
  "api/g3.DenseUVMesh.html": {
    "href": "api/g3.DenseUVMesh.html",
    "title": "Class DenseUVMesh | ViRGIS VR GIS",
    "keywords": "Class DenseUVMesh Inheritance Object DenseUVMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseUVMesh Constructors DenseUVMesh() Declaration public DenseUVMesh() Fields TriangleUVs Declaration public DVector<Index3i> TriangleUVs Field Value Type Description DVector < Index3i > UVs Declaration public DVector<Vector2f> UVs Field Value Type Description DVector < Vector2f > Methods AppendUV(Vector2f) Declaration public int AppendUV(Vector2f uv) Parameters Type Name Description Vector2f uv Returns Type Description Int32"
  },
  "api/g3.DenseVector.html": {
    "href": "api/g3.DenseVector.html",
    "title": "Class DenseVector | ViRGIS VR GIS",
    "keywords": "Class DenseVector Inheritance Object DenseVector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DenseVector Constructors DenseVector(Int32) Declaration public DenseVector(int N) Parameters Type Name Description Int32 N Properties Buffer Declaration public double[] Buffer { get; } Property Value Type Description Double [] Item[Int32] Declaration public double this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Double Length Declaration public int Length { get; } Property Value Type Description Int32 Size Declaration public int Size { get; } Property Value Type Description Int32 Methods Dot(DenseVector) Declaration public double Dot(DenseVector v2) Parameters Type Name Description DenseVector v2 Returns Type Description Double Dot(Double[]) Declaration public double Dot(double[] v2) Parameters Type Name Description Double [] v2 Returns Type Description Double Set(Int32, Double) Declaration public void Set(int i, double value) Parameters Type Name Description Int32 i Double value"
  },
  "api/g3.DGraph.EdgeCollapseInfo.html": {
    "href": "api/g3.DGraph.EdgeCollapseInfo.html",
    "title": "Struct DGraph.EdgeCollapseInfo | ViRGIS VR GIS",
    "keywords": "Struct DGraph.EdgeCollapseInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeCollapseInfo Fields eCollapsed Declaration public int eCollapsed Field Value Type Description Int32 vKept Declaration public int vKept Field Value Type Description Int32 vRemoved Declaration public int vRemoved Field Value Type Description Int32"
  },
  "api/g3.DGraph.EdgeSplitInfo.html": {
    "href": "api/g3.DGraph.EdgeSplitInfo.html",
    "title": "Struct DGraph.EdgeSplitInfo | ViRGIS VR GIS",
    "keywords": "Struct DGraph.EdgeSplitInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeSplitInfo Fields eNewBN Declaration public int eNewBN Field Value Type Description Int32 vNew Declaration public int vNew Field Value Type Description Int32"
  },
  "api/g3.DGraph.FailMode.html": {
    "href": "api/g3.DGraph.FailMode.html",
    "title": "Enum DGraph.FailMode | ViRGIS VR GIS",
    "keywords": "Enum DGraph.FailMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum FailMode Fields Name Description DebugAssert gDevAssert ReturnOnly Throw"
  },
  "api/g3.DGraph.html": {
    "href": "api/g3.DGraph.html",
    "title": "Class DGraph | ViRGIS VR GIS",
    "keywords": "Class DGraph Base class for Arbitrary-Topology Graphs. Similar structure to topology parts of DMesh3. Each vertex can be connected to an arbitrary number of edges. Each edge can have an integer GroupID. See DGraph2 and DGraph3 for 3d implementations. Use DGraphN if you would like a topology-only graph. You cannot instantiate DGraph directly. Inheritance Object DGraph DGraph2 DGraph3 DGraphN Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class DGraph Constructors DGraph() Declaration public DGraph() Fields DuplicateEdgeID Declaration public const int DuplicateEdgeID = -2 Field Value Type Description Int32 edges Declaration protected DVector<int> edges Field Value Type Description DVector < Int32 > edges_refcount Declaration protected RefCountVector edges_refcount Field Value Type Description RefCountVector InvalidEdge3 Declaration public static readonly Index3i InvalidEdge3 Field Value Type Description Index3i InvalidEdgeV Declaration public static readonly Index2i InvalidEdgeV Field Value Type Description Index2i InvalidID Declaration public const int InvalidID = -1 Field Value Type Description Int32 max_group_id Declaration protected int max_group_id Field Value Type Description Int32 shape_timestamp Declaration protected int shape_timestamp Field Value Type Description Int32 timestamp Declaration protected int timestamp Field Value Type Description Int32 vertex_edges Declaration protected DVector<List<int>> vertex_edges Field Value Type Description DVector < List < Int32 >> vertices_refcount Declaration protected RefCountVector vertices_refcount Field Value Type Description RefCountVector Properties EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 IsCompact Declaration public bool IsCompact { get; } Property Value Type Description Boolean IsCompactV Declaration public bool IsCompactV { get; } Property Value Type Description Boolean MaxEdgeID Declaration public int MaxEdgeID { get; } Property Value Type Description Int32 MaxGroupID Declaration public int MaxGroupID { get; } Property Value Type Description Int32 MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 ShapeTimestamp Declaration public int ShapeTimestamp { get; } Property Value Type Description Int32 Timestamp Declaration public int Timestamp { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods add_edge(Int32, Int32, Int32) Declaration protected int add_edge(int a, int b, int gid) Parameters Type Name Description Int32 a Int32 b Int32 gid Returns Type Description Int32 AllocateEdgeGroup() Declaration public int AllocateEdgeGroup() Returns Type Description Int32 append_new_split_vertex(Int32, Int32) Declaration protected virtual int append_new_split_vertex(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32 append_vertex_internal() Declaration protected int append_vertex_internal() Returns Type Description Int32 AppendEdge(Index2i, Int32) Declaration public int AppendEdge(Index2i ev, int gid = -1) Parameters Type Name Description Index2i ev Int32 gid Returns Type Description Int32 AppendEdge(Int32, Int32, Int32) Declaration public int AppendEdge(int v0, int v1, int gid = -1) Parameters Type Name Description Int32 v0 Int32 v1 Int32 gid Returns Type Description Int32 CheckValidity(DGraph.FailMode) Declaration public virtual bool CheckValidity(DGraph.FailMode eFailMode = DGraph.FailMode.Throw) Parameters Type Name Description DGraph.FailMode eFailMode Returns Type Description Boolean CollapseEdge(Int32, Int32, out DGraph.EdgeCollapseInfo) Declaration public MeshResult CollapseEdge(int vKeep, int vRemove, out DGraph.EdgeCollapseInfo collapse) Parameters Type Name Description Int32 vKeep Int32 vRemove DGraph.EdgeCollapseInfo collapse Returns Type Description MeshResult debug_check_is_edge(Int32) Declaration public void debug_check_is_edge(int e) Parameters Type Name Description Int32 e debug_check_is_vertex(Int32) Declaration public void debug_check_is_vertex(int v) Parameters Type Name Description Int32 v edge_has_v(Int32, Int32) Declaration protected bool edge_has_v(int eid, int vid) Parameters Type Name Description Int32 eid Int32 vid Returns Type Description Boolean edge_other_v(Int32, Int32) Declaration protected int edge_other_v(int eID, int vID) Parameters Type Name Description Int32 eID Int32 vID Returns Type Description Int32 EdgeIndices() Declaration public IEnumerable<int> EdgeIndices() Returns Type Description IEnumerable < Int32 > Edges() Declaration public IEnumerable<Index3i> Edges() Returns Type Description IEnumerable < Index3i > FindEdge(Int32, Int32) Declaration public int FindEdge(int vA, int vB) Parameters Type Name Description Int32 vA Int32 vB Returns Type Description Int32 GetEdge(Int32) Declaration public Index3i GetEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index3i GetEdgeGroup(Int32) Declaration public int GetEdgeGroup(int eid) Parameters Type Name Description Int32 eid Returns Type Description Int32 GetEdgeV(Int32) Declaration public Index2i GetEdgeV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetMaxVtxEdgeCount() Declaration public int GetMaxVtxEdgeCount() Returns Type Description Int32 GetVtxEdgeCount(Int32) Declaration public int GetVtxEdgeCount(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 GetVtxEdges(Int32) Declaration public ReadOnlyCollection<int> GetVtxEdges(int vID) Parameters Type Name Description Int32 vID Returns Type Description ReadOnlyCollection < Int32 > IsBoundaryVertex(Int32) Declaration public bool IsBoundaryVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsEdge(Int32) Declaration public bool IsEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Boolean IsJunctionVertex(Int32) Declaration public bool IsJunctionVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsRegularVertex(Int32) Declaration public bool IsRegularVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean RemoveEdge(Int32, Boolean) Declaration public MeshResult RemoveEdge(int eID, bool bRemoveIsolatedVertices) Parameters Type Name Description Int32 eID Boolean bRemoveIsolatedVertices Returns Type Description MeshResult RemoveVertex(Int32, Boolean) Declaration public MeshResult RemoveVertex(int vid, bool bRemoveIsolatedVertices) Parameters Type Name Description Int32 vid Boolean bRemoveIsolatedVertices Returns Type Description MeshResult replace_edge_vertex(Int32, Int32, Int32) Declaration protected int replace_edge_vertex(int eID, int vOld, int vNew) Parameters Type Name Description Int32 eID Int32 vOld Int32 vNew Returns Type Description Int32 SetEdgeGroup(Int32, Int32) Declaration public void SetEdgeGroup(int eid, int group_id) Parameters Type Name Description Int32 eid Int32 group_id SplitEdge(Int32, out DGraph.EdgeSplitInfo) Declaration public MeshResult SplitEdge(int eab, out DGraph.EdgeSplitInfo split) Parameters Type Name Description Int32 eab DGraph.EdgeSplitInfo split Returns Type Description MeshResult SplitEdge(Int32, Int32, out DGraph.EdgeSplitInfo) Declaration public MeshResult SplitEdge(int vA, int vB, out DGraph.EdgeSplitInfo split) Parameters Type Name Description Int32 vA Int32 vB DGraph.EdgeSplitInfo split Returns Type Description MeshResult subclass_validity_checks(Action<Boolean>) Declaration protected virtual void subclass_validity_checks(Action<bool> CheckOrFailF) Parameters Type Name Description Action < Boolean > CheckOrFailF updateTimeStamp(Boolean) Declaration protected void updateTimeStamp(bool bShapeChange) Parameters Type Name Description Boolean bShapeChange VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > VtxEdgesItr(Int32) Declaration public IEnumerable<int> VtxEdgesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > VtxVerticesItr(Int32) Declaration public IEnumerable<int> VtxVerticesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 >"
  },
  "api/g3.DGraph2.html": {
    "href": "api/g3.DGraph2.html",
    "title": "Class DGraph2 | ViRGIS VR GIS",
    "keywords": "Class DGraph2 Arbitrary-Topology 2D Graph. This is similar to DMesh3 but without faces. Each vertex can be connected to an arbitrary number of edges. Each vertex can have a 3-float color, and edge edge can have an integer GroupID Inheritance Object DGraph DGraph2 Inherited Members DGraph.InvalidID DGraph.DuplicateEdgeID DGraph.InvalidEdgeV DGraph.InvalidEdge3 DGraph.vertices_refcount DGraph.vertex_edges DGraph.edges_refcount DGraph.edges DGraph.timestamp DGraph.shape_timestamp DGraph.max_group_id DGraph.updateTimeStamp(Boolean) DGraph.Timestamp DGraph.ShapeTimestamp DGraph.VertexCount DGraph.EdgeCount DGraph.MaxVertexID DGraph.MaxEdgeID DGraph.MaxGroupID DGraph.IsVertex(Int32) DGraph.IsEdge(Int32) DGraph.GetVtxEdges(Int32) DGraph.GetVtxEdgeCount(Int32) DGraph.GetMaxVtxEdgeCount() DGraph.GetEdgeGroup(Int32) DGraph.SetEdgeGroup(Int32, Int32) DGraph.AllocateEdgeGroup() DGraph.GetEdgeV(Int32) DGraph.GetEdge(Int32) DGraph.append_vertex_internal() DGraph.AppendEdge(Int32, Int32, Int32) DGraph.AppendEdge(Index2i, Int32) DGraph.add_edge(Int32, Int32, Int32) DGraph.VertexIndices() DGraph.EdgeIndices() DGraph.Edges() DGraph.VtxVerticesItr(Int32) DGraph.VtxEdgesItr(Int32) DGraph.FindEdge(Int32, Int32) DGraph.RemoveEdge(Int32, Boolean) DGraph.RemoveVertex(Int32, Boolean) DGraph.SplitEdge(Int32, Int32, DGraph.EdgeSplitInfo) DGraph.SplitEdge(Int32, DGraph.EdgeSplitInfo) DGraph.CollapseEdge(Int32, Int32, DGraph.EdgeCollapseInfo) DGraph.edge_has_v(Int32, Int32) DGraph.edge_other_v(Int32, Int32) DGraph.replace_edge_vertex(Int32, Int32, Int32) DGraph.IsCompact DGraph.IsCompactV DGraph.IsBoundaryVertex(Int32) DGraph.IsJunctionVertex(Int32) DGraph.IsRegularVertex(Int32) DGraph.CheckValidity(DGraph.FailMode) DGraph.debug_check_is_vertex(Int32) DGraph.debug_check_is_edge(Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DGraph2 : DGraph Constructors DGraph2() Declaration public DGraph2() DGraph2(DGraph2) Declaration public DGraph2(DGraph2 copy) Parameters Type Name Description DGraph2 copy Fields InvalidVertex Declaration public static readonly Vector2d InvalidVertex Field Value Type Description Vector2d Properties CachedBounds Declaration public AxisAlignedBox2d CachedBounds { get; } Property Value Type Description AxisAlignedBox2d HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean Methods append_new_split_vertex(Int32, Int32) Declaration protected override int append_new_split_vertex(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32 Overrides DGraph.append_new_split_vertex(Int32, Int32) AppendGraph(DGraph2, Int32) Declaration public void AppendGraph(DGraph2 graph, int gid = -1) Parameters Type Name Description DGraph2 graph Int32 gid AppendPolygon(GeneralPolygon2d, Int32) Declaration public void AppendPolygon(GeneralPolygon2d poly, int gid = -1) Parameters Type Name Description GeneralPolygon2d poly Int32 gid AppendPolygon(Polygon2d, Int32) Declaration public void AppendPolygon(Polygon2d poly, int gid = -1) Parameters Type Name Description Polygon2d poly Int32 gid AppendPolyline(PolyLine2d, Int32) Declaration public void AppendPolyline(PolyLine2d poly, int gid = -1) Parameters Type Name Description PolyLine2d poly Int32 gid AppendVertex(Vector2d) Declaration public int AppendVertex(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Int32 AppendVertex(Vector2d, Vector3f) Declaration public int AppendVertex(Vector2d v, Vector3f c) Parameters Type Name Description Vector2d v Vector3f c Returns Type Description Int32 DiscardVertexColors() Declaration public void DiscardVertexColors() EnableVertexColors(Vector3f) Declaration public void EnableVertexColors(Vector3f initial_color) Parameters Type Name Description Vector3f initial_color GetBounds() Declaration public AxisAlignedBox2d GetBounds() Returns Type Description AxisAlignedBox2d GetEdgeCenter(Int32) Declaration public Vector2d GetEdgeCenter(int eID) Parameters Type Name Description Int32 eID Returns Type Description Vector2d GetEdgeSegment(Int32) Declaration public Segment2d GetEdgeSegment(int eID) Parameters Type Name Description Int32 eID Returns Type Description Segment2d GetEdgeV(Int32, ref Vector2d, ref Vector2d) Declaration public bool GetEdgeV(int eID, ref Vector2d a, ref Vector2d b) Parameters Type Name Description Int32 eID Vector2d a Vector2d b Returns Type Description Boolean GetVertex(Int32) Declaration public Vector2d GetVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector2d GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f OpeningAngle(Int32, Double) Compute opening angle at vertex vID. If not a vertex, or valence != 2, returns invalidValue argument. If either edge is degenerate, returns invalidValue argument. Declaration public double OpeningAngle(int vID, double invalidValue = 1.7976931348623157E+308) Parameters Type Name Description Int32 vID Double invalidValue Returns Type Description Double SetVertex(Int32, Vector2d) Declaration public void SetVertex(int vID, Vector2d vNewPos) Parameters Type Name Description Int32 vID Vector2d vNewPos SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int vID, Vector3f vNewColor) Parameters Type Name Description Int32 vID Vector3f vNewColor SortedVtxEdges(Int32) return edges around vID sorted by angle, in clockwise order Declaration public int[] SortedVtxEdges(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 [] subclass_validity_checks(Action<Boolean>) Declaration protected override void subclass_validity_checks(Action<bool> CheckOrFailF) Parameters Type Name Description Action < Boolean > CheckOrFailF Overrides DGraph.subclass_validity_checks(Action<Boolean>) Vertices() Declaration public IEnumerable<Vector2d> Vertices() Returns Type Description IEnumerable < Vector2d >"
  },
  "api/g3.DGraph2Resampler.html": {
    "href": "api/g3.DGraph2Resampler.html",
    "title": "Class DGraph2Resampler | ViRGIS VR GIS",
    "keywords": "Class DGraph2Resampler \"Remesher\" for DGraph2 Inheritance Object DGraph2Resampler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DGraph2Resampler Constructors DGraph2Resampler(DGraph2) Declaration public DGraph2Resampler(DGraph2 graph) Parameters Type Name Description DGraph2 graph Fields FixedEdgeFilterF Declaration public Func<int, bool> FixedEdgeFilterF Field Value Type Description Func < Int32 , Boolean > Graph Declaration public DGraph2 Graph Field Value Type Description DGraph2 Methods CollapseDegenerateEdges(Double) Declaration public void CollapseDegenerateEdges(double fDegenLenThresh = 1.1920928955078125E-07) Parameters Type Name Description Double fDegenLenThresh CollapseFlatVertices(Double) Remove vertices that are colinear w/ their two neighbours, within angle tolerance Declaration public void CollapseFlatVertices(double fMaxDeviationDeg = 5) Parameters Type Name Description Double fMaxDeviationDeg CollapseToMinEdgeLength(Double) Declaration public void CollapseToMinEdgeLength(double fMinLen) Parameters Type Name Description Double fMinLen SplitToMaxEdgeLength(Double) Declaration public void SplitToMaxEdgeLength(double fMaxLen) Parameters Type Name Description Double fMaxLen"
  },
  "api/g3.DGraph2Util.Curves.html": {
    "href": "api/g3.DGraph2Util.Curves.html",
    "title": "Class DGraph2Util.Curves | ViRGIS VR GIS",
    "keywords": "Class DGraph2Util.Curves Inheritance Object DGraph2Util.Curves Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Curves Fields Loops Declaration public List<Polygon2d> Loops Field Value Type Description List < Polygon2d > Paths Declaration public List<PolyLine2d> Paths Field Value Type Description List < PolyLine2d >"
  },
  "api/g3.DGraph2Util.html": {
    "href": "api/g3.DGraph2Util.html",
    "title": "Class DGraph2Util | ViRGIS VR GIS",
    "keywords": "Class DGraph2Util Utility functions for DGraph2 data structure Inheritance Object DGraph2Util Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class DGraph2Util Methods ChainOpenPaths(DGraph2Util.Curves, Double) merge members of c.Paths that have unique endpoint pairings. Does not extract closed loops that contain junction vertices, unless the 'other' end of those junctions is dangling. Also, horribly innefficient! Declaration public static void ChainOpenPaths(DGraph2Util.Curves c, double epsilon = 2.2204460492503131E-16) Parameters Type Name Description DGraph2Util.Curves c Double epsilon DisconnectJunction(DGraph2, Int32, Double) foreach edge [vid,b] connected to junction vertex vid, remove, add new vertex c, and then add new edge [b,c]. Optionally move c a bit back along edge from vid. Declaration public static void DisconnectJunction(DGraph2 graph, int vid, double shrinkFactor = 1) Parameters Type Name Description DGraph2 graph Int32 vid Double shrinkFactor DisconnectJunctions(DGraph2) Find and remove any junction (ie valence>2) vertices of the graph. At a junction, the pair of best-aligned (ie straightest) edges are left connected, and all the other edges are disconnected [TODO] currently there is no DGraph2.SetEdge(), so the 'other' edges are deleted and new edges inserted. Hence, edge IDs are not preserved. Declaration public static int DisconnectJunctions(DGraph2 graph) Parameters Type Name Description DGraph2 graph Returns Type Description Int32 ExtractCurves(DGraph2) Decompose graph into simple polylines and polygons. Declaration public static DGraph2Util.Curves ExtractCurves(DGraph2 graph) Parameters Type Name Description DGraph2 graph Returns Type Description DGraph2Util.Curves FindRayIntersection(Vector2d, Vector2d, out Int32, out Double, DGraph2) Declaration public static bool FindRayIntersection(Vector2d o, Vector2d d, out int hit_eid, out double hit_ray_t, DGraph2 graph) Parameters Type Name Description Vector2d o Vector2d d Int32 hit_eid Double hit_ray_t DGraph2 graph Returns Type Description Boolean NextEdgeAndVtx(Int32, Int32, DGraph2) If we are at edge eid, which as one vertex prev_vid, find 'other' vertex, and other edge connected to that vertex, and return pair [next_edge, shared_vtx] Returns [int.MaxValue, shared_vtx] if shared_vtx is not valence=2 (ie stops at boundaries and complex junctions) Declaration public static Index2i NextEdgeAndVtx(int eid, int prev_vid, DGraph2 graph) Parameters Type Name Description Int32 eid Int32 prev_vid DGraph2 graph Returns Type Description Index2i PathLength(DGraph2, IList<Int32>) compute length of path through graph Declaration public static double PathLength(DGraph2 graph, IList<int> pathVertices) Parameters Type Name Description DGraph2 graph IList < Int32 > pathVertices Returns Type Description Double VertexLaplacian(DGraph2, Int32, out Boolean) If vid has two or more neighbours, returns uniform laplacian, otherwise returns vid position Declaration public static Vector2d VertexLaplacian(DGraph2 graph, int vid, out bool isValid) Parameters Type Name Description DGraph2 graph Int32 vid Boolean isValid Returns Type Description Vector2d WalkToNextNonRegularVtx(DGraph2, Int32, Int32) walk through graph from fromVtx, in direction of eid, until we hit the next junction vertex Declaration public static List<int> WalkToNextNonRegularVtx(DGraph2 graph, int fromVtx, int eid) Parameters Type Name Description DGraph2 graph Int32 fromVtx Int32 eid Returns Type Description List < Int32 >"
  },
  "api/g3.DGraph3.html": {
    "href": "api/g3.DGraph3.html",
    "title": "Class DGraph3 | ViRGIS VR GIS",
    "keywords": "Class DGraph3 Arbitrary-Topology 3D Graph. This is similar to DMesh3 but without faces. Each vertex can be connected to an arbitrary number of edges. Each vertex can have a 3-float color, and edge edge can have an integer GroupID Inheritance Object DGraph DGraph3 Inherited Members DGraph.InvalidID DGraph.DuplicateEdgeID DGraph.InvalidEdgeV DGraph.InvalidEdge3 DGraph.vertices_refcount DGraph.vertex_edges DGraph.edges_refcount DGraph.edges DGraph.timestamp DGraph.shape_timestamp DGraph.max_group_id DGraph.updateTimeStamp(Boolean) DGraph.Timestamp DGraph.ShapeTimestamp DGraph.VertexCount DGraph.EdgeCount DGraph.MaxVertexID DGraph.MaxEdgeID DGraph.MaxGroupID DGraph.IsVertex(Int32) DGraph.IsEdge(Int32) DGraph.GetVtxEdges(Int32) DGraph.GetVtxEdgeCount(Int32) DGraph.GetMaxVtxEdgeCount() DGraph.GetEdgeGroup(Int32) DGraph.SetEdgeGroup(Int32, Int32) DGraph.AllocateEdgeGroup() DGraph.GetEdgeV(Int32) DGraph.GetEdge(Int32) DGraph.append_vertex_internal() DGraph.AppendEdge(Int32, Int32, Int32) DGraph.AppendEdge(Index2i, Int32) DGraph.add_edge(Int32, Int32, Int32) DGraph.VertexIndices() DGraph.EdgeIndices() DGraph.Edges() DGraph.VtxVerticesItr(Int32) DGraph.VtxEdgesItr(Int32) DGraph.FindEdge(Int32, Int32) DGraph.RemoveEdge(Int32, Boolean) DGraph.RemoveVertex(Int32, Boolean) DGraph.SplitEdge(Int32, Int32, DGraph.EdgeSplitInfo) DGraph.SplitEdge(Int32, DGraph.EdgeSplitInfo) DGraph.CollapseEdge(Int32, Int32, DGraph.EdgeCollapseInfo) DGraph.edge_has_v(Int32, Int32) DGraph.edge_other_v(Int32, Int32) DGraph.replace_edge_vertex(Int32, Int32, Int32) DGraph.IsCompact DGraph.IsCompactV DGraph.IsBoundaryVertex(Int32) DGraph.IsJunctionVertex(Int32) DGraph.IsRegularVertex(Int32) DGraph.CheckValidity(DGraph.FailMode) DGraph.debug_check_is_vertex(Int32) DGraph.debug_check_is_edge(Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DGraph3 : DGraph Constructors DGraph3() Declaration public DGraph3() DGraph3(DGraph3) Declaration public DGraph3(DGraph3 copy) Parameters Type Name Description DGraph3 copy Fields InvalidVertex Declaration public static readonly Vector3d InvalidVertex Field Value Type Description Vector3d Properties CachedBounds Declaration public AxisAlignedBox3d CachedBounds { get; } Property Value Type Description AxisAlignedBox3d HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean Methods append_new_split_vertex(Int32, Int32) Declaration protected override int append_new_split_vertex(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32 Overrides DGraph.append_new_split_vertex(Int32, Int32) AppendGraph(DGraph3, Int32) Declaration public void AppendGraph(DGraph3 graph, int gid = -1) Parameters Type Name Description DGraph3 graph Int32 gid AppendVertex(Vector3d) Declaration public int AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 AppendVertex(Vector3d, Vector3f) Declaration public int AppendVertex(Vector3d v, Vector3f c) Parameters Type Name Description Vector3d v Vector3f c Returns Type Description Int32 DiscardVertexColors() Declaration public void DiscardVertexColors() EnableVertexColors(Vector3f) Declaration public void EnableVertexColors(Vector3f initial_color) Parameters Type Name Description Vector3f initial_color GetBounds() Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetEdgeCenter(Int32) Declaration public Vector3d GetEdgeCenter(int eID) Parameters Type Name Description Int32 eID Returns Type Description Vector3d GetEdgeSegment(Int32) Declaration public Segment3d GetEdgeSegment(int eID) Parameters Type Name Description Int32 eID Returns Type Description Segment3d GetEdgeV(Int32, ref Vector3d, ref Vector3d) Declaration public bool GetEdgeV(int eID, ref Vector3d a, ref Vector3d b) Parameters Type Name Description Int32 eID Vector3d a Vector3d b Returns Type Description Boolean GetVertex(Int32) Declaration public Vector3d GetVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3d GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f Segments() Declaration public IEnumerable<Segment3d> Segments() Returns Type Description IEnumerable < Segment3d > SetVertex(Int32, Vector3d) Declaration public void SetVertex(int vID, Vector3d vNewPos) Parameters Type Name Description Int32 vID Vector3d vNewPos SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int vID, Vector3f vNewColor) Parameters Type Name Description Int32 vID Vector3f vNewColor subclass_validity_checks(Action<Boolean>) Declaration protected override void subclass_validity_checks(Action<bool> CheckOrFailF) Parameters Type Name Description Action < Boolean > CheckOrFailF Overrides DGraph.subclass_validity_checks(Action<Boolean>) Vertices() Declaration public IEnumerable<Vector3d> Vertices() Returns Type Description IEnumerable < Vector3d >"
  },
  "api/g3.DGraph3Util.Curves.html": {
    "href": "api/g3.DGraph3Util.Curves.html",
    "title": "Struct DGraph3Util.Curves | ViRGIS VR GIS",
    "keywords": "Struct DGraph3Util.Curves Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Curves Fields BoundaryV Declaration public HashSet<int> BoundaryV Field Value Type Description HashSet < Int32 > JunctionV Declaration public HashSet<int> JunctionV Field Value Type Description HashSet < Int32 > LoopEdges Declaration public List<List<int>> LoopEdges Field Value Type Description List < List < Int32 >> Loops Declaration public List<DCurve3> Loops Field Value Type Description List < DCurve3 > PathEdges Declaration public List<List<int>> PathEdges Field Value Type Description List < List < Int32 >> Paths Declaration public List<DCurve3> Paths Field Value Type Description List < DCurve3 >"
  },
  "api/g3.DGraph3Util.html": {
    "href": "api/g3.DGraph3Util.html",
    "title": "Class DGraph3Util | ViRGIS VR GIS",
    "keywords": "Class DGraph3Util Utility functions for DGraph3 data structure Inheritance Object DGraph3Util Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class DGraph3Util Methods DisconnectJunction(DGraph3, Int32, Double) foreach edge [vid,b] connected to junction vertex vid, remove, add new vertex c, and then add new edge [b,c]. Optionally move c a bit back along edge from vid. Declaration public static void DisconnectJunction(DGraph3 graph, int vid, double shrinkFactor = 1) Parameters Type Name Description DGraph3 graph Int32 vid Double shrinkFactor ErodeOpenSpurs(DGraph3) Erode inwards from open boundary vertices of graph (ie vtx with single edge). Resulting graph is not compact (!) Declaration public static void ErodeOpenSpurs(DGraph3 graph) Parameters Type Name Description DGraph3 graph ExtractCurves(DGraph3, Boolean, Func<Int32, Boolean>) Decompose graph into simple polylines and polygons. Declaration public static DGraph3Util.Curves ExtractCurves(DGraph3 graph, bool bWantLoopIndices = false, Func<int, bool> CurveOrientationF = null) Parameters Type Name Description DGraph3 graph Boolean bWantLoopIndices Func < Int32 , Boolean > CurveOrientationF Returns Type Description DGraph3Util.Curves NextEdgeAndVtx(Int32, Int32, DGraph3) If we are at edge eid, which as one vertex prev_vid, find 'other' vertex, and other edge connected to that vertex, and return pair [next_edge, shared_vtx] Returns [int.MaxValue, shared_vtx] if shared_vtx is not valence=2 (ie stops at boundaries and complex junctions) Declaration public static Index2i NextEdgeAndVtx(int eid, int prev_vid, DGraph3 graph) Parameters Type Name Description Int32 eid Int32 prev_vid DGraph3 graph Returns Type Description Index2i WalkToNextNonRegularVtx(DGraph3, Int32, Int32) walk through graph from fromVtx, in direction of eid, until we hit the next junction vertex Declaration public static List<int> WalkToNextNonRegularVtx(DGraph3 graph, int fromVtx, int eid) Parameters Type Name Description DGraph3 graph Int32 fromVtx Int32 eid Returns Type Description List < Int32 >"
  },
  "api/g3.DGraphN.html": {
    "href": "api/g3.DGraphN.html",
    "title": "Class DGraphN | ViRGIS VR GIS",
    "keywords": "Class DGraphN Implementation of DGraph that has no dimensionality, ie no data stored for vertieces besides indices. Inheritance Object DGraph DGraphN Inherited Members DGraph.InvalidID DGraph.DuplicateEdgeID DGraph.InvalidEdgeV DGraph.InvalidEdge3 DGraph.vertices_refcount DGraph.vertex_edges DGraph.edges_refcount DGraph.edges DGraph.timestamp DGraph.shape_timestamp DGraph.max_group_id DGraph.updateTimeStamp(Boolean) DGraph.Timestamp DGraph.ShapeTimestamp DGraph.VertexCount DGraph.EdgeCount DGraph.MaxVertexID DGraph.MaxEdgeID DGraph.MaxGroupID DGraph.IsVertex(Int32) DGraph.IsEdge(Int32) DGraph.GetVtxEdges(Int32) DGraph.GetVtxEdgeCount(Int32) DGraph.GetMaxVtxEdgeCount() DGraph.GetEdgeGroup(Int32) DGraph.SetEdgeGroup(Int32, Int32) DGraph.AllocateEdgeGroup() DGraph.GetEdgeV(Int32) DGraph.GetEdge(Int32) DGraph.append_vertex_internal() DGraph.AppendEdge(Int32, Int32, Int32) DGraph.AppendEdge(Index2i, Int32) DGraph.add_edge(Int32, Int32, Int32) DGraph.VertexIndices() DGraph.EdgeIndices() DGraph.Edges() DGraph.VtxVerticesItr(Int32) DGraph.VtxEdgesItr(Int32) DGraph.FindEdge(Int32, Int32) DGraph.RemoveEdge(Int32, Boolean) DGraph.RemoveVertex(Int32, Boolean) DGraph.SplitEdge(Int32, Int32, DGraph.EdgeSplitInfo) DGraph.SplitEdge(Int32, DGraph.EdgeSplitInfo) DGraph.CollapseEdge(Int32, Int32, DGraph.EdgeCollapseInfo) DGraph.edge_has_v(Int32, Int32) DGraph.edge_other_v(Int32, Int32) DGraph.replace_edge_vertex(Int32, Int32, Int32) DGraph.IsCompact DGraph.IsCompactV DGraph.IsBoundaryVertex(Int32) DGraph.IsJunctionVertex(Int32) DGraph.IsRegularVertex(Int32) DGraph.CheckValidity(DGraph.FailMode) DGraph.subclass_validity_checks(Action<Boolean>) DGraph.debug_check_is_vertex(Int32) DGraph.debug_check_is_edge(Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DGraphN : DGraph Methods append_new_split_vertex(Int32, Int32) Declaration protected override int append_new_split_vertex(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32 Overrides DGraph.append_new_split_vertex(Int32, Int32) AppendVertex() Declaration public int AppendVertex() Returns Type Description Int32"
  },
  "api/g3.DiagonalMatrix.html": {
    "href": "api/g3.DiagonalMatrix.html",
    "title": "Class DiagonalMatrix | ViRGIS VR GIS",
    "keywords": "Class DiagonalMatrix Inheritance Object DiagonalMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DiagonalMatrix Constructors DiagonalMatrix(Int32) Declaration public DiagonalMatrix(int N) Parameters Type Name Description Int32 N Fields D Declaration public double[] D Field Value Type Description Double [] Properties Columns Declaration public int Columns { get; } Property Value Type Description Int32 Item[Int32, Int32] Declaration public double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Rows Declaration public int Rows { get; } Property Value Type Description Int32 Size Declaration public Index2i Size { get; } Property Value Type Description Index2i Methods Clear() Declaration public void Clear() Multiply(Double[], Double[]) Declaration public void Multiply(double[] X, double[] Result) Parameters Type Name Description Double [] X Double [] Result Set(Int32, Int32, Double) Declaration public void Set(int r, int c, double value) Parameters Type Name Description Int32 r Int32 c Double value"
  },
  "api/g3.DijkstraGraphDistance.html": {
    "href": "api/g3.DijkstraGraphDistance.html",
    "title": "Class DijkstraGraphDistance | ViRGIS VR GIS",
    "keywords": "Class DijkstraGraphDistance Compute Dijkstra shortest-path algorithm on a graph. Computation is index-based, but can use sparse data structures if the index space will be sparse. Construction is somewhat complicated, but see shortcut static methods at end of file for common construction cases: MeshVertices(mesh) - compute on vertices of mesh MeshVertices(mesh) - compute on vertices of mesh Inheritance Object DijkstraGraphDistance Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DijkstraGraphDistance Constructors DijkstraGraphDistance(Int32, Boolean, Func<Int32, Boolean>, Func<Int32, Int32, Single>, Func<Int32, IEnumerable<Int32>>, IEnumerable<Vector2d>) Constructor configures the graph as well. Graph is not specified explicitly, is provided via functions, for maximum flexibility. nMaxID: maximum ID that will be added. bSparse: is ID space large but sparse? this will save memory nodeFilterF: restrict to a subset of nodes (eg if you want to filter neighbours but not change neighboursF nodeDistanceF: must return (symmetric) distance between two nodes a and b neighboursF: return enumeration of neighbours of a seeds: although Vector2d, are actually pairs (id, seedvalue) (or use AddSeed later) Declaration public DijkstraGraphDistance(int nMaxID, bool bSparse, Func<int, bool> nodeFilterF, Func<int, int, float> nodeDistanceF, Func<int, IEnumerable<int>> neighboursF, IEnumerable<Vector2d> seeds = null) Parameters Type Name Description Int32 nMaxID Boolean bSparse Func < Int32 , Boolean > nodeFilterF Func < Int32 , Int32 , Single > nodeDistanceF Func < Int32 , IEnumerable < Int32 >> neighboursF IEnumerable < Vector2d > seeds Fields InvalidValue Declaration public const float InvalidValue = 3.40282347E+38F Field Value Type Description Single TrackOrder if you enable this, then you can call GetOrder() Declaration public bool TrackOrder Field Value Type Description Boolean Properties MaxDistance Get the maximum distance encountered during the Compute() Declaration public float MaxDistance { get; } Property Value Type Description Single Methods AddSeed(Int32, Single) Add seed point as id/distance pair Declaration public void AddSeed(int id, float seed_dist) Parameters Type Name Description Int32 id Single seed_dist Compute() Compute distances from seeds to all other ids. Declaration public void Compute() Compute_Dense() Declaration protected void Compute_Dense() Compute_Sparse() Declaration protected void Compute_Sparse() ComputeToMaxDistance(Single) Compute distances that are less/equal to fMaxDistance from the seeds Terminates early, so Queue may not be empty Declaration public void ComputeToMaxDistance(float fMaxDistance) Parameters Type Name Description Single fMaxDistance ComputeToMaxDistance_Dense(Single) Declaration protected void ComputeToMaxDistance_Dense(float fMaxDistance) Parameters Type Name Description Single fMaxDistance ComputeToMaxDistance_Sparse(Single) Declaration protected void ComputeToMaxDistance_Sparse(float fMaxDistance) Parameters Type Name Description Single fMaxDistance ComputeToNode(Func<Int32, Boolean>, Single) Compute distances until node_id is frozen, or (optional) max distance is reached Terminates early, so Queue may not be empty Declaration public int ComputeToNode(Func<int, bool> terminatingNodeF, float fMaxDistance = 3.40282347E+38F) Parameters Type Name Description Func < Int32 , Boolean > terminatingNodeF Single fMaxDistance Returns Type Description Int32 ComputeToNode(Int32, Single) Compute distances until node_id is frozen, or (optional) max distance is reached Terminates early, so Queue may not be empty [TODO] can reimplement this w/ internal call to ComputeToNode(func) ? Declaration public void ComputeToNode(int node_id, float fMaxDistance = 3.40282347E+38F) Parameters Type Name Description Int32 node_id Single fMaxDistance ComputeToNode_Dense(Func<Int32, Boolean>, Single) Declaration protected int ComputeToNode_Dense(Func<int, bool> terminatingNodeF, float fMaxDistance) Parameters Type Name Description Func < Int32 , Boolean > terminatingNodeF Single fMaxDistance Returns Type Description Int32 ComputeToNode_Dense(Int32, Single) Declaration protected void ComputeToNode_Dense(int node_id, float fMaxDistance) Parameters Type Name Description Int32 node_id Single fMaxDistance ComputeToNode_Sparse(Func<Int32, Boolean>, Single) Declaration protected int ComputeToNode_Sparse(Func<int, bool> terminatingNodeF, float fMaxDistance) Parameters Type Name Description Func < Int32 , Boolean > terminatingNodeF Single fMaxDistance Returns Type Description Int32 ComputeToNode_Sparse(Int32, Single) Declaration protected void ComputeToNode_Sparse(int node_id, float fMaxDistance) Parameters Type Name Description Int32 node_id Single fMaxDistance GetDistance(Int32) Get the computed distance at node id. returns InvalidValue if node was not computed. Declaration public float GetDistance(int id) Parameters Type Name Description Int32 id Returns Type Description Single GetOrder() Get (internal) list of frozen nodes in increasing distance-order. Requries that TrackOrder=true before Compute call. Declaration public List<int> GetOrder() Returns Type Description List < Int32 > GetPathToSeed(Int32, List<Int32>) Walk from node fromv back to the (graph-)nearest seed point. Declaration public bool GetPathToSeed(int fromv, List<int> path) Parameters Type Name Description Int32 fromv List < Int32 > path Returns Type Description Boolean IsSeed(Int32) Declaration public bool IsSeed(int id) Parameters Type Name Description Int32 id Returns Type Description Boolean MeshTriangles(DMesh3, Boolean) shortcut to construct graph for mesh triangles Declaration public static DijkstraGraphDistance MeshTriangles(DMesh3 mesh, bool bSparse = false) Parameters Type Name Description DMesh3 mesh Boolean bSparse Returns Type Description DijkstraGraphDistance MeshVertices(DMesh3, Boolean) shortcut to construct graph for mesh vertices Declaration public static DijkstraGraphDistance MeshVertices(DMesh3 mesh, bool bSparse = false) Parameters Type Name Description DMesh3 mesh Boolean bSparse Returns Type Description DijkstraGraphDistance Reset() reset internal data structures/etc Declaration public void Reset()"
  },
  "api/g3.DIndexArray2i.html": {
    "href": "api/g3.DIndexArray2i.html",
    "title": "Class DIndexArray2i | ViRGIS VR GIS",
    "keywords": "Class DIndexArray2i Inheritance Object DVectorArray2 < Int32 > DIndexArray2i Implements IEnumerable < Int32 > IEnumerable Inherited Members DVectorArray2<Int32>.vector DVectorArray2<Int32>.Count DVectorArray2<Int32>.GetEnumerator() DVectorArray2<Int32>.Resize(Int32) DVectorArray2<Int32>.Set(Int32, Int32, Int32) DVectorArray2<Int32>.Append(Int32, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DIndexArray2i : DVectorArray2<int>, IEnumerable<int>, IEnumerable Constructors DIndexArray2i(Int32) Declaration public DIndexArray2i(int nCount = 0) Parameters Type Name Description Int32 nCount DIndexArray2i(Int32[]) Declaration public DIndexArray2i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Index2i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Index2i Methods AsIndex2i() Declaration public IEnumerable<Index2i> AsIndex2i() Returns Type Description IEnumerable < Index2i > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DIndexArray3i.html": {
    "href": "api/g3.DIndexArray3i.html",
    "title": "Class DIndexArray3i | ViRGIS VR GIS",
    "keywords": "Class DIndexArray3i Inheritance Object DVectorArray3 < Int32 > DIndexArray3i Implements IEnumerable < Int32 > IEnumerable Inherited Members DVectorArray3<Int32>.vector DVectorArray3<Int32>.Count DVectorArray3<Int32>.GetEnumerator() DVectorArray3<Int32>.Resize(Int32) DVectorArray3<Int32>.Set(Int32, Int32, Int32, Int32) DVectorArray3<Int32>.Append(Int32, Int32, Int32) DVectorArray3<Int32>.Clear() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DIndexArray3i : DVectorArray3<int>, IEnumerable<int>, IEnumerable Constructors DIndexArray3i(Int32) Declaration public DIndexArray3i(int nCount = 0) Parameters Type Name Description Int32 nCount DIndexArray3i(Int32[]) Declaration public DIndexArray3i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Index3i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Index3i Methods AsIndex3i() Declaration public IEnumerable<Index3i> AsIndex3i() Returns Type Description IEnumerable < Index3i > Set(Int32, Int32, Int32, Int32, Boolean) Declaration public void Set(int i, int a, int b, int c, bool bCycle = false) Parameters Type Name Description Int32 i Int32 a Int32 b Int32 c Boolean bCycle Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.Distance.html": {
    "href": "api/g3.Distance.html",
    "title": "Class Distance | ViRGIS VR GIS",
    "keywords": "Class Distance Inheritance Object Distance Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class Distance Methods ClosestPointOnLineT(Vector3f, Vector3f, Vector3f) Declaration public static float ClosestPointOnLineT(Vector3f p0, Vector3f dir, Vector3f pt) Parameters Type Name Description Vector3f p0 Vector3f dir Vector3f pt Returns Type Description Single"
  },
  "api/g3.DistanceFieldToSkeletalField.html": {
    "href": "api/g3.DistanceFieldToSkeletalField.html",
    "title": "Class DistanceFieldToSkeletalField | ViRGIS VR GIS",
    "keywords": "Class DistanceFieldToSkeletalField This class converts the interval [-falloff,falloff] to [0,1], Then applies Wyvill falloff function (1-t^2)^3. The result is a skeletal-primitive-like shape with the distance=0 isocontour lying just before midway in the range (at the .ZeroIsocontour constant) Inheritance Object DistanceFieldToSkeletalField Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistanceFieldToSkeletalField : BoundedImplicitFunction3d, ImplicitFunction3d Fields DistanceField Declaration public BoundedImplicitFunction3d DistanceField Field Value Type Description BoundedImplicitFunction3d FalloffDistance Declaration public double FalloffDistance Field Value Type Description Double ZeroIsocontour Declaration public const double ZeroIsocontour = 0.421875 Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.DistLine2Line2.html": {
    "href": "api/g3.DistLine2Line2.html",
    "title": "Class DistLine2Line2 | ViRGIS VR GIS",
    "keywords": "Class DistLine2Line2 Inheritance Object DistLine2Line2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistLine2Line2 Constructors DistLine2Line2(Line2d, Line2d) Declaration public DistLine2Line2(Line2d Line1, Line2d Line2) Parameters Type Name Description Line2d Line1 Line2d Line2 Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Line1Closest Declaration public Vector2d Line1Closest Field Value Type Description Vector2d Line1Parameter Declaration public double Line1Parameter Field Value Type Description Double Line2Closest Declaration public Vector2d Line2Closest Field Value Type Description Vector2d Line2Parameter Declaration public double Line2Parameter Field Value Type Description Double Properties Line Declaration public Line2d Line { get; set; } Property Value Type Description Line2d Line2 Declaration public Line2d Line2 { get; set; } Property Value Type Description Line2d Methods Compute() Declaration public DistLine2Line2 Compute() Returns Type Description DistLine2Line2 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Line2d, Line2d) Declaration public static double MinDistance(Line2d line1, Line2d line2) Parameters Type Name Description Line2d line1 Line2d line2 Returns Type Description Double"
  },
  "api/g3.DistLine2Segment2.html": {
    "href": "api/g3.DistLine2Segment2.html",
    "title": "Class DistLine2Segment2 | ViRGIS VR GIS",
    "keywords": "Class DistLine2Segment2 Inheritance Object DistLine2Segment2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistLine2Segment2 Constructors DistLine2Segment2(Line2d, Segment2d) Declaration public DistLine2Segment2(Line2d LineIn, Segment2d SegmentIn) Parameters Type Name Description Line2d LineIn Segment2d SegmentIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double LineClosest Declaration public Vector2d LineClosest Field Value Type Description Vector2d LineParameter Declaration public double LineParameter Field Value Type Description Double SegmentClosest Declaration public Vector2d SegmentClosest Field Value Type Description Vector2d SegmentParameter Declaration public double SegmentParameter Field Value Type Description Double Properties Line Declaration public Line2d Line { get; set; } Property Value Type Description Line2d Segment Declaration public Segment2d Segment { get; set; } Property Value Type Description Segment2d Methods Compute() Declaration public DistLine2Segment2 Compute() Returns Type Description DistLine2Segment2 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Line2d, Segment2d) Declaration public static double MinDistance(Line2d line, Segment2d segment) Parameters Type Name Description Line2d line Segment2d segment Returns Type Description Double"
  },
  "api/g3.DistLine3Ray3.html": {
    "href": "api/g3.DistLine3Ray3.html",
    "title": "Class DistLine3Ray3 | ViRGIS VR GIS",
    "keywords": "Class DistLine3Ray3 Inheritance Object DistLine3Ray3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistLine3Ray3 Constructors DistLine3Ray3(Ray3d, Line3d) Declaration public DistLine3Ray3(Ray3d rayIn, Line3d LineIn) Parameters Type Name Description Ray3d rayIn Line3d LineIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double LineClosest Declaration public Vector3d LineClosest Field Value Type Description Vector3d LineParameter Declaration public double LineParameter Field Value Type Description Double RayClosest Declaration public Vector3d RayClosest Field Value Type Description Vector3d RayParameter Declaration public double RayParameter Field Value Type Description Double Properties Line Declaration public Line3d Line { get; set; } Property Value Type Description Line3d Ray Declaration public Ray3d Ray { get; set; } Property Value Type Description Ray3d Methods Compute() Declaration public DistLine3Ray3 Compute() Returns Type Description DistLine3Ray3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Ray3d, Line3d) Declaration public static double MinDistance(Ray3d r, Line3d s) Parameters Type Name Description Ray3d r Line3d s Returns Type Description Double MinDistanceLineParam(Ray3d, Line3d) Declaration public static double MinDistanceLineParam(Ray3d r, Line3d s) Parameters Type Name Description Ray3d r Line3d s Returns Type Description Double"
  },
  "api/g3.DistLine3Segment3.html": {
    "href": "api/g3.DistLine3Segment3.html",
    "title": "Class DistLine3Segment3 | ViRGIS VR GIS",
    "keywords": "Class DistLine3Segment3 Inheritance Object DistLine3Segment3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistLine3Segment3 Constructors DistLine3Segment3(Line3d, Segment3d) Declaration public DistLine3Segment3(Line3d LineIn, Segment3d SegmentIn) Parameters Type Name Description Line3d LineIn Segment3d SegmentIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double LineClosest Declaration public Vector3d LineClosest Field Value Type Description Vector3d LineParameter Declaration public double LineParameter Field Value Type Description Double SegmentClosest Declaration public Vector3d SegmentClosest Field Value Type Description Vector3d SegmentParameter Declaration public double SegmentParameter Field Value Type Description Double Properties Line Declaration public Line3d Line { get; set; } Property Value Type Description Line3d Segment Declaration public Segment3d Segment { get; set; } Property Value Type Description Segment3d Methods Compute() Declaration public DistLine3Segment3 Compute() Returns Type Description DistLine3Segment3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Line3d, Segment3d) Declaration public static double MinDistance(Line3d line, Segment3d segment) Parameters Type Name Description Line3d line Segment3d segment Returns Type Description Double MinDistanceLineParam(Line3d, Segment3d) Declaration public static double MinDistanceLineParam(Line3d line, Segment3d segment) Parameters Type Name Description Line3d line Segment3d segment Returns Type Description Double"
  },
  "api/g3.DistLine3Triangle3.html": {
    "href": "api/g3.DistLine3Triangle3.html",
    "title": "Class DistLine3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class DistLine3Triangle3 Inheritance Object DistLine3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistLine3Triangle3 Constructors DistLine3Triangle3(Line3d, Triangle3d) Declaration public DistLine3Triangle3(Line3d LineIn, Triangle3d TriangleIn) Parameters Type Name Description Line3d LineIn Triangle3d TriangleIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double LineClosest Declaration public Vector3d LineClosest Field Value Type Description Vector3d LineParam Declaration public double LineParam Field Value Type Description Double TriangleBaryCoords Declaration public Vector3d TriangleBaryCoords Field Value Type Description Vector3d TriangleClosest Declaration public Vector3d TriangleClosest Field Value Type Description Vector3d Properties Line Declaration public Line3d Line { get; set; } Property Value Type Description Line3d Triangle Declaration public Triangle3d Triangle { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public DistLine3Triangle3 Compute() Returns Type Description DistLine3Triangle3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistPoint2Box2.html": {
    "href": "api/g3.DistPoint2Box2.html",
    "title": "Class DistPoint2Box2 | ViRGIS VR GIS",
    "keywords": "Class DistPoint2Box2 Inheritance Object DistPoint2Box2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistPoint2Box2 Constructors DistPoint2Box2(Vector2d, Box2d) Declaration public DistPoint2Box2(Vector2d PointIn, Box2d boxIn) Parameters Type Name Description Vector2d PointIn Box2d boxIn Fields BoxClosest Declaration public Vector2d BoxClosest Field Value Type Description Vector2d DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Properties Box Declaration public Box2d Box { get; set; } Property Value Type Description Box2d Point Declaration public Vector2d Point { get; set; } Property Value Type Description Vector2d Methods Compute() Declaration public DistPoint2Box2 Compute() Returns Type Description DistPoint2Box2 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistPoint2Circle2.html": {
    "href": "api/g3.DistPoint2Circle2.html",
    "title": "Class DistPoint2Circle2 | ViRGIS VR GIS",
    "keywords": "Class DistPoint2Circle2 Inheritance Object DistPoint2Circle2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistPoint2Circle2 Constructors DistPoint2Circle2(Vector2d, Circle2d) Declaration public DistPoint2Circle2(Vector2d PointIn, Circle2d circleIn) Parameters Type Name Description Vector2d PointIn Circle2d circleIn Fields AllCirclePointsEquidistant Declaration public bool AllCirclePointsEquidistant Field Value Type Description Boolean CircleClosest Declaration public Vector2d CircleClosest Field Value Type Description Vector2d DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Properties Circle Declaration public Circle2d Circle { get; set; } Property Value Type Description Circle2d Point Declaration public Vector2d Point { get; set; } Property Value Type Description Vector2d Methods Compute() Declaration public DistPoint2Circle2 Compute() Returns Type Description DistPoint2Circle2 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistPoint3Circle3.html": {
    "href": "api/g3.DistPoint3Circle3.html",
    "title": "Class DistPoint3Circle3 | ViRGIS VR GIS",
    "keywords": "Class DistPoint3Circle3 Inheritance Object DistPoint3Circle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistPoint3Circle3 Constructors DistPoint3Circle3(Vector3d, Circle3d) Declaration public DistPoint3Circle3(Vector3d PointIn, Circle3d circleIn) Parameters Type Name Description Vector3d PointIn Circle3d circleIn Fields AllCirclePointsEquidistant Declaration public bool AllCirclePointsEquidistant Field Value Type Description Boolean CircleClosest Declaration public Vector3d CircleClosest Field Value Type Description Vector3d DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Properties Circle Declaration public Circle3d Circle { get; set; } Property Value Type Description Circle3d Point Declaration public Vector3d Point { get; set; } Property Value Type Description Vector3d Methods Compute() Declaration public DistPoint3Circle3 Compute() Returns Type Description DistPoint3Circle3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistPoint3Cylinder3.html": {
    "href": "api/g3.DistPoint3Cylinder3.html",
    "title": "Class DistPoint3Cylinder3 | ViRGIS VR GIS",
    "keywords": "Class DistPoint3Cylinder3 Inheritance Object DistPoint3Cylinder3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistPoint3Cylinder3 Constructors DistPoint3Cylinder3(Vector3d, Cylinder3d) Declaration public DistPoint3Cylinder3(Vector3d PointIn, Cylinder3d CylinderIn) Parameters Type Name Description Vector3d PointIn Cylinder3d CylinderIn Fields CylinderClosest Declaration public Vector3d CylinderClosest Field Value Type Description Vector3d DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double SignedDistance Declaration public double SignedDistance Field Value Type Description Double Properties Cylinder Declaration public Cylinder3d Cylinder { get; set; } Property Value Type Description Cylinder3d IsInside Declaration public bool IsInside { get; } Property Value Type Description Boolean Point Declaration public Vector3d Point { get; set; } Property Value Type Description Vector3d SolidDistance Declaration public double SolidDistance { get; } Property Value Type Description Double Methods Compute() Declaration public DistPoint3Cylinder3 Compute() Returns Type Description DistPoint3Cylinder3 Get() Declaration public double Get() Returns Type Description Double get_squared_infinite() Declaration public double get_squared_infinite() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistPoint3Triangle3.html": {
    "href": "api/g3.DistPoint3Triangle3.html",
    "title": "Class DistPoint3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class DistPoint3Triangle3 Inheritance Object DistPoint3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistPoint3Triangle3 Constructors DistPoint3Triangle3(Vector3d, Triangle3d) Declaration public DistPoint3Triangle3(Vector3d PointIn, Triangle3d TriangleIn) Parameters Type Name Description Vector3d PointIn Triangle3d TriangleIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double TriangleBaryCoords Declaration public Vector3d TriangleBaryCoords Field Value Type Description Vector3d TriangleClosest Declaration public Vector3d TriangleClosest Field Value Type Description Vector3d Properties Point Declaration public Vector3d Point { get; set; } Property Value Type Description Vector3d Triangle Declaration public Triangle3d Triangle { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public DistPoint3Triangle3 Compute() Returns Type Description DistPoint3Triangle3 DistanceSqr(ref Vector3d, ref Triangle3d, out Vector3d, out Vector3d) Declaration public static double DistanceSqr(ref Vector3d point, ref Triangle3d triangle, out Vector3d closestPoint, out Vector3d baryCoords) Parameters Type Name Description Vector3d point Triangle3d triangle Vector3d closestPoint Vector3d baryCoords Returns Type Description Double Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistRay3Ray3.html": {
    "href": "api/g3.DistRay3Ray3.html",
    "title": "Class DistRay3Ray3 | ViRGIS VR GIS",
    "keywords": "Class DistRay3Ray3 Inheritance Object DistRay3Ray3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistRay3Ray3 Constructors DistRay3Ray3(Ray3d, Ray3d) Declaration public DistRay3Ray3(Ray3d ray1, Ray3d ray2) Parameters Type Name Description Ray3d ray1 Ray3d ray2 Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Ray1Closest Declaration public Vector3d Ray1Closest Field Value Type Description Vector3d Ray1Parameter Declaration public double Ray1Parameter Field Value Type Description Double Ray2Closest Declaration public Vector3d Ray2Closest Field Value Type Description Vector3d Ray2Parameter Declaration public double Ray2Parameter Field Value Type Description Double Properties Ray1 Declaration public Ray3d Ray1 { get; set; } Property Value Type Description Ray3d Ray2 Declaration public Ray3d Ray2 { get; set; } Property Value Type Description Ray3d Methods Compute() Declaration public DistRay3Ray3 Compute() Returns Type Description DistRay3Ray3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Ray3d, Ray3d) Declaration public static double MinDistance(Ray3d r1, Ray3d r2) Parameters Type Name Description Ray3d r1 Ray3d r2 Returns Type Description Double MinDistanceRay2Param(Ray3d, Ray3d) Declaration public static double MinDistanceRay2Param(Ray3d r1, Ray3d r2) Parameters Type Name Description Ray3d r1 Ray3d r2 Returns Type Description Double"
  },
  "api/g3.DistRay3Segment3.html": {
    "href": "api/g3.DistRay3Segment3.html",
    "title": "Class DistRay3Segment3 | ViRGIS VR GIS",
    "keywords": "Class DistRay3Segment3 Distance between ray and segment ported from WildMagic5 Inheritance Object DistRay3Segment3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistRay3Segment3 Constructors DistRay3Segment3(Ray3d, Segment3d) Declaration public DistRay3Segment3(Ray3d rayIn, Segment3d segmentIn) Parameters Type Name Description Ray3d rayIn Segment3d segmentIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double RayClosest Declaration public Vector3d RayClosest Field Value Type Description Vector3d RayParameter Declaration public double RayParameter Field Value Type Description Double SegmentClosest Declaration public Vector3d SegmentClosest Field Value Type Description Vector3d SegmentParameter Declaration public double SegmentParameter Field Value Type Description Double Properties Ray Declaration public Ray3d Ray { get; set; } Property Value Type Description Ray3d Segment Declaration public Segment3d Segment { get; set; } Property Value Type Description Segment3d Methods Compute() Declaration public DistRay3Segment3 Compute() Returns Type Description DistRay3Segment3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Ray3d, Segment3d) Declaration public static double MinDistance(Ray3d r, Segment3d s) Parameters Type Name Description Ray3d r Segment3d s Returns Type Description Double MinDistanceSegmentParam(Ray3d, Segment3d) Declaration public static double MinDistanceSegmentParam(Ray3d r, Segment3d s) Parameters Type Name Description Ray3d r Segment3d s Returns Type Description Double SquaredDistance(ref Ray3d, ref Segment3d, out Double, out Double) compute w/o allocating temporaries/etc Declaration public static double SquaredDistance(ref Ray3d ray, ref Segment3d segment, out double rayT, out double segT) Parameters Type Name Description Ray3d ray Segment3d segment Double rayT Double segT Returns Type Description Double"
  },
  "api/g3.DistSegment2Segment2.html": {
    "href": "api/g3.DistSegment2Segment2.html",
    "title": "Class DistSegment2Segment2 | ViRGIS VR GIS",
    "keywords": "Class DistSegment2Segment2 Inheritance Object DistSegment2Segment2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistSegment2Segment2 Constructors DistSegment2Segment2(Segment2d, Segment2d) Declaration public DistSegment2Segment2(Segment2d Segment1, Segment2d Segment2) Parameters Type Name Description Segment2d Segment1 Segment2d Segment2 Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Segment1Closest Declaration public Vector2d Segment1Closest Field Value Type Description Vector2d Segment1Parameter Declaration public double Segment1Parameter Field Value Type Description Double Segment2Closest Declaration public Vector2d Segment2Closest Field Value Type Description Vector2d Segment2Parameter Declaration public double Segment2Parameter Field Value Type Description Double Properties Segment1 Declaration public Segment2d Segment1 { get; set; } Property Value Type Description Segment2d Segment2 Declaration public Segment2d Segment2 { get; set; } Property Value Type Description Segment2d Methods Compute() Declaration public DistSegment2Segment2 Compute() Returns Type Description DistSegment2Segment2 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double MinDistance(Segment2d, Segment2d) Declaration public static double MinDistance(Segment2d Segment1, Segment2d Segment2) Parameters Type Name Description Segment2d Segment1 Segment2d Segment2 Returns Type Description Double"
  },
  "api/g3.DistSegment3Triangle3.html": {
    "href": "api/g3.DistSegment3Triangle3.html",
    "title": "Class DistSegment3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class DistSegment3Triangle3 Inheritance Object DistSegment3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistSegment3Triangle3 Constructors DistSegment3Triangle3(Segment3d, Triangle3d) Declaration public DistSegment3Triangle3(Segment3d SegmentIn, Triangle3d TriangleIn) Parameters Type Name Description Segment3d SegmentIn Triangle3d TriangleIn Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double SegmentClosest Declaration public Vector3d SegmentClosest Field Value Type Description Vector3d SegmentParam Declaration public double SegmentParam Field Value Type Description Double TriangleBaryCoords Declaration public Vector3d TriangleBaryCoords Field Value Type Description Vector3d TriangleClosest Declaration public Vector3d TriangleClosest Field Value Type Description Vector3d Properties Segment Declaration public Segment3d Segment { get; set; } Property Value Type Description Segment3d Triangle Declaration public Triangle3d Triangle { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public DistSegment3Triangle3 Compute() Returns Type Description DistSegment3Triangle3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DistTriangle3Triangle3.html": {
    "href": "api/g3.DistTriangle3Triangle3.html",
    "title": "Class DistTriangle3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class DistTriangle3Triangle3 Inheritance Object DistTriangle3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DistTriangle3Triangle3 Constructors DistTriangle3Triangle3(Triangle3d, Triangle3d) Declaration public DistTriangle3Triangle3(Triangle3d Triangle0in, Triangle3d Triangle1in) Parameters Type Name Description Triangle3d Triangle0in Triangle3d Triangle1in Fields DistanceSquared Declaration public double DistanceSquared Field Value Type Description Double Triangle0BaryCoords Declaration public Vector3d Triangle0BaryCoords Field Value Type Description Vector3d Triangle0Closest Declaration public Vector3d Triangle0Closest Field Value Type Description Vector3d Triangle1BaryCoords Declaration public Vector3d Triangle1BaryCoords Field Value Type Description Vector3d Triangle1Closest Declaration public Vector3d Triangle1Closest Field Value Type Description Vector3d Properties Triangle0 Declaration public Triangle3d Triangle0 { get; set; } Property Value Type Description Triangle3d Triangle1 Declaration public Triangle3d Triangle1 { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public DistTriangle3Triangle3 Compute() Returns Type Description DistTriangle3Triangle3 Get() Declaration public double Get() Returns Type Description Double GetSquared() Declaration public double GetSquared() Returns Type Description Double"
  },
  "api/g3.DMesh3.CompactInfo.html": {
    "href": "api/g3.DMesh3.CompactInfo.html",
    "title": "Struct DMesh3.CompactInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.CompactInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct CompactInfo Fields MapV Declaration public IIndexMap MapV Field Value Type Description IIndexMap"
  },
  "api/g3.DMesh3.EdgeCollapseInfo.html": {
    "href": "api/g3.DMesh3.EdgeCollapseInfo.html",
    "title": "Struct DMesh3.EdgeCollapseInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.EdgeCollapseInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeCollapseInfo Fields bIsBoundary Declaration public bool bIsBoundary Field Value Type Description Boolean eCollapsed Declaration public int eCollapsed Field Value Type Description Int32 eKept0 Declaration public int eKept0 Field Value Type Description Int32 eKept1 Declaration public int eKept1 Field Value Type Description Int32 eRemoved0 Declaration public int eRemoved0 Field Value Type Description Int32 eRemoved1 Declaration public int eRemoved1 Field Value Type Description Int32 tRemoved0 Declaration public int tRemoved0 Field Value Type Description Int32 tRemoved1 Declaration public int tRemoved1 Field Value Type Description Int32 vKept Declaration public int vKept Field Value Type Description Int32 vRemoved Declaration public int vRemoved Field Value Type Description Int32"
  },
  "api/g3.DMesh3.EdgeFlipInfo.html": {
    "href": "api/g3.DMesh3.EdgeFlipInfo.html",
    "title": "Struct DMesh3.EdgeFlipInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.EdgeFlipInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeFlipInfo Fields eID Declaration public int eID Field Value Type Description Int32 ov0 Declaration public int ov0 Field Value Type Description Int32 ov1 Declaration public int ov1 Field Value Type Description Int32 t0 Declaration public int t0 Field Value Type Description Int32 t1 Declaration public int t1 Field Value Type Description Int32 v0 Declaration public int v0 Field Value Type Description Int32 v1 Declaration public int v1 Field Value Type Description Int32"
  },
  "api/g3.DMesh3.EdgeSplitInfo.html": {
    "href": "api/g3.DMesh3.EdgeSplitInfo.html",
    "title": "Struct DMesh3.EdgeSplitInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.EdgeSplitInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeSplitInfo Fields bIsBoundary Declaration public bool bIsBoundary Field Value Type Description Boolean eNewBN Declaration public int eNewBN Field Value Type Description Int32 eNewCN Declaration public int eNewCN Field Value Type Description Int32 eNewDN Declaration public int eNewDN Field Value Type Description Int32 eNewT2 Declaration public int eNewT2 Field Value Type Description Int32 eNewT3 Declaration public int eNewT3 Field Value Type Description Int32 vNew Declaration public int vNew Field Value Type Description Int32"
  },
  "api/g3.DMesh3.html": {
    "href": "api/g3.DMesh3.html",
    "title": "Class DMesh3 | ViRGIS VR GIS",
    "keywords": "Class DMesh3 Inheritance Object DMesh3 Implements IDeformableMesh IMesh IPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DMesh3 : IDeformableMesh, IMesh, IPointSet Constructors DMesh3(DMesh3, Boolean, MeshComponents) Declaration public DMesh3(DMesh3 copy, bool bCompact, MeshComponents flags) Parameters Type Name Description DMesh3 copy Boolean bCompact MeshComponents flags DMesh3(DMesh3, Boolean, Boolean, Boolean, Boolean) Declaration public DMesh3(DMesh3 copy, bool bCompact = false, bool bWantNormals = true, bool bWantColors = true, bool bWantUVs = true) Parameters Type Name Description DMesh3 copy Boolean bCompact Boolean bWantNormals Boolean bWantColors Boolean bWantUVs DMesh3(IMesh, MeshHints, MeshComponents) Declaration public DMesh3(IMesh copy, MeshHints hints, MeshComponents flags) Parameters Type Name Description IMesh copy MeshHints hints MeshComponents flags DMesh3(IMesh, MeshHints, Boolean, Boolean, Boolean) Declaration public DMesh3(IMesh copy, MeshHints hints, bool bWantNormals = true, bool bWantColors = true, bool bWantUVs = true) Parameters Type Name Description IMesh copy MeshHints hints Boolean bWantNormals Boolean bWantColors Boolean bWantUVs DMesh3(MeshComponents) Declaration public DMesh3(MeshComponents flags) Parameters Type Name Description MeshComponents flags DMesh3(Boolean, Boolean, Boolean, Boolean) Declaration public DMesh3(bool bWantNormals = true, bool bWantColors = false, bool bWantUVs = false, bool bWantTriGroups = false) Parameters Type Name Description Boolean bWantNormals Boolean bWantColors Boolean bWantUVs Boolean bWantTriGroups Fields InvalidEdge Declaration public static readonly Index2i InvalidEdge Field Value Type Description Index2i InvalidID Declaration public const int InvalidID = -1 Field Value Type Description Int32 InvalidTriangle Declaration public static readonly Index3i InvalidTriangle Field Value Type Description Index3i InvalidVertex Declaration public static readonly Vector3d InvalidVertex Field Value Type Description Vector3d NonManifoldID Declaration public const int NonManifoldID = -2 Field Value Type Description Int32 Properties CachedBounds cached bounding box, lazily re-computed on access if mesh has changed Declaration public AxisAlignedBox3d CachedBounds { get; } Property Value Type Description AxisAlignedBox3d CachedIsClosed Declaration public bool CachedIsClosed { get; } Property Value Type Description Boolean ColorsBuffer Declaration public DVector<float> ColorsBuffer { get; set; } Property Value Type Description DVector < Single > CompactMetric returns measure of compactness in range [0,1], where 1 is fully compacted Declaration public double CompactMetric { get; } Property Value Type Description Double Components Declaration public MeshComponents Components { get; } Property Value Type Description MeshComponents EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 EdgesBuffer Declaration public DVector<int> EdgesBuffer { get; set; } Property Value Type Description DVector < Int32 > EdgesRefCounts Declaration public RefCountVector EdgesRefCounts { get; set; } Property Value Type Description RefCountVector GroupsBuffer Declaration public DVector<int> GroupsBuffer { get; set; } Property Value Type Description DVector < Int32 > HasMetadata Declaration public bool HasMetadata { get; } Property Value Type Description Boolean HasTriangleGroups Declaration public bool HasTriangleGroups { get; } Property Value Type Description Boolean HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean HasVertexUVs Declaration public bool HasVertexUVs { get; } Property Value Type Description Boolean IsCompact returns true if vertices, edges, and triangles are all \"dense\" (Count == MaxID) Declaration public bool IsCompact { get; } Property Value Type Description Boolean IsCompactT returns true if triangle count == max triangle id Declaration public bool IsCompactT { get; } Property Value Type Description Boolean IsCompactV Returns true if vertex count == max vertex id Declaration public bool IsCompactV { get; } Property Value Type Description Boolean MaxEdgeID Declaration public int MaxEdgeID { get; } Property Value Type Description Int32 MaxGroupID Declaration public int MaxGroupID { get; } Property Value Type Description Int32 MaxTriangleID Declaration public int MaxTriangleID { get; } Property Value Type Description Int32 MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 NormalsBuffer Declaration public DVector<float> NormalsBuffer { get; set; } Property Value Type Description DVector < Single > ShapeTimestamp ShapeTimestamp is incremented any time any vertex position is changed or the mesh topology is modified Declaration public int ShapeTimestamp { get; } Property Value Type Description Int32 Timestamp Timestamp is incremented any time any change is made to the mesh Declaration public int Timestamp { get; } Property Value Type Description Int32 TriangleCount Declaration public int TriangleCount { get; } Property Value Type Description Int32 TrianglesBuffer Declaration public DVector<int> TrianglesBuffer { get; set; } Property Value Type Description DVector < Int32 > TrianglesRefCounts Declaration public RefCountVector TrianglesRefCounts { get; set; } Property Value Type Description RefCountVector UVBuffer Declaration public DVector<float> UVBuffer { get; set; } Property Value Type Description DVector < Single > VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 VertexEdges Declaration public SmallListSet VertexEdges { get; set; } Property Value Type Description SmallListSet VerticesBuffer Declaration public DVector<double> VerticesBuffer { get; set; } Property Value Type Description DVector < Double > VerticesRefCounts Declaration public RefCountVector VerticesRefCounts { get; set; } Property Value Type Description RefCountVector Methods AllocateTriangleGroup() Declaration public int AllocateTriangleGroup() Returns Type Description Int32 AppendTriangle(Index3i, Int32) Declaration public int AppendTriangle(Index3i tv, int gid = -1) Parameters Type Name Description Index3i tv Int32 gid Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32, Int32) Declaration public int AppendTriangle(int v0, int v1, int v2, int gid = -1) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Int32 gid Returns Type Description Int32 AppendVertex(DMesh3, Int32) copy vertex fromVID from existing source mesh, returns new vid Declaration public int AppendVertex(DMesh3 from, int fromVID) Parameters Type Name Description DMesh3 from Int32 fromVID Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(ref NewVertexInfo) Append new vertex at position and other fields, returns new vid Declaration public int AppendVertex(ref NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Vector3d) Append new vertex at position, returns new vid Declaration public int AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 AttachMetadata(String, Object) Declaration public void AttachMetadata(string key, object o) Parameters Type Name Description String key Object o BeginUnsafeTrianglesInsert() Declaration public virtual void BeginUnsafeTrianglesInsert() BeginUnsafeVerticesInsert() Declaration public virtual void BeginUnsafeVerticesInsert() BoundaryEdgeIndices() Enumerate ids of boundary edges Declaration public IEnumerable<int> BoundaryEdgeIndices() Returns Type Description IEnumerable < Int32 > CheckValidity(Boolean, FailMode) Declaration public bool CheckValidity(bool bAllowNonManifoldVertices = false, FailMode eFailMode = FailMode.Throw) Parameters Type Name Description Boolean bAllowNonManifoldVertices FailMode eFailMode Returns Type Description Boolean ClearMetadata() Declaration public void ClearMetadata() CollapseEdge(Int32, Int32, out DMesh3.EdgeCollapseInfo) Declaration public MeshResult CollapseEdge(int vKeep, int vRemove, out DMesh3.EdgeCollapseInfo collapse) Parameters Type Name Description Int32 vKeep Int32 vRemove DMesh3.EdgeCollapseInfo collapse Returns Type Description MeshResult CompactCopy(DMesh3, Boolean, Boolean, Boolean) Declaration public DMesh3.CompactInfo CompactCopy(DMesh3 copy, bool bNormals = true, bool bColors = true, bool bUVs = true) Parameters Type Name Description DMesh3 copy Boolean bNormals Boolean bColors Boolean bUVs Returns Type Description DMesh3.CompactInfo CompactInPlace(Boolean) Compact mesh in-place, by moving vertices around and rewriting indices. Should be faster if the amount of compacting is not too significant, and is useful in some places. [TODO] vertex_edges is not compacted. does not affect indices, but does keep memory. If bComputeCompactInfo=false, the returned CompactInfo is not initialized Declaration public DMesh3.CompactInfo CompactInPlace(bool bComputeCompactInfo = false) Parameters Type Name Description Boolean bComputeCompactInfo Returns Type Description DMesh3.CompactInfo Copy(DMesh3, Boolean, Boolean, Boolean) Declaration public void Copy(DMesh3 copy, bool bNormals = true, bool bColors = true, bool bUVs = true) Parameters Type Name Description DMesh3 copy Boolean bNormals Boolean bColors Boolean bUVs Copy(IMesh, MeshHints, Boolean, Boolean, Boolean) Copy IMesh into this mesh. Currently always compacts. [TODO] if we get dense hint, we could be smarter w/ vertex map, etc Declaration public DMesh3.CompactInfo Copy(IMesh copy, MeshHints hints, bool bNormals = true, bool bColors = true, bool bUVs = true) Parameters Type Name Description IMesh copy MeshHints hints Boolean bNormals Boolean bColors Boolean bUVs Returns Type Description DMesh3.CompactInfo debug_check_is_edge(Int32) Declaration public void debug_check_is_edge(int e) Parameters Type Name Description Int32 e debug_check_is_triangle(Int32) Declaration public void debug_check_is_triangle(int t) Parameters Type Name Description Int32 t debug_check_is_vertex(Int32) Declaration public void debug_check_is_vertex(int v) Parameters Type Name Description Int32 v debug_print_mesh() Declaration public void debug_print_mesh() debug_print_vertex(Int32) Declaration public void debug_print_vertex(int v) Parameters Type Name Description Int32 v DiscardTriangleGroups() Declaration public void DiscardTriangleGroups() DiscardVertexColors() Declaration public void DiscardVertexColors() DiscardVertexNormals() Declaration public void DiscardVertexNormals() DiscardVertexUVs() Declaration public void DiscardVertexUVs() edge_has_t(Int32, Int32) Declaration public bool edge_has_t(int eid, int tid) Parameters Type Name Description Int32 eid Int32 tid Returns Type Description Boolean edge_has_v(Int32, Int32) Declaration public bool edge_has_v(int eid, int vid) Parameters Type Name Description Int32 eid Int32 vid Returns Type Description Boolean edge_is_boundary(Int32) Declaration [Obsolete(\"edge_is_boundary will be removed in future, use IsBoundaryEdge instead\")] public bool edge_is_boundary(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean edge_other_t(Int32, Int32) Declaration public int edge_other_t(int eID, int tid) Parameters Type Name Description Int32 eID Int32 tid Returns Type Description Int32 edge_other_v(Int32, Int32) Declaration public int edge_other_v(int eID, int vID) Parameters Type Name Description Int32 eID Int32 vID Returns Type Description Int32 EdgeIndices() Declaration public IEnumerable<int> EdgeIndices() Returns Type Description IEnumerable < Int32 > Edges() Enumerage edges. return value is [v0,v1,t0,t1], where t1 will be InvalidID if this is a boundary edge Declaration public IEnumerable<Index4i> Edges() Returns Type Description IEnumerable < Index4i > EnableTriangleGroups(Int32) Declaration public void EnableTriangleGroups(int initial_group = 0) Parameters Type Name Description Int32 initial_group EnableVertexColors(Vector3f) Declaration public void EnableVertexColors(Vector3f initial_color) Parameters Type Name Description Vector3f initial_color EnableVertexNormals(Vector3f) Declaration public void EnableVertexNormals(Vector3f initial_normal) Parameters Type Name Description Vector3f initial_normal EnableVertexUVs(Vector2f) Declaration public void EnableVertexUVs(Vector2f initial_uv) Parameters Type Name Description Vector2f initial_uv EndUnsafeTrianglesInsert() Declaration public virtual void EndUnsafeTrianglesInsert() EndUnsafeVerticesInsert() Declaration public virtual void EndUnsafeVerticesInsert() find_tri_neighbour_edge(Int32, Int32, Int32) Declaration public int find_tri_neighbour_edge(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Int32 find_tri_neighbour_index(Int32, Int32, Int32) Declaration public int find_tri_neighbour_index(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Int32 FindEdge(Int32, Int32) Find edgeid for edge [a,b] Declaration public int FindEdge(int vA, int vB) Parameters Type Name Description Int32 vA Int32 vB Returns Type Description Int32 FindEdgeFromTri(Int32, Int32, Int32) Find edgeid for edge [a,b] from triangle that contains the edge. This is faster than FindEdge() because it is constant-time Declaration public int FindEdgeFromTri(int vA, int vB, int tID) Parameters Type Name Description Int32 vA Int32 vB Int32 tID Returns Type Description Int32 FindMetadata(String) Declaration public object FindMetadata(string key) Parameters Type Name Description String key Returns Type Description Object FindTriangle(Int32, Int32, Int32) Find triangle made up of any permutation of vertices [a,b,c] Declaration public int FindTriangle(int a, int b, int c) Parameters Type Name Description Int32 a Int32 b Int32 c Returns Type Description Int32 FlipEdge(Int32, out DMesh3.EdgeFlipInfo) Declaration public MeshResult FlipEdge(int eab, out DMesh3.EdgeFlipInfo flip) Parameters Type Name Description Int32 eab DMesh3.EdgeFlipInfo flip Returns Type Description MeshResult FlipEdge(Int32, Int32, out DMesh3.EdgeFlipInfo) Declaration public MeshResult FlipEdge(int vA, int vB, out DMesh3.EdgeFlipInfo flip) Parameters Type Name Description Int32 vA Int32 vB DMesh3.EdgeFlipInfo flip Returns Type Description MeshResult GetAllVertexGroups(Int32) Declaration public List<int> GetAllVertexGroups(int vID) Parameters Type Name Description Int32 vID Returns Type Description List < Int32 > GetAllVertexGroups(Int32, ref List<Int32>) returns all group IDs at vertex Declaration public bool GetAllVertexGroups(int vID, ref List<int> groups) Parameters Type Name Description Int32 vID List < Int32 > groups Returns Type Description Boolean GetBounds() Computes bounding box of all vertices. Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetEdge(Int32) return [v0,v1,t0,t1], or Index4i.Max if eid is invalid Declaration public Index4i GetEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index4i GetEdge(Int32, ref Int32, ref Int32, ref Int32, ref Int32) Declaration public bool GetEdge(int eID, ref int a, ref int b, ref int t0, ref int t1) Parameters Type Name Description Int32 eID Int32 a Int32 b Int32 t0 Int32 t1 Returns Type Description Boolean GetEdgeNormal(Int32) Declaration public Vector3d GetEdgeNormal(int eID) Parameters Type Name Description Int32 eID Returns Type Description Vector3d GetEdgeOpposingV(Int32) If edge has vertices [a,b], and is connected two triangles [a,b,c] and [a,b,d], this returns [c,d], or [c,InvalidID] for a boundary edge Declaration public Index2i GetEdgeOpposingV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetEdgePoint(Int32, Double) Declaration public Vector3d GetEdgePoint(int eID, double t) Parameters Type Name Description Int32 eID Double t Returns Type Description Vector3d GetEdgeT(Int32) Declaration public Index2i GetEdgeT(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetEdgeV(Int32) Declaration public Index2i GetEdgeV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetEdgeV(Int32, ref Vector3d, ref Vector3d) Declaration public bool GetEdgeV(int eID, ref Vector3d a, ref Vector3d b) Parameters Type Name Description Int32 eID Vector3d a Vector3d b Returns Type Description Boolean GetMaxVtxEdgeCount() Declaration public int GetMaxVtxEdgeCount() Returns Type Description Int32 GetOrientedBoundaryEdgeV(Int32) Declaration public Index2i GetOrientedBoundaryEdgeV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetTriangle(Int32) Declaration public Index3i GetTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Index3i GetTriangleGroup(Int32) Declaration public int GetTriangleGroup(int tID) Parameters Type Name Description Int32 tID Returns Type Description Int32 GetTriArea(Int32) Declaration public double GetTriArea(int tID) Parameters Type Name Description Int32 tID Returns Type Description Double GetTriBaryNormal(Int32, Double, Double, Double) interpolate vertex normals of triangle using barycentric coordinates Declaration public Vector3d GetTriBaryNormal(int tID, double bary0, double bary1, double bary2) Parameters Type Name Description Int32 tID Double bary0 Double bary1 Double bary2 Returns Type Description Vector3d GetTriBaryPoint(Int32, Double, Double, Double) Declaration public Vector3d GetTriBaryPoint(int tID, double bary0, double bary1, double bary2) Parameters Type Name Description Int32 tID Double bary0 Double bary1 Double bary2 Returns Type Description Vector3d GetTriBaryPoint(Int32, Double, Double, Double, out NewVertexInfo) Compute interpolated vertex attributes at point of triangle Declaration public void GetTriBaryPoint(int tID, double bary0, double bary1, double bary2, out NewVertexInfo vinfo) Parameters Type Name Description Int32 tID Double bary0 Double bary1 Double bary2 NewVertexInfo vinfo GetTriBounds(Int32) construct bounding box of triangle as efficiently as possible Declaration public AxisAlignedBox3d GetTriBounds(int tID) Parameters Type Name Description Int32 tID Returns Type Description AxisAlignedBox3d GetTriCentroid(Int32) efficiently compute centroid of triangle Declaration public Vector3d GetTriCentroid(int tID) Parameters Type Name Description Int32 tID Returns Type Description Vector3d GetTriEdge(Int32, Int32) Declaration public int GetTriEdge(int tid, int j) Parameters Type Name Description Int32 tid Int32 j Returns Type Description Int32 GetTriEdges(Int32) Declaration public Index3i GetTriEdges(int tID) Parameters Type Name Description Int32 tID Returns Type Description Index3i GetTriFrame(Int32, Int32) Construct stable frame at triangle centroid, where frame.Z is face normal, and frame.X is aligned with edge nEdge of triangle. Declaration public Frame3f GetTriFrame(int tID, int nEdge = 0) Parameters Type Name Description Int32 tID Int32 nEdge Returns Type Description Frame3f GetTriInfo(Int32, out Vector3d, out Double, out Vector3d) Declaration public void GetTriInfo(int tID, out Vector3d normal, out double fArea, out Vector3d vCentroid) Parameters Type Name Description Int32 tID Vector3d normal Double fArea Vector3d vCentroid GetTriInternalAngleR(Int32, Int32) compute internal angle at vertex i of triangle (where i is 0,1,2); TODO can be more efficient here, probably... Declaration public double GetTriInternalAngleR(int tID, int i) Parameters Type Name Description Int32 tID Int32 i Returns Type Description Double GetTriNeighbourTris(Int32) Declaration public Index3i GetTriNeighbourTris(int tID) Parameters Type Name Description Int32 tID Returns Type Description Index3i GetTriNormal(Int32) Declaration public Vector3d GetTriNormal(int tID) Parameters Type Name Description Int32 tID Returns Type Description Vector3d GetTriSolidAngle(Int32, ref Vector3d) compute solid angle of oriented triangle tID relative to point p - see WindingNumber() Declaration public double GetTriSolidAngle(int tID, ref Vector3d p) Parameters Type Name Description Int32 tID Vector3d p Returns Type Description Double GetTriVertex(Int32, Int32) Declaration public Vector3d GetTriVertex(int tid, int j) Parameters Type Name Description Int32 tid Int32 j Returns Type Description Vector3d GetTriVertices(Int32, ref Vector3d, ref Vector3d, ref Vector3d) Declaration public void GetTriVertices(int tID, ref Vector3d v0, ref Vector3d v1, ref Vector3d v2) Parameters Type Name Description Int32 tID Vector3d v0 Vector3d v1 Vector3d v2 GetVertex(Int32) Declaration public Vector3d GetVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3d GetVertex(Int32, ref NewVertexInfo, Boolean, Boolean, Boolean) Declaration public bool GetVertex(int vID, ref NewVertexInfo vinfo, bool bWantNormals, bool bWantColors, bool bWantUVs) Parameters Type Name Description Int32 vID NewVertexInfo vinfo Boolean bWantNormals Boolean bWantColors Boolean bWantUVs Returns Type Description Boolean GetVertexAll(Int32) Declaration public NewVertexInfo GetVertexAll(int i) Parameters Type Name Description Int32 i Returns Type Description NewVertexInfo GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexf(Int32) Declaration public Vector3f GetVertexf(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexFrame(Int32, Boolean) Compute a normal/tangent frame at vertex that is \"stable\" as long as the mesh topology doesn't change, meaning that one axis of the frame will be computed from projection of outgoing edge. Requires that vertex normals are available. by default, frame.Z is normal, and .X points along mesh edge if bFrameNormalY, then frame.Y is normal (X still points along mesh edge) Declaration public Frame3f GetVertexFrame(int vID, bool bFrameNormalY = false) Parameters Type Name Description Int32 vID Boolean bFrameNormalY Returns Type Description Frame3f GetVertexGroups(Int32, out Index4i) returns up to 4 group IDs at vertex. Returns false if > 4 encountered Declaration public bool GetVertexGroups(int vID, out Index4i groups) Parameters Type Name Description Int32 vID Index4i groups Returns Type Description Boolean GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexUV(Int32) Declaration public Vector2f GetVertexUV(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector2f GetVtxEdgeCount(Int32) Declaration public int GetVtxEdgeCount(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 GetVtxEdges(Int32) Declaration [Obsolete(\"GetVtxEdges will be removed in future, use VtxEdgesItr instead\")] public ReadOnlyCollection<int> GetVtxEdges(int vID) Parameters Type Name Description Int32 vID Returns Type Description ReadOnlyCollection < Int32 > GetVtxEdgeValence(Int32) Declaration [Obsolete(\"GetVtxEdgeValence will be removed in future, use GetVtxEdgeCount instead\")] public int GetVtxEdgeValence(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 GetVtxNbrhood(Int32, Int32, ref Int32, ref Int32, ref Int32, ref Int32, ref Int32) from edge and vert, returns other vert, two opposing verts, and two triangles Declaration public void GetVtxNbrhood(int eID, int vID, ref int vOther, ref int oppV1, ref int oppV2, ref int t1, ref int t2) Parameters Type Name Description Int32 eID Int32 vID Int32 vOther Int32 oppV1 Int32 oppV2 Int32 t1 Int32 t2 GetVtxTriangleCount(Int32, Boolean) return # of triangles attached to vID, or -1 if invalid vertex if bBruteForce = true, explicitly checks, which creates a list and is expensive default is false, uses orientation, no memory allocation Declaration public int GetVtxTriangleCount(int vID, bool bBruteForce = false) Parameters Type Name Description Int32 vID Boolean bBruteForce Returns Type Description Int32 GetVtxTriangles(Int32, List<Int32>, Boolean) Get triangle one-ring at vertex. bUseOrientation is more efficient but returns incorrect result if vertex is a bowtie Declaration public MeshResult GetVtxTriangles(int vID, List<int> vTriangles, bool bUseOrientation) Parameters Type Name Description Int32 vID List < Int32 > vTriangles Boolean bUseOrientation Returns Type Description MeshResult InsertTriangle(Int32, Index3i, Int32, Boolean) Insert triangle at given index, assuming it is unused. If bUnsafe, we use fast id allocation that does not update free list. You should only be using this between BeginUnsafeTrianglesInsert() / EndUnsafeTrianglesInsert() calls Declaration public MeshResult InsertTriangle(int tid, Index3i tv, int gid = -1, bool bUnsafe = false) Parameters Type Name Description Int32 tid Index3i tv Int32 gid Boolean bUnsafe Returns Type Description MeshResult InsertVertex(Int32, NewVertexInfo) Declaration public MeshResult InsertVertex(int vid, NewVertexInfo info) Parameters Type Name Description Int32 vid NewVertexInfo info Returns Type Description MeshResult InsertVertex(Int32, ref NewVertexInfo, Boolean) insert vertex at given index, assuming it is unused If bUnsafe, we use fast id allocation that does not update free list. You should only be using this between BeginUnsafeVerticesInsert() / EndUnsafeVerticesInsert() calls Declaration public MeshResult InsertVertex(int vid, ref NewVertexInfo info, bool bUnsafe = false) Parameters Type Name Description Int32 vid NewVertexInfo info Boolean bUnsafe Returns Type Description MeshResult IsBoundaryEdge(Int32) Declaration public bool IsBoundaryEdge(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean IsBoundaryTriangle(Int32) Returns true if any edge of triangle is a boundary edge Declaration public bool IsBoundaryTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean IsBoundaryVertex(Int32) Declaration public bool IsBoundaryVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsBowtieVertex(Int32) returns true if vID is a \"bowtie\" vertex, ie multiple disjoint triangle sets in one-ring Declaration public bool IsBowtieVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsClosed() Declaration public bool IsClosed() Returns Type Description Boolean IsEdge(Int32) Declaration public bool IsEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Boolean IsGroupBoundaryEdge(Int32) Returns true if the two triangles connected to edge have different group IDs Declaration public bool IsGroupBoundaryEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Boolean IsGroupBoundaryVertex(Int32) returns true if vertex has more than one tri group in its tri nbrhood Declaration public bool IsGroupBoundaryVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsGroupJunctionVertex(Int32) returns true if more than two group boundary edges meet at vertex (ie 3+ groups meet at this vertex) Declaration public bool IsGroupJunctionVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsSameMesh(DMesh3, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Single) Check if this m2 is the same as this mesh. By default only checks vertices and triangles, turn on other parameters w/ flags Declaration public bool IsSameMesh(DMesh3 m2, bool bCheckConnectivity, bool bCheckEdgeIDs = false, bool bCheckNormals = false, bool bCheckColors = false, bool bCheckUVs = false, bool bCheckGroups = false, float Epsilon = 1.1920929E-07F) Parameters Type Name Description DMesh3 m2 Boolean bCheckConnectivity Boolean bCheckEdgeIDs Boolean bCheckNormals Boolean bCheckColors Boolean bCheckUVs Boolean bCheckGroups Single Epsilon Returns Type Description Boolean IsTriangle(Int32) Declaration public bool IsTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean MergeEdges(Int32, Int32, out DMesh3.MergeEdgesInfo) Declaration public MeshResult MergeEdges(int eKeep, int eDiscard, out DMesh3.MergeEdgesInfo merge_info) Parameters Type Name Description Int32 eKeep Int32 eDiscard DMesh3.MergeEdgesInfo merge_info Returns Type Description MeshResult MeshInfoString() Declaration public string MeshInfoString() Returns Type Description String PokeTriangle(Int32, out DMesh3.PokeTriangleInfo) Declaration public virtual MeshResult PokeTriangle(int tid, out DMesh3.PokeTriangleInfo result) Parameters Type Name Description Int32 tid DMesh3.PokeTriangleInfo result Returns Type Description MeshResult PokeTriangle(Int32, Vector3d, out DMesh3.PokeTriangleInfo) Declaration public virtual MeshResult PokeTriangle(int tid, Vector3d baryCoordinates, out DMesh3.PokeTriangleInfo result) Parameters Type Name Description Int32 tid Vector3d baryCoordinates DMesh3.PokeTriangleInfo result Returns Type Description MeshResult RebuildFromEdgeRefcounts() Rebuild mesh topology. assumes that we have initialized vertices, triangles, and edges buffers, and edges refcounts. Rebuilds vertex and tri refcounts, triangle edges, vertex edges. Declaration public void RebuildFromEdgeRefcounts() RemoveMetadata(String) Declaration public bool RemoveMetadata(string key) Parameters Type Name Description String key Returns Type Description Boolean RemoveTriangle(Int32, Boolean, Boolean) Remove a tID from the mesh. Also removes any unreferenced edges after tri is removed. If bRemoveIsolatedVertices is false, then if you remove all tris from a vert, that vert is also removed. If bPreserveManifold, we check that you will not create a bowtie vertex (and return false). If this check is not done, you have to make sure you don't create a bowtie, because other code assumes we don't have bowties, and will not handle it properly Declaration public MeshResult RemoveTriangle(int tID, bool bRemoveIsolatedVertices = true, bool bPreserveManifold = false) Parameters Type Name Description Int32 tID Boolean bRemoveIsolatedVertices Boolean bPreserveManifold Returns Type Description MeshResult RemoveVertex(Int32, Boolean, Boolean) Remove vertex vID, and all connected triangles if bRemoveAllTriangles = true (if false, them throws exception if there are still any triangles!) if bPreserveManifold, checks that we will not create a bowtie vertex first Declaration public MeshResult RemoveVertex(int vID, bool bRemoveAllTriangles = true, bool bPreserveManifold = false) Parameters Type Name Description Int32 vID Boolean bRemoveAllTriangles Boolean bPreserveManifold Returns Type Description MeshResult ReverseOrientation(Boolean) Declaration public void ReverseOrientation(bool bFlipNormals = true) Parameters Type Name Description Boolean bFlipNormals ReverseTriOrientation(Int32) Declaration public MeshResult ReverseTriOrientation(int tID) Parameters Type Name Description Int32 tID Returns Type Description MeshResult SetTriangle(Int32, Index3i, Boolean) Declaration public virtual MeshResult SetTriangle(int tID, Index3i newv, bool bRemoveIsolatedVertices = true) Parameters Type Name Description Int32 tID Index3i newv Boolean bRemoveIsolatedVertices Returns Type Description MeshResult SetTriangleGroup(Int32, Int32) Declaration public void SetTriangleGroup(int tid, int group_id) Parameters Type Name Description Int32 tid Int32 group_id SetVertex(Int32, Vector3d) Declaration public void SetVertex(int vID, Vector3d vNewPos) Parameters Type Name Description Int32 vID Vector3d vNewPos SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int vID, Vector3f vNewColor) Parameters Type Name Description Int32 vID Vector3f vNewColor SetVertexNormal(Int32, Vector3f) Declaration public void SetVertexNormal(int vID, Vector3f vNewNormal) Parameters Type Name Description Int32 vID Vector3f vNewNormal SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int vID, Vector2f vNewUV) Parameters Type Name Description Int32 vID Vector2f vNewUV SplitEdge(Int32, out DMesh3.EdgeSplitInfo, Double) Split edge eab. split_t defines position along edge, and is assumed to be based on order of vertices returned by GetEdgeV() Declaration public MeshResult SplitEdge(int eab, out DMesh3.EdgeSplitInfo split, double split_t = 0.5) Parameters Type Name Description Int32 eab DMesh3.EdgeSplitInfo split Double split_t Returns Type Description MeshResult SplitEdge(Int32, Int32, out DMesh3.EdgeSplitInfo) Declaration public MeshResult SplitEdge(int vA, int vB, out DMesh3.EdgeSplitInfo split) Parameters Type Name Description Int32 vA Int32 vB DMesh3.EdgeSplitInfo split Returns Type Description MeshResult tri_has_neighbour_t(Int32, Int32) Declaration public bool tri_has_neighbour_t(int tCheck, int tNbr) Parameters Type Name Description Int32 tCheck Int32 tNbr Returns Type Description Boolean tri_has_sequential_v(Int32, Int32, Int32) Declaration public bool tri_has_sequential_v(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Boolean tri_has_v(Int32, Int32) Declaration public bool tri_has_v(int tID, int vID) Parameters Type Name Description Int32 tID Int32 vID Returns Type Description Boolean tri_is_boundary(Int32) Declaration public bool tri_is_boundary(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean TriangleIndices() Declaration public IEnumerable<int> TriangleIndices() Returns Type Description IEnumerable < Int32 > Triangles() Enumerate triangles Declaration public IEnumerable<Index3i> Triangles() Returns Type Description IEnumerable < Index3i > TriTrianglesItr(Int32) Declaration public IEnumerable<int> TriTrianglesItr(int tID) Parameters Type Name Description Int32 tID Returns Type Description IEnumerable < Int32 > vertex_is_boundary(Int32) Declaration [Obsolete(\"vertex_is_boundary will be removed in future, use IsBoundaryVertex instead\")] public bool vertex_is_boundary(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > Vertices() Enumerate vertices Declaration public IEnumerable<Vector3d> Vertices() Returns Type Description IEnumerable < Vector3d > VtxAllBoundaryEdges(Int32, Int32[]) Find edge ids of boundary edges connected to vertex. e needs to be large enough (ie call VtxBoundaryEdges, or as large as max one-ring) returns count, ie number of elements of e that were filled Declaration public int VtxAllBoundaryEdges(int vID, int[] e) Parameters Type Name Description Int32 vID Int32 [] e Returns Type Description Int32 VtxBoundaryEdges(Int32, ref Int32, ref Int32) Returns count of boundary edges at vertex, and the first two boundary edges if found. If return is > 2, call VtxAllBoundaryEdges Declaration public int VtxBoundaryEdges(int vID, ref int e0, ref int e1) Parameters Type Name Description Int32 vID Int32 e0 Int32 e1 Returns Type Description Int32 VtxEdgesItr(Int32) Enumerate edge ids connected to vertex (ie edge one-ring) Declaration public IEnumerable<int> VtxEdgesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > VtxOneRingCentroid(Int32, ref Vector3d) Fastest possible one-ring centroid. This is used inside many other algorithms so it helps to have it be maximally efficient Declaration public void VtxOneRingCentroid(int vID, ref Vector3d centroid) Parameters Type Name Description Int32 vID Vector3d centroid VtxTrianglesItr(Int32) iterate over triangle IDs of vertex one-ring Declaration public IEnumerable<int> VtxTrianglesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > VtxVerticesItr(Int32) Enumerate \"other\" vertices of edges connected to vertex (ie vertex one-ring) Declaration public IEnumerable<int> VtxVerticesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > WindingNumber(Vector3d) Compute mesh winding number, from Jacobson et al, Robust Inside-Outside Segmentation using Generalized Winding Numbers http://igl.ethz.ch/projects/winding-number/ returns ~0 for points outside a closed, consistently oriented mesh, and a positive or negative integer for points inside, with value > 1 depending on how many \"times\" the point inside the mesh (like in 2D polygon winding) Declaration public double WindingNumber(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Double Implements IDeformableMesh IMesh IPointSet"
  },
  "api/g3.DMesh3.MergeEdgesInfo.html": {
    "href": "api/g3.DMesh3.MergeEdgesInfo.html",
    "title": "Struct DMesh3.MergeEdgesInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.MergeEdgesInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct MergeEdgesInfo Fields eKept Declaration public int eKept Field Value Type Description Int32 eKeptExtra Declaration public Vector2i eKeptExtra Field Value Type Description Vector2i eRemoved Declaration public int eRemoved Field Value Type Description Int32 eRemovedExtra Declaration public Vector2i eRemovedExtra Field Value Type Description Vector2i vKept Declaration public Vector2i vKept Field Value Type Description Vector2i vRemoved Declaration public Vector2i vRemoved Field Value Type Description Vector2i"
  },
  "api/g3.DMesh3.PokeTriangleInfo.html": {
    "href": "api/g3.DMesh3.PokeTriangleInfo.html",
    "title": "Struct DMesh3.PokeTriangleInfo | ViRGIS VR GIS",
    "keywords": "Struct DMesh3.PokeTriangleInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct PokeTriangleInfo Fields new_edges Declaration public Index3i new_edges Field Value Type Description Index3i new_t1 Declaration public int new_t1 Field Value Type Description Int32 new_t2 Declaration public int new_t2 Field Value Type Description Int32 new_vid Declaration public int new_vid Field Value Type Description Int32"
  },
  "api/g3.DMesh3Builder.AddTriangleFailBehaviors.html": {
    "href": "api/g3.DMesh3Builder.AddTriangleFailBehaviors.html",
    "title": "Enum DMesh3Builder.AddTriangleFailBehaviors | ViRGIS VR GIS",
    "keywords": "Enum DMesh3Builder.AddTriangleFailBehaviors Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum AddTriangleFailBehaviors Fields Name Description DiscardTriangle DuplicateAllVertices"
  },
  "api/g3.DMesh3Builder.html": {
    "href": "api/g3.DMesh3Builder.html",
    "title": "Class DMesh3Builder | ViRGIS VR GIS",
    "keywords": "Class DMesh3Builder Inheritance Object DMesh3Builder Implements IMeshBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DMesh3Builder : IMeshBuilder Constructors DMesh3Builder() Declaration public DMesh3Builder() Fields DuplicateTriBehavior What should we do when AddTriangle() fails because the triangle already exists? Declaration public DMesh3Builder.AddTriangleFailBehaviors DuplicateTriBehavior Field Value Type Description DMesh3Builder.AddTriangleFailBehaviors MaterialAssignment Declaration public List<int> MaterialAssignment Field Value Type Description List < Int32 > Materials Declaration public List<GenericMaterial> Materials Field Value Type Description List < GenericMaterial > Meshes Declaration public List<DMesh3> Meshes Field Value Type Description List < DMesh3 > Metadata Declaration public List<Dictionary<string, object>> Metadata Field Value Type Description List < Dictionary < String , Object >> NonManifoldTriBehavior What should we do when AddTriangle() fails because triangle is non-manifold? Declaration public DMesh3Builder.AddTriangleFailBehaviors NonManifoldTriBehavior Field Value Type Description DMesh3Builder.AddTriangleFailBehaviors Properties SupportsMetaData Declaration public bool SupportsMetaData { get; } Property Value Type Description Boolean Methods AppendMetaData(String, Object) Declaration public void AppendMetaData(string identifier, object data) Parameters Type Name Description String identifier Object data AppendNewMesh(DMesh3) Declaration public int AppendNewMesh(DMesh3 existingMesh) Parameters Type Name Description DMesh3 existingMesh Returns Type Description Int32 AppendNewMesh(Boolean, Boolean, Boolean, Boolean) Declaration public int AppendNewMesh(bool bHaveVtxNormals, bool bHaveVtxColors, bool bHaveVtxUVs, bool bHaveFaceGroups) Parameters Type Name Description Boolean bHaveVtxNormals Boolean bHaveVtxColors Boolean bHaveVtxUVs Boolean bHaveFaceGroups Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32) Declaration public int AppendTriangle(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32, Int32) Declaration public int AppendTriangle(int i, int j, int k, int g) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 g Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Double, Double, Double) Declaration public int AppendVertex(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Int32 AssignMaterial(Int32, Int32) Declaration public void AssignMaterial(int materialID, int meshID) Parameters Type Name Description Int32 materialID Int32 meshID Build<VType, TType, NType>(IEnumerable<VType>, IEnumerable<TType>, IEnumerable<NType>, IEnumerable<Int32>) ultimate generic mesh-builder, pass it arrays of floats/doubles, or lists of Vector3d, or anything in-between. Will figure out how to interpret Declaration public static DMesh3 Build<VType, TType, NType>(IEnumerable<VType> Vertices, IEnumerable<TType> Triangles, IEnumerable<NType> Normals = null, IEnumerable<int> TriGroups = null) Parameters Type Name Description IEnumerable <VType> Vertices IEnumerable <TType> Triangles IEnumerable <NType> Normals IEnumerable < Int32 > TriGroups Returns Type Description DMesh3 Type Parameters Name Description VType TType NType BuildMaterial(GenericMaterial) Declaration public int BuildMaterial(GenericMaterial m) Parameters Type Name Description GenericMaterial m Returns Type Description Int32 SetActiveMesh(Int32) Declaration public void SetActiveMesh(int id) Parameters Type Name Description Int32 id SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int vID, Vector2f UV) Parameters Type Name Description Int32 vID Vector2f UV Implements IMeshBuilder"
  },
  "api/g3.DMeshAABBTree3.BuildStrategy.html": {
    "href": "api/g3.DMeshAABBTree3.BuildStrategy.html",
    "title": "Enum DMeshAABBTree3.BuildStrategy | ViRGIS VR GIS",
    "keywords": "Enum DMeshAABBTree3.BuildStrategy Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum BuildStrategy Fields Name Description BottomUpFromOneRings Default TopDownMedian TopDownMidpoint"
  },
  "api/g3.DMeshAABBTree3.ClusterFunctionType.html": {
    "href": "api/g3.DMeshAABBTree3.ClusterFunctionType.html",
    "title": "Delegate DMeshAABBTree3.ClusterFunctionType | ViRGIS VR GIS",
    "keywords": "Delegate DMeshAABBTree3.ClusterFunctionType Namespace : g3 Assembly : cs.temp.dll.dll Syntax public delegate int ClusterFunctionType(int iStart, int iCount, ref int iBoxCur, ref int iIndicesCur); Parameters Type Name Description Int32 iStart Int32 iCount Int32 iBoxCur Int32 iIndicesCur Returns Type Description Int32"
  },
  "api/g3.DMeshAABBTree3.ClusterPolicy.html": {
    "href": "api/g3.DMeshAABBTree3.ClusterPolicy.html",
    "title": "Enum DMeshAABBTree3.ClusterPolicy | ViRGIS VR GIS",
    "keywords": "Enum DMeshAABBTree3.ClusterPolicy Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum ClusterPolicy Fields Name Description Default Fastest FastVolumeMetric MinimalVolume"
  },
  "api/g3.DMeshAABBTree3.html": {
    "href": "api/g3.DMeshAABBTree3.html",
    "title": "Class DMeshAABBTree3 | ViRGIS VR GIS",
    "keywords": "Class DMeshAABBTree3 Hierarchical Axis-Aligned-Bounding-Box tree for a DMesh3 mesh. This class supports a variety of spatial queries, listed below. Various construction strategies are also available, the default is the fastest to build but if you are doing a lot of queries, you might experiment with the others (eg TopDownMedian) Available queries: FindNearestTriangle(point, maxdist) FindNearestHitTriangle(ray, maxdist) FindAllHitTriangles(ray, maxdist) TestIntersection(triangle) TestIntersection(mesh) TestIntersection(otherAABBTree) FindAllIntersections(otherAABBTree) FindNearestTriangles(otherAABBTree, maxdist) IsInside(point) WindingNumber(point) FastWindingNumber(point) DoTraversal(generic_traversal_object) Inheritance Object DMeshAABBTree3 Implements ISpatial Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DMeshAABBTree3 : ISpatial Constructors DMeshAABBTree3(DMesh3, Boolean) Declaration public DMeshAABBTree3(DMesh3 m, bool autoBuild = false) Parameters Type Name Description DMesh3 m Boolean autoBuild Fields BottomUpClusterLookahead Declaration public int BottomUpClusterLookahead Field Value Type Description Int32 box_centers Declaration protected DVector<Vector3f> box_centers Field Value Type Description DVector < Vector3f > box_extents Declaration protected DVector<Vector3f> box_extents Field Value Type Description DVector < Vector3f > box_to_index Declaration protected DVector<int> box_to_index Field Value Type Description DVector < Int32 > FWNApproxOrder FWN approximation order. can be 1 or 2. 2 is more accurate, obviously. Declaration public int FWNApproxOrder Field Value Type Description Int32 FWNBeta FWN beta parameter - is 2.0 in paper Declaration public double FWNBeta Field Value Type Description Double index_list Declaration protected DVector<int> index_list Field Value Type Description DVector < Int32 > mesh Declaration protected DMesh3 mesh Field Value Type Description DMesh3 mesh_timestamp Declaration protected int mesh_timestamp Field Value Type Description Int32 root_index Declaration protected int root_index Field Value Type Description Int32 TopDownLeafMaxTriCount Declaration public int TopDownLeafMaxTriCount Field Value Type Description Int32 TriangleFilterF If non-null, only triangle IDs that pass this filter (ie filter is true) are considered Declaration public Func<int, bool> TriangleFilterF Field Value Type Description Func < Int32 , Boolean > triangles_end Declaration protected int triangles_end Field Value Type Description Int32 Properties Bounds Root bounding box of tree (note: tree must be generated by calling a query function first!) Declaration public AxisAlignedBox3d Bounds { get; } Property Value Type Description AxisAlignedBox3d IsValid Declaration public bool IsValid { get; } Property Value Type Description Boolean Mesh Declaration public DMesh3 Mesh { get; } Property Value Type Description DMesh3 SupportsNearestTriangle Does this ISpatial implementation support nearest-point query? (yes) Declaration public bool SupportsNearestTriangle { get; } Property Value Type Description Boolean SupportsPointContainment Does this ISpatial support IsInside() test (yes!) Declaration public bool SupportsPointContainment { get; } Property Value Type Description Boolean SupportsTriangleRayIntersection Does this ISpatial implementation support ray-triangle intersection? (yes) Declaration public bool SupportsTriangleRayIntersection { get; } Property Value Type Description Boolean Methods box_contains(Int32, Vector3d) Declaration protected bool box_contains(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Boolean branch_fast_winding_num(Int32, Vector3d) Declaration protected double branch_fast_winding_num(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Double branch_winding_num(Int32, Vector3d) Declaration protected double branch_winding_num(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Double Build(DMeshAABBTree3.BuildStrategy, DMeshAABBTree3.ClusterPolicy) Declaration public void Build(DMeshAABBTree3.BuildStrategy eStrategy = DMeshAABBTree3.BuildStrategy.TopDownMidpoint, DMeshAABBTree3.ClusterPolicy ePolicy = DMeshAABBTree3.ClusterPolicy.Default) Parameters Type Name Description DMeshAABBTree3.BuildStrategy eStrategy DMeshAABBTree3.ClusterPolicy ePolicy build_fast_winding_cache() Declaration protected void build_fast_winding_cache() build_fast_winding_cache(Int32, Int32, Int32, out HashSet<Int32>, MeshTriInfoCache) Declaration protected int build_fast_winding_cache(int iBox, int depth, int tri_count_thresh, out HashSet<int> tri_hash, MeshTriInfoCache triCache) Parameters Type Name Description Int32 iBox Int32 depth Int32 tri_count_thresh HashSet < Int32 > tri_hash MeshTriInfoCache triCache Returns Type Description Int32 build_winding_cache() Declaration protected void build_winding_cache() build_winding_cache(Int32, Int32, Int32, out HashSet<Int32>) Declaration protected int build_winding_cache(int iBox, int depth, int tri_count_thresh, out HashSet<int> tri_hash) Parameters Type Name Description Int32 iBox Int32 depth Int32 tri_count_thresh HashSet < Int32 > tri_hash Returns Type Description Int32 can_use_fast_winding_cache(Int32, ref Vector3d) Declaration protected bool can_use_fast_winding_cache(int iBox, ref Vector3d q) Parameters Type Name Description Int32 iBox Vector3d q Returns Type Description Boolean collect_triangles(Int32, HashSet<Int32>) Declaration protected void collect_triangles(int iBox, HashSet<int> triangles) Parameters Type Name Description Int32 iBox HashSet < Int32 > triangles DoTraversal(DMeshAABBTree3.TreeTraversal) Hierarchically descend through the tree nodes, calling the TreeTrversal functions at each level Declaration public virtual void DoTraversal(DMeshAABBTree3.TreeTraversal traversal) Parameters Type Name Description DMeshAABBTree3.TreeTraversal traversal evaluate_box_fast_winding_cache(Int32, ref Vector3d) Declaration protected double evaluate_box_fast_winding_cache(int iBox, ref Vector3d q) Parameters Type Name Description Int32 iBox Vector3d q Returns Type Description Double evaluate_box_winding_cache(Int32, Vector3d) Declaration protected double evaluate_box_winding_cache(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Double FastWindingNumber(Vector3d) Fast approximation of winding number using far-field approximations Declaration public virtual double FastWindingNumber(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double find_all_hit_triangles(Int32, List<Int32>, ref Ray3d, Double) Declaration protected int find_all_hit_triangles(int iBox, List<int> hitTriangles, ref Ray3d ray, double fMaxDist) Parameters Type Name Description Int32 iBox List < Int32 > hitTriangles Ray3d ray Double fMaxDist Returns Type Description Int32 find_any_intersection(Int32, DMeshAABBTree3, Func<Vector3d, Vector3d>, Int32, Int32) Declaration protected bool find_any_intersection(int iBox, DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF, int oBox, int depth) Parameters Type Name Description Int32 iBox DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Int32 oBox Int32 depth Returns Type Description Boolean find_any_intersection(Int32, ref Triangle3d, ref AxisAlignedBox3d) Declaration protected int find_any_intersection(int iBox, ref Triangle3d triangle, ref AxisAlignedBox3d triBounds) Parameters Type Name Description Int32 iBox Triangle3d triangle AxisAlignedBox3d triBounds Returns Type Description Int32 find_hit_triangle(Int32, ref Ray3d, ref Double, ref Int32) Declaration protected void find_hit_triangle(int iBox, ref Ray3d ray, ref double fNearestT, ref int tID) Parameters Type Name Description Int32 iBox Ray3d ray Double fNearestT Int32 tID find_intersections(Int32, DMeshAABBTree3, Func<Vector3d, Vector3d>, Int32, Int32, IntrTriangle3Triangle3, DMeshAABBTree3.IntersectionsQueryResult) Declaration protected void find_intersections(int iBox, DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF, int oBox, int depth, IntrTriangle3Triangle3 intr, DMeshAABBTree3.IntersectionsQueryResult result) Parameters Type Name Description Int32 iBox DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Int32 oBox Int32 depth IntrTriangle3Triangle3 intr DMeshAABBTree3.IntersectionsQueryResult result find_nearest_tri(Int32, Vector3d, ref Double, ref Int32) Declaration protected void find_nearest_tri(int iBox, Vector3d p, ref double fNearestSqr, ref int tID) Parameters Type Name Description Int32 iBox Vector3d p Double fNearestSqr Int32 tID find_nearest_triangles(Int32, DMeshAABBTree3, Func<Vector3d, Vector3d>, Int32, Int32, ref Double, ref Index2i) Declaration protected void find_nearest_triangles(int iBox, DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF, int oBox, int depth, ref double nearest_sqr, ref Index2i nearest_pair) Parameters Type Name Description Int32 iBox DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Int32 oBox Int32 depth Double nearest_sqr Index2i nearest_pair find_nearest_vtx(Int32, Vector3d, ref Double, ref Int32) Declaration protected void find_nearest_vtx(int iBox, Vector3d p, ref double fNearestSqr, ref int vid) Parameters Type Name Description Int32 iBox Vector3d p Double fNearestSqr Int32 vid FindAllHitTriangles(Ray3d, List<Int32>, Double) Find the ids of all the triangles that they ray intersects, within distance fMaxDist from ray origin Returns count of triangles. Declaration public virtual int FindAllHitTriangles(Ray3d ray, List<int> hitTriangles = null, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Ray3d ray List < Int32 > hitTriangles Double fMaxDist Returns Type Description Int32 FindAllIntersections(DMeshAABBTree3, Func<Vector3d, Vector3d>) Compute all intersections between two Meshes. TransformF argument transforms vertices of otherTree to our tree (can be null if in same coord space) Returns pairs of intersecting triangles, which could intersect in either point or segment Currently does not return coplanar intersections. Declaration public virtual DMeshAABBTree3.IntersectionsQueryResult FindAllIntersections(DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Returns Type Description DMeshAABBTree3.IntersectionsQueryResult FindNearestHitTriangle(Ray3d, Double) find id of first triangle that ray hits, within distance fMaxDist, or return DMesh3.InvalidID Use MeshQueries.TriangleIntersection() to get more information Declaration public virtual int FindNearestHitTriangle(Ray3d ray, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Ray3d ray Double fMaxDist Returns Type Description Int32 FindNearestTriangle(Vector3d, Double) Find the triangle closest to p, within distance fMaxDist, or return InvalidID Use MeshQueries.TriangleDistance() to get more information Declaration public virtual int FindNearestTriangle(Vector3d p, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fMaxDist Returns Type Description Int32 FindNearestTriangle(Vector3d, out Double, Double) Find the triangle closest to p, and distance to it, within distance fMaxDist, or return InvalidID Use MeshQueries.TriangleDistance() to get more information Declaration public virtual int FindNearestTriangle(Vector3d p, out double fNearestDistSqr, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fNearestDistSqr Double fMaxDist Returns Type Description Int32 FindNearestTriangles(DMeshAABBTree3, Func<Vector3d, Vector3d>, out Double, Double) Find nearest pair of triangles on this tree with otherTree, within max_dist. TransformF transforms vertices of otherTree into our coordinates. can be null. returns triangle-id pair (my_tri,other_tri), or Index2i.Max if not found within max_dist Use MeshQueries.TrianglesDistance() to get more information Declaration public virtual Index2i FindNearestTriangles(DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF, out double distance, double max_dist = 1.7976931348623157E+308) Parameters Type Name Description DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Double distance Double max_dist Returns Type Description Index2i FindNearestVertex(Vector3d, Double) Find the vertex closest to p, within distance fMaxDist, or return InvalidID Declaration public virtual int FindNearestVertex(Vector3d p, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fMaxDist Returns Type Description Int32 IsInside(Vector3d) Returns true if point p is inside this mesh. Declaration public virtual bool IsInside(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Boolean make_box_fast_winding_cache(Int32, IEnumerable<Int32>, MeshTriInfoCache) Declaration protected void make_box_fast_winding_cache(int iBox, IEnumerable<int> triangles, MeshTriInfoCache triCache) Parameters Type Name Description Int32 iBox IEnumerable < Int32 > triangles MeshTriInfoCache triCache make_box_winding_cache(Int32, HashSet<Int32>) Declaration protected void make_box_winding_cache(int iBox, HashSet<int> triangles) Parameters Type Name Description Int32 iBox HashSet < Int32 > triangles TestCoverage() Declaration public void TestCoverage() TestIntersection(DMeshAABBTree3, Func<Vector3d, Vector3d>) Returns true if there is any intersection between our mesh and 'other' mesh. TransformF takes vertices of otherTree into our tree - can be null if in same coord space Declaration public virtual bool TestIntersection(DMeshAABBTree3 otherTree, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMeshAABBTree3 otherTree Func < Vector3d , Vector3d > TransformF Returns Type Description Boolean TestIntersection(IMesh, Func<Vector3d, Vector3d>, Boolean) return true if any triangle of testMesh intersects with our tree. Use TransformF to transform vertices of testMesh into space of this tree. if boundsCheck is false, we skip bbox/bbox early-out Declaration public virtual bool TestIntersection(IMesh testMesh, Func<Vector3d, Vector3d> TransformF = null, bool bBoundsCheck = true) Parameters Type Name Description IMesh testMesh Func < Vector3d , Vector3d > TransformF Boolean bBoundsCheck Returns Type Description Boolean TestIntersection(Triangle3d) Returns true if triangle intersects any triangle of our mesh Declaration public virtual bool TestIntersection(Triangle3d triangle) Parameters Type Name Description Triangle3d triangle Returns Type Description Boolean TotalExtentSum() Total sum-of-extents over all boxes in the tree. Mainly useful to evaluate tree quality. Declaration public double TotalExtentSum() Returns Type Description Double TotalVolume() Total sum of volumes of all boxes in the tree. Mainly useful to evaluate tree quality. Declaration public double TotalVolume() Returns Type Description Double tree_traversal(Int32, Int32, DMeshAABBTree3.TreeTraversal) Declaration protected virtual void tree_traversal(int iBox, int depth, DMeshAABBTree3.TreeTraversal traversal) Parameters Type Name Description Int32 iBox Int32 depth DMeshAABBTree3.TreeTraversal traversal WindingNumber(Vector3d) Evaluate the mesh winding number at point. To do this, we must construct additional information to short-circuit tree branches. This happens on the first evaluation. This does consume some additional memory, mainly temporary memory during construction. (eg on a 500k sphere, about 30mb to construct, but then only 2-5mb is stored at the end) If you don't want this, just use Mesh.WindingNumber() directly. Also note that if you are only evaluating a few times, it is not sensible - assume you need at least hundreds of evaluations to see speed improvements. Declaration public virtual double WindingNumber(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double Implements ISpatial"
  },
  "api/g3.DMeshAABBTree3.IntersectionsQueryResult.html": {
    "href": "api/g3.DMeshAABBTree3.IntersectionsQueryResult.html",
    "title": "Class DMeshAABBTree3.IntersectionsQueryResult | ViRGIS VR GIS",
    "keywords": "Class DMeshAABBTree3.IntersectionsQueryResult Inheritance Object DMeshAABBTree3.IntersectionsQueryResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntersectionsQueryResult Fields Points Declaration public List<DMeshAABBTree3.PointIntersection> Points Field Value Type Description List < DMeshAABBTree3.PointIntersection > Segments Declaration public List<DMeshAABBTree3.SegmentIntersection> Segments Field Value Type Description List < DMeshAABBTree3.SegmentIntersection >"
  },
  "api/g3.DMeshAABBTree3.PointIntersection.html": {
    "href": "api/g3.DMeshAABBTree3.PointIntersection.html",
    "title": "Struct DMeshAABBTree3.PointIntersection | ViRGIS VR GIS",
    "keywords": "Struct DMeshAABBTree3.PointIntersection Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct PointIntersection Fields point Declaration public Vector3d point Field Value Type Description Vector3d t0 Declaration public int t0 Field Value Type Description Int32 t1 Declaration public int t1 Field Value Type Description Int32"
  },
  "api/g3.DMeshAABBTree3.SegmentIntersection.html": {
    "href": "api/g3.DMeshAABBTree3.SegmentIntersection.html",
    "title": "Struct DMeshAABBTree3.SegmentIntersection | ViRGIS VR GIS",
    "keywords": "Struct DMeshAABBTree3.SegmentIntersection Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct SegmentIntersection Fields point0 Declaration public Vector3d point0 Field Value Type Description Vector3d point1 Declaration public Vector3d point1 Field Value Type Description Vector3d t0 Declaration public int t0 Field Value Type Description Int32 t1 Declaration public int t1 Field Value Type Description Int32"
  },
  "api/g3.DMeshAABBTree3.TreeTraversal.html": {
    "href": "api/g3.DMeshAABBTree3.TreeTraversal.html",
    "title": "Class DMeshAABBTree3.TreeTraversal | ViRGIS VR GIS",
    "keywords": "Class DMeshAABBTree3.TreeTraversal Instances of this class can be passed in to the DoTraversal() function to implement your own tree-traversal queries. NextBoxF() is called for each box node. Return false from this function to halt terminate that branch of the traversal, or true to descend into that box's children (boxes or triangles). NextTriangleF() is called for each triangle. Inheritance Object DMeshAABBTree3.TreeTraversal Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TreeTraversal Fields NextBoxF Declaration public Func<AxisAlignedBox3f, int, bool> NextBoxF Field Value Type Description Func < AxisAlignedBox3f , Int32 , Boolean > NextTriangleF Declaration public Action<int> NextTriangleF Field Value Type Description Action < Int32 >"
  },
  "api/g3.DMeshIntersectionTarget.html": {
    "href": "api/g3.DMeshIntersectionTarget.html",
    "title": "Class DMeshIntersectionTarget | ViRGIS VR GIS",
    "keywords": "Class DMeshIntersectionTarget Inheritance Object DMeshIntersectionTarget Implements IIntersectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DMeshIntersectionTarget : IIntersectionTarget Constructors DMeshIntersectionTarget() Declaration public DMeshIntersectionTarget() DMeshIntersectionTarget(DMesh3, ISpatial) Declaration public DMeshIntersectionTarget(DMesh3 mesh, ISpatial spatial) Parameters Type Name Description DMesh3 mesh ISpatial spatial Fields UseFaceNormal Declaration public bool UseFaceNormal Field Value Type Description Boolean Properties HasNormal Declaration public bool HasNormal { get; } Property Value Type Description Boolean Mesh Declaration public DMesh3 Mesh { get; set; } Property Value Type Description DMesh3 Spatial Declaration public ISpatial Spatial { get; set; } Property Value Type Description ISpatial Methods RayIntersect(Ray3d, out Vector3d, out Vector3d) Declaration public bool RayIntersect(Ray3d ray, out Vector3d vHit, out Vector3d vHitNormal) Parameters Type Name Description Ray3d ray Vector3d vHit Vector3d vHitNormal Returns Type Description Boolean Implements IIntersectionTarget"
  },
  "api/g3.DPolyLine2f.Edge.html": {
    "href": "api/g3.DPolyLine2f.Edge.html",
    "title": "Struct DPolyLine2f.Edge | ViRGIS VR GIS",
    "keywords": "Struct DPolyLine2f.Edge Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Edge Constructors Edge(Int32, Int32) Declaration public Edge(int vertex1, int vertex2) Parameters Type Name Description Int32 vertex1 Int32 vertex2 Fields v1 Declaration public int v1 Field Value Type Description Int32 v2 Declaration public int v2 Field Value Type Description Int32"
  },
  "api/g3.DPolyLine2f.html": {
    "href": "api/g3.DPolyLine2f.html",
    "title": "Class DPolyLine2f | ViRGIS VR GIS",
    "keywords": "Class DPolyLine2f Summary description for PolyLine. Inheritance Object DPolyLine2f Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DPolyLine2f Constructors DPolyLine2f() Declaration public DPolyLine2f() DPolyLine2f(DPolyLine2f) Declaration public DPolyLine2f(DPolyLine2f copy) Parameters Type Name Description DPolyLine2f copy Properties EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 Edges Declaration public List<DPolyLine2f.Edge> Edges { get; } Property Value Type Description List < DPolyLine2f.Edge > VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public List<DPolyLine2f.Vertex> Vertices { get; } Property Value Type Description List < DPolyLine2f.Vertex > Methods AddEdge(Int32, Int32) Declaration public int AddEdge(int v1, int v2) Parameters Type Name Description Int32 v1 Int32 v2 Returns Type Description Int32 AddVertex(Single, Single) Declaration public int AddVertex(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Int32 Clear() Declaration public void Clear() GetVertex(Int32) Declaration public DPolyLine2f.Vertex GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description DPolyLine2f.Vertex OrderVertices() Declaration public bool OrderVertices() Returns Type Description Boolean"
  },
  "api/g3.DPolyLine2f.Vertex.html": {
    "href": "api/g3.DPolyLine2f.Vertex.html",
    "title": "Struct DPolyLine2f.Vertex | ViRGIS VR GIS",
    "keywords": "Struct DPolyLine2f.Vertex Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vertex Constructors Vertex(Single, Single, Int32) Declaration public Vertex(float fX, float fY, int nIndex) Parameters Type Name Description Single fX Single fY Int32 nIndex Fields index Declaration public int index Field Value Type Description Int32 x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single"
  },
  "api/g3.DS3FormatReader.html": {
    "href": "api/g3.DS3FormatReader.html",
    "title": "Class DS3FormatReader | ViRGIS VR GIS",
    "keywords": "Class DS3FormatReader Inheritance Object DS3FormatReader Implements MeshFormatReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DS3FormatReader : MeshFormatReader Properties SupportedExtensions Declaration public List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult Implements MeshFormatReader"
  },
  "api/g3.DSparseGrid3-1.html": {
    "href": "api/g3.DSparseGrid3-1.html",
    "title": "Class DSparseGrid3<ElemType> | ViRGIS VR GIS",
    "keywords": "Class DSparseGrid3<ElemType> Dynamic sparse 3D grid. Idea is that we have grid of some type of object and we don't want to pre-allocate full grid of them. So we allocate on-demand. This can be used to implement multi-grid schemes, eg for example the GridElement type could be Bitmap3 of a fixed dimension. Inheritance Object DSparseGrid3<ElemType> Implements IGrid3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DSparseGrid3<ElemType> : IGrid3 where ElemType : class, IGridElement3 Type Parameters Name Description ElemType Constructors DSparseGrid3(ElemType) Must provide a sample instance of the element type that we can Duplicate() to make additional copies. Should be no data in here Declaration public DSparseGrid3(ElemType toDuplicate) Parameters Type Name Description ElemType toDuplicate Properties BoundsInclusive returns integer-aabb where indices range from min,max Declaration public AxisAlignedBox3i BoundsInclusive { get; } Property Value Type Description AxisAlignedBox3i Count Declaration public int Count { get; } Property Value Type Description Int32 Density Declaration public double Density { get; } Property Value Type Description Double Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Methods Allocated() Declaration public IEnumerable<KeyValuePair<Vector3i, ElemType>> Allocated() Returns Type Description IEnumerable < KeyValuePair < Vector3i , ElemType>> AllocatedIndices() Declaration public IEnumerable<Vector3i> AllocatedIndices() Returns Type Description IEnumerable < Vector3i > Free(Vector3i) Declaration public bool Free(Vector3i index) Parameters Type Name Description Vector3i index Returns Type Description Boolean FreeAll() Declaration public void FreeAll() Get(Vector3i, Boolean) Declaration public ElemType Get(Vector3i index, bool allocateIfMissing = true) Parameters Type Name Description Vector3i index Boolean allocateIfMissing Returns Type Description ElemType Has(Vector3i) Declaration public bool Has(Vector3i index) Parameters Type Name Description Vector3i index Returns Type Description Boolean Implements IGrid3"
  },
  "api/g3.DSubmesh3.html": {
    "href": "api/g3.DSubmesh3.html",
    "title": "Class DSubmesh3 | ViRGIS VR GIS",
    "keywords": "Class DSubmesh3 Inheritance Object DSubmesh3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DSubmesh3 Constructors DSubmesh3(DMesh3) Declaration public DSubmesh3(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh DSubmesh3(DMesh3, IEnumerable<Int32>, Int32) Declaration public DSubmesh3(DMesh3 mesh, IEnumerable<int> subTriangles, int nTriEstimate = 0) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > subTriangles Int32 nTriEstimate DSubmesh3(DMesh3, Int32[]) Declaration public DSubmesh3(DMesh3 mesh, int[] subTriangles) Parameters Type Name Description DMesh3 mesh Int32 [] subTriangles Fields BaseBorderE Declaration public IndexHashSet BaseBorderE Field Value Type Description IndexHashSet BaseBorderV Declaration public IndexHashSet BaseBorderV Field Value Type Description IndexHashSet BaseBoundaryE Declaration public IndexHashSet BaseBoundaryE Field Value Type Description IndexHashSet BaseMesh Declaration public DMesh3 BaseMesh Field Value Type Description DMesh3 BaseSubmeshV Declaration public IndexFlagSet BaseSubmeshV Field Value Type Description IndexFlagSet BaseToSubT Declaration public IndexMap BaseToSubT Field Value Type Description IndexMap BaseToSubV Declaration public IndexMap BaseToSubV Field Value Type Description IndexMap ComputeTriMaps Declaration public bool ComputeTriMaps Field Value Type Description Boolean OverrideGroupID Declaration public int OverrideGroupID Field Value Type Description Int32 SubMesh Declaration public DMesh3 SubMesh Field Value Type Description DMesh3 SubToBaseT Declaration public DVector<int> SubToBaseT Field Value Type Description DVector < Int32 > SubToBaseV Declaration public DVector<int> SubToBaseV Field Value Type Description DVector < Int32 > WantComponents Declaration public MeshComponents WantComponents Field Value Type Description MeshComponents Methods Compute(IEnumerable<Int32>, Int32) Declaration public void Compute(IEnumerable<int> subTriangles, int nTriEstimate = 0) Parameters Type Name Description IEnumerable < Int32 > subTriangles Int32 nTriEstimate Compute(Int32[]) Declaration public void Compute(int[] subTriangles) Parameters Type Name Description Int32 [] subTriangles ComputeBoundaryInfo(IEnumerable<Int32>, Int32) Declaration public void ComputeBoundaryInfo(IEnumerable<int> triangles, int tri_count_est) Parameters Type Name Description IEnumerable < Int32 > triangles Int32 tri_count_est ComputeBoundaryInfo(Int32[]) Declaration public void ComputeBoundaryInfo(int[] subTriangles) Parameters Type Name Description Int32 [] subTriangles MapEdgesToSubmesh(Int32[]) Declaration public void MapEdgesToSubmesh(int[] edges) Parameters Type Name Description Int32 [] edges MapEdgeToBaseMesh(Int32) Declaration public int MapEdgeToBaseMesh(int sub_eid) Parameters Type Name Description Int32 sub_eid Returns Type Description Int32 MapEdgeToSubmesh(Int32) Declaration public int MapEdgeToSubmesh(int base_eid) Parameters Type Name Description Int32 base_eid Returns Type Description Int32 MapTrianglesToSubmesh(Int32[]) Declaration public void MapTrianglesToSubmesh(int[] triangles) Parameters Type Name Description Int32 [] triangles MapTriangleToBaseMesh(Int32) Declaration public int MapTriangleToBaseMesh(int sub_tID) Parameters Type Name Description Int32 sub_tID Returns Type Description Int32 MapTriangleToSubmesh(Int32) Declaration public int MapTriangleToSubmesh(int base_tID) Parameters Type Name Description Int32 base_tID Returns Type Description Int32 MapVertexToBaseMesh(Int32) Declaration public int MapVertexToBaseMesh(int sub_vID) Parameters Type Name Description Int32 sub_vID Returns Type Description Int32 MapVertexToSubmesh(Int32) Declaration public int MapVertexToSubmesh(int base_vID) Parameters Type Name Description Int32 base_vID Returns Type Description Int32 MapVerticesToBaseMesh(Index2i) Declaration public Index2i MapVerticesToBaseMesh(Index2i v) Parameters Type Name Description Index2i v Returns Type Description Index2i MapVerticesToSubmesh(Index2i) Declaration public Index2i MapVerticesToSubmesh(Index2i v) Parameters Type Name Description Index2i v Returns Type Description Index2i MapVerticesToSubmesh(Int32[]) Declaration public void MapVerticesToSubmesh(int[] vertices) Parameters Type Name Description Int32 [] vertices QuickSubmesh(DMesh3, IEnumerable<Int32>) Declaration public static DMesh3 QuickSubmesh(DMesh3 mesh, IEnumerable<int> triangles) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Returns Type Description DMesh3 QuickSubmesh(DMesh3, Int32[]) Declaration public static DMesh3 QuickSubmesh(DMesh3 mesh, int[] triangles) Parameters Type Name Description DMesh3 mesh Int32 [] triangles Returns Type Description DMesh3"
  },
  "api/g3.DSubmesh3Set.html": {
    "href": "api/g3.DSubmesh3Set.html",
    "title": "Class DSubmesh3Set | ViRGIS VR GIS",
    "keywords": "Class DSubmesh3Set A set of submeshes of a base mesh. You provide a set of keys, and a Func that returns the triangle index list for a given key. The set of DSubmesh3 objects are computed on construction. Inheritance Object DSubmesh3Set Implements IEnumerable < DSubmesh3 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DSubmesh3Set : IEnumerable<DSubmesh3>, IEnumerable Constructors DSubmesh3Set(DMesh3, MeshConnectedComponents) Construct submesh set for an already-computed MeshConnectedComponents instance Declaration public DSubmesh3Set(DMesh3 mesh, MeshConnectedComponents components) Parameters Type Name Description DMesh3 mesh MeshConnectedComponents components DSubmesh3Set(DMesh3, IEnumerable<Object>, Func<Object, IEnumerable<Int32>>) Construct submesh set from given keys and key-to-indices Func Declaration public DSubmesh3Set(DMesh3 mesh, IEnumerable<object> keys, Func<object, IEnumerable<int>> indexSetsF) Parameters Type Name Description DMesh3 mesh IEnumerable < Object > keys Func < Object , IEnumerable < Int32 >> indexSetsF Fields KeyToMesh Mapping from keys to submeshes Declaration public Dictionary<object, DSubmesh3> KeyToMesh Field Value Type Description Dictionary < Object , DSubmesh3 > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Submeshes List of computed submeshes Declaration public List<DSubmesh3> Submeshes Field Value Type Description List < DSubmesh3 > TriangleSetF Declaration public Func<object, IEnumerable<int>> TriangleSetF Field Value Type Description Func < Object , IEnumerable < Int32 >> TriangleSetKeys Declaration public IEnumerable<object> TriangleSetKeys Field Value Type Description IEnumerable < Object > Methods ComputeSubMeshes() Declaration protected virtual void ComputeSubMeshes() GetEnumerator() Declaration public IEnumerator<DSubmesh3> GetEnumerator() Returns Type Description IEnumerator < DSubmesh3 > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVector-1.DBlock.html": {
    "href": "api/g3.DVector-1.DBlock.html",
    "title": "Struct DVector<T>.DBlock | ViRGIS VR GIS",
    "keywords": "Struct DVector<T>.DBlock Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct DBlock Fields data Declaration public T[] data Field Value Type Description T[] usedCount Declaration public int usedCount Field Value Type Description Int32"
  },
  "api/g3.DVector-1.html": {
    "href": "api/g3.DVector-1.html",
    "title": "Class DVector<T> | ViRGIS VR GIS",
    "keywords": "Class DVector<T> Inheritance Object DVector<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVector<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors DVector() Declaration public DVector() DVector(T[]) Declaration public DVector(T[] data) Parameters Type Name Description T[] data DVector(DVector<T>) Declaration public DVector(DVector<T> copy) Parameters Type Name Description DVector <T> copy DVector(IEnumerable<T>) Declaration public DVector(IEnumerable<T> init) Parameters Type Name Description IEnumerable <T> init Properties back Declaration public T back { get; set; } Property Value Type Description T BlockCount Declaration public int BlockCount { get; } Property Value Type Description Int32 empty Declaration public bool empty { get; } Property Value Type Description Boolean front Declaration public T front { get; set; } Property Value Type Description T Item[Int32] Declaration public T this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description T Length Declaration public int Length { get; } Property Value Type Description Int32 MemoryUsageBytes Declaration public int MemoryUsageBytes { get; } Property Value Type Description Int32 size Declaration public int size { get; } Property Value Type Description Int32 Methods Add(T) Declaration public void Add(T value) Parameters Type Name Description T value Add(T, Int32) Declaration public void Add(T value, int nRepeat) Parameters Type Name Description T value Int32 nRepeat Add(T[]) Declaration public void Add(T[] values) Parameters Type Name Description T[] values Add(T[], Int32) Declaration public void Add(T[] values, int nRepeat) Parameters Type Name Description T[] values Int32 nRepeat Apply(Action<T, Int32>) Apply action to each element of vector. Iterates by block so this is more efficient. Declaration public void Apply(Action<T, int> applyF) Parameters Type Name Description Action <T, Int32 > applyF ApplyReplace(Func<T, Int32, T>) set vec[i] = applyF(vec[i], i) for each element of vector Declaration public void ApplyReplace(Func<T, int, T> applyF) Parameters Type Name Description Func <T, Int32 , T> applyF BlockIterator() Declaration public IEnumerable<DVector<T>.DBlock> BlockIterator() Returns Type Description IEnumerable < DVector.DBlock <>> Clear() Calls Array.Clear() on each block, which sets value to 'default' for type Declaration public void Clear() copy(DVector<T>) Declaration public void copy(DVector<T> copyIn) Parameters Type Name Description DVector <T> copyIn FastGetBuffer(DVector<Double>, Double*) Declaration public static void FastGetBuffer(DVector<double> v, double *pBuffer) Parameters Type Name Description DVector < Double > v Double * pBuffer FastGetBuffer(DVector<Int32>, Int32*) Declaration public static void FastGetBuffer(DVector<int> v, int *pBuffer) Parameters Type Name Description DVector < Int32 > v Int32 * pBuffer FastGetBuffer(DVector<Single>, Single*) Declaration public static void FastGetBuffer(DVector<float> v, float *pBuffer) Parameters Type Name Description DVector < Single > v Single * pBuffer GetBuffer() Declaration public T[] GetBuffer() Returns Type Description T[] GetBuffer(T[]) Declaration public void GetBuffer(T[] data) Parameters Type Name Description T[] data GetBufferCast<T2>() Declaration public T2[] GetBufferCast<T2>() Returns Type Description T2[] Type Parameters Name Description T2 GetBytes() Declaration public byte[] GetBytes() Returns Type Description Byte [] GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Initialize(T[]) Declaration public void Initialize(T[] data) Parameters Type Name Description T[] data insert(T, Int32) Declaration public void insert(T value, int index) Parameters Type Name Description T value Int32 index insertAt(T, Int32) Declaration public void insertAt(T value, int index) Parameters Type Name Description T value Int32 index pop_back() Declaration public void pop_back() push_back(T) Declaration public void push_back(T value) Parameters Type Name Description T value resize(Int32) Declaration public void resize(int count) Parameters Type Name Description Int32 count ToArray() Declaration public T[] ToArray() Returns Type Description T[] Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray2-1.html": {
    "href": "api/g3.DVectorArray2-1.html",
    "title": "Class DVectorArray2<T> | ViRGIS VR GIS",
    "keywords": "Class DVectorArray2<T> Inheritance Object DVectorArray2<T> DIndexArray2i DVectorArray2d DVectorArray2f Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray2<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors DVectorArray2(T[]) Declaration public DVectorArray2(T[] data) Parameters Type Name Description T[] data DVectorArray2(Int32) Declaration public DVectorArray2(int nCount = 0) Parameters Type Name Description Int32 nCount Fields vector Declaration public DVector<T> vector Field Value Type Description DVector <T> Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Append(T, T) Declaration public void Append(T a, T b) Parameters Type Name Description T a T b GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Resize(Int32) Declaration public void Resize(int count) Parameters Type Name Description Int32 count Set(Int32, T, T) Declaration public void Set(int i, T a, T b) Parameters Type Name Description Int32 i T a T b Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray2d.html": {
    "href": "api/g3.DVectorArray2d.html",
    "title": "Class DVectorArray2d | ViRGIS VR GIS",
    "keywords": "Class DVectorArray2d Inheritance Object DVectorArray2 < Double > DVectorArray2d Implements IEnumerable < Double > IEnumerable Inherited Members DVectorArray2<Double>.vector DVectorArray2<Double>.Count DVectorArray2<Double>.GetEnumerator() DVectorArray2<Double>.Resize(Int32) DVectorArray2<Double>.Set(Int32, Double, Double) DVectorArray2<Double>.Append(Double, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray2d : DVectorArray2<double>, IEnumerable<double>, IEnumerable Constructors DVectorArray2d(Double[]) Declaration public DVectorArray2d(double[] data) Parameters Type Name Description Double [] data DVectorArray2d(Int32) Declaration public DVectorArray2d(int nCount = 0) Parameters Type Name Description Int32 nCount Properties Item[Int32] Declaration public Vector2d this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector2d Methods AsVector2d() Declaration public IEnumerable<Vector2d> AsVector2d() Returns Type Description IEnumerable < Vector2d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray2f.html": {
    "href": "api/g3.DVectorArray2f.html",
    "title": "Class DVectorArray2f | ViRGIS VR GIS",
    "keywords": "Class DVectorArray2f Inheritance Object DVectorArray2 < Single > DVectorArray2f Implements IEnumerable < Single > IEnumerable Inherited Members DVectorArray2<Single>.vector DVectorArray2<Single>.Count DVectorArray2<Single>.GetEnumerator() DVectorArray2<Single>.Resize(Int32) DVectorArray2<Single>.Set(Int32, Single, Single) DVectorArray2<Single>.Append(Single, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray2f : DVectorArray2<float>, IEnumerable<float>, IEnumerable Constructors DVectorArray2f(Int32) Declaration public DVectorArray2f(int nCount = 0) Parameters Type Name Description Int32 nCount DVectorArray2f(Single[]) Declaration public DVectorArray2f(float[] data) Parameters Type Name Description Single [] data Properties Item[Int32] Declaration public Vector2f this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector2f Methods AsVector2f() Declaration public IEnumerable<Vector2d> AsVector2f() Returns Type Description IEnumerable < Vector2d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray3-1.html": {
    "href": "api/g3.DVectorArray3-1.html",
    "title": "Class DVectorArray3<T> | ViRGIS VR GIS",
    "keywords": "Class DVectorArray3<T> Inheritance Object DVectorArray3<T> DIndexArray3i DVectorArray3d DVectorArray3f DVectorArray3i Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray3<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors DVectorArray3(T[]) Declaration public DVectorArray3(T[] data) Parameters Type Name Description T[] data DVectorArray3(Int32) Declaration public DVectorArray3(int nCount = 0) Parameters Type Name Description Int32 nCount Fields vector Declaration public DVector<T> vector Field Value Type Description DVector <T> Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Append(T, T, T) Declaration public void Append(T a, T b, T c) Parameters Type Name Description T a T b T c Clear() Declaration public void Clear() GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Resize(Int32) Declaration public void Resize(int count) Parameters Type Name Description Int32 count Set(Int32, T, T, T) Declaration public void Set(int i, T a, T b, T c) Parameters Type Name Description Int32 i T a T b T c Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray3d.html": {
    "href": "api/g3.DVectorArray3d.html",
    "title": "Class DVectorArray3d | ViRGIS VR GIS",
    "keywords": "Class DVectorArray3d Inheritance Object DVectorArray3 < Double > DVectorArray3d Implements IEnumerable < Double > IEnumerable Inherited Members DVectorArray3<Double>.vector DVectorArray3<Double>.Count DVectorArray3<Double>.GetEnumerator() DVectorArray3<Double>.Resize(Int32) DVectorArray3<Double>.Set(Int32, Double, Double, Double) DVectorArray3<Double>.Append(Double, Double, Double) DVectorArray3<Double>.Clear() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray3d : DVectorArray3<double>, IEnumerable<double>, IEnumerable Constructors DVectorArray3d(Double[]) Declaration public DVectorArray3d(double[] data) Parameters Type Name Description Double [] data DVectorArray3d(Int32) Declaration public DVectorArray3d(int nCount = 0) Parameters Type Name Description Int32 nCount Properties Item[Int32] Declaration public Vector3d this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3d Methods AsVector3d() Declaration public IEnumerable<Vector3d> AsVector3d() Returns Type Description IEnumerable < Vector3d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray3f.html": {
    "href": "api/g3.DVectorArray3f.html",
    "title": "Class DVectorArray3f | ViRGIS VR GIS",
    "keywords": "Class DVectorArray3f Inheritance Object DVectorArray3 < Single > DVectorArray3f Implements IEnumerable < Single > IEnumerable Inherited Members DVectorArray3<Single>.vector DVectorArray3<Single>.Count DVectorArray3<Single>.GetEnumerator() DVectorArray3<Single>.Resize(Int32) DVectorArray3<Single>.Set(Int32, Single, Single, Single) DVectorArray3<Single>.Append(Single, Single, Single) DVectorArray3<Single>.Clear() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray3f : DVectorArray3<float>, IEnumerable<float>, IEnumerable Constructors DVectorArray3f(Int32) Declaration public DVectorArray3f(int nCount = 0) Parameters Type Name Description Int32 nCount DVectorArray3f(Single[]) Declaration public DVectorArray3f(float[] data) Parameters Type Name Description Single [] data Properties Item[Int32] Declaration public Vector3f this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3f Methods AsVector3f() Declaration public IEnumerable<Vector3f> AsVector3f() Returns Type Description IEnumerable < Vector3f > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DVectorArray3i.html": {
    "href": "api/g3.DVectorArray3i.html",
    "title": "Class DVectorArray3i | ViRGIS VR GIS",
    "keywords": "Class DVectorArray3i Inheritance Object DVectorArray3 < Int32 > DVectorArray3i Implements IEnumerable < Int32 > IEnumerable Inherited Members DVectorArray3<Int32>.vector DVectorArray3<Int32>.Count DVectorArray3<Int32>.GetEnumerator() DVectorArray3<Int32>.Resize(Int32) DVectorArray3<Int32>.Set(Int32, Int32, Int32, Int32) DVectorArray3<Int32>.Append(Int32, Int32, Int32) DVectorArray3<Int32>.Clear() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DVectorArray3i : DVectorArray3<int>, IEnumerable<int>, IEnumerable Constructors DVectorArray3i(Int32) Declaration public DVectorArray3i(int nCount = 0) Parameters Type Name Description Int32 nCount DVectorArray3i(Int32[]) Declaration public DVectorArray3i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Vector3i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3i Methods AsVector3i() Declaration public IEnumerable<Vector3i> AsVector3i() Returns Type Description IEnumerable < Vector3i > Set(Int32, Int32, Int32, Int32, Boolean) Declaration public void Set(int i, int a, int b, int c, bool bCycle = false) Parameters Type Name Description Int32 i Int32 a Int32 b Int32 c Boolean bCycle Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DynamicPriorityQueue-1.html": {
    "href": "api/g3.DynamicPriorityQueue-1.html",
    "title": "Class DynamicPriorityQueue<T> | ViRGIS VR GIS",
    "keywords": "Class DynamicPriorityQueue<T> Inheritance Object DynamicPriorityQueue<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class DynamicPriorityQueue<T> : IEnumerable<T>, IEnumerable where T : DynamicPriorityQueueNode Type Parameters Name Description T Constructors DynamicPriorityQueue() Declaration public DynamicPriorityQueue() Fields EnableDebugChecks Declaration public bool EnableDebugChecks Field Value Type Description Boolean Properties Count number of nodes currently in queue Declaration public int Count { get; } Property Value Type Description Int32 First node at head of queue Declaration public T First { get; } Property Value Type Description T FirstPriority Priority of node at head of queue Declaration public float FirstPriority { get; } Property Value Type Description Single Methods Clear(Boolean) reset the queue to empty state. if bFreeMemory is false, we don't discard internal data structures, so there will be less allocation next time (this does not make a huge difference...) Declaration public void Clear(bool bFreeMemory = true) Parameters Type Name Description Boolean bFreeMemory Contains(T) constant-time check to see if node is already in queue Declaration public bool Contains(T node) Parameters Type Name Description T node Returns Type Description Boolean DebugPrint() Declaration public void DebugPrint() Dequeue() remove node at head of queue, update queue, and return that node Declaration public T Dequeue() Returns Type Description T Enqueue(T, Single) Add node to list w/ given priority Behavior is undefined if you call w/ same node twice Declaration public void Enqueue(T node, float priority) Parameters Type Name Description T node Single priority GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IsValidQueue() Check if queue has been corrupted Declaration public bool IsValidQueue() Returns Type Description Boolean Remove(T) remove this node from queue. Undefined behavior if called w/ same node twice! Behavior is undefined if you call w/ node that is not in queue Declaration public void Remove(T node) Parameters Type Name Description T node Update(T, Single) update priority at node, and then move it to correct position in queue Behavior is undefined if you call w/ node that is not in queue Declaration public void Update(T node, float priority) Parameters Type Name Description T node Single priority Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.DynamicPriorityQueueNode.html": {
    "href": "api/g3.DynamicPriorityQueueNode.html",
    "title": "Class DynamicPriorityQueueNode | ViRGIS VR GIS",
    "keywords": "Class DynamicPriorityQueueNode To use DynamicPriorityQueue, your queue node type needs to subclass this one. However the priority and index members are for internal queue use, not yours! Inheritance Object DynamicPriorityQueueNode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class DynamicPriorityQueueNode Properties priority Declaration public float priority { get; protected set; } Property Value Type Description Single"
  },
  "api/g3.EdgeConstraint.html": {
    "href": "api/g3.EdgeConstraint.html",
    "title": "Struct EdgeConstraint | ViRGIS VR GIS",
    "keywords": "Struct EdgeConstraint Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeConstraint Constructors EdgeConstraint(EdgeRefineFlags) Declaration public EdgeConstraint(EdgeRefineFlags rflags) Parameters Type Name Description EdgeRefineFlags rflags EdgeConstraint(EdgeRefineFlags, IProjectionTarget) Declaration public EdgeConstraint(EdgeRefineFlags rflags, IProjectionTarget target) Parameters Type Name Description EdgeRefineFlags rflags IProjectionTarget target Fields FullyConstrained Declaration public static readonly EdgeConstraint FullyConstrained Field Value Type Description EdgeConstraint NoFlips Declaration public static readonly EdgeConstraint NoFlips Field Value Type Description EdgeConstraint Target Declaration public IProjectionTarget Target Field Value Type Description IProjectionTarget TrackingSetID Declaration public int TrackingSetID Field Value Type Description Int32 Unconstrained Declaration public static readonly EdgeConstraint Unconstrained Field Value Type Description EdgeConstraint Properties CanCollapse Declaration public bool CanCollapse { get; } Property Value Type Description Boolean CanFlip Declaration public bool CanFlip { get; } Property Value Type Description Boolean CanSplit Declaration public bool CanSplit { get; } Property Value Type Description Boolean IsUnconstrained Declaration public bool IsUnconstrained { get; } Property Value Type Description Boolean NoModifications Declaration public bool NoModifications { get; } Property Value Type Description Boolean"
  },
  "api/g3.EdgeLoop.html": {
    "href": "api/g3.EdgeLoop.html",
    "title": "Class EdgeLoop | ViRGIS VR GIS",
    "keywords": "Class EdgeLoop Sequential set of vertices/edges in a mesh, that form a closed loop. If all you have are the vertices, use EdgeLoop.VertexLoopToEdgeLoop() to construct an EdgeLoop Inheritance Object EdgeLoop Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class EdgeLoop Constructors EdgeLoop(DMesh3) Declaration public EdgeLoop(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh EdgeLoop(DMesh3, Int32[], Int32[], Boolean) Declaration public EdgeLoop(DMesh3 mesh, int[] vertices, int[] edges, bool bCopyArrays) Parameters Type Name Description DMesh3 mesh Int32 [] vertices Int32 [] edges Boolean bCopyArrays EdgeLoop(EdgeLoop) Declaration public EdgeLoop(EdgeLoop copy) Parameters Type Name Description EdgeLoop copy Fields BowtieVertices Declaration public int[] BowtieVertices Field Value Type Description Int32 [] Edges Declaration public int[] Edges Field Value Type Description Int32 [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Vertices Declaration public int[] Vertices Field Value Type Description Int32 [] Properties EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods CheckValidity(FailMode) Exhaustively check that verts and edges of this EdgeLoop are consistent. Not for production use. Declaration public bool CheckValidity(FailMode eFailMode = FailMode.Throw) Parameters Type Name Description FailMode eFailMode Returns Type Description Boolean CorrectOrientation() if this is a border edge-loop, we can check that it is oriented correctly, and if not, reverse it. Returns true if we reversed orientation. Declaration public bool CorrectOrientation() Returns Type Description Boolean CountWithinTolerance(Vector3d, Double, out Int32) Declaration public int CountWithinTolerance(Vector3d v, double tol, out int last_in_tol) Parameters Type Name Description Vector3d v Double tol Int32 last_in_tol Returns Type Description Int32 FindNearestVertex(Vector3d) find index of vertices of loop that is closest to point v Declaration public int FindNearestVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 FindVertexIndex(Int32) find index of vertex vID in Vertices list, or -1 if not found Declaration public int FindVertexIndex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 FromEdges(DMesh3, IList<Int32>) construct EdgeLoop from a list of edges of mesh Declaration public static EdgeLoop FromEdges(DMesh3 mesh, IList<int> edges) Parameters Type Name Description DMesh3 mesh IList < Int32 > edges Returns Type Description EdgeLoop FromVertices(DMesh3, IList<Int32>) construct EdgeLoop from a list of vertices of mesh Declaration public static EdgeLoop FromVertices(DMesh3 mesh, IList<int> vertices) Parameters Type Name Description DMesh3 mesh IList < Int32 > vertices Returns Type Description EdgeLoop FromVertices(DMesh3, IList<Int32>, Boolean) construct EdgeLoop from a list of vertices of mesh if loop is a boundary edge, we can correct orientation if requested Declaration public static EdgeLoop FromVertices(DMesh3 mesh, IList<int> vertices, bool bAutoOrient = true) Parameters Type Name Description DMesh3 mesh IList < Int32 > vertices Boolean bAutoOrient Returns Type Description EdgeLoop GetBounds() Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexSpan(Int32, Int32, Int32[], Boolean) stores vertices [starti, starti+1, ... starti+count-1] in span, and returns span, or null if invalid range Declaration public int[] GetVertexSpan(int starti, int count, int[] span, bool reverse = false) Parameters Type Name Description Int32 starti Int32 count Int32 [] span Boolean reverse Returns Type Description Int32 [] IsBoundaryLoop(DMesh3) Check if all edges of this loop are boundary edges. If testMesh != null, will check that mesh instead of internal Mesh Declaration public bool IsBoundaryLoop(DMesh3 testMesh = null) Parameters Type Name Description DMesh3 testMesh Returns Type Description Boolean IsInternalLoop() check if all edges of this loop are internal edges (ie none on boundary) Declaration public bool IsInternalLoop() Returns Type Description Boolean IsSameLoop(EdgeLoop, Boolean, Double) Declaration public bool IsSameLoop(EdgeLoop Loop2, bool bReverse2 = false, double tolerance = 1E-08) Parameters Type Name Description EdgeLoop Loop2 Boolean bReverse2 Double tolerance Returns Type Description Boolean Reverse() Declaration public void Reverse() ToCurve(DMesh3) Declaration public DCurve3 ToCurve(DMesh3 sourceMesh = null) Parameters Type Name Description DMesh3 sourceMesh Returns Type Description DCurve3 VertexLoopToEdgeLoop(DMesh3, Int32[]) Convert a vertex loop to an edge loop. This should be somewhere else... Declaration public static int[] VertexLoopToEdgeLoop(DMesh3 mesh, int[] vertex_loop) Parameters Type Name Description DMesh3 mesh Int32 [] vertex_loop Returns Type Description Int32 []"
  },
  "api/g3.EdgeLoopRemesher.html": {
    "href": "api/g3.EdgeLoopRemesher.html",
    "title": "Class EdgeLoopRemesher | ViRGIS VR GIS",
    "keywords": "Class EdgeLoopRemesher This is a custom Remesher that only affects the edges along an EdgeLoop. The edges are only split and collapsed, flipping is not permitted. The loop vertices are smoothed along the loop, ie using curve laplacian rather than one-ring laplacian. [TODO] avoid rebuild_edge_list(). requires handling various cases below... [TODO] Precompute() seems overly expensive...? [TODO] local-smoothing impl is not very efficient. Should not be necessary to rebuild nbrhood each time if we are not changing it. Inheritance Object MeshRefinerBase Remesher EdgeLoopRemesher Inherited Members Remesher.EnableFlips Remesher.EnableCollapses Remesher.EnableSplits Remesher.EnableSmoothing Remesher.PreventNormalFlips Remesher.MinEdgeLength Remesher.MaxEdgeLength Remesher.SmoothSpeedT Remesher.SmoothType Remesher.CustomSmoothF Remesher.VertexControlF Remesher.DebugEdges Remesher.ProjectionMode Remesher.EnableParallelProjection Remesher.EnableParallelSmooth Remesher.EnableSmoothInPlace Remesher.ProjectionTarget Remesher.SetProjectionTarget(IProjectionTarget) Remesher.SetTargetEdgeLength(Double) Remesher.ENABLE_PROFILING Remesher.ModifiedEdgesLastPass Remesher.BasicRemeshPass() Remesher.ProcessEdge(Int32) Remesher.update_after_split(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Remesher.project_vertex(Int32, IProjectionTarget) Remesher.get_projected_collapse_position(Int32, Vector3d) Remesher.FullSmoothPass_InPlace(Boolean) Remesher.FullSmoothPass_Buffer(Boolean) Remesher.vBufferV Remesher.vModifiedV Remesher.InitializeVertexBufferForPass() Remesher.ApplyVertexBuffer(Boolean) Remesher.ComputeSmoothedVertexPos(Int32, Func<DMesh3, Int32, Double, Vector3d>, Boolean) Remesher.FullProjectionPass() Remesher.ENABLE_DEBUG_CHECKS Remesher.DoDebugChecks() Remesher.begin_pass() Remesher.begin_ops() Remesher.end_ops() Remesher.end_smooth() Remesher.begin_project() Remesher.end_project() Remesher.begin_collapse() Remesher.end_collapse() Remesher.begin_flip() Remesher.end_flip() Remesher.begin_split() Remesher.end_split() MeshRefinerBase.mesh MeshRefinerBase.constraints MeshRefinerBase.AllowCollapseFixedVertsWithSameSetID MeshRefinerBase.EdgeFlipTolerance MeshRefinerBase.edge_flip_tol MeshRefinerBase.Mesh MeshRefinerBase.Constraints MeshRefinerBase.SetExternalConstraints(MeshConstraints) MeshRefinerBase.Progress MeshRefinerBase.Cancelled() MeshRefinerBase.edge_flip_metric(Vector3d, Vector3d) MeshRefinerBase.collapse_creates_flip_or_invalid(Int32, Int32, Vector3d, Int32, Int32) MeshRefinerBase.flip_inverts_normals(Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_constraints(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_vtx(Int32, Int32, Int32, Int32) MeshRefinerBase.vertex_is_fixed(Int32) MeshRefinerBase.vertex_is_constrained(Int32) MeshRefinerBase.get_vertex_constraint(Int32) MeshRefinerBase.get_vertex_constraint(Int32, VertexConstraint) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class EdgeLoopRemesher : Remesher Constructors EdgeLoopRemesher(DMesh3, EdgeLoop) Declaration public EdgeLoopRemesher(DMesh3 m, EdgeLoop loop) Parameters Type Name Description DMesh3 m EdgeLoop loop Fields InputLoop Declaration public EdgeLoop InputLoop Field Value Type Description EdgeLoop LocalSmoothingRings Can optionally include N one-rings around the loop in the smoothing/projection pass. This will produce cleaner results. Declaration public int LocalSmoothingRings Field Value Type Description Int32 OutputLoop Declaration public EdgeLoop OutputLoop Field Value Type Description EdgeLoop Methods begin_smooth() Declaration protected override void begin_smooth() Overrides Remesher.begin_smooth() end_pass() Declaration protected override void end_pass() Overrides Remesher.end_pass() next_edge(Int32, out Boolean) Declaration protected override int next_edge(int cur_eid, out bool bDone) Parameters Type Name Description Int32 cur_eid Boolean bDone Returns Type Description Int32 Overrides Remesher.next_edge(Int32, out Boolean) OnEdgeCollapse(Int32, Int32, Int32, DMesh3.EdgeCollapseInfo) Declaration protected override void OnEdgeCollapse(int edgeID, int va, int vb, DMesh3.EdgeCollapseInfo collapseInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeCollapseInfo collapseInfo Overrides Remesher.OnEdgeCollapse(Int32, Int32, Int32, DMesh3.EdgeCollapseInfo) OnEdgeSplit(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Declaration protected override void OnEdgeSplit(int edgeID, int va, int vb, DMesh3.EdgeSplitInfo splitInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeSplitInfo splitInfo Overrides Remesher.OnEdgeSplit(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Precompute() Declaration public override void Precompute() Overrides Remesher.Precompute() project_vertices() Declaration protected override IEnumerable<int> project_vertices() Returns Type Description IEnumerable < Int32 > Overrides Remesher.project_vertices() smooth_vertices() Declaration protected override IEnumerable<int> smooth_vertices() Returns Type Description IEnumerable < Int32 > Overrides Remesher.smooth_vertices() start_edges() Declaration protected override int start_edges() Returns Type Description Int32 Overrides Remesher.start_edges() UpdateLoop(EdgeLoop) Declaration public void UpdateLoop(EdgeLoop loop) Parameters Type Name Description EdgeLoop loop"
  },
  "api/g3.EdgeRefineFlags.html": {
    "href": "api/g3.EdgeRefineFlags.html",
    "title": "Enum EdgeRefineFlags | ViRGIS VR GIS",
    "keywords": "Enum EdgeRefineFlags Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum EdgeRefineFlags Fields Name Description FullyConstrained NoCollapse NoConstraint NoFlip NoSplit PreserveTopology"
  },
  "api/g3.EdgeSpan.html": {
    "href": "api/g3.EdgeSpan.html",
    "title": "Class EdgeSpan | ViRGIS VR GIS",
    "keywords": "Class EdgeSpan An EdgeSpan is a continous set of edges in a Mesh that is not closed (that would be an EdgeLoop) Inheritance Object EdgeSpan Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class EdgeSpan Constructors EdgeSpan(DMesh3) Declaration public EdgeSpan(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh EdgeSpan(DMesh3, Int32[], Int32[], Boolean) Declaration public EdgeSpan(DMesh3 mesh, int[] vertices, int[] edges, bool bCopyArrays) Parameters Type Name Description DMesh3 mesh Int32 [] vertices Int32 [] edges Boolean bCopyArrays Fields BowtieVertices Declaration public int[] BowtieVertices Field Value Type Description Int32 [] Edges Declaration public int[] Edges Field Value Type Description Int32 [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Vertices Declaration public int[] Vertices Field Value Type Description Int32 [] Properties EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods CheckValidity(FailMode) Exhaustively check that verts and edges of this EdgeSpan are consistent. Not for production use. Declaration public bool CheckValidity(FailMode eFailMode = FailMode.Throw) Parameters Type Name Description FailMode eFailMode Returns Type Description Boolean CountWithinTolerance(Vector3d, Double, out Int32) Declaration public int CountWithinTolerance(Vector3d v, double tol, out int last_in_tol) Parameters Type Name Description Vector3d v Double tol Int32 last_in_tol Returns Type Description Int32 FindNearestVertex(Vector3d) Declaration public int FindNearestVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 FromEdges(DMesh3, IList<Int32>) construct EdgeSpan from a list of edges of mesh Declaration public static EdgeSpan FromEdges(DMesh3 mesh, IList<int> edges) Parameters Type Name Description DMesh3 mesh IList < Int32 > edges Returns Type Description EdgeSpan FromVertices(DMesh3, IList<Int32>) construct EdgeSpan from a list of vertices of mesh Declaration public static EdgeSpan FromVertices(DMesh3 mesh, IList<int> vertices) Parameters Type Name Description DMesh3 mesh IList < Int32 > vertices Returns Type Description EdgeSpan GetBounds() Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d IsBoundarySpan(DMesh3) Declaration public bool IsBoundarySpan(DMesh3 testMesh = null) Parameters Type Name Description DMesh3 testMesh Returns Type Description Boolean IsInternalSpan() Declaration public bool IsInternalSpan() Returns Type Description Boolean IsSameSpan(EdgeSpan, Boolean, Double) Declaration public bool IsSameSpan(EdgeSpan Spanw, bool bReverse2 = false, double tolerance = 1E-08) Parameters Type Name Description EdgeSpan Spanw Boolean bReverse2 Double tolerance Returns Type Description Boolean ToCurve(DMesh3) Declaration public DCurve3 ToCurve(DMesh3 sourceMesh = null) Parameters Type Name Description DMesh3 sourceMesh Returns Type Description DCurve3 VerticesToEdges(DMesh3, Int32[]) Convert vertex span to list of edges. This should be somewhere else. Declaration public static int[] VerticesToEdges(DMesh3 mesh, int[] vertex_span) Parameters Type Name Description DMesh3 mesh Int32 [] vertex_span Returns Type Description Int32 []"
  },
  "api/g3.Ellipse2d.html": {
    "href": "api/g3.Ellipse2d.html",
    "title": "Class Ellipse2d | ViRGIS VR GIS",
    "keywords": "Class Ellipse2d Inheritance Object Ellipse2d Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Ellipse2d : IParametricCurve2d Constructors Ellipse2d(Vector2d, Vector2d, Vector2d, Vector2d) Declaration public Ellipse2d(Vector2d center, Vector2d axis0, Vector2d axis1, Vector2d extent) Parameters Type Name Description Vector2d center Vector2d axis0 Vector2d axis1 Vector2d extent Ellipse2d(Vector2d, Vector2d, Vector2d, Double, Double) Declaration public Ellipse2d(Vector2d center, Vector2d axis0, Vector2d axis1, double extent0, double extent1) Parameters Type Name Description Vector2d center Vector2d axis0 Vector2d axis1 Double extent0 Double extent1 Ellipse2d(Vector2d, Double, Double, Double) Declaration public Ellipse2d(Vector2d center, double rotationAngleDeg, double extent0, double extent1) Parameters Type Name Description Vector2d center Double rotationAngleDeg Double extent0 Double extent1 Fields Axis0 Declaration public Vector2d Axis0 Field Value Type Description Vector2d Axis1 Declaration public Vector2d Axis1 Field Value Type Description Vector2d Center Declaration public Vector2d Center Field Value Type Description Vector2d Extent Declaration public Vector2d Extent Field Value Type Description Vector2d IsReversed Declaration public bool IsReversed Field Value Type Description Boolean Properties ApproxArcLen Declaration public double ApproxArcLen { get; } Property Value Type Description Double ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Area Declaration public double Area { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Contains(Vector2d) Declaration public bool Contains(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Boolean Evaluate(Vector2d) Declaration public double Evaluate(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Double FromCoefficients(Matrix2d, Vector2d, Double) Declaration public bool FromCoefficients(Matrix2d A, Vector2d B, double C) Parameters Type Name Description Matrix2d A Vector2d B Double C Returns Type Description Boolean FromCoefficients(Double[]) Declaration public bool FromCoefficients(double[] coeff) Parameters Type Name Description Double [] coeff Returns Type Description Boolean GetM() Declaration public Matrix2d GetM() Returns Type Description Matrix2d GetMInverse() Declaration public Matrix2d GetMInverse() Returns Type Description Matrix2d Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleDeg(Double) Declaration public Vector2d SampleDeg(double degrees) Parameters Type Name Description Double degrees Returns Type Description Vector2d SampleRad(Double) Declaration public Vector2d SampleRad(double radians) Parameters Type Name Description Double radians Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d ToCoefficients() Declaration public double[] ToCoefficients() Returns Type Description Double [] ToCoefficients(ref Matrix2d, ref Vector2d, ref Double) Declaration public void ToCoefficients(ref Matrix2d A, ref Vector2d B, ref double C) Parameters Type Name Description Matrix2d A Vector2d B Double C Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.EllipseArc2d.html": {
    "href": "api/g3.EllipseArc2d.html",
    "title": "Class EllipseArc2d | ViRGIS VR GIS",
    "keywords": "Class EllipseArc2d Inheritance Object EllipseArc2d Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class EllipseArc2d : IParametricCurve2d Constructors EllipseArc2d(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) Declaration public EllipseArc2d(Vector2d center, Vector2d axis0, Vector2d axis1, Vector2d extent, double startDeg, double endDeg) Parameters Type Name Description Vector2d center Vector2d axis0 Vector2d axis1 Vector2d extent Double startDeg Double endDeg EllipseArc2d(Vector2d, Double, Double, Double, Double, Double) Declaration public EllipseArc2d(Vector2d center, double rotationAngleDeg, double extent0, double extent1, double startDeg, double endDeg) Parameters Type Name Description Vector2d center Double rotationAngleDeg Double extent0 Double extent1 Double startDeg Double endDeg Fields AngleEndDeg Declaration public double AngleEndDeg Field Value Type Description Double AngleStartDeg Declaration public double AngleStartDeg Field Value Type Description Double Axis0 Declaration public Vector2d Axis0 Field Value Type Description Vector2d Axis1 Declaration public Vector2d Axis1 Field Value Type Description Vector2d Center Declaration public Vector2d Center Field Value Type Description Vector2d Extent Declaration public Vector2d Extent Field Value Type Description Vector2d IsReversed Declaration public bool IsReversed Field Value Type Description Boolean Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.FaceGroupOptimizer.html": {
    "href": "api/g3.FaceGroupOptimizer.html",
    "title": "Class FaceGroupOptimizer | ViRGIS VR GIS",
    "keywords": "Class FaceGroupOptimizer Given input mesh with a set of face groups, optimize the face group boundaries. This involves flipping triangles between groups, and/or assigning to \"background\" group. Also has Dilate/Contract functions to grow/shrink groups in various ways. Inheritance Object FaceGroupOptimizer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class FaceGroupOptimizer Constructors FaceGroupOptimizer(DMesh3) Declaration public FaceGroupOptimizer(DMesh3 meshIn) Parameters Type Name Description DMesh3 meshIn Fields BackgroundGroupID Declaration public int BackgroundGroupID Field Value Type Description Int32 DontClipEnclosedFins Declaration public bool DontClipEnclosedFins Field Value Type Description Boolean GetEnumeratorF Declaration public Func<IEnumerable<int>> GetEnumeratorF Field Value Type Description Func < IEnumerable < Int32 >> NoEarGroupSwaps Declaration public bool NoEarGroupSwaps Field Value Type Description Boolean Properties Mesh Declaration public DMesh3 Mesh { get; } Property Value Type Description DMesh3 Methods ClipFins(Boolean) Declaration public int ClipFins(bool bClipLoners) Parameters Type Name Description Boolean bClipLoners Returns Type Description Int32 ContractAllGroups(Int32, Boolean) Simultaneously contract all groups by N rings. if bBackroundOnly=true, then non-background group borders stay connected, otherwise they pull apart. Declaration public int ContractAllGroups(int nRings, bool bBackgroundOnly) Parameters Type Name Description Int32 nRings Boolean bBackgroundOnly Returns Type Description Int32 DilateAllGroups(Int32) Simultaneously grow all groups into areas with background group id, expanding by N rings. does not expand across group borders. Declaration public int DilateAllGroups(int nRings) Parameters Type Name Description Int32 nRings Returns Type Description Int32 FillEars(Boolean) Declaration public int FillEars(bool bFillTinyHoles) Parameters Type Name Description Boolean bFillTinyHoles Returns Type Description Int32 LocalOptimize(Boolean, Boolean, Boolean, Boolean, Int32) Do rounds of ear-filling and fin-clipping until we can't anymore Returns true if group assignments were modified Declaration public bool LocalOptimize(bool bClipFins, bool bFillEars, bool bFillTinyHoles = true, bool bClipLoners = true, int max_iters = 100) Parameters Type Name Description Boolean bClipFins Boolean bFillEars Boolean bFillTinyHoles Boolean bClipLoners Int32 max_iters Returns Type Description Boolean"
  },
  "api/g3.FaceGroupUtil.html": {
    "href": "api/g3.FaceGroupUtil.html",
    "title": "Class FaceGroupUtil | ViRGIS VR GIS",
    "keywords": "Class FaceGroupUtil Inheritance Object FaceGroupUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class FaceGroupUtil Methods CountAllGroups(DMesh3) count number of tris in each group in mesh returned pairs are [group_id, tri_count] Declaration public static SparseList<int> CountAllGroups(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description SparseList < Int32 > FindAllGroups(DMesh3) find the set of group ids used in mesh Declaration public static HashSet<int> FindAllGroups(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description HashSet < Int32 > FindTrianglesByGroup(IMesh, Int32) find list of triangles in mesh with specific group id Declaration public static List<int> FindTrianglesByGroup(IMesh mesh, int findGroupID) Parameters Type Name Description IMesh mesh Int32 findGroupID Returns Type Description List < Int32 > FindTriangleSetsByGroup(DMesh3, Int32) collect triangles by group id. Returns array of triangle lists (stored as arrays). This requires 2 passes over mesh, but each pass is linear Declaration public static int[][] FindTriangleSetsByGroup(DMesh3 mesh, int ignoreGID = -2147483648) Parameters Type Name Description DMesh3 mesh Int32 ignoreGID Returns Type Description Int32 [][] SeparateMeshByGroups(DMesh3) Declaration public static DMesh3[] SeparateMeshByGroups(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description DMesh3 [] SeparateMeshByGroups(DMesh3, out Int32[]) split input mesh into submeshes based on group ID does not separate disconnected components w/ same group ID Declaration public static DMesh3[] SeparateMeshByGroups(DMesh3 mesh, out int[] groupIDs) Parameters Type Name Description DMesh3 mesh Int32 [] groupIDs Returns Type Description DMesh3 [] SetGroupID(DMesh3, IEnumerable<Int32>, Int32) Set group id of subset of triangles in mesh Declaration public static void SetGroupID(DMesh3 mesh, IEnumerable<int> triangles, int to) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Int32 to SetGroupID(DMesh3, Int32) Set group ID of all triangles in mesh Declaration public static void SetGroupID(DMesh3 mesh, int to) Parameters Type Name Description DMesh3 mesh Int32 to SetGroupToGroup(DMesh3, Int32, Int32) replace group id in mesh Declaration public static void SetGroupToGroup(DMesh3 mesh, int from, int to) Parameters Type Name Description DMesh3 mesh Int32 from Int32 to"
  },
  "api/g3.FailMode.html": {
    "href": "api/g3.FailMode.html",
    "title": "Enum FailMode | ViRGIS VR GIS",
    "keywords": "Enum FailMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum FailMode Fields Name Description DebugAssert gDevAssert ReturnOnly Throw"
  },
  "api/g3.FastPointWinding.html": {
    "href": "api/g3.FastPointWinding.html",
    "title": "Class FastPointWinding | ViRGIS VR GIS",
    "keywords": "Class FastPointWinding Formulas for point-set winding number approximation Inheritance Object FastPointWinding Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class FastPointWinding Methods ComputeCoeffs(IPointSet, IEnumerable<Int32>, Double[], ref Vector3d, ref Double, ref Vector3d, ref Matrix3d) precompute constant coefficients of point winding number approximation pointAreas must be provided, and pointSet must have vertex normals! p: 'center' of expansion for points (area-weighted point avg) r: max distance from p to points order1: first-order vector coeff order2: second-order matrix coeff Declaration public static void ComputeCoeffs(IPointSet pointSet, IEnumerable<int> points, double[] pointAreas, ref Vector3d p, ref double r, ref Vector3d order1, ref Matrix3d order2) Parameters Type Name Description IPointSet pointSet IEnumerable < Int32 > points Double [] pointAreas Vector3d p Double r Vector3d order1 Matrix3d order2 EvaluateOrder1Approx(ref Vector3d, ref Vector3d, ref Vector3d) Evaluate first-order FWN approximation at point q, relative to center c Declaration public static double EvaluateOrder1Approx(ref Vector3d center, ref Vector3d order1Coeff, ref Vector3d q) Parameters Type Name Description Vector3d center Vector3d order1Coeff Vector3d q Returns Type Description Double EvaluateOrder2Approx(ref Vector3d, ref Vector3d, ref Matrix3d, ref Vector3d) Evaluate second-order FWN approximation at point q, relative to center c Declaration public static double EvaluateOrder2Approx(ref Vector3d center, ref Vector3d order1Coeff, ref Matrix3d order2Coeff, ref Vector3d q) Parameters Type Name Description Vector3d center Vector3d order1Coeff Matrix3d order2Coeff Vector3d q Returns Type Description Double ExactEval(ref Vector3d, ref Vector3d, Double, ref Vector3d) Declaration public static double ExactEval(ref Vector3d x, ref Vector3d xn, double xA, ref Vector3d q) Parameters Type Name Description Vector3d x Vector3d xn Double xA Vector3d q Returns Type Description Double Order1Approx(ref Vector3d, ref Vector3d, ref Vector3d, Double, ref Vector3d) Declaration public static double Order1Approx(ref Vector3d x, ref Vector3d p, ref Vector3d xn, double xA, ref Vector3d q) Parameters Type Name Description Vector3d x Vector3d p Vector3d xn Double xA Vector3d q Returns Type Description Double Order2Approx(ref Vector3d, ref Vector3d, ref Vector3d, Double, ref Vector3d) Declaration public static double Order2Approx(ref Vector3d x, ref Vector3d p, ref Vector3d xn, double xA, ref Vector3d q) Parameters Type Name Description Vector3d x Vector3d p Vector3d xn Double xA Vector3d q Returns Type Description Double"
  },
  "api/g3.FastQuaternionSVD.html": {
    "href": "api/g3.FastQuaternionSVD.html",
    "title": "Class FastQuaternionSVD | ViRGIS VR GIS",
    "keywords": "Class FastQuaternionSVD Fast Approximate SVD of 3x3 matrix that returns quaternions. Implemented based on https://github.com/benjones/quatSVD/blob/master/quatSVD.hpp which was re-implemented from http://pages.cs.wisc.edu/~sifakis/project_pages/svd.html By default, only does a small number of diagonalization iterations (4), which limits the accuracy of the solution. Results are still orthonormal but error when reconstructing matrix will be larger. This is fine for many applications. Can increase accuracy by increasing NumJacobiIterations parameter Note: does not produce same quaternions as running SingularValueDecomposition on matrix and converting resulting U/V to quaternions. The numbers will be similar but the signs will be different Useful properties: quaternions are rotations, there are no mirrors like in normal SVD TODO: SymmetricMatrix3d currently a class, could make a struct (see comments) Inheritance Object FastQuaternionSVD Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class FastQuaternionSVD Constructors FastQuaternionSVD() Declaration public FastQuaternionSVD() FastQuaternionSVD(Matrix3d, Double, Int32) Declaration public FastQuaternionSVD(Matrix3d matrix, double epsilon = 2.2204460492503131E-16, int jacobiIters = 4) Parameters Type Name Description Matrix3d matrix Double epsilon Int32 jacobiIters Fields S Declaration public Vector3d S Field Value Type Description Vector3d U Declaration public Quaterniond U Field Value Type Description Quaterniond V Declaration public Quaterniond V Field Value Type Description Quaterniond Methods ReconstructMatrix() Compute U * S * V^T, useful for error-checking Declaration public Matrix3d ReconstructMatrix() Returns Type Description Matrix3d Solve(Matrix3d, Double, Int32) Declaration public void Solve(Matrix3d matrix, double epsilon = 2.2204460492503131E-16, int jacobiIters = -1) Parameters Type Name Description Matrix3d matrix Double epsilon Int32 jacobiIters"
  },
  "api/g3.FastTriWinding.html": {
    "href": "api/g3.FastTriWinding.html",
    "title": "Class FastTriWinding | ViRGIS VR GIS",
    "keywords": "Class FastTriWinding Formulas for triangle winding number approximation Inheritance Object FastTriWinding Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class FastTriWinding Methods ComputeCoeffs(DMesh3, IEnumerable<Int32>, ref Vector3d, ref Double, ref Vector3d, ref Matrix3d, MeshTriInfoCache) precompute constant coefficients of triangle winding number approximation p: 'center' of expansion for triangles (area-weighted centroid avg) r: max distance from p to triangles order1: first-order vector coeff order2: second-order matrix coeff triCache: optional precomputed triangle centroid/normal/area Declaration public static void ComputeCoeffs(DMesh3 mesh, IEnumerable<int> triangles, ref Vector3d p, ref double r, ref Vector3d order1, ref Matrix3d order2, MeshTriInfoCache triCache = null) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Vector3d p Double r Vector3d order1 Matrix3d order2 MeshTriInfoCache triCache EvaluateOrder1Approx(ref Vector3d, ref Vector3d, ref Vector3d) Evaluate first-order FWN approximation at point q, relative to center c Declaration public static double EvaluateOrder1Approx(ref Vector3d center, ref Vector3d order1Coeff, ref Vector3d q) Parameters Type Name Description Vector3d center Vector3d order1Coeff Vector3d q Returns Type Description Double EvaluateOrder2Approx(ref Vector3d, ref Vector3d, ref Matrix3d, ref Vector3d) Evaluate second-order FWN approximation at point q, relative to center c Declaration public static double EvaluateOrder2Approx(ref Vector3d center, ref Vector3d order1Coeff, ref Matrix3d order2Coeff, ref Vector3d q) Parameters Type Name Description Vector3d center Vector3d order1Coeff Matrix3d order2Coeff Vector3d q Returns Type Description Double Order1Approx(ref Triangle3d, ref Vector3d, ref Vector3d, ref Double, ref Vector3d) Declaration public static double Order1Approx(ref Triangle3d t, ref Vector3d p, ref Vector3d xn, ref double xA, ref Vector3d q) Parameters Type Name Description Triangle3d t Vector3d p Vector3d xn Double xA Vector3d q Returns Type Description Double Order2Approx(ref Triangle3d, ref Vector3d, ref Vector3d, ref Double, ref Vector3d) Declaration public static double Order2Approx(ref Triangle3d t, ref Vector3d p, ref Vector3d xn, ref double xA, ref Vector3d q) Parameters Type Name Description Triangle3d t Vector3d p Vector3d xn Double xA Vector3d q Returns Type Description Double"
  },
  "api/g3.FileSystemUtils.html": {
    "href": "api/g3.FileSystemUtils.html",
    "title": "Class FileSystemUtils | ViRGIS VR GIS",
    "keywords": "Class FileSystemUtils Inheritance Object FileSystemUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class FileSystemUtils Methods CanAccessFolder(String) Declaration public static bool CanAccessFolder(string sPath) Parameters Type Name Description String sPath Returns Type Description Boolean GetTempFilePathWithExtension(String) Declaration public static string GetTempFilePathWithExtension(string extension) Parameters Type Name Description String extension Returns Type Description String IsFullFilesystemPath(String) Declaration public static bool IsFullFilesystemPath(string s) Parameters Type Name Description String s Returns Type Description Boolean IsValidFilenameCharacter(Char) Declaration public static bool IsValidFilenameCharacter(char c) Parameters Type Name Description Char c Returns Type Description Boolean IsValidFilenameString(String) Declaration public static bool IsValidFilenameString(string s) Parameters Type Name Description String s Returns Type Description Boolean IsWebURL(String) Declaration public static bool IsWebURL(string s) Parameters Type Name Description String s Returns Type Description Boolean"
  },
  "api/g3.Frame3f.html": {
    "href": "api/g3.Frame3f.html",
    "title": "Struct Frame3f | ViRGIS VR GIS",
    "keywords": "Struct Frame3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Frame3f Constructors Frame3f(Frame3f) Declaration public Frame3f(Frame3f copy) Parameters Type Name Description Frame3f copy Frame3f(Vector3d) Declaration public Frame3f(Vector3d origin) Parameters Type Name Description Vector3d origin Frame3f(Vector3d, Vector3d) Declaration public Frame3f(Vector3d origin, Vector3d setZ) Parameters Type Name Description Vector3d origin Vector3d setZ Frame3f(Vector3f) Declaration public Frame3f(Vector3f origin) Parameters Type Name Description Vector3f origin Frame3f(Vector3f, Quaternionf) Declaration public Frame3f(Vector3f origin, Quaternionf orientation) Parameters Type Name Description Vector3f origin Quaternionf orientation Frame3f(Vector3f, Vector3f) Declaration public Frame3f(Vector3f origin, Vector3f setZ) Parameters Type Name Description Vector3f origin Vector3f setZ Frame3f(Vector3f, Vector3f, Vector3f, Vector3f) Declaration public Frame3f(Vector3f origin, Vector3f x, Vector3f y, Vector3f z) Parameters Type Name Description Vector3f origin Vector3f x Vector3f y Vector3f z Frame3f(Vector3f, Vector3f, Int32) Declaration public Frame3f(Vector3f origin, Vector3f setAxis, int nAxis) Parameters Type Name Description Vector3f origin Vector3f setAxis Int32 nAxis Fields Identity Declaration public static readonly Frame3f Identity Field Value Type Description Frame3f Properties Origin Declaration public Vector3f Origin { get; set; } Property Value Type Description Vector3f Rotation Declaration public Quaternionf Rotation { get; set; } Property Value Type Description Quaternionf X Declaration public Vector3f X { get; } Property Value Type Description Vector3f Y Declaration public Vector3f Y { get; } Property Value Type Description Vector3f Z Declaration public Vector3f Z { get; } Property Value Type Description Vector3f Methods AlignAxis(Int32, Vector3f) Declaration public void AlignAxis(int nAxis, Vector3f vTo) Parameters Type Name Description Int32 nAxis Vector3f vTo ConstrainedAlignAxis(Int32, Vector3f, Vector3f) Declaration public void ConstrainedAlignAxis(int nAxis, Vector3f vTo, Vector3f vAround) Parameters Type Name Description Int32 nAxis Vector3f vTo Vector3f vAround DistanceToPlane(Vector3f, Int32) distance from p to frame-axes-plane perpendicular to normal axis Declaration public float DistanceToPlane(Vector3f p, int nNormal) Parameters Type Name Description Vector3f p Int32 nNormal Returns Type Description Single DistanceToPlaneSigned(Vector3f, Int32) signed distance from p to frame-axes-plane perpendicular to normal axis Declaration public float DistanceToPlaneSigned(Vector3f p, int nNormal) Parameters Type Name Description Vector3f p Int32 nNormal Returns Type Description Single EpsilonEqual(Frame3f, Single) Declaration public bool EpsilonEqual(Frame3f f2, float epsilon) Parameters Type Name Description Frame3f f2 Single epsilon Returns Type Description Boolean FromFrame(ref Box3d) Map box from local frame coordinates into \"world\" coordinates Declaration public Box3d FromFrame(ref Box3d box) Parameters Type Name Description Box3d box Returns Type Description Box3d FromFrame(ref Box3f) Map box from local frame coordinates into \"world\" coordinates Declaration public Box3f FromFrame(ref Box3f box) Parameters Type Name Description Box3f box Returns Type Description Box3f FromFrame(Frame3f) Map frame from local frame coordinates into \"world\" coordinates Declaration public Frame3f FromFrame(Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f FromFrame(ref Frame3f) Map frame from local frame coordinates into \"world\" coordinates Declaration public Frame3f FromFrame(ref Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f FromFrame(Quaternionf) Map quaternion from local frame coordinates into \"world\" coordinates Declaration public Quaternionf FromFrame(Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaternionf FromFrame(ref Quaternionf) Map quaternion from local frame coordinates into \"world\" coordinates Declaration public Quaternionf FromFrame(ref Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaternionf FromFrame(Ray3f) Map ray from local frame coordinates into \"world\" coordinates Declaration public Ray3f FromFrame(Ray3f r) Parameters Type Name Description Ray3f r Returns Type Description Ray3f FromFrame(ref Ray3f) Map ray from local frame coordinates into \"world\" coordinates Declaration public Ray3f FromFrame(ref Ray3f r) Parameters Type Name Description Ray3f r Returns Type Description Ray3f FromFrameP(Vector2f, Int32) Declaration [Obsolete(\"replaced with FromPlaneUV\")] public Vector3f FromFrameP(Vector2f v, int nPlaneNormalAxis) Parameters Type Name Description Vector2f v Int32 nPlaneNormalAxis Returns Type Description Vector3f FromFrameP(Vector3d) Map point from local frame coordinates into \"world\" coordinates Declaration public Vector3d FromFrameP(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d FromFrameP(ref Vector3d) Map point from local frame coordinates into \"world\" coordinates Declaration public Vector3d FromFrameP(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d FromFrameP(Vector3f) Map point from local frame coordinates into \"world\" coordinates Declaration public Vector3f FromFrameP(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FromFrameP(ref Vector3f) Map point from local frame coordinates into \"world\" coordinates Declaration public Vector3f FromFrameP(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FromFrameV(Vector3d) Map vector from local frame coordinates into \"world\" coordinates Declaration public Vector3d FromFrameV(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d FromFrameV(ref Vector3d) Map vector from local frame coordinates into \"world\" coordinates Declaration public Vector3d FromFrameV(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d FromFrameV(Vector3f) Map vector from local frame coordinates into \"world\" coordinates Declaration public Vector3f FromFrameV(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FromFrameV(ref Vector3f) Map vector from local frame coordinates into \"world\" coordinates Declaration public Vector3f FromFrameV(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FromPlaneUV(Vector2f, Int32) map from 2D coordinates in frame-axes plane perpendicular to normal axis, to 3D [TODO] check that mapping preserves orientation? Declaration public Vector3f FromPlaneUV(Vector2f v, int nPlaneNormalAxis) Parameters Type Name Description Vector2f v Int32 nPlaneNormalAxis Returns Type Description Vector3f GetAxis(Int32) Declaration public Vector3f GetAxis(int nAxis) Parameters Type Name Description Int32 nAxis Returns Type Description Vector3f Interpolate(Frame3f, Frame3f, Single) Interpolate between two frames - Lerp for origin, Slerp for rotation Declaration public static Frame3f Interpolate(Frame3f f1, Frame3f f2, float t) Parameters Type Name Description Frame3f f1 Frame3f f2 Single t Returns Type Description Frame3f ProjectToPlane(Vector3f, Int32) 3D projection of point p onto frame-axis plane orthogonal to normal axis Declaration public Vector3f ProjectToPlane(Vector3f p, int nNormal) Parameters Type Name Description Vector3f p Int32 nNormal Returns Type Description Vector3f RayPlaneIntersection(Vector3f, Vector3f, Int32) Compute intersection of ray with plane passing through frame origin, normal to the specified axis. If the ray is parallel to the plane, no intersection can be found, and we return Vector3f.Invalid Declaration public Vector3f RayPlaneIntersection(Vector3f ray_origin, Vector3f ray_direction, int nAxisAsNormal) Parameters Type Name Description Vector3f ray_origin Vector3f ray_direction Int32 nAxisAsNormal Returns Type Description Vector3f Rotate(Quaternionf) Declaration public void Rotate(Quaternionf q) Parameters Type Name Description Quaternionf q RotateAround(Vector3f, Quaternionf) Declaration public void RotateAround(Vector3f point, Quaternionf q) Parameters Type Name Description Vector3f point Quaternionf q RotateAroundAxes(Quaternionf) this rotates the frame around its own axes, rather than around the world axes, which is what Rotate() does. So, RotateAroundAxis(AxisAngleD(Z,180)) is equivalent to Rotate(AxisAngleD(My_AxisZ,180)). Declaration public void RotateAroundAxes(Quaternionf q) Parameters Type Name Description Quaternionf q Rotated(Quaternionf) Declaration public Frame3f Rotated(Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Frame3f Rotated(Single, Int32) Declaration public Frame3f Rotated(float fAngle, int nAxis) Parameters Type Name Description Single fAngle Int32 nAxis Returns Type Description Frame3f RotatedAround(Vector3f, Quaternionf) Declaration public Frame3f RotatedAround(Vector3f point, Quaternionf q) Parameters Type Name Description Vector3f point Quaternionf q Returns Type Description Frame3f Scale(Vector3f) Declaration public void Scale(Vector3f scale) Parameters Type Name Description Vector3f scale Scale(Single) Declaration public void Scale(float f) Parameters Type Name Description Single f Scaled(Vector3f) Declaration public Frame3f Scaled(Vector3f scale) Parameters Type Name Description Vector3f scale Returns Type Description Frame3f Scaled(Single) Declaration public Frame3f Scaled(float f) Parameters Type Name Description Single f Returns Type Description Frame3f SolveMinRotation(Frame3f, Frame3f) Declaration public static Frame3f SolveMinRotation(Frame3f source, Frame3f target) Parameters Type Name Description Frame3f source Frame3f target Returns Type Description Frame3f ToFrame(ref Box3d) Map box into local coordinates of Frame Declaration public Box3d ToFrame(ref Box3d box) Parameters Type Name Description Box3d box Returns Type Description Box3d ToFrame(ref Box3f) Map box into local coordinates of Frame Declaration public Box3f ToFrame(ref Box3f box) Parameters Type Name Description Box3f box Returns Type Description Box3f ToFrame(Frame3f) Map frame into local coordinates of Frame Declaration public Frame3f ToFrame(Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f ToFrame(ref Frame3f) Map frame into local coordinates of Frame Declaration public Frame3f ToFrame(ref Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f ToFrame(Quaternionf) Map quaternion into local coordinates of Frame Declaration public Quaternionf ToFrame(Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaternionf ToFrame(ref Quaternionf) Map quaternion into local coordinates of Frame Declaration public Quaternionf ToFrame(ref Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaternionf ToFrame(Ray3f) Map ray into local coordinates of Frame Declaration public Ray3f ToFrame(Ray3f r) Parameters Type Name Description Ray3f r Returns Type Description Ray3f ToFrame(ref Ray3f) Map ray into local coordinates of Frame Declaration public Ray3f ToFrame(ref Ray3f r) Parameters Type Name Description Ray3f r Returns Type Description Ray3f ToFrameP(Vector3d) Map point into local coordinates of Frame Declaration public Vector3d ToFrameP(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ToFrameP(ref Vector3d) Map point into local coordinates of Frame Declaration public Vector3d ToFrameP(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ToFrameP(Vector3f) Map point into local coordinates of Frame Declaration public Vector3f ToFrameP(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f ToFrameP(ref Vector3f) Map point into local coordinates of Frame Declaration public Vector3f ToFrameP(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f ToFrameV(Vector3d) Map vector into local coordinates of Frame Declaration public Vector3d ToFrameV(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ToFrameV(ref Vector3d) Map vector into local coordinates of Frame Declaration public Vector3d ToFrameV(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ToFrameV(Vector3f) Map vector into local coordinates of Frame Declaration public Vector3f ToFrameV(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f ToFrameV(ref Vector3f) Map vector into local coordinates of Frame Declaration public Vector3f ToFrameV(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f ToPlaneUV(Vector3f, Int32) Project p onto plane axes [TODO] check that mapping preserves orientation? Declaration public Vector2f ToPlaneUV(Vector3f p, int nNormal) Parameters Type Name Description Vector3f p Int32 nNormal Returns Type Description Vector2f ToPlaneUV(Vector3f, Int32, Int32, Int32) Declaration [Obsolete(\"Use explicit ToPlaneUV instead\")] public Vector2f ToPlaneUV(Vector3f p, int nNormal, int nAxis0 = -1, int nAxis1 = -1) Parameters Type Name Description Vector3f p Int32 nNormal Int32 nAxis0 Int32 nAxis1 Returns Type Description Vector2f ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Translate(Vector3f) Declaration public void Translate(Vector3f v) Parameters Type Name Description Vector3f v Translated(Vector3f) Declaration public Frame3f Translated(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Frame3f Translated(Single, Int32) Declaration public Frame3f Translated(float fDistance, int nAxis) Parameters Type Name Description Single fDistance Int32 nAxis Returns Type Description Frame3f"
  },
  "api/g3.FrameGridIndexer3.html": {
    "href": "api/g3.FrameGridIndexer3.html",
    "title": "Struct FrameGridIndexer3 | ViRGIS VR GIS",
    "keywords": "Struct FrameGridIndexer3 Map to/from grid coords, where grid is relative to frame coords/axes Implements IGridWorldIndexer3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct FrameGridIndexer3 : IGridWorldIndexer3 Constructors FrameGridIndexer3(Frame3f, Vector3f) Declaration public FrameGridIndexer3(Frame3f frame, Vector3f cellSize) Parameters Type Name Description Frame3f frame Vector3f cellSize Fields CellSize Declaration public Vector3f CellSize Field Value Type Description Vector3f GridFrame Declaration public Frame3f GridFrame Field Value Type Description Frame3f Methods FromGrid(Vector3d) Declaration public Vector3d FromGrid(Vector3d gridpointf) Parameters Type Name Description Vector3d gridpointf Returns Type Description Vector3d FromGrid(Vector3i) Declaration public Vector3d FromGrid(Vector3i gridpoint) Parameters Type Name Description Vector3i gridpoint Returns Type Description Vector3d ToGrid(Vector3d) Declaration public Vector3i ToGrid(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3i ToGridf(Vector3d) Declaration public Vector3d ToGridf(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3d Implements IGridWorldIndexer3"
  },
  "api/g3.GaussPointsFit3.html": {
    "href": "api/g3.GaussPointsFit3.html",
    "title": "Class GaussPointsFit3 | ViRGIS VR GIS",
    "keywords": "Class GaussPointsFit3 Inheritance Object GaussPointsFit3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GaussPointsFit3 Constructors GaussPointsFit3(IEnumerable<Vector3d>) Declaration public GaussPointsFit3(IEnumerable<Vector3d> points) Parameters Type Name Description IEnumerable < Vector3d > points GaussPointsFit3(IEnumerable<Vector3d>, IEnumerable<Double>) Declaration public GaussPointsFit3(IEnumerable<Vector3d> points, IEnumerable<double> weights) Parameters Type Name Description IEnumerable < Vector3d > points IEnumerable < Double > weights Fields Box Declaration public Box3d Box Field Value Type Description Box3d ResultValid Declaration public bool ResultValid Field Value Type Description Boolean"
  },
  "api/g3.GeneralPolygon2d.html": {
    "href": "api/g3.GeneralPolygon2d.html",
    "title": "Class GeneralPolygon2d | ViRGIS VR GIS",
    "keywords": "Class GeneralPolygon2d Inheritance Object GeneralPolygon2d Implements IDuplicatable < GeneralPolygon2d > Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GeneralPolygon2d : IDuplicatable<GeneralPolygon2d> Constructors GeneralPolygon2d() Declaration public GeneralPolygon2d() GeneralPolygon2d(GeneralPolygon2d) Declaration public GeneralPolygon2d(GeneralPolygon2d copy) Parameters Type Name Description GeneralPolygon2d copy GeneralPolygon2d(Polygon2d) Declaration public GeneralPolygon2d(Polygon2d outer) Parameters Type Name Description Polygon2d outer Properties Area Declaration public double Area { get; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d HoleArea Declaration public double HoleArea { get; } Property Value Type Description Double Holes Declaration public ReadOnlyCollection<Polygon2d> Holes { get; } Property Value Type Description ReadOnlyCollection < Polygon2d > Outer Declaration public Polygon2d Outer { get; set; } Property Value Type Description Polygon2d Perimeter Declaration public double Perimeter { get; } Property Value Type Description Double VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods AddHole(Polygon2d, Boolean, Boolean) Declaration public void AddHole(Polygon2d hole, bool bCheckContainment = true, bool bCheckOrientation = true) Parameters Type Name Description Polygon2d hole Boolean bCheckContainment Boolean bCheckOrientation AllSegmentsItr() Declaration public IEnumerable<Segment2d> AllSegmentsItr() Returns Type Description IEnumerable < Segment2d > AllVerticesItr() Declaration public IEnumerable<Vector2d> AllVerticesItr() Returns Type Description IEnumerable < Vector2d > ClearHoles() Declaration public void ClearHoles() Contains(Polygon2d) Declaration public bool Contains(Polygon2d poly) Parameters Type Name Description Polygon2d poly Returns Type Description Boolean Contains(Segment2d) Checks that all points on a segment are within the area defined by the GeneralPolygon2d; holes are included in the calculation. Declaration public bool Contains(Segment2d seg) Parameters Type Name Description Segment2d seg Returns Type Description Boolean Contains(Vector2d) Declaration public bool Contains(Vector2d vTest) Parameters Type Name Description Vector2d vTest Returns Type Description Boolean DistanceSquared(Vector2d, out Int32, out Int32, out Double) Declaration public double DistanceSquared(Vector2d p, out int iHoleIndex, out int iNearSeg, out double fNearSegT) Parameters Type Name Description Vector2d p Int32 iHoleIndex Int32 iNearSeg Double fNearSegT Returns Type Description Double Duplicate() Declaration public virtual GeneralPolygon2d Duplicate() Returns Type Description GeneralPolygon2d GetNormal(Int32, Double, Int32) Declaration public Vector2d GetNormal(int iSegment, double segT, int iHoleIndex = -1) Parameters Type Name Description Int32 iSegment Double segT Int32 iHoleIndex Returns Type Description Vector2d Intersects(Polygon2d) Declaration public bool Intersects(Polygon2d poly) Parameters Type Name Description Polygon2d poly Returns Type Description Boolean PointAt(Int32, Double, Int32) Declaration public Vector2d PointAt(int iSegment, double fSegT, int iHoleIndex = -1) Parameters Type Name Description Int32 iSegment Double fSegT Int32 iHoleIndex Returns Type Description Vector2d Reverse() Declaration public void Reverse() Rotate(Matrix2d, Vector2d) Declaration public void Rotate(Matrix2d rotation, Vector2d origin) Parameters Type Name Description Matrix2d rotation Vector2d origin Scale(Vector2d, Vector2d) Declaration public void Scale(Vector2d scale, Vector2d origin) Parameters Type Name Description Vector2d scale Vector2d origin Segment(Int32, Int32) Declaration public Segment2d Segment(int iSegment, int iHoleIndex = -1) Parameters Type Name Description Int32 iSegment Int32 iHoleIndex Returns Type Description Segment2d Simplify(Double, Double, Boolean) Declaration public void Simplify(double clusterTol = 0.0001, double lineDeviationTol = 0.01, bool bSimplifyStraightLines = true) Parameters Type Name Description Double clusterTol Double lineDeviationTol Boolean bSimplifyStraightLines Transform(Func<Vector2d, Vector2d>) Declaration public void Transform(Func<Vector2d, Vector2d> transformF) Parameters Type Name Description Func < Vector2d , Vector2d > transformF Translate(Vector2d) Declaration public void Translate(Vector2d translate) Parameters Type Name Description Vector2d translate Implements IDuplicatable<T>"
  },
  "api/g3.GeneralPolygon2dBoxTree.html": {
    "href": "api/g3.GeneralPolygon2dBoxTree.html",
    "title": "Class GeneralPolygon2dBoxTree | ViRGIS VR GIS",
    "keywords": "Class GeneralPolygon2dBoxTree Inheritance Object GeneralPolygon2dBoxTree Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GeneralPolygon2dBoxTree Constructors GeneralPolygon2dBoxTree(GeneralPolygon2d) Declaration public GeneralPolygon2dBoxTree(GeneralPolygon2d poly) Parameters Type Name Description GeneralPolygon2d poly Fields Polygon Declaration public GeneralPolygon2d Polygon Field Value Type Description GeneralPolygon2d Methods Distance(Vector2d) Declaration public double Distance(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double DistanceSquared(Vector2d, out Int32, out Int32, out Double) Declaration public double DistanceSquared(Vector2d pt, out int iHoleIndex, out int iNearSeg, out double fNearSegT) Parameters Type Name Description Vector2d pt Int32 iHoleIndex Int32 iNearSeg Double fNearSegT Returns Type Description Double NearestPoint(Vector2d) Declaration public Vector2d NearestPoint(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Vector2d"
  },
  "api/g3.GenericMaterial.html": {
    "href": "api/g3.GenericMaterial.html",
    "title": "Class GenericMaterial | ViRGIS VR GIS",
    "keywords": "Class GenericMaterial Inheritance Object GenericMaterial OBJMaterial Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class GenericMaterial Fields id Declaration public int id Field Value Type Description Int32 Invalid Declaration public static readonly Vector3f Invalid Field Value Type Description Vector3f Invalidf Declaration public static readonly float Invalidf Field Value Type Description Single name Declaration public string name Field Value Type Description String Properties Alpha Declaration public abstract float Alpha { get; set; } Property Value Type Description Single DiffuseColor Declaration public abstract Vector3f DiffuseColor { get; set; } Property Value Type Description Vector3f Type Declaration public GenericMaterial.KnownMaterialTypes Type { get; set; } Property Value Type Description GenericMaterial.KnownMaterialTypes"
  },
  "api/g3.GenericMaterial.KnownMaterialTypes.html": {
    "href": "api/g3.GenericMaterial.KnownMaterialTypes.html",
    "title": "Enum GenericMaterial.KnownMaterialTypes | ViRGIS VR GIS",
    "keywords": "Enum GenericMaterial.KnownMaterialTypes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum KnownMaterialTypes Fields Name Description OBJ_MTL_Format"
  },
  "api/g3.gException.html": {
    "href": "api/g3.gException.html",
    "title": "Class gException | ViRGIS VR GIS",
    "keywords": "Class gException Inheritance Object Exception gException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class gException : Exception, ISerializable, _Exception Constructors gException(String) Declaration public gException(string sMessage) Parameters Type Name Description String sMessage gException(String, Object) Declaration public gException(string text, object arg0) Parameters Type Name Description String text Object arg0 gException(String, Object, Object) Declaration public gException(string text, object arg0, object arg1) Parameters Type Name Description String text Object arg0 Object arg1 gException(String, Object[]) Declaration public gException(string text, params object[] args) Parameters Type Name Description String text Object [] args Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/g3.gIndices.html": {
    "href": "api/g3.gIndices.html",
    "title": "Class gIndices | ViRGIS VR GIS",
    "keywords": "Class gIndices Inheritance Object gIndices Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class gIndices Fields BoxFaceNormals Declaration public static readonly int[] BoxFaceNormals Field Value Type Description Int32 [] BoxFaces Declaration public static readonly int[, ] BoxFaces Field Value Type Description Int32 [,] GridOffsets26 Declaration public static readonly Vector3i[] GridOffsets26 Field Value Type Description Vector3i [] GridOffsets4 Declaration public static readonly Vector2i[] GridOffsets4 Field Value Type Description Vector2i [] GridOffsets6 Declaration public static readonly Vector3i[] GridOffsets6 Field Value Type Description Vector3i [] GridOffsets8 Declaration public static readonly Vector2i[] GridOffsets8 Field Value Type Description Vector2i [] Methods Grid3Indices(Int32, Int32, Int32) Declaration public static IEnumerable<Vector3i> Grid3Indices(int nx, int ny, int nz) Parameters Type Name Description Int32 nx Int32 ny Int32 nz Returns Type Description IEnumerable < Vector3i > Grid3IndicesXY(Int32, Int32) Declaration public static IEnumerable<Vector3i> Grid3IndicesXY(int nx, int ny) Parameters Type Name Description Int32 nx Int32 ny Returns Type Description IEnumerable < Vector3i > Grid3IndicesXZ(Int32, Int32) Declaration public static IEnumerable<Vector3i> Grid3IndicesXZ(int nx, int nz) Parameters Type Name Description Int32 nx Int32 nz Returns Type Description IEnumerable < Vector3i > Grid3IndicesYZ(Int32, Int32) Declaration public static IEnumerable<Vector3i> Grid3IndicesYZ(int ny, int nz) Parameters Type Name Description Int32 ny Int32 nz Returns Type Description IEnumerable < Vector3i >"
  },
  "api/g3.gParallel.html": {
    "href": "api/g3.gParallel.html",
    "title": "Class gParallel | ViRGIS VR GIS",
    "keywords": "Class gParallel Inheritance Object gParallel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class gParallel Methods BlockStartEnd(Int32, Int32, Action<Int32, Int32>, Int32, Boolean) Process indices [iStart,iEnd] inclusive by passing sub-intervals [start,end] to blockF. Blocksize is automatically determind unless you specify one. Iterate over [start,end] inclusive in each block Declaration public static void BlockStartEnd(int iStart, int iEnd, Action<int, int> blockF, int iBlockSize = -1, bool bDisableParallel = false) Parameters Type Name Description Int32 iStart Int32 iEnd Action < Int32 , Int32 > blockF Int32 iBlockSize Boolean bDisableParallel Evaluate(Action[]) Evaluate input actions in parallel Declaration public static void Evaluate(params Action[] funcs) Parameters Type Name Description Action [] funcs ForEach_Sequential<T>(IEnumerable<T>, Action<T>) Declaration public static void ForEach_Sequential<T>(IEnumerable<T> source, Action<T> body) Parameters Type Name Description IEnumerable <T> source Action <T> body Type Parameters Name Description T ForEach<T>(IEnumerable<T>, Action<T>) Declaration public static void ForEach<T>(IEnumerable<T> source, Action<T> body) Parameters Type Name Description IEnumerable <T> source Action <T> body Type Parameters Name Description T"
  },
  "api/g3.GraphCells2d.html": {
    "href": "api/g3.GraphCells2d.html",
    "title": "Class GraphCells2d | ViRGIS VR GIS",
    "keywords": "Class GraphCells2d This class extracts the set of loops bounding the \"cells\" of a DGraph2, ie each cell is a connected region with a polygonal boundary. Precondition: the graph has no self-intersections. Precondition: at any vertex, the edges are sortable by angle (ie no outgoing edges overlap) ** numerically this may not be 100% reliable.... Both \"sides\" of each edge are included in some cell boundary, ie so for a simple polygon, there are two cells, one infinitely large. The \"inside\" cells will be oriented clockwise, if converted to a Polygon2d. Inheritance Object GraphCells2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GraphCells2d Constructors GraphCells2d(DGraph2) Declaration public GraphCells2d(DGraph2 graph) Parameters Type Name Description DGraph2 graph Fields CellLoops Declaration public List<int[]> CellLoops Field Value Type Description List < Int32 []> Graph Declaration public DGraph2 Graph Field Value Type Description DGraph2 Methods CellsToPolygons(Func<Polygon2d, Boolean>) Convert cells to polygons, with optional filter. If filter returns false, polygon is not included in output Declaration public List<Polygon2d> CellsToPolygons(Func<Polygon2d, bool> FilterF = null) Parameters Type Name Description Func < Polygon2d , Boolean > FilterF Returns Type Description List < Polygon2d > ContainedCells(GeneralPolygon2d) Find cells that are \"inside\" the container polygon. Currently based on finding a point inside the cell and then checking that it is also inside the container. This is perhaps not ideal!! Declaration public List<Polygon2d> ContainedCells(GeneralPolygon2d container) Parameters Type Name Description GeneralPolygon2d container Returns Type Description List < Polygon2d > FindCells() Declaration public void FindCells()"
  },
  "api/g3.GraphSplitter2d.html": {
    "href": "api/g3.GraphSplitter2d.html",
    "title": "Class GraphSplitter2d | ViRGIS VR GIS",
    "keywords": "Class GraphSplitter2d This class is used to bisect an existing DGraph2 with infinite lines. This is easier than inserting new segments, which can be done using Arrangement2d. Computations are done in double precision. Use at your own risk. [TODO] computation of signs for a split-line is currently O(N). If inserting many parallel lines, can improve this using standard sorting. Inheritance Object GraphSplitter2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GraphSplitter2d Constructors GraphSplitter2d(DGraph2) Declaration public GraphSplitter2d(DGraph2 graph) Parameters Type Name Description DGraph2 graph Fields Graph Declaration public DGraph2 Graph Field Value Type Description DGraph2 InsertedEdgesID default ID for new edges, can override in specific functions Declaration public int InsertedEdgesID Field Value Type Description Int32 InsideTestF when inserting new segments, we check if their midpoint passes this test Declaration public Func<Vector2d, bool> InsideTestF Field Value Type Description Func < Vector2d , Boolean > OnVertexTol tolerance for WhichSide(vtx) tests Declaration public double OnVertexTol Field Value Type Description Double Methods do_split(Line2d, Boolean, Int32) Declaration protected virtual void do_split(Line2d line, bool insert_edges, int insert_gid) Parameters Type Name Description Line2d line Boolean insert_edges Int32 insert_gid InsertLine(Line2d, Int32) split all graph edges that intersect line, and insert segments connecting these points Declaration public void InsertLine(Line2d line, int insert_edges_id = -1) Parameters Type Name Description Line2d line Int32 insert_edges_id"
  },
  "api/g3.GraphSupportGenerator.html": {
    "href": "api/g3.GraphSupportGenerator.html",
    "title": "Class GraphSupportGenerator | ViRGIS VR GIS",
    "keywords": "Class GraphSupportGenerator Inheritance Object GraphSupportGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GraphSupportGenerator Constructors GraphSupportGenerator(DMesh3, DMeshAABBTree3, Double) Declaration public GraphSupportGenerator(DMesh3 mesh, DMeshAABBTree3 spatial, double cellSize) Parameters Type Name Description DMesh3 mesh DMeshAABBTree3 spatial Double cellSize GraphSupportGenerator(DMesh3, DMeshAABBTree3, Int32) Declaration public GraphSupportGenerator(DMesh3 mesh, DMeshAABBTree3 spatial, int grid_resolution) Parameters Type Name Description DMesh3 mesh DMeshAABBTree3 spatial Int32 grid_resolution Fields CellSize Declaration public double CellSize Field Value Type Description Double DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean ForceMinY If this is not set, 'ground' is Mesh.CachedBounds.Min.y (eg, if mesh is floating off ground, set this to 0, otherwise support stops at bottom of mesh) Declaration public float ForceMinY Field Value Type Description Single Graph Declaration public DGraph3 Graph Field Value Type Description DGraph3 GraphSurfaceDistanceOffset Graph vertices will try to stay this far from surface Declaration public double GraphSurfaceDistanceOffset Field Value Type Description Double GroundVertices Declaration public HashSet<int> GroundVertices Field Value Type Description HashSet < Int32 > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 MeshSpatial Declaration public DMeshAABBTree3 MeshSpatial Field Value Type Description DMeshAABBTree3 OptimizationAlpha optimization (ie smoothing) \"speed\" Declaration public double OptimizationAlpha Field Value Type Description Double OptimizationRounds graph smoothing rounds Declaration public int OptimizationRounds Field Value Type Description Int32 OverhangAngleDeg overhang angle requiring support Declaration public double OverhangAngleDeg Field Value Type Description Double OverhangAngleOptimizeDeg We will try to maintain at least this angle during graph optimization (does this need to be separate from the one above?) Declaration public double OverhangAngleOptimizeDeg Field Value Type Description Double ProcessBottomUp Get very different graphs is we generate bottom-up vs top-down Declaration public bool ProcessBottomUp Field Value Type Description Boolean Progress Set this to be able to cancel running remesher Declaration public ProgressCancel Progress Field Value Type Description ProgressCancel TipBaseVertices Declaration public HashSet<int> TipBaseVertices Field Value Type Description HashSet < Int32 > TipVertices Declaration public HashSet<int> TipVertices Field Value Type Description HashSet < Int32 > Properties Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid winding-number grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the winding-number grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single Methods Cancelled() if this returns true, abort computation. Declaration protected virtual bool Cancelled() Returns Type Description Boolean CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f Generate() Declaration public void Generate() MakeDebugGraphMesh() Declaration protected DMesh3 MakeDebugGraphMesh() Returns Type Description DMesh3 postprocess_graph() Declaration protected virtual void postprocess_graph()"
  },
  "api/g3.GraphSupportGenerator.ImplicitCurve3d.html": {
    "href": "api/g3.GraphSupportGenerator.ImplicitCurve3d.html",
    "title": "Class GraphSupportGenerator.ImplicitCurve3d | ViRGIS VR GIS",
    "keywords": "Class GraphSupportGenerator.ImplicitCurve3d Implicit tube around line segment Inheritance Object GraphSupportGenerator.ImplicitCurve3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitCurve3d : BoundedImplicitFunction3d, ImplicitFunction3d Constructors ImplicitCurve3d(DCurve3, Double) Declaration public ImplicitCurve3d(DCurve3 curve, double radius) Parameters Type Name Description DCurve3 curve Double radius Fields Box Declaration public AxisAlignedBox3d Box Field Value Type Description AxisAlignedBox3d Curve Declaration public DCurve3 Curve Field Value Type Description DCurve3 Radius Declaration public double Radius Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.GraphTubeMesher.html": {
    "href": "api/g3.GraphTubeMesher.html",
    "title": "Class GraphTubeMesher | ViRGIS VR GIS",
    "keywords": "Class GraphTubeMesher Inheritance Object GraphTubeMesher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GraphTubeMesher Constructors GraphTubeMesher(DGraph3) Declaration public GraphTubeMesher(DGraph3 graph) Parameters Type Name Description DGraph3 graph GraphTubeMesher(GraphSupportGenerator) Declaration public GraphTubeMesher(GraphSupportGenerator support_gen) Parameters Type Name Description GraphSupportGenerator support_gen Fields ActualCellSize Declaration public double ActualCellSize Field Value Type Description Double Graph Declaration public DGraph3 Graph Field Value Type Description DGraph3 GroundRadius Declaration public double GroundRadius Field Value Type Description Double GroundVertices Declaration public HashSet<int> GroundVertices Field Value Type Description HashSet < Int32 > PostRadius Declaration public double PostRadius Field Value Type Description Double Progress Set this to be able to cancel running remesher Declaration public ProgressCancel Progress Field Value Type Description ProgressCancel ResultMesh Declaration public DMesh3 ResultMesh Field Value Type Description DMesh3 SamplerCellSizeHint Declaration public double SamplerCellSizeHint Field Value Type Description Double TipRadius Declaration public double TipRadius Field Value Type Description Double TipVertices Declaration public HashSet<int> TipVertices Field Value Type Description HashSet < Int32 > Methods Cancelled() if this returns true, abort computation. Declaration protected virtual bool Cancelled() Returns Type Description Boolean Generate() Declaration public virtual void Generate()"
  },
  "api/g3.GridBox3Generator.html": {
    "href": "api/g3.GridBox3Generator.html",
    "title": "Class GridBox3Generator | ViRGIS VR GIS",
    "keywords": "Class GridBox3Generator Generate a mesh of a box that has \"gridded\" faces, ie grid of triangulated quads, with EdgeVertices verts along each edge. [TODO] allow varying EdgeVertices in each dimension (tricky...) Inheritance Object MeshGenerator GridBox3Generator Sphere3Generator_NormalizedCube Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GridBox3Generator : MeshGenerator Fields Box Declaration public Box3d Box Field Value Type Description Box3d EdgeVertices Declaration public int EdgeVertices Field Value Type Description Int32 NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.GriddedRectGenerator.html": {
    "href": "api/g3.GriddedRectGenerator.html",
    "title": "Class GriddedRectGenerator | ViRGIS VR GIS",
    "keywords": "Class GriddedRectGenerator Generate a mesh of a rect that has \"gridded\" faces, ie grid of triangulated quads, with EdgeVertices verts along each edge. [TODO] allow varying EdgeVertices in each dimension (tricky...) Inheritance Object MeshGenerator TrivialRectGenerator GriddedRectGenerator Inherited Members TrivialRectGenerator.Width TrivialRectGenerator.Height TrivialRectGenerator.Normal TrivialRectGenerator.IndicesMap TrivialRectGenerator.UVMode TrivialRectGenerator.make_vertex(Single, Single) MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GriddedRectGenerator : TrivialRectGenerator Fields EdgeVertices Declaration public int EdgeVertices Field Value Type Description Int32 Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides TrivialRectGenerator.Generate()"
  },
  "api/g3.GridLevelIndex.html": {
    "href": "api/g3.GridLevelIndex.html",
    "title": "Struct GridLevelIndex | ViRGIS VR GIS",
    "keywords": "Struct GridLevelIndex Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct GridLevelIndex Fields block_index Declaration public Vector3i block_index Field Value Type Description Vector3i local_index Declaration public Vector3i local_index Field Value Type Description Vector3i"
  },
  "api/g3.GridLevelIndex2.html": {
    "href": "api/g3.GridLevelIndex2.html",
    "title": "Struct GridLevelIndex2 | ViRGIS VR GIS",
    "keywords": "Struct GridLevelIndex2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct GridLevelIndex2 Fields block_index Declaration public Vector2i block_index Field Value Type Description Vector2i local_index Declaration public Vector2i local_index Field Value Type Description Vector2i"
  },
  "api/g3.gSerialization.html": {
    "href": "api/g3.gSerialization.html",
    "title": "Class gSerialization | ViRGIS VR GIS",
    "keywords": "Class gSerialization Inheritance Object gSerialization Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class gSerialization Fields DMesh3Version Declaration public static int DMesh3Version Field Value Type Description Int32 Methods Restore(ref Arc2d, BinaryReader) Declaration public static void Restore(ref Arc2d arc, BinaryReader reader) Parameters Type Name Description Arc2d arc BinaryReader reader Restore(ref AxisAlignedBox2d, BinaryReader) Declaration public static void Restore(ref AxisAlignedBox2d b, BinaryReader reader) Parameters Type Name Description AxisAlignedBox2d b BinaryReader reader Restore(ref Circle2d, BinaryReader) Declaration public static void Restore(ref Circle2d circle, BinaryReader reader) Parameters Type Name Description Circle2d circle BinaryReader reader Restore(DCurve3, BinaryReader) Declaration public static void Restore(DCurve3 curve, BinaryReader reader) Parameters Type Name Description DCurve3 curve BinaryReader reader Restore(DMesh3, BinaryReader) Declaration public static void Restore(DMesh3 mesh, BinaryReader reader) Parameters Type Name Description DMesh3 mesh BinaryReader reader Restore(DVector<Double>, BinaryReader) Declaration public static void Restore(DVector<double> vec, BinaryReader reader) Parameters Type Name Description DVector < Double > vec BinaryReader reader Restore(DVector<Int16>, BinaryReader) Declaration public static void Restore(DVector<short> vec, BinaryReader reader) Parameters Type Name Description DVector < Int16 > vec BinaryReader reader Restore(DVector<Int32>, BinaryReader) Declaration public static void Restore(DVector<int> vec, BinaryReader reader) Parameters Type Name Description DVector < Int32 > vec BinaryReader reader Restore(DVector<Single>, BinaryReader) Declaration public static void Restore(DVector<float> vec, BinaryReader reader) Parameters Type Name Description DVector < Single > vec BinaryReader reader Restore(ref Frame3f, BinaryReader) Declaration public static void Restore(ref Frame3f vFrame, BinaryReader reader) Parameters Type Name Description Frame3f vFrame BinaryReader reader Restore(GeneralPolygon2d, BinaryReader) Declaration public static void Restore(GeneralPolygon2d polygon, BinaryReader reader) Parameters Type Name Description GeneralPolygon2d polygon BinaryReader reader Restore(out IParametricCurve2d, BinaryReader) Declaration public static void Restore(out IParametricCurve2d curve, BinaryReader reader) Parameters Type Name Description IParametricCurve2d curve BinaryReader reader Restore(ref ParametricCurveSequence2, BinaryReader) Declaration public static void Restore(ref ParametricCurveSequence2 sequence, BinaryReader reader) Parameters Type Name Description ParametricCurveSequence2 sequence BinaryReader reader Restore(PlanarSolid2d, BinaryReader) Declaration public static void Restore(PlanarSolid2d solid, BinaryReader reader) Parameters Type Name Description PlanarSolid2d solid BinaryReader reader Restore(Polygon2d, BinaryReader) Declaration public static void Restore(Polygon2d polygon, BinaryReader reader) Parameters Type Name Description Polygon2d polygon BinaryReader reader Restore(PolyLine2d, BinaryReader) Declaration public static void Restore(PolyLine2d polyline, BinaryReader reader) Parameters Type Name Description PolyLine2d polyline BinaryReader reader Restore(ref Quaternionf, BinaryReader) Declaration public static void Restore(ref Quaternionf q, BinaryReader reader) Parameters Type Name Description Quaternionf q BinaryReader reader Restore(ref Segment2d, BinaryReader) Declaration public static void Restore(ref Segment2d segment, BinaryReader reader) Parameters Type Name Description Segment2d segment BinaryReader reader Restore(ref Vector2d, BinaryReader) Declaration public static void Restore(ref Vector2d v, BinaryReader reader) Parameters Type Name Description Vector2d v BinaryReader reader Restore(ref Vector2f, BinaryReader) Declaration public static void Restore(ref Vector2f v, BinaryReader reader) Parameters Type Name Description Vector2f v BinaryReader reader Restore(ref Vector3d, BinaryReader) Declaration public static void Restore(ref Vector3d v, BinaryReader reader) Parameters Type Name Description Vector3d v BinaryReader reader Restore(ref Vector3f, BinaryReader) Declaration public static void Restore(ref Vector3f v, BinaryReader reader) Parameters Type Name Description Vector3f v BinaryReader reader Restore(List<Double>, BinaryReader) Declaration public static void Restore(List<double> values, BinaryReader reader) Parameters Type Name Description List < Double > values BinaryReader reader Restore(List<Int32>, BinaryReader) Declaration public static void Restore(List<int> values, BinaryReader reader) Parameters Type Name Description List < Int32 > values BinaryReader reader Restore(List<Single>, BinaryReader) Declaration public static void Restore(List<float> values, BinaryReader reader) Parameters Type Name Description List < Single > values BinaryReader reader Restore(ref String, BinaryReader) Declaration public static void Restore(ref string s, BinaryReader reader) Parameters Type Name Description String s BinaryReader reader Restore(ref String[], BinaryReader) Declaration public static void Restore(ref string[] s, BinaryReader reader) Parameters Type Name Description String [] s BinaryReader reader Store(Arc2d, BinaryWriter) Declaration public static void Store(Arc2d arc, BinaryWriter writer) Parameters Type Name Description Arc2d arc BinaryWriter writer Store(AxisAlignedBox2d, BinaryWriter) Declaration public static void Store(AxisAlignedBox2d b, BinaryWriter writer) Parameters Type Name Description AxisAlignedBox2d b BinaryWriter writer Store(Circle2d, BinaryWriter) Declaration public static void Store(Circle2d circle, BinaryWriter writer) Parameters Type Name Description Circle2d circle BinaryWriter writer Store(DCurve3, BinaryWriter) Declaration public static void Store(DCurve3 curve, BinaryWriter writer) Parameters Type Name Description DCurve3 curve BinaryWriter writer Store(DMesh3, BinaryWriter) Declaration public static void Store(DMesh3 mesh, BinaryWriter writer) Parameters Type Name Description DMesh3 mesh BinaryWriter writer Store(DVector<Double>, BinaryWriter) Declaration public static void Store(DVector<double> vec, BinaryWriter writer) Parameters Type Name Description DVector < Double > vec BinaryWriter writer Store(DVector<Int16>, BinaryWriter) Declaration public static void Store(DVector<short> vec, BinaryWriter writer) Parameters Type Name Description DVector < Int16 > vec BinaryWriter writer Store(DVector<Int32>, BinaryWriter) Declaration public static void Store(DVector<int> vec, BinaryWriter writer) Parameters Type Name Description DVector < Int32 > vec BinaryWriter writer Store(DVector<Single>, BinaryWriter) Declaration public static void Store(DVector<float> vec, BinaryWriter writer) Parameters Type Name Description DVector < Single > vec BinaryWriter writer Store(Frame3f, BinaryWriter) Declaration public static void Store(Frame3f vFrame, BinaryWriter writer) Parameters Type Name Description Frame3f vFrame BinaryWriter writer Store(GeneralPolygon2d, BinaryWriter) Declaration public static void Store(GeneralPolygon2d polygon, BinaryWriter writer) Parameters Type Name Description GeneralPolygon2d polygon BinaryWriter writer Store(IParametricCurve2d, BinaryWriter) Declaration public static void Store(IParametricCurve2d curve, BinaryWriter writer) Parameters Type Name Description IParametricCurve2d curve BinaryWriter writer Store(ParametricCurveSequence2, BinaryWriter) Declaration public static void Store(ParametricCurveSequence2 sequence, BinaryWriter writer) Parameters Type Name Description ParametricCurveSequence2 sequence BinaryWriter writer Store(PlanarSolid2d, BinaryWriter) Declaration public static void Store(PlanarSolid2d solid, BinaryWriter writer) Parameters Type Name Description PlanarSolid2d solid BinaryWriter writer Store(Polygon2d, BinaryWriter) Declaration public static void Store(Polygon2d polygon, BinaryWriter writer) Parameters Type Name Description Polygon2d polygon BinaryWriter writer Store(PolyLine2d, BinaryWriter) Declaration public static void Store(PolyLine2d polyline, BinaryWriter writer) Parameters Type Name Description PolyLine2d polyline BinaryWriter writer Store(Quaternionf, BinaryWriter) Declaration public static void Store(Quaternionf q, BinaryWriter writer) Parameters Type Name Description Quaternionf q BinaryWriter writer Store(Segment2d, BinaryWriter) Declaration public static void Store(Segment2d segment, BinaryWriter writer) Parameters Type Name Description Segment2d segment BinaryWriter writer Store(Vector2d, BinaryWriter) Declaration public static void Store(Vector2d v, BinaryWriter writer) Parameters Type Name Description Vector2d v BinaryWriter writer Store(Vector2f, BinaryWriter) Declaration public static void Store(Vector2f v, BinaryWriter writer) Parameters Type Name Description Vector2f v BinaryWriter writer Store(Vector3d, BinaryWriter) Declaration public static void Store(Vector3d v, BinaryWriter writer) Parameters Type Name Description Vector3d v BinaryWriter writer Store(Vector3f, BinaryWriter) Declaration public static void Store(Vector3f v, BinaryWriter writer) Parameters Type Name Description Vector3f v BinaryWriter writer Store(List<Double>, BinaryWriter) Declaration public static void Store(List<double> values, BinaryWriter writer) Parameters Type Name Description List < Double > values BinaryWriter writer Store(List<Int32>, BinaryWriter) Declaration public static void Store(List<int> values, BinaryWriter writer) Parameters Type Name Description List < Int32 > values BinaryWriter writer Store(List<Single>, BinaryWriter) Declaration public static void Store(List<float> values, BinaryWriter writer) Parameters Type Name Description List < Single > values BinaryWriter writer Store(String, BinaryWriter) Declaration public static void Store(string s, BinaryWriter writer) Parameters Type Name Description String s BinaryWriter writer Store(String[], BinaryWriter) Declaration public static void Store(string[] s, BinaryWriter writer) Parameters Type Name Description String [] s BinaryWriter writer"
  },
  "api/g3.HashBuilder.html": {
    "href": "api/g3.HashBuilder.html",
    "title": "Struct HashBuilder | ViRGIS VR GIS",
    "keywords": "Struct HashBuilder Construct hash of multiple values using FNV hash (ish) http://www.isthe.com/chongo/tech/comp/fnv/ (should probably be using uint? but standard GetHashCode() returns int...) Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct HashBuilder Constructors HashBuilder(Int32) Declaration public HashBuilder(int init = -2128831035) Parameters Type Name Description Int32 init Fields Hash Declaration public int Hash Field Value Type Description Int32 Methods Add(Frame3f) Declaration public void Add(Frame3f f) Parameters Type Name Description Frame3f f Add(Index2i) Declaration public void Add(Index2i v) Parameters Type Name Description Index2i v Add(Index3i) Declaration public void Add(Index3i v) Parameters Type Name Description Index3i v Add(Vector2d) Declaration public void Add(Vector2d v) Parameters Type Name Description Vector2d v Add(Vector2f) Declaration public void Add(Vector2f v) Parameters Type Name Description Vector2f v Add(Vector3d) Declaration public void Add(Vector3d v) Parameters Type Name Description Vector3d v Add(Vector3f) Declaration public void Add(Vector3f v) Parameters Type Name Description Vector3f v Add(Double) Declaration public void Add(double d) Parameters Type Name Description Double d Add(Int32) Declaration public void Add(int i) Parameters Type Name Description Int32 i Add(Single) Declaration public void Add(float f) Parameters Type Name Description Single f"
  },
  "api/g3.HBitArray.html": {
    "href": "api/g3.HBitArray.html",
    "title": "Class HBitArray | ViRGIS VR GIS",
    "keywords": "Class HBitArray HBitArray is a hierarchical variant of BitArray. Basically the idea is to make a tree of 32-bit blocks, where at level N, a '0' means that no bits are true in level N-1. This means we can more efficiently iterate over the bit set. Uses more memory than BitArray, but each tree level is divided by 32, so it is better than NlogN Inheritance Object HBitArray Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class HBitArray : IEnumerable<int>, IEnumerable Constructors HBitArray(Int32) Declaration public HBitArray(int maxIndex) Parameters Type Name Description Int32 maxIndex Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public bool this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Boolean TrueCount Declaration public int TrueCount { get; } Property Value Type Description Int32 Methods Add(Int32) Declaration public void Add(int i) Parameters Type Name Description Int32 i Contains(Int32) Declaration public bool Contains(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean Get(Int32) Declaration public bool Get(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > Set(Int32, Boolean) Declaration public void Set(int i, bool value) Parameters Type Name Description Int32 i Boolean value Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.Hexagon2d.html": {
    "href": "api/g3.Hexagon2d.html",
    "title": "Class Hexagon2d | ViRGIS VR GIS",
    "keywords": "Class Hexagon2d Inheritance Object Hexagon2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Hexagon2d Constructors Hexagon2d(Vector2d, Double, Hexagon2d.TopModes) Declaration public Hexagon2d(Vector2d center, double radius, Hexagon2d.TopModes mode = Hexagon2d.TopModes.Flat) Parameters Type Name Description Vector2d center Double radius Hexagon2d.TopModes mode Fields Center Declaration public Vector2d Center Field Value Type Description Vector2d Radius Declaration public double Radius Field Value Type Description Double TopMode Declaration public Hexagon2d.TopModes TopMode Field Value Type Description Hexagon2d.TopModes Properties Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d Height Declaration public double Height { get; } Property Value Type Description Double HorzSpacing Declaration public double HorzSpacing { get; } Property Value Type Description Double InnerRadius Declaration public double InnerRadius { get; set; } Property Value Type Description Double IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean VertSpacing Declaration public double VertSpacing { get; } Property Value Type Description Double Width Declaration public double Width { get; } Property Value Type Description Double Methods Clone() Declaration public Hexagon2d Clone() Returns Type Description Hexagon2d Corner(Int32) Declaration public Vector2d Corner(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d"
  },
  "api/g3.Hexagon2d.TopModes.html": {
    "href": "api/g3.Hexagon2d.TopModes.html",
    "title": "Enum Hexagon2d.TopModes | ViRGIS VR GIS",
    "keywords": "Enum Hexagon2d.TopModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum TopModes Fields Name Description Flat Tip"
  },
  "api/g3.html": {
    "href": "api/g3.html",
    "title": "Namespace g3 | ViRGIS VR GIS",
    "keywords": "Namespace g3 Classes AddTrianglesMeshChange Add triangles from mesh and store necessary data to be able to reverse the change. Vertex and Triangle IDs will be restored on Revert() Currently does not restore the same EdgeIDs Arc2d ArcLengthSoftTranslation Arrangement2d Arrangement2d constructs a planar arrangement of a set of 2D line segments. When a segment is inserted, existing edges are split, and the inserted segment becomes multiple graph edges. So, the resulting DGraph2 should not have any edges that intersect. Calculations are performed in double-precision, so there is no guarantee of correctness. [TODO] multi-level segment has to accelerate find_intersecting_edges() [TODO] maybe smarter handling BaseCurve2 BezierCurve2 2D Bezier curve of arbitrary degree Ported from WildMagic5 Wm5BezierCurve2 BiArcFit2 BiGrid3<BlockType> BiGrid3 is a two-level multiresolution grid data structure. You provide exemplar object that implements suitable interfaces, and the class automatically generates necessary data structures. Functions to act on parent/child grids are in-progress... BinaryG3FormatReader BinaryG3Reader BinaryG3Writer Bitmap2 Bitmap3 BlockSupportGenerator BlockTimer BoundsUtil BSplineBasis BufferUtil CachingDenseGridTrilinearImplicit [RMS] variant of DenseGridTrilinearImplicit that does lazy evaluation of Grid values. Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. CachingMeshSDF [RMS] this is variant of MeshSignedDistanceGrid that does lazy evaluation of actual distances, using mesh spatial data structure. This is much faster if we are doing continuation-method marching cubes as only values on surface will be computed! Compute discretely-sampled (ie gridded) signed distance field for a mesh The basic approach is, first compute exact distances in a narrow band, and then extend out to rest of grid using fast \"sweeping\" (ie like a distance transform). The resulting unsigned grid is then signed using ray-intersection counting, which is also computed on the grid, so no BVH is necessary If you set ComputeMode to NarrowBandOnly, result is a narrow-band signed distance field. This is quite a bit faster as the sweeping is the most computationally-intensive step. Caveats: the \"narrow band\" is based on triangle bounding boxes, so it is not necessarily that \"narrow\" if you have large triangles on a diagonal to grid axes Potential optimizations: Often we have a spatial data structure that would allow faster computation of the narrow-band distances (which become quite expensive if we want a wider band!) Not clear how to take advantage of this though. Perhaps we could have a binary grid that, in first pass, we set bits inside triangle bboxes to 1? Or perhaps same as current code, but we use spatial-dist, and so for each ijk we only compute once? (then have to test for computed value at each cell of each triangle...) This code is based on the C++ implementation found at https://github.com/christopherbatty/SDFGen Original license was public domain. Permission granted by Christopher Batty to include C# port under Boost license. CachingMeshSDFImplicit Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. CancelFunction CappedCylinderGenerator Generate a Cylinder with caps. Supports sections of cylinder as well (eg wedges). Curently UV islands are overlapping for different mesh components, if NoSharedVertices Positioned along Y axis such that base-center is at Origin, and top is at Y=Height You get a cone unless BaseRadius = TopRadius No subdivisions along top/base rings or height steps. cylinder triangles have groupid = 1, top cap = 2, bottom cap = 3, wedge faces 5 and 6 CholeskyDecomposition Computes Cholesky decomposition/factorization L of matrix A A must be symmetric and positive-definite computed lower-triangular matrix L satisfies L*L^T = A. https://en.wikipedia.org/wiki/Cholesky_decomposition Circle2d Circle3d CircleProjectionTarget ColorHSV ColorMap ColorMixer CommandArgumentSet ConeGenerator ConstantIndexMap ConstantItr<T> Iterator that just returns a constant value N times ContMinBox2 Fit minimal bounding-box to a set of 2D points. Result is in MinBox. ContMinCircle2 Fit minimal bounding-circle to a set of 2D points ContMinCircle2.Support ContOrientedBox3 ConvexHull2 Construct convex hull of a set of 2D points, with various accuracy levels. HullIndices provides ordered indices of vertices of input points that form hull. ConvexHull2.Edge Internal class that represents edge of hull, and neighbours Curve3Axis3RevolveGenerator Curve3Curve3RevolveGenerator CurveGenerator CurveResampler CurveSampler2 CurveUtils CurveUtils2 Cylinder3d CylinderProjectionTarget DCurve3 DCurve3 is a 3D polyline, either open or closed (via .Closed) Despite the D prefix, it is not dynamic DCurve3BoxTree tree of Oriented Boxes (OBB) for a DCurve3. Construction is sequential, ie pairs of segments are merged into boxes, then pairs of boxes, and so on [TODO] is this the best strategy? is there maybe some kind of sorting/sweepline algo? [TODO] would it make more sense to have more than just 2 segments at lowest level? DCurveProjectionTarget DeepCopy Collection of utility functions for one-line deep copies of lists DenseGrid2f 2D dense grid of floating-point scalar values. DenseGrid2i 2D dense grid of integers. DenseGrid3f 3D dense grid of floating-point scalar values. DenseGrid3i 3D dense grid of integers. DenseGridTrilinearImplicit Tri-linear interpolant for a 3D dense grid. Supports grid translation via GridOrigin, but does not support scaling or rotation. If you need those, you can wrap this in something that does the xform. DenseMatrix Row-major dense matrix DenseUVMesh DenseVector DGraph Base class for Arbitrary-Topology Graphs. Similar structure to topology parts of DMesh3. Each vertex can be connected to an arbitrary number of edges. Each edge can have an integer GroupID. See DGraph2 and DGraph3 for 3d implementations. Use DGraphN if you would like a topology-only graph. You cannot instantiate DGraph directly. DGraph2 Arbitrary-Topology 2D Graph. This is similar to DMesh3 but without faces. Each vertex can be connected to an arbitrary number of edges. Each vertex can have a 3-float color, and edge edge can have an integer GroupID DGraph2Resampler \"Remesher\" for DGraph2 DGraph2Util Utility functions for DGraph2 data structure DGraph2Util.Curves DGraph3 Arbitrary-Topology 3D Graph. This is similar to DMesh3 but without faces. Each vertex can be connected to an arbitrary number of edges. Each vertex can have a 3-float color, and edge edge can have an integer GroupID DGraph3Util Utility functions for DGraph3 data structure DGraphN Implementation of DGraph that has no dimensionality, ie no data stored for vertieces besides indices. DiagonalMatrix DijkstraGraphDistance Compute Dijkstra shortest-path algorithm on a graph. Computation is index-based, but can use sparse data structures if the index space will be sparse. Construction is somewhat complicated, but see shortcut static methods at end of file for common construction cases: MeshVertices(mesh) - compute on vertices of mesh MeshVertices(mesh) - compute on vertices of mesh DIndexArray2i DIndexArray3i Distance DistanceFieldToSkeletalField This class converts the interval [-falloff,falloff] to [0,1], Then applies Wyvill falloff function (1-t^2)^3. The result is a skeletal-primitive-like shape with the distance=0 isocontour lying just before midway in the range (at the .ZeroIsocontour constant) DistLine2Line2 DistLine2Segment2 DistLine3Ray3 DistLine3Segment3 DistLine3Triangle3 DistPoint2Box2 DistPoint2Circle2 DistPoint3Circle3 DistPoint3Cylinder3 DistPoint3Triangle3 DistRay3Ray3 DistRay3Segment3 Distance between ray and segment ported from WildMagic5 DistSegment2Segment2 DistSegment3Triangle3 DistTriangle3Triangle3 DMesh3 DMesh3Builder DMeshAABBTree3 Hierarchical Axis-Aligned-Bounding-Box tree for a DMesh3 mesh. This class supports a variety of spatial queries, listed below. Various construction strategies are also available, the default is the fastest to build but if you are doing a lot of queries, you might experiment with the others (eg TopDownMedian) Available queries: FindNearestTriangle(point, maxdist) FindNearestHitTriangle(ray, maxdist) FindAllHitTriangles(ray, maxdist) TestIntersection(triangle) TestIntersection(mesh) TestIntersection(otherAABBTree) FindAllIntersections(otherAABBTree) FindNearestTriangles(otherAABBTree, maxdist) IsInside(point) WindingNumber(point) FastWindingNumber(point) DoTraversal(generic_traversal_object) DMeshAABBTree3.IntersectionsQueryResult DMeshAABBTree3.TreeTraversal Instances of this class can be passed in to the DoTraversal() function to implement your own tree-traversal queries. NextBoxF() is called for each box node. Return false from this function to halt terminate that branch of the traversal, or true to descend into that box's children (boxes or triangles). NextTriangleF() is called for each triangle. DMeshIntersectionTarget DPolyLine2f Summary description for PolyLine. DS3FormatReader DSparseGrid3<ElemType> Dynamic sparse 3D grid. Idea is that we have grid of some type of object and we don't want to pre-allocate full grid of them. So we allocate on-demand. This can be used to implement multi-grid schemes, eg for example the GridElement type could be Bitmap3 of a fixed dimension. DSubmesh3 DSubmesh3Set A set of submeshes of a base mesh. You provide a set of keys, and a Func that returns the triangle index list for a given key. The set of DSubmesh3 objects are computed on construction. DVector<T> DVectorArray2<T> DVectorArray2d DVectorArray2f DVectorArray3<T> DVectorArray3d DVectorArray3f DVectorArray3i DynamicPriorityQueue<T> DynamicPriorityQueueNode To use DynamicPriorityQueue, your queue node type needs to subclass this one. However the priority and index members are for internal queue use, not yours! EdgeLoop Sequential set of vertices/edges in a mesh, that form a closed loop. If all you have are the vertices, use EdgeLoop.VertexLoopToEdgeLoop() to construct an EdgeLoop EdgeLoopRemesher This is a custom Remesher that only affects the edges along an EdgeLoop. The edges are only split and collapsed, flipping is not permitted. The loop vertices are smoothed along the loop, ie using curve laplacian rather than one-ring laplacian. [TODO] avoid rebuild_edge_list(). requires handling various cases below... [TODO] Precompute() seems overly expensive...? [TODO] local-smoothing impl is not very efficient. Should not be necessary to rebuild nbrhood each time if we are not changing it. EdgeSpan An EdgeSpan is a continous set of edges in a Mesh that is not closed (that would be an EdgeLoop) Ellipse2d EllipseArc2d FaceGroupOptimizer Given input mesh with a set of face groups, optimize the face group boundaries. This involves flipping triangles between groups, and/or assigning to \"background\" group. Also has Dilate/Contract functions to grow/shrink groups in various ways. FaceGroupUtil FastPointWinding Formulas for point-set winding number approximation FastQuaternionSVD Fast Approximate SVD of 3x3 matrix that returns quaternions. Implemented based on https://github.com/benjones/quatSVD/blob/master/quatSVD.hpp which was re-implemented from http://pages.cs.wisc.edu/~sifakis/project_pages/svd.html By default, only does a small number of diagonalization iterations (4), which limits the accuracy of the solution. Results are still orthonormal but error when reconstructing matrix will be larger. This is fine for many applications. Can increase accuracy by increasing NumJacobiIterations parameter Note: does not produce same quaternions as running SingularValueDecomposition on matrix and converting resulting U/V to quaternions. The numbers will be similar but the signs will be different Useful properties: quaternions are rotations, there are no mirrors like in normal SVD TODO: SymmetricMatrix3d currently a class, could make a struct (see comments) FastTriWinding Formulas for triangle winding number approximation FileSystemUtils GaussPointsFit3 GeneralPolygon2d GeneralPolygon2dBoxTree GenericMaterial gException gIndices gParallel GraphCells2d This class extracts the set of loops bounding the \"cells\" of a DGraph2, ie each cell is a connected region with a polygonal boundary. Precondition: the graph has no self-intersections. Precondition: at any vertex, the edges are sortable by angle (ie no outgoing edges overlap) ** numerically this may not be 100% reliable.... Both \"sides\" of each edge are included in some cell boundary, ie so for a simple polygon, there are two cells, one infinitely large. The \"inside\" cells will be oriented clockwise, if converted to a Polygon2d. GraphSplitter2d This class is used to bisect an existing DGraph2 with infinite lines. This is easier than inserting new segments, which can be done using Arrangement2d. Computations are done in double precision. Use at your own risk. [TODO] computation of signs for a split-line is currently O(N). If inserting many parallel lines, can improve this using standard sorting. GraphSupportGenerator GraphSupportGenerator.ImplicitCurve3d Implicit tube around line segment GraphTubeMesher GridBox3Generator Generate a mesh of a box that has \"gridded\" faces, ie grid of triangulated quads, with EdgeVertices verts along each edge. [TODO] allow varying EdgeVertices in each dimension (tricky...) GriddedRectGenerator Generate a mesh of a rect that has \"gridded\" faces, ie grid of triangulated quads, with EdgeVertices verts along each edge. [TODO] allow varying EdgeVertices in each dimension (tricky...) gSerialization HBitArray HBitArray is a hierarchical variant of BitArray. Basically the idea is to make a tree of 32-bit blocks, where at level N, a '0' means that no bits are true in level N-1. This means we can more efficiently iterate over the bit set. Uses more memory than BitArray, but each tree level is divided by 32, so it is better than NlogN Hexagon2d IdentityIndexMap ImplicitAxisAlignedBox3d Implicit axis-aligned box ImplicitBlend2d ImplicitBlend3d Blend of two implicit surfaces. Assumes surface is at zero iscontour. Uses Pasko blend from http://www.hyperfun.org/F-rep.pdf ImplicitBox3d Implicit oriented box ImplicitDifference2d ImplicitDifference3d Boolean Difference/Subtraction of two implicit functions A-B = A AND (NOT B) Assumption is that both have surface at zero isocontour and negative is inside. ImplicitFieldSampler3d Sample implicit fields into a dense grid ImplicitHalfSpace3d Implicit half-space. \"Inside\" is opposite of Normal direction. ImplicitIntersection2d ImplicitIntersection3d Boolean Intersection of two implicit functions, A AND B Assumption is that both have surface at zero isocontour and negative is inside. ImplicitLine3d Implicit tube around line segment ImplicitNaryDifference3d Boolean Difference of N implicit functions, A - Union(B1..BN) Assumption is that both have surface at zero isocontour and negative is inside. ImplicitNaryIntersection3d Boolean Intersection of N implicit functions, A AND B. Assumption is that both have surface at zero isocontour and negative is inside. ImplicitNAryOp2d ImplicitNaryUnion3d Boolean Union of N implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. ImplicitOffset3d Offset the zero-isocontour of an implicit function. Assumes that negative is inside, if not, reverse offset. ImplicitPoint2d ImplicitShell3d remaps values so that values within given interval are negative, and values outside this interval are positive. So, for a distance field, this converts single isocontour into two nested isocontours with zeros at interval a and b, with 'inside' in interval ImplicitSmoothDifference3d Continuous R-Function Boolean Difference of two implicit functions, A AND B Assumption is that both have surface at zero isocontour and negative is inside. ImplicitSmoothIntersection3d Continuous R-Function Boolean Intersection of two implicit functions, A-B = A AND (NOT B) Assumption is that both have surface at zero isocontour and negative is inside. ImplicitSmoothUnion3d Continuous R-Function Boolean Union of two implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. ImplicitSphere3d Implicit sphere, where zero isocontour is at Radius ImplicitUnion2d ImplicitUnion3d Boolean Union of two implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. IndexArray2i IndexArray3i IndexArray4i IndexFlagSet This class provides a similar interface to BitArray, but can optionally use a HashSet (or perhaps some other DS) if the fraction of the index space required is small IndexHashSet IndexMap IndexPriorityQueue This is a min-heap priority queue class that does not use an object for each queue node. Integer IDs must be provided by the user to identify unique nodes. Internally an array is used to keep track of the mapping from ids to internal indices, so the max ID must also be provided. See DijkstraGraphDistance for example usage. conceptually based on https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp IndexRangeEnumerator IndexUtil InPlaceIterativeCurveSmooth Integrate1d IntersectionUtil Intersector1 IntrLine2Line2 IntrLine2Segment2 IntrLine2Triangle2 IntrLine3AxisAlignedBox3 IntrLine3Box3 IntrRay3AxisAlignedBox3 IntrRay3Box3 IntrRay3Triangle3 IntrSegment2Segment2 IntrSegment2Triangle2 IntrSegment3Box3 IntrTriangle2Triangle2 IntrTriangle3Triangle3 IntTagSet<T> Basic object->integer mapping IWrappedCurve3d Simple sampled-curve wrapper type LaplacianCurveDeformer Variant of LaplacianMeshDeformer that can be applied to 3D curve. Solve in each dimension can be disabled using .SolveX/Y/Z Currently only supports uniform weights (in Initialize) LaplacianMeshDeformer LaplacianMeshSmoother LineGenerator LocalProfiler LockingQueue<T> MappedList IList wrapper that remaps values via a Func (eg for index maps) MarchingCubes Basic implementation of marching cubes mesh generation, which can be applied to arbitrary Implicit function. Multi-threading enabled by default. [TODO] support locking on Implicit.Value()? May not be thread-safe!! [TODO] extension that tracks set of triangles in each cube, so we can do partial updates? [TODO] is hash table on vertex x/y/z the best idea? [TODO] hash table for edge vtx-indices instead, like old polygonizer? (how did we index edges?!?) MarchingQuads 2D MarchingQuads polyline extraction from scalar field [TODO] this is very, very old code. Should at minimum rewrite using current vector classes/etc. MathUtil Matrix2d Matrix2f MatrixUtil MemoryPool<T> Very basic object pool class. MeshBoolean MeshBoundaryEdgeMidpoints Present mesh boundary-edge midpoints as a point set MeshBoundaryLoops Extract boundary EdgeLoops from Mesh. Can also extract EdgeSpans for open areas, however default behavior is to ignore these. Set .SpanBehavior to configure. MeshBoundaryLoopsException MeshConnectedComponents MeshConstraints MeshConstraintUtil MeshDecomposition MeshEdgeMidpoints Present mesh edge midpoints as a point set MeshEdgeSelection MeshEditor MeshExtrudeFaces Extrude a subset of faces of Mesh. Steps are: 1) separate subset from neighbouring triangles 2) offset them 3) connect original and offset edges (now boundary edges) with a triangle strip Caveats: not sure it works for multiple regions? boundary vertices are currently attached to offset region, rather than also duplicated and then connected w/ strip [TODO] implement this behavior MeshExtrudeLoop Assumption is that Loop is a boundary loop on Mesh. Operation makes a duplicate loop of vertices, at location defind by PositionF, then stitches input and new loops together with a ring of triangles. MeshExtrudeMesh Extrude all faces of a mesh, and stitch together any boundary loops. Steps are: 1) make a copy of all triangles in mesh 2) offset copy vertices 3) connect up loops with triangle strips MeshFaceSelection MeshFacesFromLoop Find mesh triangles enclosed by a curve embedded in the mesh If a seed triangle in the enclosed region is not provided, then the smaller of the two largest connected-components is chosen as the \"inside\". MeshGenerator MeshICP MeshIndexUtil Utility functions for manipulating sets/lists of mesh indices MeshInsertPolygon Insert Polygon into Mesh. Assumption is that Mesh has 3D coordinates (u,v,0). This is basically a helper/wrapper around MeshInsertUVPolyCurve. Inserted edge set is avaliable as .InsertedPolygonEdges, and triangles inside polygon as .InteriorTriangles MeshInsertUVPolyCurve Cut mesh with a path of 2D line segments Assumptions: mesh vertex x/y coordinates are 2D coordinates we want to use. Replace PointF if this is not the case. segments of Curve lie entirely within UV-triangles Limitations: currently not robust to near-parallel line segments that are within epsilon-band of the input loop. In this case, we will include all such segments in the 'cut' set, but we will probably not be able to find a connected path through them. not robust to degenerate geometry. Strongly recommend that you use Validate() and/or preprocess the input mesh to remove degenerate faces/edges MeshIOUtil MeshIsoCurves MeshIterativeSmooth MeshIterators MeshLocalParam MeshLoopClosure MeshLoopSmooth MeshMeasurements MeshMeshCut TODO: track descendant triangles of each input face for missing segments, can resolve in 2D in plane of face MeshNormals MeshOps MeshPlaneCut MeshProjectionTarget MeshProjectionTarget provides an IProjectionTarget interface to a mesh + spatial data structure. Use to project points to mesh surface. MeshQueries MeshRefinerBase MeshRegionBoundaryLoops Extract boundary EdgeLoops for subregions of Mesh MeshSignedDistanceGrid Compute discretely-sampled (ie gridded) signed distance field for a mesh The basic approach is, first compute exact distances in a narrow band, and then extend out to rest of grid using fast \"sweeping\" (ie like a distance transform). The resulting unsigned grid is then signed using ray-intersection counting, which is also computed on the grid, so no BVH is necessary If you set ComputeMode to NarrowBandOnly, result is a narrow-band signed distance field. This is quite a bit faster as the sweeping is the most computationally-intensive step. Caveats: the \"narrow band\" is based on triangle bounding boxes, so it is not necessarily that \"narrow\" if you have large triangles on a diagonal to grid axes Potential optimizations: Often we have a spatial data structure that would allow faster computation of the narrow-band distances (which become quite expensive if we want a wider band!) Not clear how to take advantage of this though. Perhaps we could have a binary grid that, in first pass, we set bits inside triangle bboxes to 1? Or perhaps same as current code, but we use spatial-dist, and so for each ijk we only compute once? (then have to test for computed value at each cell of each triangle...) This code is based on the C++ implementation found at https://github.com/christopherbatty/SDFGen Original license was public domain. Permission granted by Christopher Batty to include C# port under Boost license. MeshTransforms MeshTriInfoCache MeshTrimLoop Delete triangles inside on/near-surface trimming curve, and then adapt the new boundary loop to conform to the loop. [DANGER] To use this class, we require a spatial data structure we can project onto. Currently we assume that this is a DMesh3AABBTree because if you don't provide a seed triangle, we use FindNearestTriangle() to find this index on the input mesh. So, it must be a tree for the exact same mesh (!). However we then delete a bunch of triangles and use this spatial DS only for reprojection. Possibly these should be two separate things? Or force caller to provide seed triangle for trim loop, instead of solving this problem for them? (But basically there is no way around having a full mesh copy...) TODO: output boundary EdgeLoop that has been aligned w/ trim curve handle cases where input mesh has open borders MeshUtil MeshValidation MeshVertexSelection MeshWeights ModifyVerticesMeshChange Mesh change for vertex deformations. Currently minimal support for initializing buffers. AppendNewVertex() can be used to accumulate modified vertices and their initial positions. NormalHistogram Construct spherical histogram of normals of mesh. Binning is done using a Spherical Fibonacci point set. NTMesh3 NURBSCurve2 OBJFormatReader OBJMaterial OBJReader OBJWriter gradientspace OBJ writer [TODO] if mesh has groups, usemtl lines will not be written (see TODO below) [TODO] options to preserve vertex and triangle indices OFFFormatReader OFFWriter OpenCylinderGenerator OrthogonalPlaneFit3 PackedSparseMatrix This is a sparse matrix where each row is an array of (column,value) pairs This is more efficient for Matrix*Vector multiply. ParallelStream<V, T> ParametricCurveSequence2 PlanarComplex PlanarComplex.ClosedLoopsInfo PlanarComplex.Element PlanarComplex.GeneralSolid PlanarComplex.OpenCurvesInfo PlanarComplex.SmoothCurveElement PlanarComplex.SmoothLoopElement PlanarComplex.SolidRegionInfo PlanarHoleFiller Try to fill planar holes in a mesh. The fill is computed by mapping the hole boundary into 2D, filling using 2D algorithms, and then mapping back to 3D. This allows us to properly handle cases like nested holes (eg from slicing a torus in half). PlanarComplex is used to sort the input 2D polyons. MeshInsertUVPolyCurve is used to insert each 2D polygon into a generated planar mesh. The resolution of the generated mesh is controlled by .FillTargetEdgeLen In theory this approach can handle more geometric degeneracies than Delaunay triangluation. However, the current code requires that MeshInsertUVPolyCurve produce output boundary loops that have a 1-1 correspondence with the input polygons. This is not always possible. Currently these failure cases are not handled properly. In that case the loops will not be stitched. PlanarSolid2d PlanarSpansFiller This class fills an ordered sequence of planar spans. The 2D polygon is formed by chaining the spans. Current issues: connectors have a single segment, so when simplified, they become a single edge. should subsample them instead. currently mapping from inserted edges back to span edges is not calculated, so we have no way to merge them (ie MergeFillBoundary not implemented) fill triangles not returned? PlaneIntersectionTarget Compute ray-intersection with plane PlaneProjectionTarget PointAABBTree3 Hierarchical Axis-Aligned-Bounding-Box tree for an IPointSet TODO: no timestamp support right now... PointAABBTree3.TreeTraversal Instances of this class can be passed in to the DoTraversal() function to implement your own tree-traversal queries. NextBoxF() is called for each box node. Return false from this function to halt terminate that branch of the traversal, or true to descend into that box's children (boxes or points). NextPointF() is called for each point. PointHashGrid2d<T> Hash Grid for 2D points. You provide the 'point' type. If you have an indexable set of points this can just be int, or can be more complex point data structure (but be careful w/ structs...) Does not actually store 2D points. So, to remove a point you must also know it's 2D coordinate, so we can look up the cell coordinates. Hence, to 'update' a point, you need to know both it's old and new 2D coordinates. PointHashGrid3d<T> Hash Grid for 3D points. You provide the 'point' type. If you have an indexable set of points this can just be int, or can be more complex point data structure (but be careful w/ structs...) Does not actually store 3D points. So, to remove a point you must also know it's 3D coordinate, so we can look up the cell coordinates. Hence, to 'update' a point, you need to know both it's old and new 3D coordinates. TODO: if a lot of points are in the same spot, this is still a disaster. What if we had a second level of hashing, where once a list at a level gets too big, we build a sub-hash there? PointSplatsGenerator Create a mesh that contains a planar element for each point and normal (currently only triangles) Polygon2d Polygon2dBoxTree tree of Oriented Boxes (OBB) for a Polygon2d. Construction is sequential, ie pairs of segments are merged into boxes, then pairs of boxes, and so on [TODO] is this the best strategy? is there maybe some kind of sorting/sweepline algo? [TODO] would it make more sense to have more than just 2 segments at lowest level? Polygon2DCurve Wrapper for a Polygon2d that provides minimal IParametricCurve2D interface PolygonFont2d This class represents an outline font, where the outline is composed of polygons. Each font is a list of GeneralPolygon2D objects, so each outline may have 1 or more holes. (In fact, the mapping is [string,list_of_gpolygons], so you can actually keep entire strings together if desired) PolygonFont2d.CharacterInfo PolyLine2d PolyLine2DCurve Wrapper for a PolyLine2d that provides minimal IParametricCurve2D interface PolyLine3d PolySimplification2 2D Polyline/Polygon simplification. This is a more complex approach than Polygon.Simplify(), which uses sequential vtx clustering and then runs douglas-peucker algorithm. That method can end up modifying long straight segments, which is not ideal in many contexts (eg manufacturing). Strategy here is : 1) find runs of vertices that are very close to straight lines (default 0.01mm deviation tol) 2) find all straight segments longer than threshold distance (default 2mm) 3) discard vertices that deviate less than tolerance (default = 0.2mm) from sequential-points-segment, unless they are required to preserve straight segments [TODO] currently doing greedy search in 1,3. Could do more optimal search. [TODO] currently measuring deviation of p1...pN-1 from line [p0,pN] for points [p0,p1,...pN]. could alternately fit best segment to p1...pN (p0 is already fixed). [TODO] 2d variant of variational shape segmentation? ProgressCancel This class is intended to be passed to long-running computes to 1) provide progress info back to caller (not implemented yet) 2) allow caller to cancel the computation PuncturedDiscGenerator QuadraticFit2 Query2d Query2Int64 2D queries for integer coordinates. Note that input Vector2d values are directly cast to int64 - you must scale them to suitable coordinates yourself! QueryBase Port of WildMagic5 Query class QueryTuple2d Radial3DArrowGenerator RayIntersection ReadOptions Reducer RefCountVector RefCountedVector is used to keep track of which indices in a linear index list are in use/referenced. A free list is tracked so that unreferenced indices can be re-used. The enumerator iterates over valid indices (ie where refcount > 0) refcounts are shorts so the maximum count is 65536. No overflow checking is done in release builds. RegionOperator This class automatically extracts a submesh from a mesh, and can re-insert it after you have edited it, as long as you have not messed up the boundary [TODO] Nearly all the code here is duplicated from RegionRemesher. Maybe this could be a base class for that? [TODO] ReinsertSubToBaseMapT is not returned by the MeshEditor.ReinsertSubmesh, instead we are trying to guess it here, by making some assumptions about what happens. It works for now, but it would better if MeshEditor returned this information. RegionRemesher RemapItr<T, T2> Iterator that re-maps iterated values via a Func Remesher RemoveTrianglesMeshChange Remove triangles from mesh and store necessary data to be able to reverse the change. Vertex and Triangle IDs will be restored on Revert() Currently does not restore the same EdgeIDs RoundRectGenerator SafeListBuilder<T> SampledArcLengthParam SampledArcLengthParam2d ScalarMap Scalar version of a ColorMap (ie interpolate between sample points) [TODO] could we make this a template? SculptCurveDeformation Base-class for DCurve3 spatial deformations. Subclasses must implement abstract Apply() method. SculptCurveMove SculptCurveSmooth Segment2dBox SegmentHashGrid2d<T> Hash Grid for 2D segments. You provide the 'segment' type. If you have an indexable set of segments this can just be int, or can be more complex segment data structure (but be careful w/ structs...) Segments are stored in the grid cell that contains the segment center. We keep track of the extent of the longest segment that has been added. The search radius for distance queries is expanded by this extent. So, distance queries ARE NOT EFFICIENT if you even one very long segment. [TODO] make a multi-level hash Does not actually store 2D segments. So, to remove a segment you must also know it's 2D center, so we can look up the cell coordinates. Hence, to 'update' a segment, you need to know both it's old and new 2D centers. SegmentSet2d SequentialProjectionTarget SetVerticesMeshChange Mesh change for full-mesh vertex deformations - more efficient than ModifyVerticesMeshChange. Note that this does not enforce that vertex count does not change! ShiftIndexMap SimpleHoleFiller SimpleMesh SimpleMeshBuilder SimpleQuadMesh SimpleTriangleMesh but for quads. Data packed into buffers, no dynamics. Supports Per-Vertex Normals, Colors, UV, and Per-Quad Facegroup. use static WriteOBJ() to save. No loading, for now. SimpleStore Utility class that is intended to support things like writing and reading test cases, etc. You can write out a test case in a single line, eg SimpleStore.Store(path, new object[] { TestMesh, VertexList, PlaneNormal, ... }) The object list will be binned into the relevant sublists automatically. Then you can load this data via: SimpleStore s = SimpleStore.Restore(path) SingularValueDecomposition Singular Value Decomposition of arbitrary matrix A Computes U/S/V of A = U * S * V^T Useful Properties: S = square-roots of eigenvalues of A U = eigenvectors of A * A^T V = eigenvectors of A^T * A U * V^T = rotation matrix closest to A V * Inv(S) * U^T = psuedoinverse of A U and/or V are rotation matrices but may also contain reflections Detection: det(U) or det(v) == -1 Removal: if ( det(U) == -1 ) { U *= -1; S *= -1 } if ( det(V) == -1 ) { V *= -1; S *= -1 } (right? seems to work) SkeletalBlend3d sum-blend SkeletalRicciBlend3d Ricci blend SkeletalRicciNaryBlend3d Boolean Union of N implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. SmallListSet SmallListSet stores a set of short integer-valued variable-size lists. The lists are encoded into a few large DVector buffers, with internal pooling, so adding/removing lists usually does not involve any new or delete ops. The lists are stored in two parts. The first N elements are stored in a linear subset of a dvector. If the list spills past these N elements, the extra elements are stored in a linked list (which is also stored in a flat array). Each list stores its count, so list-size operations are constant time. All the internal \"pointers\" are 32-bit. Snapping SparseList<T> SparseObjectList<T> variant of SparseList for class objects, then \"zero\" is null TODO: can we combine these classes somehow? SparseSymmetricCG SparseSymmetricCGMultipleRHS [RMS] this is a variant of SparseSymmetricCG that supports multiple right-hand-sides. Makes quite a big difference as matrix gets bigger, because MultiplyF can unroll inner loops (as long as you actually do that) However, if this is done then it is not really possible to do different numbers of iterations for different RHS's. We will not update that RHS once it has converged, however we still have to do the multiplies! SpatialFunctions SpatialFunctions.NormalOffset Sphere3Generator_NormalizedCube Generate a mesh of a sphere by first generating a mesh of a cube, and then normalizing the vertices and moving them to sphere of desired radius. SphericalFibonacciPointSet A Spherical Fibonacci Point Set is a set of points that are roughly evenly distributed on a sphere. Basically the points lie on a spiral, see pdf below. The i-th SF point of an N-point set can be calculated directly. For a given (normalized) point P, finding the nearest SF point (ie mapping back to i) can be done in constant time. math from http://lgdv.cs.fau.de/uploads/publications/spherical_fibonacci_mapping_opt.pdf StandardMeshReader StandardMeshWriter Writes various mesh file formats. Format is determined from extension. Currently supports: .obj : Wavefront OBJ Format https://en.wikipedia.org/wiki/Wavefront_.obj_file .stl : ascii and binary STL formats https://en.wikipedia.org/wiki/STL_(file_format ) .off : OFF format https://en.wikipedia.org/wiki/OFF_(file_format ) .g3mesh : internal binary format for packed DMesh3 objects Each of these is implemented in a separate Writer class, eg OBJWriter, STLWriter, etc StandardSculptCurveDeformation STLFormatReader STLReader STLReader.STLSolid STLWriter StringTagSet<T> Basic object->string mapping SVGWriter SymmetricEigenSolver SymmetricSparseMatrix Basic sparse-symmetric-matrix class. Stores upper-triangular portion. Uses Dictionary as sparsifying data structure, which is probably not a good option. But it is easy. TilingUtil TransformedIntersectionTarget TransformedMeshProjectionTarget Extension of MeshProjectionTarget that allows the target to have a transformation relative to it's internal space. Call SetTransform(), or initialize the transforms yourself TransformSequence TransformSequence stores an ordered list of basic transformations. This can be useful if you need to construct some modifications and want to use the same set later. For example, if you have a hierarchy of objects with relative transformations and want to \"save\" the nested transform sequence without having to hold references to the original objects. Use the Append() functions to add different transform types, and the TransformX() to apply the sequence TransformSequence2 TransformSequence stores an ordered list of basic transformations. This can be useful if you need to construct some modifications and want to use the same set later. For example, if you have a hierarchy of objects with relative transformations and want to \"save\" the nested transform sequence without having to hold references to the original objects. Use the Append() functions to add different transform types, and the TransformX() to apply the sequence TriangleBinsGrid2d This class is a spatial data structure for 2D triangles. It is intended for point-containment and box-overlap queries. It does not store the triangles, only indices, so you must pass in the triangle vertices to add/remove functions, similar to PointHashGrid2d. However, unlike the hash classes, this one is based on a grid of \"bins\" which has a fixed size, so you must provide a bounding box on construction. Each triangle is inserted into every bin that it overlaps. [TODO] currently each triangle is inserted into every bin that it's bounding box overlaps. Need conservative rasterization to improve this. Can implement by testing each bin bbox for intersection w/ triangle TriangulatedPolygonGenerator Triangulate a 2D polygon-with-holes by inserting it's edges into a meshed rectangle and then removing the triangles outside the polygon. TrivialBox3Generator Generate a minimal box TrivialDiscGenerator TrivialRectGenerator TubeGenerator Sweep a 2D Profile Polygon along a 3D Path. Supports closed and open paths, and capping open paths. However caps are triangulated using a fan around a center vertex (which you can set using CapCenter). If Polygon is non-convex, this will have foldovers. In that case, you have to triangulate and append it yourself. If your profile curve does not contain the polygon bbox center, set OverrideCapCenter=true and set CapCenter to a suitable center point. The output normals are currently set to those for a circular profile. Call MeshNormals.QuickCompute() on the output DMesh to estimate proper vertex normals Units Util VectorArray2<T> VectorArray2d VectorArray2f VectorArray3<T> VectorArray3d VectorArray3f VectorArray3i VectorArray4<T> VerticalGeneralizedCylinderGenerator VoxelSurfaceGenerator Structs Arrangement2d.Intersection Arrangement2d.SegmentPoint ArrayAlias<T> AxisAlignedBox2d AxisAlignedBox2f AxisAlignedBox2i AxisAlignedBox3d AxisAlignedBox3f AxisAlignedBox3i Box2d Box2f Box3d Box3f Colorb Colorf ComplexEndpoint2d ComplexSegment2d CurveSample CurveSample2d DGraph.EdgeCollapseInfo DGraph.EdgeSplitInfo DGraph3Util.Curves DMesh3.CompactInfo DMesh3.EdgeCollapseInfo DMesh3.EdgeFlipInfo DMesh3.EdgeSplitInfo DMesh3.MergeEdgesInfo DMesh3.PokeTriangleInfo DMeshAABBTree3.PointIntersection DMeshAABBTree3.SegmentIntersection DPolyLine2f.Edge DPolyLine2f.Vertex DVector<T>.DBlock EdgeConstraint Frame3f FrameGridIndexer3 Map to/from grid coords, where grid is relative to frame coords/axes GridLevelIndex GridLevelIndex2 HashBuilder Construct hash of multiple values using FNV hash (ish) http://www.isthe.com/chongo/tech/comp/fnv/ (should probably be using uint? but standard GetHashCode() returns int...) Index2i Index3i Index4i Interval1d Interval1i IntSequence IList wrapper for an Interval1i, ie sequential list of integers IntTagPair integer type/value pair, packed into 32 bits - 8 for type, 24 for value IOReadResult IOWriteResult LaplacianCurveDeformer.SoftConstraintV LaplacianMeshDeformer.SoftConstraintV LaplacianMeshSmoother.SoftConstraintV Line2d Line2f Line3d Line3f LinearIntersection returned by linear-primitive intersection functions matrix_entry Matrix3d Matrix3f MeshConnectedComponents.Component MeshDecomposition.Component MeshGenerator.CircularSection MeshIsoCurves.GraphEdgeInfo Information about edge of the computed Graph. mesh_tri is triangle ID of crossed triangle mesh_edges depends on case. EdgeEdge is [edgeid,edgeid], EdgeVertex is [edgeid,vertexid], and OnEdge is [edgeid,-1] MeshMeasurements.GenusResult MultigridIndexer2 map between \"outer\" (ie higher-res) grid coordinates and \"blocks\" of those coordinates. MultigridIndexer3 map between \"outer\" (ie higher-res) grid coordinates and \"blocks\" of those coordinates. NewVertexInfo NTMesh3.EdgeSplitInfo NTMesh3.PokeTriangleInfo NURBSCurve2.CurveDerivatives PackedSparseMatrix.nonzero PlanarComplex.FindSolidsOptions Plane3d Plane3f QuadricError Stores quadratic function that evaluates distance to plane, in minimal 10-coefficient form, following http://mgarland.org/files/papers/qtheory.pdf symmetric matrix A vector b constant c Quaterniond Quaternionf Ray3d Ray3f Reducer.QEdge ScaleGridIndexer2 Map to/from grid coords ScaleGridIndexer3 Map to/from grid coords SculptCurveDeformation.DeformInfo Segment2d Segment2f Segment3d Segment3f SetGroupBehavior ShiftGridIndexer2 Map to/from grid coords, where grid is translated from origin ShiftGridIndexer3 Map to/from grid coords, where grid is translated from origin SVGWriter.Style Triangle2d Triangle2f Triangle3d Triangle3f Vector2d Vector2d.Information Vector2dTuple2 Vector2dTuple3 Vector2dTuple4 Vector2f Vector2i Vector2l Vector3d Vector3dTuple2 Vector3dTuple3 Vector3f Vector3fTuple3 Vector3i 3D integer vector type. This is basically the same as Index3i but with .x.y.z member names. This makes code far more readable in many places. Unfortunately I can't see a way to do this w/o so much duplication...we could have .x/.y/.z accessors but that is much less efficient... Vector4d Vector4f VertexConstraint WriteMesh WriteOptions Interfaces BoundedImplicitFunction3d Bounded implicit function has a bounding box within which the \"interesting\" part of the function is contained (eg the surface) IArcLengthParam IArcLengthParam2d IBinaryVoxelGrid ICancelSource interface that provides a cancel function IDeformableMesh IDuplicatable<T> Deep-copy cloning interface. Duplicate() must return a full deep copy of object, including all internal data structures. IFixedGrid3 generic 3D grid interface for grids of fixed dimensions IGrid3 generic 3D grid interface (is this useful?) IGridElement3 this type can be used in a SparseGrid. IGridWorldIndexer2 interface that maps between double real-space coords and integer grid goords IGridWorldIndexer3 interface that maps between double real-space coords and integer grid goords IIndexMap IIntersectionTarget IMatrix IMesh IMeshBuilder IMeshComponentManager IMeshReader IMeshWriter ImplicitField2d Summary description for ImplicitField2D. ImplicitFunction3d Minimalist implicit function interface ImplicitOperator2d IMultiCurve2d IMultigridIndexer2 interface that maps between integer grid coords and 'blocks' of those coordinates, ie for multigrid-like structures IMultigridIndexer3 interface that maps between integer grid coords and 'blocks' of those coordinates, ie for multigrid-like structures IOrientedProjectionTarget IParametricCurve2d IParametricCurve3d IPointSet IProjectionTarget ISampledCurve3d ISpatial ITransform2 MeshFormatReader Query2 Enums AxisAlignedBox2d.ScaleMode AxisAlignedBox2f.ScaleMode CachingMeshSDF.InsideModes ContMinBox2.RCFlags DGraph.FailMode DMesh3Builder.AddTriangleFailBehaviors DMeshAABBTree3.BuildStrategy DMeshAABBTree3.ClusterPolicy EdgeRefineFlags FailMode GenericMaterial.KnownMaterialTypes Hexagon2d.TopModes ImplicitFieldSampler3d.CombineModes IntersectionResult IntersectionType IOCode MarchingCubes.RootfindingModes MeshBoundaryLoops.FailureBehaviors MeshBoundaryLoops.SpanBehaviors MeshComponents MeshEditor.DuplicateTriBehavior MeshHints MeshIsoCurves.RootfindingModes MeshIsoCurves.TriangleCase MeshIterativeSmooth.SmoothTypes MeshLocalParam.UVModes MeshNormals.NormalsTypes MeshResult MeshSignedDistanceGrid.ComputeModes MeshSignedDistanceGrid.InsideModes PackedSparseMatrix.StorageModes PointAABBTree3.BuildStrategy QueryNumberType Reducer.ProcessResult Reducer.TargetModes Reducer.TargetProjectionMode RegionRemesher.QuickRemeshFlags Remesher.ProcessResult Remesher.SmoothTypes Remesher.TargetProjectionMode Remesher.VertexControl RoundRectGenerator.Corner RoundRectGenerator.UVModes SetGroupBehavior.Modes Sphere3Generator_NormalizedCube.NormalizationTypes STLReader.Strategy SymmetricEigenSolver.SortType TrivialRectGenerator.UVModes Units.Angular Units.Linear ValidationStatus Delegates DMeshAABBTree3.ClusterFunctionType ParsingMessagesHandler"
  },
  "api/g3.IArcLengthParam.html": {
    "href": "api/g3.IArcLengthParam.html",
    "title": "Interface IArcLengthParam | ViRGIS VR GIS",
    "keywords": "Interface IArcLengthParam Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IArcLengthParam Properties ArcLength Declaration double ArcLength { get; } Property Value Type Description Double Methods Sample(Double) Declaration CurveSample Sample(double fArcLen) Parameters Type Name Description Double fArcLen Returns Type Description CurveSample"
  },
  "api/g3.IArcLengthParam2d.html": {
    "href": "api/g3.IArcLengthParam2d.html",
    "title": "Interface IArcLengthParam2d | ViRGIS VR GIS",
    "keywords": "Interface IArcLengthParam2d Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IArcLengthParam2d Properties ArcLength Declaration double ArcLength { get; } Property Value Type Description Double Methods Sample(Double) Declaration CurveSample2d Sample(double fArcLen) Parameters Type Name Description Double fArcLen Returns Type Description CurveSample2d"
  },
  "api/g3.IBinaryVoxelGrid.html": {
    "href": "api/g3.IBinaryVoxelGrid.html",
    "title": "Interface IBinaryVoxelGrid | ViRGIS VR GIS",
    "keywords": "Interface IBinaryVoxelGrid Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IBinaryVoxelGrid Properties GridBounds Declaration AxisAlignedBox3i GridBounds { get; } Property Value Type Description AxisAlignedBox3i Methods Get(Vector3i) Declaration bool Get(Vector3i i) Parameters Type Name Description Vector3i i Returns Type Description Boolean NonZeros() Declaration IEnumerable<Vector3i> NonZeros() Returns Type Description IEnumerable < Vector3i >"
  },
  "api/g3.ICancelSource.html": {
    "href": "api/g3.ICancelSource.html",
    "title": "Interface ICancelSource | ViRGIS VR GIS",
    "keywords": "Interface ICancelSource interface that provides a cancel function Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ICancelSource Methods Cancelled() Declaration bool Cancelled() Returns Type Description Boolean"
  },
  "api/g3.IDeformableMesh.html": {
    "href": "api/g3.IDeformableMesh.html",
    "title": "Interface IDeformableMesh | ViRGIS VR GIS",
    "keywords": "Interface IDeformableMesh Inherited Members IMesh.TriangleCount IMesh.MaxTriangleID IMesh.HasVertexUVs IMesh.GetVertexUV(Int32) IMesh.GetVertexAll(Int32) IMesh.HasTriangleGroups IMesh.GetTriangle(Int32) IMesh.GetTriangleGroup(Int32) IMesh.IsTriangle(Int32) IMesh.TriangleIndices() IPointSet.VertexCount IPointSet.MaxVertexID IPointSet.HasVertexNormals IPointSet.HasVertexColors IPointSet.GetVertex(Int32) IPointSet.GetVertexNormal(Int32) IPointSet.GetVertexColor(Int32) IPointSet.IsVertex(Int32) IPointSet.VertexIndices() IPointSet.Timestamp Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IDeformableMesh : IMesh, IPointSet Methods SetVertex(Int32, Vector3d) Declaration void SetVertex(int vID, Vector3d vNewPos) Parameters Type Name Description Int32 vID Vector3d vNewPos SetVertexNormal(Int32, Vector3f) Declaration void SetVertexNormal(int vid, Vector3f vNewNormal) Parameters Type Name Description Int32 vid Vector3f vNewNormal SetVertexUV(Int32, Vector2f) Declaration void SetVertexUV(int i, Vector2f uv) Parameters Type Name Description Int32 i Vector2f uv"
  },
  "api/g3.IdentityIndexMap.html": {
    "href": "api/g3.IdentityIndexMap.html",
    "title": "Class IdentityIndexMap | ViRGIS VR GIS",
    "keywords": "Class IdentityIndexMap Inheritance Object IdentityIndexMap Implements IIndexMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IdentityIndexMap : IIndexMap Properties Item[Int32] Declaration public int this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Implements IIndexMap"
  },
  "api/g3.IDuplicatable-1.html": {
    "href": "api/g3.IDuplicatable-1.html",
    "title": "Interface IDuplicatable<T> | ViRGIS VR GIS",
    "keywords": "Interface IDuplicatable<T> Deep-copy cloning interface. Duplicate() must return a full deep copy of object, including all internal data structures. Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IDuplicatable<T> Type Parameters Name Description T Methods Duplicate() Declaration T Duplicate() Returns Type Description T"
  },
  "api/g3.IFixedGrid3.html": {
    "href": "api/g3.IFixedGrid3.html",
    "title": "Interface IFixedGrid3 | ViRGIS VR GIS",
    "keywords": "Interface IFixedGrid3 generic 3D grid interface for grids of fixed dimensions Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IFixedGrid3 Properties Dimensions Declaration Vector3i Dimensions { get; } Property Value Type Description Vector3i"
  },
  "api/g3.IGrid3.html": {
    "href": "api/g3.IGrid3.html",
    "title": "Interface IGrid3 | ViRGIS VR GIS",
    "keywords": "Interface IGrid3 generic 3D grid interface (is this useful?) Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IGrid3 Properties BoundsInclusive Declaration AxisAlignedBox3i BoundsInclusive { get; } Property Value Type Description AxisAlignedBox3i"
  },
  "api/g3.IGridElement3.html": {
    "href": "api/g3.IGridElement3.html",
    "title": "Interface IGridElement3 | ViRGIS VR GIS",
    "keywords": "Interface IGridElement3 this type can be used in a SparseGrid. Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IGridElement3 Methods CreateNewGridElement(Boolean) create new instance of this object w/ same size parameters, but don't copy data unless bCopy = true Declaration IGridElement3 CreateNewGridElement(bool bCopy) Parameters Type Name Description Boolean bCopy Returns Type Description IGridElement3"
  },
  "api/g3.IGridWorldIndexer2.html": {
    "href": "api/g3.IGridWorldIndexer2.html",
    "title": "Interface IGridWorldIndexer2 | ViRGIS VR GIS",
    "keywords": "Interface IGridWorldIndexer2 interface that maps between double real-space coords and integer grid goords Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IGridWorldIndexer2 Methods FromGrid(Vector2d) Declaration Vector2d FromGrid(Vector2d gridpointf) Parameters Type Name Description Vector2d gridpointf Returns Type Description Vector2d FromGrid(Vector2i) Declaration Vector2d FromGrid(Vector2i gridpoint) Parameters Type Name Description Vector2i gridpoint Returns Type Description Vector2d ToGrid(Vector2d) Declaration Vector2i ToGrid(Vector2d pointf) Parameters Type Name Description Vector2d pointf Returns Type Description Vector2i"
  },
  "api/g3.IGridWorldIndexer3.html": {
    "href": "api/g3.IGridWorldIndexer3.html",
    "title": "Interface IGridWorldIndexer3 | ViRGIS VR GIS",
    "keywords": "Interface IGridWorldIndexer3 interface that maps between double real-space coords and integer grid goords Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IGridWorldIndexer3 Methods FromGrid(Vector3d) Declaration Vector3d FromGrid(Vector3d gridpointf) Parameters Type Name Description Vector3d gridpointf Returns Type Description Vector3d FromGrid(Vector3i) Declaration Vector3d FromGrid(Vector3i gridpoint) Parameters Type Name Description Vector3i gridpoint Returns Type Description Vector3d ToGrid(Vector3d) Declaration Vector3i ToGrid(Vector3d pointf) Parameters Type Name Description Vector3d pointf Returns Type Description Vector3i ToGridf(Vector3d) Declaration Vector3d ToGridf(Vector3d pointf) Parameters Type Name Description Vector3d pointf Returns Type Description Vector3d"
  },
  "api/g3.IIndexMap.html": {
    "href": "api/g3.IIndexMap.html",
    "title": "Interface IIndexMap | ViRGIS VR GIS",
    "keywords": "Interface IIndexMap Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IIndexMap Properties Item[Int32] Declaration int this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Int32"
  },
  "api/g3.IIntersectionTarget.html": {
    "href": "api/g3.IIntersectionTarget.html",
    "title": "Interface IIntersectionTarget | ViRGIS VR GIS",
    "keywords": "Interface IIntersectionTarget Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IIntersectionTarget Properties HasNormal Declaration bool HasNormal { get; } Property Value Type Description Boolean Methods RayIntersect(Ray3d, out Vector3d, out Vector3d) Declaration bool RayIntersect(Ray3d ray, out Vector3d vHit, out Vector3d vHitNormal) Parameters Type Name Description Ray3d ray Vector3d vHit Vector3d vHitNormal Returns Type Description Boolean"
  },
  "api/g3.IMatrix.html": {
    "href": "api/g3.IMatrix.html",
    "title": "Interface IMatrix | ViRGIS VR GIS",
    "keywords": "Interface IMatrix Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMatrix Properties Columns Declaration int Columns { get; } Property Value Type Description Int32 Item[Int32, Int32] Declaration double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Rows Declaration int Rows { get; } Property Value Type Description Int32 Size Declaration Index2i Size { get; } Property Value Type Description Index2i Methods Set(Int32, Int32, Double) Declaration void Set(int r, int c, double value) Parameters Type Name Description Int32 r Int32 c Double value"
  },
  "api/g3.IMesh.html": {
    "href": "api/g3.IMesh.html",
    "title": "Interface IMesh | ViRGIS VR GIS",
    "keywords": "Interface IMesh Inherited Members IPointSet.VertexCount IPointSet.MaxVertexID IPointSet.HasVertexNormals IPointSet.HasVertexColors IPointSet.GetVertex(Int32) IPointSet.GetVertexNormal(Int32) IPointSet.GetVertexColor(Int32) IPointSet.IsVertex(Int32) IPointSet.VertexIndices() IPointSet.Timestamp Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMesh : IPointSet Properties HasTriangleGroups Declaration bool HasTriangleGroups { get; } Property Value Type Description Boolean HasVertexUVs Declaration bool HasVertexUVs { get; } Property Value Type Description Boolean MaxTriangleID Declaration int MaxTriangleID { get; } Property Value Type Description Int32 TriangleCount Declaration int TriangleCount { get; } Property Value Type Description Int32 Methods GetTriangle(Int32) Declaration Index3i GetTriangle(int i) Parameters Type Name Description Int32 i Returns Type Description Index3i GetTriangleGroup(Int32) Declaration int GetTriangleGroup(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 GetVertexAll(Int32) Declaration NewVertexInfo GetVertexAll(int i) Parameters Type Name Description Int32 i Returns Type Description NewVertexInfo GetVertexUV(Int32) Declaration Vector2f GetVertexUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f IsTriangle(Int32) Declaration bool IsTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean TriangleIndices() Declaration IEnumerable<int> TriangleIndices() Returns Type Description IEnumerable < Int32 >"
  },
  "api/g3.IMeshBuilder.html": {
    "href": "api/g3.IMeshBuilder.html",
    "title": "Interface IMeshBuilder | ViRGIS VR GIS",
    "keywords": "Interface IMeshBuilder Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMeshBuilder Properties SupportsMetaData Declaration bool SupportsMetaData { get; } Property Value Type Description Boolean Methods AppendMetaData(String, Object) Declaration void AppendMetaData(string identifier, object data) Parameters Type Name Description String identifier Object data AppendNewMesh(DMesh3) Declaration int AppendNewMesh(DMesh3 existingMesh) Parameters Type Name Description DMesh3 existingMesh Returns Type Description Int32 AppendNewMesh(Boolean, Boolean, Boolean, Boolean) Declaration int AppendNewMesh(bool bHaveVtxNormals, bool bHaveVtxColors, bool bHaveVtxUVs, bool bHaveFaceGroups) Parameters Type Name Description Boolean bHaveVtxNormals Boolean bHaveVtxColors Boolean bHaveVtxUVs Boolean bHaveFaceGroups Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32) Declaration int AppendTriangle(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32, Int32) Declaration int AppendTriangle(int i, int j, int k, int g) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 g Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Double, Double, Double) Declaration int AppendVertex(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Int32 AssignMaterial(Int32, Int32) Declaration void AssignMaterial(int materialID, int meshID) Parameters Type Name Description Int32 materialID Int32 meshID BuildMaterial(GenericMaterial) Declaration int BuildMaterial(GenericMaterial m) Parameters Type Name Description GenericMaterial m Returns Type Description Int32 SetActiveMesh(Int32) Declaration void SetActiveMesh(int id) Parameters Type Name Description Int32 id SetVertexUV(Int32, Vector2f) Declaration void SetVertexUV(int vID, Vector2f Uvs) Parameters Type Name Description Int32 vID Vector2f Uvs"
  },
  "api/g3.IMeshComponentManager.html": {
    "href": "api/g3.IMeshComponentManager.html",
    "title": "Interface IMeshComponentManager | ViRGIS VR GIS",
    "keywords": "Interface IMeshComponentManager Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMeshComponentManager Methods AddComponent(MeshDecomposition.Component) Declaration void AddComponent(MeshDecomposition.Component C) Parameters Type Name Description MeshDecomposition.Component C ClearAllComponents() Declaration void ClearAllComponents()"
  },
  "api/g3.IMeshReader.html": {
    "href": "api/g3.IMeshReader.html",
    "title": "Interface IMeshReader | ViRGIS VR GIS",
    "keywords": "Interface IMeshReader Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMeshReader Methods Read(BinaryReader, ReadOptions, IMeshBuilder) Declaration IOReadResult Read(BinaryReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description BinaryReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Read(TextReader, ReadOptions, IMeshBuilder) Declaration IOReadResult Read(TextReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description TextReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult"
  },
  "api/g3.IMeshWriter.html": {
    "href": "api/g3.IMeshWriter.html",
    "title": "Interface IMeshWriter | ViRGIS VR GIS",
    "keywords": "Interface IMeshWriter Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMeshWriter Methods Write(BinaryWriter, List<WriteMesh>, WriteOptions) Declaration IOWriteResult Write(BinaryWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description BinaryWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Write(TextWriter, List<WriteMesh>, WriteOptions) Declaration IOWriteResult Write(TextWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description TextWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult"
  },
  "api/g3.ImplicitAxisAlignedBox3d.html": {
    "href": "api/g3.ImplicitAxisAlignedBox3d.html",
    "title": "Class ImplicitAxisAlignedBox3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitAxisAlignedBox3d Implicit axis-aligned box Inheritance Object ImplicitAxisAlignedBox3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitAxisAlignedBox3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields AABox Declaration public AxisAlignedBox3d AABox Field Value Type Description AxisAlignedBox3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitBlend2d.html": {
    "href": "api/g3.ImplicitBlend2d.html",
    "title": "Class ImplicitBlend2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitBlend2d Inheritance Object ImplicitNAryOp2d ImplicitBlend2d Implements ImplicitOperator2d ImplicitField2d Inherited Members ImplicitNAryOp2d.m_vChildren ImplicitNAryOp2d.AddChild(ImplicitField2d) ImplicitNAryOp2d.Bounds Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitBlend2d : ImplicitNAryOp2d, ImplicitOperator2d, ImplicitField2d Constructors ImplicitBlend2d() Declaration public ImplicitBlend2d() Methods Gradient(Single, Single, ref Single, ref Single) Declaration public override void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Overrides ImplicitNAryOp2d.Gradient(Single, Single, ref Single, ref Single) Value(Single, Single) Declaration public override float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Overrides ImplicitNAryOp2d.Value(Single, Single) Implements ImplicitOperator2d ImplicitField2d"
  },
  "api/g3.ImplicitBlend3d.html": {
    "href": "api/g3.ImplicitBlend3d.html",
    "title": "Class ImplicitBlend3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitBlend3d Blend of two implicit surfaces. Assumes surface is at zero iscontour. Uses Pasko blend from http://www.hyperfun.org/F-rep.pdf Inheritance Object ImplicitBlend3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitBlend3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d ExpandBounds Declaration public double ExpandBounds Field Value Type Description Double Properties Blend Blending power Declaration public double Blend { get; set; } Property Value Type Description Double WeightA Weight on implicit A Declaration public double WeightA { get; set; } Property Value Type Description Double WeightB Weight on implicit B Declaration public double WeightB { get; set; } Property Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitBox3d.html": {
    "href": "api/g3.ImplicitBox3d.html",
    "title": "Class ImplicitBox3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitBox3d Implicit oriented box Inheritance Object ImplicitBox3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitBox3d : BoundedImplicitFunction3d, ImplicitFunction3d Properties Box Declaration public Box3d Box { get; set; } Property Value Type Description Box3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitDifference2d.html": {
    "href": "api/g3.ImplicitDifference2d.html",
    "title": "Class ImplicitDifference2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitDifference2d Inheritance Object ImplicitNAryOp2d ImplicitDifference2d Implements ImplicitOperator2d ImplicitField2d Inherited Members ImplicitNAryOp2d.m_vChildren ImplicitNAryOp2d.AddChild(ImplicitField2d) ImplicitNAryOp2d.Bounds Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitDifference2d : ImplicitNAryOp2d, ImplicitOperator2d, ImplicitField2d Constructors ImplicitDifference2d() Declaration public ImplicitDifference2d() Methods Gradient(Single, Single, ref Single, ref Single) Declaration public override void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Overrides ImplicitNAryOp2d.Gradient(Single, Single, ref Single, ref Single) Value(Single, Single) Declaration public override float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Overrides ImplicitNAryOp2d.Value(Single, Single) Implements ImplicitOperator2d ImplicitField2d"
  },
  "api/g3.ImplicitDifference3d.html": {
    "href": "api/g3.ImplicitDifference3d.html",
    "title": "Class ImplicitDifference3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitDifference3d Boolean Difference/Subtraction of two implicit functions A-B = A AND (NOT B) Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitDifference3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitDifference3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitField2d.html": {
    "href": "api/g3.ImplicitField2d.html",
    "title": "Interface ImplicitField2d | ViRGIS VR GIS",
    "keywords": "Interface ImplicitField2d Summary description for ImplicitField2D. Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ImplicitField2d Properties Bounds Declaration AxisAlignedBox2f Bounds { get; } Property Value Type Description AxisAlignedBox2f Methods Gradient(Single, Single, ref Single, ref Single) Declaration void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Value(Single, Single) Declaration float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single"
  },
  "api/g3.ImplicitFieldSampler3d.CombineModes.html": {
    "href": "api/g3.ImplicitFieldSampler3d.CombineModes.html",
    "title": "Enum ImplicitFieldSampler3d.CombineModes | ViRGIS VR GIS",
    "keywords": "Enum ImplicitFieldSampler3d.CombineModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum CombineModes Fields Name Description DistanceMinUnion"
  },
  "api/g3.ImplicitFieldSampler3d.html": {
    "href": "api/g3.ImplicitFieldSampler3d.html",
    "title": "Class ImplicitFieldSampler3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitFieldSampler3d Sample implicit fields into a dense grid Inheritance Object ImplicitFieldSampler3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitFieldSampler3d Constructors ImplicitFieldSampler3d(AxisAlignedBox3d, Double) Declaration public ImplicitFieldSampler3d(AxisAlignedBox3d fieldBounds, double cellSize) Parameters Type Name Description AxisAlignedBox3d fieldBounds Double cellSize Fields BackgroundValue Declaration public float BackgroundValue Field Value Type Description Single CellSize Declaration public double CellSize Field Value Type Description Double CombineMode Declaration public ImplicitFieldSampler3d.CombineModes CombineMode Field Value Type Description ImplicitFieldSampler3d.CombineModes Grid Declaration public DenseGrid3f Grid Field Value Type Description DenseGrid3f GridBounds Declaration public AxisAlignedBox3i GridBounds Field Value Type Description AxisAlignedBox3i GridOrigin Declaration public Vector3d GridOrigin Field Value Type Description Vector3d Indexer Declaration public ShiftGridIndexer3 Indexer Field Value Type Description ShiftGridIndexer3 Methods Clear(Single) Declaration public void Clear(float f) Parameters Type Name Description Single f Sample(BoundedImplicitFunction3d, Double) Declaration public void Sample(BoundedImplicitFunction3d f, double expandRadius = 0) Parameters Type Name Description BoundedImplicitFunction3d f Double expandRadius ToImplicit() Declaration public DenseGridTrilinearImplicit ToImplicit() Returns Type Description DenseGridTrilinearImplicit"
  },
  "api/g3.ImplicitFunction3d.html": {
    "href": "api/g3.ImplicitFunction3d.html",
    "title": "Interface ImplicitFunction3d | ViRGIS VR GIS",
    "keywords": "Interface ImplicitFunction3d Minimalist implicit function interface Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ImplicitFunction3d Methods Value(ref Vector3d) Declaration double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double"
  },
  "api/g3.ImplicitHalfSpace3d.html": {
    "href": "api/g3.ImplicitHalfSpace3d.html",
    "title": "Class ImplicitHalfSpace3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitHalfSpace3d Implicit half-space. \"Inside\" is opposite of Normal direction. Inheritance Object ImplicitHalfSpace3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitHalfSpace3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields Normal Declaration public Vector3d Normal Field Value Type Description Vector3d Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitIntersection2d.html": {
    "href": "api/g3.ImplicitIntersection2d.html",
    "title": "Class ImplicitIntersection2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitIntersection2d Inheritance Object ImplicitNAryOp2d ImplicitIntersection2d Implements ImplicitOperator2d ImplicitField2d Inherited Members ImplicitNAryOp2d.m_vChildren ImplicitNAryOp2d.AddChild(ImplicitField2d) ImplicitNAryOp2d.Bounds Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitIntersection2d : ImplicitNAryOp2d, ImplicitOperator2d, ImplicitField2d Constructors ImplicitIntersection2d() Declaration public ImplicitIntersection2d() Methods Gradient(Single, Single, ref Single, ref Single) Declaration public override void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Overrides ImplicitNAryOp2d.Gradient(Single, Single, ref Single, ref Single) Value(Single, Single) Declaration public override float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Overrides ImplicitNAryOp2d.Value(Single, Single) Implements ImplicitOperator2d ImplicitField2d"
  },
  "api/g3.ImplicitIntersection3d.html": {
    "href": "api/g3.ImplicitIntersection3d.html",
    "title": "Class ImplicitIntersection3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitIntersection3d Boolean Intersection of two implicit functions, A AND B Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitIntersection3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitIntersection3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitLine3d.html": {
    "href": "api/g3.ImplicitLine3d.html",
    "title": "Class ImplicitLine3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitLine3d Implicit tube around line segment Inheritance Object ImplicitLine3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitLine3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields Radius Declaration public double Radius Field Value Type Description Double Segment Declaration public Segment3d Segment Field Value Type Description Segment3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitNaryDifference3d.html": {
    "href": "api/g3.ImplicitNaryDifference3d.html",
    "title": "Class ImplicitNaryDifference3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitNaryDifference3d Boolean Difference of N implicit functions, A - Union(B1..BN) Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitNaryDifference3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitNaryDifference3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d BSet Declaration public List<BoundedImplicitFunction3d> BSet Field Value Type Description List < BoundedImplicitFunction3d > Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitNaryIntersection3d.html": {
    "href": "api/g3.ImplicitNaryIntersection3d.html",
    "title": "Class ImplicitNaryIntersection3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitNaryIntersection3d Boolean Intersection of N implicit functions, A AND B. Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitNaryIntersection3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitNaryIntersection3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields Children Declaration public List<BoundedImplicitFunction3d> Children Field Value Type Description List < BoundedImplicitFunction3d > Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitNAryOp2d.html": {
    "href": "api/g3.ImplicitNAryOp2d.html",
    "title": "Class ImplicitNAryOp2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitNAryOp2d Inheritance Object ImplicitNAryOp2d ImplicitBlend2d ImplicitDifference2d ImplicitIntersection2d ImplicitUnion2d Implements ImplicitOperator2d ImplicitField2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class ImplicitNAryOp2d : ImplicitOperator2d, ImplicitField2d Constructors ImplicitNAryOp2d() Declaration public ImplicitNAryOp2d() Fields m_vChildren Declaration protected List<ImplicitField2d> m_vChildren Field Value Type Description List < ImplicitField2d > Properties Bounds Declaration public virtual AxisAlignedBox2f Bounds { get; } Property Value Type Description AxisAlignedBox2f Methods AddChild(ImplicitField2d) Declaration public void AddChild(ImplicitField2d pField) Parameters Type Name Description ImplicitField2d pField Gradient(Single, Single, ref Single, ref Single) Declaration public virtual void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Value(Single, Single) Declaration public virtual float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Implements ImplicitOperator2d ImplicitField2d"
  },
  "api/g3.ImplicitNaryUnion3d.html": {
    "href": "api/g3.ImplicitNaryUnion3d.html",
    "title": "Class ImplicitNaryUnion3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitNaryUnion3d Boolean Union of N implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitNaryUnion3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitNaryUnion3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields Children Declaration public List<BoundedImplicitFunction3d> Children Field Value Type Description List < BoundedImplicitFunction3d > Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitOffset3d.html": {
    "href": "api/g3.ImplicitOffset3d.html",
    "title": "Class ImplicitOffset3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitOffset3d Offset the zero-isocontour of an implicit function. Assumes that negative is inside, if not, reverse offset. Inheritance Object ImplicitOffset3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitOffset3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d Offset Declaration public double Offset Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitOperator2d.html": {
    "href": "api/g3.ImplicitOperator2d.html",
    "title": "Interface ImplicitOperator2d | ViRGIS VR GIS",
    "keywords": "Interface ImplicitOperator2d Inherited Members ImplicitField2d.Value(Single, Single) ImplicitField2d.Gradient(Single, Single, Single, Single) ImplicitField2d.Bounds Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ImplicitOperator2d : ImplicitField2d Methods AddChild(ImplicitField2d) Declaration void AddChild(ImplicitField2d field) Parameters Type Name Description ImplicitField2d field"
  },
  "api/g3.ImplicitPoint2d.html": {
    "href": "api/g3.ImplicitPoint2d.html",
    "title": "Class ImplicitPoint2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitPoint2d Inheritance Object ImplicitPoint2d Implements ImplicitField2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitPoint2d : ImplicitField2d Constructors ImplicitPoint2d(Single, Single) Declaration public ImplicitPoint2d(float x, float y) Parameters Type Name Description Single x Single y ImplicitPoint2d(Single, Single, Single) Declaration public ImplicitPoint2d(float x, float y, float radius) Parameters Type Name Description Single x Single y Single radius Properties Bounds Declaration public AxisAlignedBox2f Bounds { get; } Property Value Type Description AxisAlignedBox2f Center Declaration public Vector2f Center { get; set; } Property Value Type Description Vector2f HighX Declaration public float HighX { get; } Property Value Type Description Single HighY Declaration public float HighY { get; } Property Value Type Description Single LowX Declaration public float LowX { get; } Property Value Type Description Single LowY Declaration public float LowY { get; } Property Value Type Description Single radius Declaration public float radius { get; set; } Property Value Type Description Single x Declaration public float x { get; set; } Property Value Type Description Single y Declaration public float y { get; set; } Property Value Type Description Single Methods Gradient(Single, Single, ref Single, ref Single) Declaration public void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY InBounds(Single, Single) Declaration public bool InBounds(float x, float y) Parameters Type Name Description Single x Single y Returns Type Description Boolean Value(Single, Single) Declaration public float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Implements ImplicitField2d"
  },
  "api/g3.ImplicitShell3d.html": {
    "href": "api/g3.ImplicitShell3d.html",
    "title": "Class ImplicitShell3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitShell3d remaps values so that values within given interval are negative, and values outside this interval are positive. So, for a distance field, this converts single isocontour into two nested isocontours with zeros at interval a and b, with 'inside' in interval Inheritance Object ImplicitShell3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitShell3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d Inside Declaration public Interval1d Inside Field Value Type Description Interval1d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitSmoothDifference3d.html": {
    "href": "api/g3.ImplicitSmoothDifference3d.html",
    "title": "Class ImplicitSmoothDifference3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitSmoothDifference3d Continuous R-Function Boolean Difference of two implicit functions, A AND B Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitSmoothDifference3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitSmoothDifference3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitSmoothIntersection3d.html": {
    "href": "api/g3.ImplicitSmoothIntersection3d.html",
    "title": "Class ImplicitSmoothIntersection3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitSmoothIntersection3d Continuous R-Function Boolean Intersection of two implicit functions, A-B = A AND (NOT B) Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitSmoothIntersection3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitSmoothIntersection3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitSmoothUnion3d.html": {
    "href": "api/g3.ImplicitSmoothUnion3d.html",
    "title": "Class ImplicitSmoothUnion3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitSmoothUnion3d Continuous R-Function Boolean Union of two implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitSmoothUnion3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitSmoothUnion3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitSphere3d.html": {
    "href": "api/g3.ImplicitSphere3d.html",
    "title": "Class ImplicitSphere3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitSphere3d Implicit sphere, where zero isocontour is at Radius Inheritance Object ImplicitSphere3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitSphere3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Radius Declaration public double Radius Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.ImplicitUnion2d.html": {
    "href": "api/g3.ImplicitUnion2d.html",
    "title": "Class ImplicitUnion2d | ViRGIS VR GIS",
    "keywords": "Class ImplicitUnion2d Inheritance Object ImplicitNAryOp2d ImplicitUnion2d Implements ImplicitOperator2d ImplicitField2d Inherited Members ImplicitNAryOp2d.m_vChildren ImplicitNAryOp2d.AddChild(ImplicitField2d) ImplicitNAryOp2d.Bounds Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitUnion2d : ImplicitNAryOp2d, ImplicitOperator2d, ImplicitField2d Constructors ImplicitUnion2d() Declaration public ImplicitUnion2d() Methods Gradient(Single, Single, ref Single, ref Single) Declaration public override void Gradient(float fX, float fY, ref float fGX, ref float fGY) Parameters Type Name Description Single fX Single fY Single fGX Single fGY Overrides ImplicitNAryOp2d.Gradient(Single, Single, ref Single, ref Single) Value(Single, Single) Declaration public override float Value(float fX, float fY) Parameters Type Name Description Single fX Single fY Returns Type Description Single Overrides ImplicitNAryOp2d.Value(Single, Single) Implements ImplicitOperator2d ImplicitField2d"
  },
  "api/g3.ImplicitUnion3d.html": {
    "href": "api/g3.ImplicitUnion3d.html",
    "title": "Class ImplicitUnion3d | ViRGIS VR GIS",
    "keywords": "Class ImplicitUnion3d Boolean Union of two implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object ImplicitUnion3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ImplicitUnion3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.IMultiCurve2d.html": {
    "href": "api/g3.IMultiCurve2d.html",
    "title": "Interface IMultiCurve2d | ViRGIS VR GIS",
    "keywords": "Interface IMultiCurve2d Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMultiCurve2d Properties Curves Declaration ReadOnlyCollection<IParametricCurve2d> Curves { get; } Property Value Type Description ReadOnlyCollection < IParametricCurve2d >"
  },
  "api/g3.IMultigridIndexer2.html": {
    "href": "api/g3.IMultigridIndexer2.html",
    "title": "Interface IMultigridIndexer2 | ViRGIS VR GIS",
    "keywords": "Interface IMultigridIndexer2 interface that maps between integer grid coords and 'blocks' of those coordinates, ie for multigrid-like structures Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMultigridIndexer2 Methods FromBlock(Vector2i) Map from block index to outer grid index at min-corner of the block. (add block-local coord to get specific outer-grid index) Declaration Vector2i FromBlock(Vector2i block_idx) Parameters Type Name Description Vector2i block_idx Returns Type Description Vector2i ToBlock(Vector2i) maps from denser outer-grid indices to pairs of (block_index, local_index_in_block) this should just be the combined result of [ ToBlockIndex() , ToBlockLocal() ] Declaration GridLevelIndex2 ToBlock(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description GridLevelIndex2 ToBlockIndex(Vector2i) map from outer-grid indices to block index (ie divide) Declaration Vector2i ToBlockIndex(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description Vector2i ToBlockLocal(Vector2i) map from outer-grid indices to block-local index (ie modulo) Declaration Vector2i ToBlockLocal(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description Vector2i"
  },
  "api/g3.IMultigridIndexer3.html": {
    "href": "api/g3.IMultigridIndexer3.html",
    "title": "Interface IMultigridIndexer3 | ViRGIS VR GIS",
    "keywords": "Interface IMultigridIndexer3 interface that maps between integer grid coords and 'blocks' of those coordinates, ie for multigrid-like structures Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IMultigridIndexer3 Methods FromBlock(Vector3i) Map from block index to outer grid index at min-corner of the block. (add block-local coord to get specific outer-grid index) Declaration Vector3i FromBlock(Vector3i block_idx) Parameters Type Name Description Vector3i block_idx Returns Type Description Vector3i ToBlock(Vector3i) maps from denser outer-grid indices to pairs of (block_index, local_index_in_block) this should just be the combined result of [ ToBlockIndex() , ToBlockLocal() ] Declaration GridLevelIndex ToBlock(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description GridLevelIndex ToBlockIndex(Vector3i) map from outer-grid indices to block index (ie divide) Declaration Vector3i ToBlockIndex(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description Vector3i ToBlockLocal(Vector3i) map from outer-grid indices to block-local index (ie modulo) Declaration Vector3i ToBlockLocal(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description Vector3i"
  },
  "api/g3.Index2i.html": {
    "href": "api/g3.Index2i.html",
    "title": "Struct Index2i | ViRGIS VR GIS",
    "keywords": "Struct Index2i Implements IComparable < Index2i > IEquatable < Index2i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Index2i : IComparable<Index2i>, IEquatable<Index2i> Constructors Index2i(Index2i) Declaration public Index2i(Index2i copy) Parameters Type Name Description Index2i copy Index2i(Int32) Declaration public Index2i(int z) Parameters Type Name Description Int32 z Index2i(Int32, Int32) Declaration public Index2i(int ii, int jj) Parameters Type Name Description Int32 ii Int32 jj Index2i(Int32[]) Declaration public Index2i(int[] i2) Parameters Type Name Description Int32 [] i2 Fields a Declaration public int a Field Value Type Description Int32 b Declaration public int b Field Value Type Description Int32 Max Declaration public static readonly Index2i Max Field Value Type Description Index2i Min Declaration public static readonly Index2i Min Field Value Type Description Index2i One Declaration public static readonly Index2i One Field Value Type Description Index2i Zero Declaration public static readonly Index2i Zero Field Value Type Description Index2i Properties array Declaration public int[] array { get; } Property Value Type Description Int32 [] Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 Length Declaration public int Length { get; } Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods CompareTo(Index2i) Declaration public int CompareTo(Index2i other) Parameters Type Name Description Index2i other Returns Type Description Int32 Equals(Index2i) Declaration public bool Equals(Index2i other) Parameters Type Name Description Index2i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Set(Index2i) Declaration public void Set(Index2i o) Parameters Type Name Description Index2i o Set(Int32, Int32) Declaration public void Set(int ii, int jj) Parameters Type Name Description Int32 ii Int32 jj ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Index2i, Index2i) Declaration public static Index2i operator +(Index2i v0, Index2i v1) Parameters Type Name Description Index2i v0 Index2i v1 Returns Type Description Index2i Addition(Index2i, Int32) Declaration public static Index2i operator +(Index2i v0, int f) Parameters Type Name Description Index2i v0 Int32 f Returns Type Description Index2i Division(Index2i, Index2i) Declaration public static Index2i operator /(Index2i a, Index2i b) Parameters Type Name Description Index2i a Index2i b Returns Type Description Index2i Division(Index2i, Int32) Declaration public static Index2i operator /(Index2i v, int f) Parameters Type Name Description Index2i v Int32 f Returns Type Description Index2i Equality(Index2i, Index2i) Declaration public static bool operator ==(Index2i a, Index2i b) Parameters Type Name Description Index2i a Index2i b Returns Type Description Boolean Inequality(Index2i, Index2i) Declaration public static bool operator !=(Index2i a, Index2i b) Parameters Type Name Description Index2i a Index2i b Returns Type Description Boolean Multiply(Index2i, Index2i) Declaration public static Index2i operator *(Index2i a, Index2i b) Parameters Type Name Description Index2i a Index2i b Returns Type Description Index2i Multiply(Index2i, Int32) Declaration public static Index2i operator *(Index2i v, int f) Parameters Type Name Description Index2i v Int32 f Returns Type Description Index2i Multiply(Int32, Index2i) Declaration public static Index2i operator *(int f, Index2i v) Parameters Type Name Description Int32 f Index2i v Returns Type Description Index2i Subtraction(Index2i, Index2i) Declaration public static Index2i operator -(Index2i v0, Index2i v1) Parameters Type Name Description Index2i v0 Index2i v1 Returns Type Description Index2i Subtraction(Index2i, Int32) Declaration public static Index2i operator -(Index2i v0, int f) Parameters Type Name Description Index2i v0 Int32 f Returns Type Description Index2i UnaryNegation(Index2i) Declaration public static Index2i operator -(Index2i v) Parameters Type Name Description Index2i v Returns Type Description Index2i Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Index3i.html": {
    "href": "api/g3.Index3i.html",
    "title": "Struct Index3i | ViRGIS VR GIS",
    "keywords": "Struct Index3i Implements IComparable < Index3i > IEquatable < Index3i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Index3i : IComparable<Index3i>, IEquatable<Index3i> Constructors Index3i(Index3i) Declaration public Index3i(Index3i copy) Parameters Type Name Description Index3i copy Index3i(Int32) Declaration public Index3i(int z) Parameters Type Name Description Int32 z Index3i(Int32, Int32, Int32) Declaration public Index3i(int ii, int jj, int kk) Parameters Type Name Description Int32 ii Int32 jj Int32 kk Index3i(Int32, Int32, Int32, Boolean) Declaration public Index3i(int ii, int jj, int kk, bool cycle) Parameters Type Name Description Int32 ii Int32 jj Int32 kk Boolean cycle Index3i(Int32[]) Declaration public Index3i(int[] i2) Parameters Type Name Description Int32 [] i2 Fields a Declaration public int a Field Value Type Description Int32 b Declaration public int b Field Value Type Description Int32 c Declaration public int c Field Value Type Description Int32 Max Declaration public static readonly Index3i Max Field Value Type Description Index3i Min Declaration public static readonly Index3i Min Field Value Type Description Index3i One Declaration public static readonly Index3i One Field Value Type Description Index3i Zero Declaration public static readonly Index3i Zero Field Value Type Description Index3i Properties array Declaration public int[] array { get; } Property Value Type Description Int32 [] Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 Length Declaration public int Length { get; } Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods CompareTo(Index3i) Declaration public int CompareTo(Index3i other) Parameters Type Name Description Index3i other Returns Type Description Int32 Equals(Index3i) Declaration public bool Equals(Index3i other) Parameters Type Name Description Index3i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Set(Index3i) Declaration public void Set(Index3i o) Parameters Type Name Description Index3i o Set(Int32, Int32, Int32) Declaration public void Set(int ii, int jj, int kk) Parameters Type Name Description Int32 ii Int32 jj Int32 kk ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Index3i, Index3i) Declaration public static Index3i operator +(Index3i v0, Index3i v1) Parameters Type Name Description Index3i v0 Index3i v1 Returns Type Description Index3i Addition(Index3i, Int32) Declaration public static Index3i operator +(Index3i v0, int f) Parameters Type Name Description Index3i v0 Int32 f Returns Type Description Index3i Division(Index3i, Index3i) Declaration public static Index3i operator /(Index3i a, Index3i b) Parameters Type Name Description Index3i a Index3i b Returns Type Description Index3i Division(Index3i, Int32) Declaration public static Index3i operator /(Index3i v, int f) Parameters Type Name Description Index3i v Int32 f Returns Type Description Index3i Equality(Index3i, Index3i) Declaration public static bool operator ==(Index3i a, Index3i b) Parameters Type Name Description Index3i a Index3i b Returns Type Description Boolean Inequality(Index3i, Index3i) Declaration public static bool operator !=(Index3i a, Index3i b) Parameters Type Name Description Index3i a Index3i b Returns Type Description Boolean Multiply(Index3i, Index3i) Declaration public static Index3i operator *(Index3i a, Index3i b) Parameters Type Name Description Index3i a Index3i b Returns Type Description Index3i Multiply(Index3i, Int32) Declaration public static Index3i operator *(Index3i v, int f) Parameters Type Name Description Index3i v Int32 f Returns Type Description Index3i Multiply(Int32, Index3i) Declaration public static Index3i operator *(int f, Index3i v) Parameters Type Name Description Int32 f Index3i v Returns Type Description Index3i Subtraction(Index3i, Index3i) Declaration public static Index3i operator -(Index3i v0, Index3i v1) Parameters Type Name Description Index3i v0 Index3i v1 Returns Type Description Index3i Subtraction(Index3i, Int32) Declaration public static Index3i operator -(Index3i v0, int f) Parameters Type Name Description Index3i v0 Int32 f Returns Type Description Index3i UnaryNegation(Index3i) Declaration public static Index3i operator -(Index3i v) Parameters Type Name Description Index3i v Returns Type Description Index3i Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Index4i.html": {
    "href": "api/g3.Index4i.html",
    "title": "Struct Index4i | ViRGIS VR GIS",
    "keywords": "Struct Index4i Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Index4i Constructors Index4i(Index4i) Declaration public Index4i(Index4i copy) Parameters Type Name Description Index4i copy Index4i(Int32) Declaration public Index4i(int z) Parameters Type Name Description Int32 z Index4i(Int32, Int32, Int32, Int32) Declaration public Index4i(int aa, int bb, int cc, int dd) Parameters Type Name Description Int32 aa Int32 bb Int32 cc Int32 dd Index4i(Int32[]) Declaration public Index4i(int[] i2) Parameters Type Name Description Int32 [] i2 Fields a Declaration public int a Field Value Type Description Int32 b Declaration public int b Field Value Type Description Int32 c Declaration public int c Field Value Type Description Int32 d Declaration public int d Field Value Type Description Int32 Max Declaration public static readonly Index4i Max Field Value Type Description Index4i One Declaration public static readonly Index4i One Field Value Type Description Index4i Zero Declaration public static readonly Index4i Zero Field Value Type Description Index4i Properties array Declaration public int[] array { get; } Property Value Type Description Int32 [] Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 Length Declaration public int Length { get; } Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods CompareTo(Index4i) Declaration public int CompareTo(Index4i other) Parameters Type Name Description Index4i other Returns Type Description Int32 Contains(Int32) Declaration public bool Contains(int val) Parameters Type Name Description Int32 val Returns Type Description Boolean Equals(Index4i) Declaration public bool Equals(Index4i other) Parameters Type Name Description Index4i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Set(Index4i) Declaration public void Set(Index4i o) Parameters Type Name Description Index4i o Set(Int32, Int32, Int32, Int32) Declaration public void Set(int aa, int bb, int cc, int dd) Parameters Type Name Description Int32 aa Int32 bb Int32 cc Int32 dd Sort() Declaration public void Sort() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Index4i, Index4i) Declaration public static Index4i operator +(Index4i v0, Index4i v1) Parameters Type Name Description Index4i v0 Index4i v1 Returns Type Description Index4i Addition(Index4i, Int32) Declaration public static Index4i operator +(Index4i v0, int f) Parameters Type Name Description Index4i v0 Int32 f Returns Type Description Index4i Division(Index4i, Index4i) Declaration public static Index4i operator /(Index4i a, Index4i b) Parameters Type Name Description Index4i a Index4i b Returns Type Description Index4i Division(Index4i, Int32) Declaration public static Index4i operator /(Index4i v, int f) Parameters Type Name Description Index4i v Int32 f Returns Type Description Index4i Equality(Index4i, Index4i) Declaration public static bool operator ==(Index4i a, Index4i b) Parameters Type Name Description Index4i a Index4i b Returns Type Description Boolean Inequality(Index4i, Index4i) Declaration public static bool operator !=(Index4i a, Index4i b) Parameters Type Name Description Index4i a Index4i b Returns Type Description Boolean Multiply(Index4i, Index4i) Declaration public static Index4i operator *(Index4i a, Index4i b) Parameters Type Name Description Index4i a Index4i b Returns Type Description Index4i Multiply(Index4i, Int32) Declaration public static Index4i operator *(Index4i v, int f) Parameters Type Name Description Index4i v Int32 f Returns Type Description Index4i Multiply(Int32, Index4i) Declaration public static Index4i operator *(int f, Index4i v) Parameters Type Name Description Int32 f Index4i v Returns Type Description Index4i Subtraction(Index4i, Index4i) Declaration public static Index4i operator -(Index4i v0, Index4i v1) Parameters Type Name Description Index4i v0 Index4i v1 Returns Type Description Index4i Subtraction(Index4i, Int32) Declaration public static Index4i operator -(Index4i v0, int f) Parameters Type Name Description Index4i v0 Int32 f Returns Type Description Index4i UnaryNegation(Index4i) Declaration public static Index4i operator -(Index4i v) Parameters Type Name Description Index4i v Returns Type Description Index4i"
  },
  "api/g3.IndexArray2i.html": {
    "href": "api/g3.IndexArray2i.html",
    "title": "Class IndexArray2i | ViRGIS VR GIS",
    "keywords": "Class IndexArray2i Inheritance Object VectorArray2 < Int32 > IndexArray2i Implements IEnumerable < Int32 > IEnumerable Inherited Members VectorArray2<Int32>.array VectorArray2<Int32>.Count VectorArray2<Int32>.GetEnumerator() VectorArray2<Int32>.Resize(Int32) VectorArray2<Int32>.Set(Int32, Int32, Int32) VectorArray2<Int32>.Set(Int32, Int32, VectorArray2<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexArray2i : VectorArray2<int>, IEnumerable<int>, IEnumerable Constructors IndexArray2i(Int32) Declaration public IndexArray2i(int nCount) Parameters Type Name Description Int32 nCount IndexArray2i(Int32[]) Declaration public IndexArray2i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Index2i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Index2i Methods AsIndex2i() Declaration public IEnumerable<Index2i> AsIndex2i() Returns Type Description IEnumerable < Index2i > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexArray3i.html": {
    "href": "api/g3.IndexArray3i.html",
    "title": "Class IndexArray3i | ViRGIS VR GIS",
    "keywords": "Class IndexArray3i Inheritance Object VectorArray3 < Int32 > IndexArray3i Implements IEnumerable < Int32 > IEnumerable Inherited Members VectorArray3<Int32>.array VectorArray3<Int32>.Count VectorArray3<Int32>.GetEnumerator() VectorArray3<Int32>.Resize(Int32) VectorArray3<Int32>.Set(Int32, Int32, Int32, Int32) VectorArray3<Int32>.Set(Int32, Int32, VectorArray3<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexArray3i : VectorArray3<int>, IEnumerable<int>, IEnumerable Constructors IndexArray3i(Int32) Declaration public IndexArray3i(int nCount) Parameters Type Name Description Int32 nCount IndexArray3i(Int32[]) Declaration public IndexArray3i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Index3i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Index3i Methods AsIndex3i() Declaration public IEnumerable<Index3i> AsIndex3i() Returns Type Description IEnumerable < Index3i > Set(Int32, Int32, Int32, Int32, Boolean) Declaration public void Set(int i, int a, int b, int c, bool bCycle = false) Parameters Type Name Description Int32 i Int32 a Int32 b Int32 c Boolean bCycle Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexArray4i.html": {
    "href": "api/g3.IndexArray4i.html",
    "title": "Class IndexArray4i | ViRGIS VR GIS",
    "keywords": "Class IndexArray4i Inheritance Object VectorArray4 < Int32 > IndexArray4i Implements IEnumerable < Int32 > IEnumerable Inherited Members VectorArray4<Int32>.array VectorArray4<Int32>.Count VectorArray4<Int32>.GetEnumerator() VectorArray4<Int32>.Resize(Int32) VectorArray4<Int32>.Set(Int32, Int32, Int32, Int32, Int32) VectorArray4<Int32>.Set(Int32, Int32, VectorArray4<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexArray4i : VectorArray4<int>, IEnumerable<int>, IEnumerable Constructors IndexArray4i(Int32) Declaration public IndexArray4i(int nCount) Parameters Type Name Description Int32 nCount IndexArray4i(Int32[]) Declaration public IndexArray4i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Index4i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Index4i Methods AsIndex4i() Declaration public IEnumerable<Index4i> AsIndex4i() Returns Type Description IEnumerable < Index4i > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexFlagSet.html": {
    "href": "api/g3.IndexFlagSet.html",
    "title": "Class IndexFlagSet | ViRGIS VR GIS",
    "keywords": "Class IndexFlagSet This class provides a similar interface to BitArray, but can optionally use a HashSet (or perhaps some other DS) if the fraction of the index space required is small Inheritance Object IndexFlagSet Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexFlagSet : IEnumerable<int>, IEnumerable Constructors IndexFlagSet(Boolean, Int32) Declaration public IndexFlagSet(bool bForceSparse, int MaxIndex = -1) Parameters Type Name Description Boolean bForceSparse Int32 MaxIndex IndexFlagSet(Int32, Int32) Declaration public IndexFlagSet(int MaxIndex, int SubsetCountEst) Parameters Type Name Description Int32 MaxIndex Int32 SubsetCountEst Properties Count Returns number of true values in set Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public bool this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Boolean Methods Add(Int32) sets value i to true Declaration public void Add(int i) Parameters Type Name Description Int32 i Contains(Int32) checks if value i is true Declaration public bool Contains(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean GetEnumerator() enumerate over indices w/ value = true Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexHashSet.html": {
    "href": "api/g3.IndexHashSet.html",
    "title": "Class IndexHashSet | ViRGIS VR GIS",
    "keywords": "Class IndexHashSet Inheritance Object IndexHashSet Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexHashSet : HashSet<int> Properties Item[Int32] Declaration public bool this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Boolean"
  },
  "api/g3.IndexMap.html": {
    "href": "api/g3.IndexMap.html",
    "title": "Class IndexMap | ViRGIS VR GIS",
    "keywords": "Class IndexMap Inheritance Object IndexMap Implements IIndexMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexMap : IIndexMap Constructors IndexMap(Boolean, Int32) Declaration public IndexMap(bool bForceSparse, int MaxIndex = -1) Parameters Type Name Description Boolean bForceSparse Int32 MaxIndex IndexMap(Int32, Int32) Declaration public IndexMap(int MaxIndex, int SubsetCountEst) Parameters Type Name Description Int32 MaxIndex Int32 SubsetCountEst IndexMap(Int32[], Int32) Declaration public IndexMap(int[] use_dense_map, int MaxIndex = -1) Parameters Type Name Description Int32 [] use_dense_map Int32 MaxIndex Fields InvalidIndex Declaration public readonly int InvalidIndex Field Value Type Description Int32 Properties Item[Int32] Declaration public int this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Methods Contains(Int32) Declaration public bool Contains(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean SetToInvalid() Declaration public void SetToInvalid() Implements IIndexMap"
  },
  "api/g3.IndexPriorityQueue.html": {
    "href": "api/g3.IndexPriorityQueue.html",
    "title": "Class IndexPriorityQueue | ViRGIS VR GIS",
    "keywords": "Class IndexPriorityQueue This is a min-heap priority queue class that does not use an object for each queue node. Integer IDs must be provided by the user to identify unique nodes. Internally an array is used to keep track of the mapping from ids to internal indices, so the max ID must also be provided. See DijkstraGraphDistance for example usage. conceptually based on https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp Inheritance Object IndexPriorityQueue Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexPriorityQueue : IEnumerable<int>, IEnumerable Constructors IndexPriorityQueue(Int32) maxIndex parameter is required because internally a fixed-size array is used to track mapping from IDs to internal node indices. If this seems problematic because you won't be inserting the full index space, consider a DynamicPriorityQueue instead. Declaration public IndexPriorityQueue(int maxID) Parameters Type Name Description Int32 maxID Fields EnableDebugChecks Declaration public bool EnableDebugChecks Field Value Type Description Boolean Properties Count Declaration public int Count { get; } Property Value Type Description Int32 First id of node at head of queue Declaration public int First { get; } Property Value Type Description Int32 FirstPriority Priority of node at head of queue Declaration public float FirstPriority { get; } Property Value Type Description Single Methods Clear(Boolean) reset the queue to empty state. if bFreeMemory is false, we don't discard internal data structures, so there will be less allocation next time (this does not make a huge difference...) Declaration public void Clear(bool bFreeMemory = true) Parameters Type Name Description Boolean bFreeMemory Contains(Int32) constant-time check to see if id is already in queue Declaration public bool Contains(int id) Parameters Type Name Description Int32 id Returns Type Description Boolean DebugPrint() Declaration public void DebugPrint() Dequeue() remove node at head of queue, update queue, and return id for that node Declaration public int Dequeue() Returns Type Description Int32 Enqueue(Int32, Single) Declaration public void Enqueue(int id, float priority) Parameters Type Name Description Int32 id Single priority GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > GetPriority(Int32) Query the priority at node id, assuming it exists in queue Declaration public float GetPriority(int id) Parameters Type Name Description Int32 id Returns Type Description Single Insert(Int32, Single) Add id to list w/ given priority Behavior is undefined if you call w/ same id twice Declaration public void Insert(int id, float priority) Parameters Type Name Description Int32 id Single priority IsValidQueue() Check if queue has been corrupted Declaration public bool IsValidQueue() Returns Type Description Boolean Remove(Int32) remove this node from queue. Undefined behavior if called w/ same id twice! Behavior is undefined if you call w/ id that is not in queue Declaration public void Remove(int id) Parameters Type Name Description Int32 id Update(Int32, Single) update priority at node id, and then move it to correct position in queue Behavior is undefined if you call w/ id that is not in queue Declaration public void Update(int id, float priority) Parameters Type Name Description Int32 id Single priority Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexRangeEnumerator.html": {
    "href": "api/g3.IndexRangeEnumerator.html",
    "title": "Class IndexRangeEnumerator | ViRGIS VR GIS",
    "keywords": "Class IndexRangeEnumerator Inheritance Object IndexRangeEnumerator Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexRangeEnumerator : IEnumerable<int>, IEnumerable Constructors IndexRangeEnumerator(Int32) Declaration public IndexRangeEnumerator(int count) Parameters Type Name Description Int32 count IndexRangeEnumerator(Int32, Int32) Declaration public IndexRangeEnumerator(int start, int count) Parameters Type Name Description Int32 start Int32 count Methods GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IndexUtil.html": {
    "href": "api/g3.IndexUtil.html",
    "title": "Class IndexUtil | ViRGIS VR GIS",
    "keywords": "Class IndexUtil Inheritance Object IndexUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IndexUtil Methods Apply(List<Int32>, IIndexMap) Apply map to indices Declaration public static void Apply(List<int> indices, IIndexMap map) Parameters Type Name Description List < Int32 > indices IIndexMap map Apply(Int32[], IIndexMap) Declaration public static void Apply(int[] indices, IIndexMap map) Parameters Type Name Description Int32 [] indices IIndexMap map Apply(Int32[], IList<Int32>) Declaration public static void Apply(int[] indices, IList<int> map) Parameters Type Name Description Int32 [] indices IList < Int32 > map cycle_indices_minfirst(ref Index3i) Declaration public static void cycle_indices_minfirst(ref Index3i tri) Parameters Type Name Description Index3i tri EdgesToVertices(DMesh3, HashSet<Int32>, HashSet<Int32>) Declaration public static void EdgesToVertices(DMesh3 mesh, HashSet<int> edges, HashSet<int> vertices) Parameters Type Name Description DMesh3 mesh HashSet < Int32 > edges HashSet < Int32 > vertices EdgesToVertices(DMesh3, IEnumerable<Int32>, HashSet<Int32>) Declaration public static void EdgesToVertices(DMesh3 mesh, IEnumerable<int> edges, HashSet<int> vertices) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > edges HashSet < Int32 > vertices FilterValid(Int32[], Func<Int32, Boolean>, Boolean) Filter out invalid entries in indices[] list. Will return indices itself if none invalid, and bForceCopy == false Declaration public static int[] FilterValid(int[] indices, Func<int, bool> FilterF, bool bForceCopy = false) Parameters Type Name Description Int32 [] indices Func < Int32 , Boolean > FilterF Boolean bForceCopy Returns Type Description Int32 [] find_edge_index_in_tri(Int32, Int32, ref Index3i) Declaration public static int find_edge_index_in_tri(int a, int b, ref Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Int32 find_edge_index_in_tri(Int32, Int32, Int32[]) Declaration public static int find_edge_index_in_tri(int a, int b, int[] tri_verts) Parameters Type Name Description Int32 a Int32 b Int32 [] tri_verts Returns Type Description Int32 find_edge_other_v(Index2i, Int32) Declaration public static int find_edge_other_v(Index2i ev, int v) Parameters Type Name Description Index2i ev Int32 v Returns Type Description Int32 find_edge_other_v(ref Index2i, Int32) Declaration public static int find_edge_other_v(ref Index2i ev, int v) Parameters Type Name Description Index2i ev Int32 v Returns Type Description Int32 find_shared_edge_v(ref Index2i, ref Index2i) Declaration public static int find_shared_edge_v(ref Index2i ev0, ref Index2i ev1) Parameters Type Name Description Index2i ev0 Index2i ev1 Returns Type Description Int32 find_tri_index(Int32, Index3i) Declaration public static int find_tri_index(int a, Index3i tri_verts) Parameters Type Name Description Int32 a Index3i tri_verts Returns Type Description Int32 find_tri_index(Int32, ref Index3i) Declaration public static int find_tri_index(int a, ref Index3i tri_verts) Parameters Type Name Description Int32 a Index3i tri_verts Returns Type Description Int32 find_tri_index(Int32, Int32[]) Declaration public static int find_tri_index(int a, int[] tri_verts) Parameters Type Name Description Int32 a Int32 [] tri_verts Returns Type Description Int32 find_tri_ordered_edge(Int32, Int32, Index3i) Declaration public static int find_tri_ordered_edge(int a, int b, Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Int32 find_tri_ordered_edge(Int32, Int32, ref Index3i) find sequence [a,b] in tri_verts (mod3) and return index of a, or InvalidID if not found Declaration public static int find_tri_ordered_edge(int a, int b, ref Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Int32 find_tri_ordered_edge(Int32, Int32, Int32[]) Declaration public static int find_tri_ordered_edge(int a, int b, int[] tri_verts) Parameters Type Name Description Int32 a Int32 b Int32 [] tri_verts Returns Type Description Int32 find_tri_other_index(Int32, Int32, Int32[]) Declaration public static int find_tri_other_index(int a, int b, int[] tri_verts) Parameters Type Name Description Int32 a Int32 b Int32 [] tri_verts Returns Type Description Int32 find_tri_other_verts(Int32, ref Index3i) assuming a is in tri-verts, returns other two vertices, in correct order (or Index2i.Max if not found) Declaration public static Index2i find_tri_other_verts(int a, ref Index3i tri_verts) Parameters Type Name Description Int32 a Index3i tri_verts Returns Type Description Index2i find_tri_other_vtx(Int32, Int32, DVector<Int32>, Int32) Declaration public static int find_tri_other_vtx(int a, int b, DVector<int> tri_array, int ti) Parameters Type Name Description Int32 a Int32 b DVector < Int32 > tri_array Int32 ti Returns Type Description Int32 find_tri_other_vtx(Int32, Int32, Index3i) Declaration public static int find_tri_other_vtx(int a, int b, Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Int32 find_tri_other_vtx(Int32, Int32, Int32[]) Declaration public static int find_tri_other_vtx(int a, int b, int[] tri_verts) Parameters Type Name Description Int32 a Int32 b Int32 [] tri_verts Returns Type Description Int32 IndicesCheck(Int32[], Func<Int32, Boolean>) return trune if CheckF returns true for all members of indices list Declaration public static bool IndicesCheck(int[] indices, Func<int, bool> CheckF) Parameters Type Name Description Int32 [] indices Func < Int32 , Boolean > CheckF Returns Type Description Boolean is_ordered(Int32, Int32, ref Index3i) Declaration public static bool is_ordered(int a, int b, ref Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Boolean is_same_triangle(Int32, Int32, Int32, ref Index3i) Declaration public static bool is_same_triangle(int a, int b, int c, ref Index3i tri) Parameters Type Name Description Int32 a Int32 b Int32 c Index3i tri Returns Type Description Boolean orient_tri_edge(ref Int32, ref Int32, Index3i) Declaration public static bool orient_tri_edge(ref int a, ref int b, Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Boolean orient_tri_edge(ref Int32, ref Int32, ref Index3i) Declaration public static bool orient_tri_edge(ref int a, ref int b, ref Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Boolean orient_tri_edge_and_find_other_vtx(ref Int32, ref Int32, Index3i) Declaration public static int orient_tri_edge_and_find_other_vtx(ref int a, ref int b, Index3i tri_verts) Parameters Type Name Description Int32 a Int32 b Index3i tri_verts Returns Type Description Int32 orient_tri_edge_and_find_other_vtx(ref Int32, ref Int32, Int32[]) Declaration public static int orient_tri_edge_and_find_other_vtx(ref int a, ref int b, int[] tri_verts) Parameters Type Name Description Int32 a Int32 b Int32 [] tri_verts Returns Type Description Int32 same_pair_unordered(Int32, Int32, Int32, Int32) Declaration public static bool same_pair_unordered(int a0, int a1, int b0, int b1) Parameters Type Name Description Int32 a0 Int32 a1 Int32 b0 Int32 b1 Returns Type Description Boolean sort_indices(ref Index3i) Declaration public static void sort_indices(ref Index3i tri) Parameters Type Name Description Index3i tri ToGrid3Index(Int32, Int32, Int32) Declaration public static Vector3i ToGrid3Index(int idx, int nx, int ny) Parameters Type Name Description Int32 idx Int32 nx Int32 ny Returns Type Description Vector3i ToGrid3Linear(Vector3i, Int32, Int32) Declaration public static int ToGrid3Linear(Vector3i ijk, int nx, int ny) Parameters Type Name Description Vector3i ijk Int32 nx Int32 ny Returns Type Description Int32 ToGrid3Linear(ref Vector3i, Int32, Int32) Declaration public static int ToGrid3Linear(ref Vector3i ijk, int nx, int ny) Parameters Type Name Description Vector3i ijk Int32 nx Int32 ny Returns Type Description Int32 ToGrid3Linear(Int32, Int32, Int32, Int32, Int32) Declaration public static int ToGrid3Linear(int i, int j, int k, int nx, int ny) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 nx Int32 ny Returns Type Description Int32 TrianglesToEdges(DMesh3, HashSet<Int32>, HashSet<Int32>) Declaration public static void TrianglesToEdges(DMesh3 mesh, HashSet<int> triangles, HashSet<int> edges) Parameters Type Name Description DMesh3 mesh HashSet < Int32 > triangles HashSet < Int32 > edges TrianglesToEdges(DMesh3, IEnumerable<Int32>, HashSet<Int32>) Declaration public static void TrianglesToEdges(DMesh3 mesh, IEnumerable<int> triangles, HashSet<int> edges) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles HashSet < Int32 > edges TrianglesToVertices(DMesh3, HashSet<Int32>, HashSet<Int32>) Declaration public static void TrianglesToVertices(DMesh3 mesh, HashSet<int> triangles, HashSet<int> vertices) Parameters Type Name Description DMesh3 mesh HashSet < Int32 > triangles HashSet < Int32 > vertices TrianglesToVertices(DMesh3, IEnumerable<Int32>, HashSet<Int32>) Declaration public static void TrianglesToVertices(DMesh3 mesh, IEnumerable<int> triangles, HashSet<int> vertices) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles HashSet < Int32 > vertices"
  },
  "api/g3.InPlaceIterativeCurveSmooth.html": {
    "href": "api/g3.InPlaceIterativeCurveSmooth.html",
    "title": "Class InPlaceIterativeCurveSmooth | ViRGIS VR GIS",
    "keywords": "Class InPlaceIterativeCurveSmooth Inheritance Object InPlaceIterativeCurveSmooth Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class InPlaceIterativeCurveSmooth Constructors InPlaceIterativeCurveSmooth() Declaration public InPlaceIterativeCurveSmooth() InPlaceIterativeCurveSmooth(DCurve3, Single) Declaration public InPlaceIterativeCurveSmooth(DCurve3 curve, float alpha = 0.25F) Parameters Type Name Description DCurve3 curve Single alpha Properties Alpha Declaration public float Alpha { get; set; } Property Value Type Description Single Curve Declaration public DCurve3 Curve { get; set; } Property Value Type Description DCurve3 End Declaration public int End { get; set; } Property Value Type Description Int32 Start Declaration public int Start { get; set; } Property Value Type Description Int32 Methods UpdateDeformation(Int32) Declaration public void UpdateDeformation(int nIterations = 1) Parameters Type Name Description Int32 nIterations UpdateDeformation_Closed(Int32) Declaration public void UpdateDeformation_Closed(int nIterations = 1) Parameters Type Name Description Int32 nIterations UpdateDeformation_Open(Int32) Declaration public void UpdateDeformation_Open(int nIterations = 1) Parameters Type Name Description Int32 nIterations"
  },
  "api/g3.Integrate1d.html": {
    "href": "api/g3.Integrate1d.html",
    "title": "Class Integrate1d | ViRGIS VR GIS",
    "keywords": "Class Integrate1d Inheritance Object Integrate1d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class Integrate1d Methods GaussianQuadrature(Double, Double, Func<Double, Object, Double>, Object) Declaration public static double GaussianQuadrature(double a, double b, Func<double, object, double> function, object userData) Parameters Type Name Description Double a Double b Func < Double , Object , Double > function Object userData Returns Type Description Double RombergIntegral(Int32, Double, Double, Func<Double, Object, Double>, Object) Declaration public static double RombergIntegral(int order, double a, double b, Func<double, object, double> function, object userData) Parameters Type Name Description Int32 order Double a Double b Func < Double , Object , Double > function Object userData Returns Type Description Double TrapezoidRule(Int32, Double, Double, Func<Double, Object, Double>, Object) Declaration public static double TrapezoidRule(int numSamples, double a, double b, Func<double, object, double> function, object userData) Parameters Type Name Description Int32 numSamples Double a Double b Func < Double , Object , Double > function Object userData Returns Type Description Double"
  },
  "api/g3.IntersectionResult.html": {
    "href": "api/g3.IntersectionResult.html",
    "title": "Enum IntersectionResult | ViRGIS VR GIS",
    "keywords": "Enum IntersectionResult Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum IntersectionResult Fields Name Description Intersects InvalidQuery NoIntersection NotComputed"
  },
  "api/g3.IntersectionType.html": {
    "href": "api/g3.IntersectionType.html",
    "title": "Enum IntersectionType | ViRGIS VR GIS",
    "keywords": "Enum IntersectionType Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum IntersectionType Fields Name Description Empty Line Plane Point Polygon Segment Unknown"
  },
  "api/g3.IntersectionUtil.html": {
    "href": "api/g3.IntersectionUtil.html",
    "title": "Class IntersectionUtil | ViRGIS VR GIS",
    "keywords": "Class IntersectionUtil Inheritance Object IntersectionUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class IntersectionUtil Methods Intersects(Vector3d, Vector3d, Vector3d, Vector3d, Vector3d) Declaration public static bool Intersects(Vector3d rayOrigin, Vector3d rayDirection, Vector3d V0, Vector3d V1, Vector3d V2) Parameters Type Name Description Vector3d rayOrigin Vector3d rayDirection Vector3d V0 Vector3d V1 Vector3d V2 Returns Type Description Boolean LineSphere(ref Vector3d, ref Vector3d, ref Vector3d, Double) Declaration public static LinearIntersection LineSphere(ref Vector3d lineOrigin, ref Vector3d lineDirection, ref Vector3d sphereCenter, double sphereRadius) Parameters Type Name Description Vector3d lineOrigin Vector3d lineDirection Vector3d sphereCenter Double sphereRadius Returns Type Description LinearIntersection LineSphere(ref Vector3d, ref Vector3d, ref Vector3d, Double, ref LinearIntersection) Intersect ray with sphere and return intersection info (# hits, ray parameters) Declaration public static bool LineSphere(ref Vector3d lineOrigin, ref Vector3d lineDirection, ref Vector3d sphereCenter, double sphereRadius, ref LinearIntersection result) Parameters Type Name Description Vector3d lineOrigin Vector3d lineDirection Vector3d sphereCenter Double sphereRadius LinearIntersection result Returns Type Description Boolean LineSphereTest(ref Vector3d, ref Vector3d, ref Vector3d, Double) Test if line intersects sphere Declaration public static bool LineSphereTest(ref Vector3d lineOrigin, ref Vector3d lineDirection, ref Vector3d sphereCenter, double sphereRadius) Parameters Type Name Description Vector3d lineOrigin Vector3d lineDirection Vector3d sphereCenter Double sphereRadius Returns Type Description Boolean RaySphere(ref Vector3d, ref Vector3d, ref Vector3d, Double) Declaration public static LinearIntersection RaySphere(ref Vector3d rayOrigin, ref Vector3d rayDirection, ref Vector3d sphereCenter, double sphereRadius) Parameters Type Name Description Vector3d rayOrigin Vector3d rayDirection Vector3d sphereCenter Double sphereRadius Returns Type Description LinearIntersection RaySphere(ref Vector3d, ref Vector3d, ref Vector3d, Double, ref LinearIntersection) Intersect ray with sphere and return intersection info (# hits, ray parameters) Declaration public static bool RaySphere(ref Vector3d rayOrigin, ref Vector3d rayDirection, ref Vector3d sphereCenter, double sphereRadius, ref LinearIntersection result) Parameters Type Name Description Vector3d rayOrigin Vector3d rayDirection Vector3d sphereCenter Double sphereRadius LinearIntersection result Returns Type Description Boolean RaySphereTest(ref Vector3d, ref Vector3d, ref Vector3d, Double) Test if ray intersects sphere Declaration public static bool RaySphereTest(ref Vector3d rayOrigin, ref Vector3d rayDirection, ref Vector3d sphereCenter, double sphereRadius) Parameters Type Name Description Vector3d rayOrigin Vector3d rayDirection Vector3d sphereCenter Double sphereRadius Returns Type Description Boolean"
  },
  "api/g3.Intersector1.html": {
    "href": "api/g3.Intersector1.html",
    "title": "Class Intersector1 | ViRGIS VR GIS",
    "keywords": "Class Intersector1 Inheritance Object Intersector1 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Intersector1 Constructors Intersector1(Interval1d, Interval1d) Declaration public Intersector1(Interval1d u, Interval1d v) Parameters Type Name Description Interval1d u Interval1d v Intersector1(Double, Double, Double, Double) Declaration public Intersector1(double u0, double u1, double v0, double v1) Parameters Type Name Description Double u0 Double u1 Double v0 Double v1 Fields NumIntersections Declaration public int NumIntersections Field Value Type Description Int32 U Declaration public Interval1d U Field Value Type Description Interval1d V Declaration public Interval1d V Field Value Type Description Interval1d Properties Test Declaration public bool Test { get; } Property Value Type Description Boolean Methods Find() Declaration public bool Find() Returns Type Description Boolean GetIntersection(Int32) Declaration public double GetIntersection(int i) Parameters Type Name Description Int32 i Returns Type Description Double"
  },
  "api/g3.Interval1d.html": {
    "href": "api/g3.Interval1d.html",
    "title": "Struct Interval1d | ViRGIS VR GIS",
    "keywords": "Struct Interval1d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Interval1d Constructors Interval1d(Interval1d) Declaration public Interval1d(Interval1d copy) Parameters Type Name Description Interval1d copy Interval1d(Double) Declaration public Interval1d(double f) Parameters Type Name Description Double f Interval1d(Double, Double) Declaration public Interval1d(double x, double y) Parameters Type Name Description Double x Double y Interval1d(Double[]) Declaration public Interval1d(double[] v2) Parameters Type Name Description Double [] v2 Interval1d(Single) Declaration public Interval1d(float f) Parameters Type Name Description Single f Interval1d(Single, Single) Declaration public Interval1d(float x, float y) Parameters Type Name Description Single x Single y Interval1d(Single[]) Declaration public Interval1d(float[] v2) Parameters Type Name Description Single [] v2 Fields a Declaration public double a Field Value Type Description Double b Declaration public double b Field Value Type Description Double Empty Declaration public static readonly Interval1d Empty Field Value Type Description Interval1d Infinite Declaration public static readonly Interval1d Infinite Field Value Type Description Interval1d Zero Declaration public static readonly Interval1d Zero Field Value Type Description Interval1d Properties Center Declaration public double Center { get; } Property Value Type Description Double IsConstant Declaration public bool IsConstant { get; } Property Value Type Description Boolean Item[Int32] Declaration public double this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Double Length Declaration public double Length { get; } Property Value Type Description Double LengthSquared Declaration public double LengthSquared { get; } Property Value Type Description Double Methods Clamp(Double) clamp value f to interval [a,b] Declaration public double Clamp(double f) Parameters Type Name Description Double f Returns Type Description Double Contain(Double) Declaration public void Contain(double d) Parameters Type Name Description Double d Contains(Double) Declaration public bool Contains(double d) Parameters Type Name Description Double d Returns Type Description Boolean Dist(Interval1d) Declaration public double Dist(Interval1d o) Parameters Type Name Description Interval1d o Returns Type Description Double GetT(Double) Convert value into (clamped) t value in range [0,1] Declaration public double GetT(double value) Parameters Type Name Description Double value Returns Type Description Double Interpolate(Double) interpolate between a and b using value t in range [0,1] Declaration public double Interpolate(double t) Parameters Type Name Description Double t Returns Type Description Double IntersectionWith(ref Interval1d) Declaration public Interval1d IntersectionWith(ref Interval1d o) Parameters Type Name Description Interval1d o Returns Type Description Interval1d Overlaps(Interval1d) Declaration public bool Overlaps(Interval1d o) Parameters Type Name Description Interval1d o Returns Type Description Boolean Set(Interval1d) Declaration public void Set(Interval1d o) Parameters Type Name Description Interval1d o Set(Double, Double) Declaration public void Set(double fA, double fB) Parameters Type Name Description Double fA Double fB SquaredDist(Interval1d) Declaration public double SquaredDist(Interval1d o) Parameters Type Name Description Interval1d o Returns Type Description Double ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Unsorted(Double, Double) Declaration public static Interval1d Unsorted(double x, double y) Parameters Type Name Description Double x Double y Returns Type Description Interval1d Operators Addition(Interval1d, Double) Declaration public static Interval1d operator +(Interval1d a, double f) Parameters Type Name Description Interval1d a Double f Returns Type Description Interval1d Multiply(Interval1d, Double) Declaration public static Interval1d operator *(Interval1d a, double f) Parameters Type Name Description Interval1d a Double f Returns Type Description Interval1d Subtraction(Interval1d, Double) Declaration public static Interval1d operator -(Interval1d a, double f) Parameters Type Name Description Interval1d a Double f Returns Type Description Interval1d UnaryNegation(Interval1d) Declaration public static Interval1d operator -(Interval1d v) Parameters Type Name Description Interval1d v Returns Type Description Interval1d"
  },
  "api/g3.Interval1i.html": {
    "href": "api/g3.Interval1i.html",
    "title": "Struct Interval1i | ViRGIS VR GIS",
    "keywords": "Struct Interval1i Implements IEnumerable < Int32 > IEnumerable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Interval1i : IEnumerable<int>, IEnumerable Constructors Interval1i(Interval1i) Declaration public Interval1i(Interval1i copy) Parameters Type Name Description Interval1i copy Interval1i(Int32) Declaration public Interval1i(int f) Parameters Type Name Description Int32 f Interval1i(Int32, Int32) Declaration public Interval1i(int x, int y) Parameters Type Name Description Int32 x Int32 y Interval1i(Int32[]) Declaration public Interval1i(int[] v2) Parameters Type Name Description Int32 [] v2 Fields a Declaration public int a Field Value Type Description Int32 b Declaration public int b Field Value Type Description Int32 Empty Declaration public static readonly Interval1i Empty Field Value Type Description Interval1i Infinite Declaration public static readonly Interval1i Infinite Field Value Type Description Interval1i Zero Declaration public static readonly Interval1i Zero Field Value Type Description Interval1i Properties Center Declaration public int Center { get; } Property Value Type Description Int32 Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 Length Declaration public int Length { get; } Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods Contain(Int32) Declaration public void Contain(int d) Parameters Type Name Description Int32 d Contains(Int32) Declaration public bool Contains(int d) Parameters Type Name Description Int32 d Returns Type Description Boolean Dist(Interval1i) Declaration public int Dist(Interval1i o) Parameters Type Name Description Interval1i o Returns Type Description Int32 FromToInclusive(Int32, Int32) construct interval [a, b] Declaration public static Interval1i FromToInclusive(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Interval1i GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > Overlaps(Interval1i) Declaration public bool Overlaps(Interval1i o) Parameters Type Name Description Interval1i o Returns Type Description Boolean Range(Int32) construct interval [0, N-1] Declaration public static Interval1i Range(int N) Parameters Type Name Description Int32 N Returns Type Description Interval1i Range(Int32, Int32) construct interval [start, start+N-1] Declaration public static Interval1i Range(int start, int N) Parameters Type Name Description Int32 start Int32 N Returns Type Description Interval1i RangeInclusive(Int32) construct interval [0, N-1] Declaration public static Interval1i RangeInclusive(int N) Parameters Type Name Description Int32 N Returns Type Description Interval1i Set(Interval1i) Declaration public void Set(Interval1i o) Parameters Type Name Description Interval1i o Set(Int32, Int32) Declaration public void Set(int fA, int fB) Parameters Type Name Description Int32 fA Int32 fB SquaredDist(Interval1i) Declaration public int SquaredDist(Interval1i o) Parameters Type Name Description Interval1i o Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Interval1i, Int32) Declaration public static Interval1i operator +(Interval1i a, int f) Parameters Type Name Description Interval1i a Int32 f Returns Type Description Interval1i Multiply(Interval1i, Int32) Declaration public static Interval1i operator *(Interval1i a, int f) Parameters Type Name Description Interval1i a Int32 f Returns Type Description Interval1i Subtraction(Interval1i, Int32) Declaration public static Interval1i operator -(Interval1i a, int f) Parameters Type Name Description Interval1i a Int32 f Returns Type Description Interval1i UnaryNegation(Interval1i) Declaration public static Interval1i operator -(Interval1i v) Parameters Type Name Description Interval1i v Returns Type Description Interval1i Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IntrLine2Line2.html": {
    "href": "api/g3.IntrLine2Line2.html",
    "title": "Class IntrLine2Line2 | ViRGIS VR GIS",
    "keywords": "Class IntrLine2Line2 Inheritance Object IntrLine2Line2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrLine2Line2 Constructors IntrLine2Line2(Line2d, Line2d) Declaration public IntrLine2Line2(Line2d l1, Line2d l2) Parameters Type Name Description Line2d l1 Line2d l2 Fields Point Declaration public Vector2d Point Field Value Type Description Vector2d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Segment1Parameter Declaration public double Segment1Parameter Field Value Type Description Double Segment2Parameter Declaration public double Segment2Parameter Field Value Type Description Double Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties DotThreshold Declaration public double DotThreshold { get; set; } Property Value Type Description Double IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Line1 Declaration public Line2d Line1 { get; set; } Property Value Type Description Line2d Line2 Declaration public Line2d Line2 { get; set; } Property Value Type Description Line2d Methods Classify(Vector2d, Vector2d, Vector2d, Vector2d, Double, ref Vector2d) Declaration public static IntersectionType Classify(Vector2d P0, Vector2d D0, Vector2d P1, Vector2d D1, double dotThreshold, ref Vector2d s) Parameters Type Name Description Vector2d P0 Vector2d D0 Vector2d P1 Vector2d D1 Double dotThreshold Vector2d s Returns Type Description IntersectionType Compute() Declaration public IntrLine2Line2 Compute() Returns Type Description IntrLine2Line2 Find() Declaration public bool Find() Returns Type Description Boolean"
  },
  "api/g3.IntrLine2Segment2.html": {
    "href": "api/g3.IntrLine2Segment2.html",
    "title": "Class IntrLine2Segment2 | ViRGIS VR GIS",
    "keywords": "Class IntrLine2Segment2 Inheritance Object IntrLine2Segment2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrLine2Segment2 Constructors IntrLine2Segment2(Line2d, Segment2d) Declaration public IntrLine2Segment2(Line2d line, Segment2d seg) Parameters Type Name Description Line2d line Segment2d seg Fields Parameter Parameter along line, only set if Quanityt = 1 Declaration public double Parameter Field Value Type Description Double Point Point on line, only set if Quantity = 1 Declaration public Vector2d Point Field Value Type Description Vector2d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties DotThreshold Declaration public double DotThreshold { get; set; } Property Value Type Description Double IntervalThreshold Declaration public double IntervalThreshold { get; set; } Property Value Type Description Double IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Line Declaration public Line2d Line { get; set; } Property Value Type Description Line2d Segment Declaration public Segment2d Segment { get; set; } Property Value Type Description Segment2d Methods Compute() Declaration public IntrLine2Segment2 Compute() Returns Type Description IntrLine2Segment2 Find() Declaration public bool Find() Returns Type Description Boolean"
  },
  "api/g3.IntrLine2Triangle2.html": {
    "href": "api/g3.IntrLine2Triangle2.html",
    "title": "Class IntrLine2Triangle2 | ViRGIS VR GIS",
    "keywords": "Class IntrLine2Triangle2 Inheritance Object IntrLine2Triangle2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrLine2Triangle2 Constructors IntrLine2Triangle2(Line2d, Triangle2d) Declaration public IntrLine2Triangle2(Line2d l, Triangle2d t) Parameters Type Name Description Line2d l Triangle2d t Fields Param0 Declaration public double Param0 Field Value Type Description Double Param1 Declaration public double Param1 Field Value Type Description Double Point0 Declaration public Vector2d Point0 Field Value Type Description Vector2d Point1 Declaration public Vector2d Point1 Field Value Type Description Vector2d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Line Declaration public Line2d Line { get; set; } Property Value Type Description Line2d Triangle Declaration public Triangle2d Triangle { get; set; } Property Value Type Description Triangle2d Methods Compute() Declaration public IntrLine2Triangle2 Compute() Returns Type Description IntrLine2Triangle2 Find() Declaration public bool Find() Returns Type Description Boolean GetInterval(Vector2d, Vector2d, Triangle2d, Vector3d, Vector3i, ref Vector2d) Declaration public static void GetInterval(Vector2d origin, Vector2d direction, Triangle2d tri, Vector3d dist, Vector3i sign, ref Vector2d param) Parameters Type Name Description Vector2d origin Vector2d direction Triangle2d tri Vector3d dist Vector3i sign Vector2d param TriangleLineRelations(Vector2d, Vector2d, Triangle2d, ref Vector3d, ref Vector3i, ref Int32, ref Int32, ref Int32) Declaration public static void TriangleLineRelations(Vector2d origin, Vector2d direction, Triangle2d tri, ref Vector3d dist, ref Vector3i sign, ref int positive, ref int negative, ref int zero) Parameters Type Name Description Vector2d origin Vector2d direction Triangle2d tri Vector3d dist Vector3i sign Int32 positive Int32 negative Int32 zero"
  },
  "api/g3.IntrLine3AxisAlignedBox3.html": {
    "href": "api/g3.IntrLine3AxisAlignedBox3.html",
    "title": "Class IntrLine3AxisAlignedBox3 | ViRGIS VR GIS",
    "keywords": "Class IntrLine3AxisAlignedBox3 Inheritance Object IntrLine3AxisAlignedBox3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrLine3AxisAlignedBox3 Constructors IntrLine3AxisAlignedBox3(Line3d, AxisAlignedBox3d) Declaration public IntrLine3AxisAlignedBox3(Line3d l, AxisAlignedBox3d b) Parameters Type Name Description Line3d l AxisAlignedBox3d b Fields LineParam0 Declaration public double LineParam0 Field Value Type Description Double LineParam1 Declaration public double LineParam1 Field Value Type Description Double Point0 Declaration public Vector3d Point0 Field Value Type Description Vector3d Point1 Declaration public Vector3d Point1 Field Value Type Description Vector3d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Box Declaration public AxisAlignedBox3d Box { get; set; } Property Value Type Description AxisAlignedBox3d IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Line Declaration public Line3d Line { get; set; } Property Value Type Description Line3d Methods Clip(Double, Double, ref Double, ref Double) Declaration public static bool Clip(double denom, double numer, ref double t0, ref double t1) Parameters Type Name Description Double denom Double numer Double t0 Double t1 Returns Type Description Boolean Compute() Declaration public IntrLine3AxisAlignedBox3 Compute() Returns Type Description IntrLine3AxisAlignedBox3 DoClipping(ref Double, ref Double, ref Vector3d, ref Vector3d, ref AxisAlignedBox3d, Boolean, ref Int32, ref Vector3d, ref Vector3d, ref IntersectionType) Declaration public static bool DoClipping(ref double t0, ref double t1, ref Vector3d origin, ref Vector3d direction, ref AxisAlignedBox3d box, bool solid, ref int quantity, ref Vector3d point0, ref Vector3d point1, ref IntersectionType intrType) Parameters Type Name Description Double t0 Double t1 Vector3d origin Vector3d direction AxisAlignedBox3d box Boolean solid Int32 quantity Vector3d point0 Vector3d point1 IntersectionType intrType Returns Type Description Boolean Find() Declaration public bool Find() Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean"
  },
  "api/g3.IntrLine3Box3.html": {
    "href": "api/g3.IntrLine3Box3.html",
    "title": "Class IntrLine3Box3 | ViRGIS VR GIS",
    "keywords": "Class IntrLine3Box3 Inheritance Object IntrLine3Box3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrLine3Box3 Constructors IntrLine3Box3(Line3d, Box3d) Declaration public IntrLine3Box3(Line3d l, Box3d b) Parameters Type Name Description Line3d l Box3d b Fields LineParam0 Declaration public double LineParam0 Field Value Type Description Double LineParam1 Declaration public double LineParam1 Field Value Type Description Double Point0 Declaration public Vector3d Point0 Field Value Type Description Vector3d Point1 Declaration public Vector3d Point1 Field Value Type Description Vector3d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Box Declaration public Box3d Box { get; set; } Property Value Type Description Box3d IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Line Declaration public Line3d Line { get; set; } Property Value Type Description Line3d Methods Clip(Double, Double, ref Double, ref Double) Declaration public static bool Clip(double denom, double numer, ref double t0, ref double t1) Parameters Type Name Description Double denom Double numer Double t0 Double t1 Returns Type Description Boolean Compute() Declaration public IntrLine3Box3 Compute() Returns Type Description IntrLine3Box3 DoClipping(ref Double, ref Double, Vector3d, Vector3d, Box3d, Boolean, ref Int32, ref Vector3d, ref Vector3d, ref IntersectionType) Declaration public static bool DoClipping(ref double t0, ref double t1, Vector3d origin, Vector3d direction, Box3d box, bool solid, ref int quantity, ref Vector3d point0, ref Vector3d point1, ref IntersectionType intrType) Parameters Type Name Description Double t0 Double t1 Vector3d origin Vector3d direction Box3d box Boolean solid Int32 quantity Vector3d point0 Vector3d point1 IntersectionType intrType Returns Type Description Boolean Find() Declaration public bool Find() Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean"
  },
  "api/g3.IntrRay3AxisAlignedBox3.html": {
    "href": "api/g3.IntrRay3AxisAlignedBox3.html",
    "title": "Class IntrRay3AxisAlignedBox3 | ViRGIS VR GIS",
    "keywords": "Class IntrRay3AxisAlignedBox3 Inheritance Object IntrRay3AxisAlignedBox3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrRay3AxisAlignedBox3 Constructors IntrRay3AxisAlignedBox3(Ray3d, AxisAlignedBox3d) Declaration public IntrRay3AxisAlignedBox3(Ray3d r, AxisAlignedBox3d b) Parameters Type Name Description Ray3d r AxisAlignedBox3d b Fields Point0 Declaration public Vector3d Point0 Field Value Type Description Vector3d Point1 Declaration public Vector3d Point1 Field Value Type Description Vector3d Quantity Declaration public int Quantity Field Value Type Description Int32 RayParam0 Declaration public double RayParam0 Field Value Type Description Double RayParam1 Declaration public double RayParam1 Field Value Type Description Double Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Box Declaration public AxisAlignedBox3d Box { get; set; } Property Value Type Description AxisAlignedBox3d IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Ray Declaration public Ray3d Ray { get; set; } Property Value Type Description Ray3d Methods Compute() Declaration public IntrRay3AxisAlignedBox3 Compute() Returns Type Description IntrRay3AxisAlignedBox3 Find() Declaration public bool Find() Returns Type Description Boolean FindRayIntersectT(ref Ray3d, ref AxisAlignedBox3d, out Double) Find intersection of ray with AABB, without having to construct any new classes. Returns ray T-value of first intersection (or double.MaxVlaue on miss) Declaration public static bool FindRayIntersectT(ref Ray3d ray, ref AxisAlignedBox3d box, out double RayParam) Parameters Type Name Description Ray3d ray AxisAlignedBox3d box Double RayParam Returns Type Description Boolean Intersects(ref Ray3d, ref AxisAlignedBox3d, Double) test if ray intersects box. expandExtents allows you to scale box for hit-testing purposes. Declaration public static bool Intersects(ref Ray3d ray, ref AxisAlignedBox3d box, double expandExtents = 0) Parameters Type Name Description Ray3d ray AxisAlignedBox3d box Double expandExtents Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean"
  },
  "api/g3.IntrRay3Box3.html": {
    "href": "api/g3.IntrRay3Box3.html",
    "title": "Class IntrRay3Box3 | ViRGIS VR GIS",
    "keywords": "Class IntrRay3Box3 Inheritance Object IntrRay3Box3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrRay3Box3 Constructors IntrRay3Box3(Ray3d, Box3d) Declaration public IntrRay3Box3(Ray3d r, Box3d b) Parameters Type Name Description Ray3d r Box3d b Fields Point0 Declaration public Vector3d Point0 Field Value Type Description Vector3d Point1 Declaration public Vector3d Point1 Field Value Type Description Vector3d Quantity Declaration public int Quantity Field Value Type Description Int32 RayParam0 Declaration public double RayParam0 Field Value Type Description Double RayParam1 Declaration public double RayParam1 Field Value Type Description Double Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Box Declaration public Box3d Box { get; set; } Property Value Type Description Box3d IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Ray Declaration public Ray3d Ray { get; set; } Property Value Type Description Ray3d Methods Compute() Declaration public IntrRay3Box3 Compute() Returns Type Description IntrRay3Box3 Find() Declaration public bool Find() Returns Type Description Boolean Intersects(ref Ray3d, ref Box3d, Double) test if ray intersects box. expandExtents allows you to scale box for hit-testing purposes. Declaration public static bool Intersects(ref Ray3d ray, ref Box3d box, double expandExtents = 0) Parameters Type Name Description Ray3d ray Box3d box Double expandExtents Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean"
  },
  "api/g3.IntrRay3Triangle3.html": {
    "href": "api/g3.IntrRay3Triangle3.html",
    "title": "Class IntrRay3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class IntrRay3Triangle3 Inheritance Object IntrRay3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrRay3Triangle3 Constructors IntrRay3Triangle3(Ray3d, Triangle3d) Declaration public IntrRay3Triangle3(Ray3d r, Triangle3d t) Parameters Type Name Description Ray3d r Triangle3d t Fields Quantity Declaration public int Quantity Field Value Type Description Int32 RayParameter Declaration public double RayParameter Field Value Type Description Double Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult TriangleBaryCoords Declaration public Vector3d TriangleBaryCoords Field Value Type Description Vector3d Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Ray Declaration public Ray3d Ray { get; set; } Property Value Type Description Ray3d Triangle Declaration public Triangle3d Triangle { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public IntrRay3Triangle3 Compute() Returns Type Description IntrRay3Triangle3 Find() Declaration public bool Find() Returns Type Description Boolean Intersects(ref Ray3d, ref Vector3d, ref Vector3d, ref Vector3d, out Double) minimal intersection test, computes ray-t Declaration public static bool Intersects(ref Ray3d ray, ref Vector3d V0, ref Vector3d V1, ref Vector3d V2, out double rayT) Parameters Type Name Description Ray3d ray Vector3d V0 Vector3d V1 Vector3d V2 Double rayT Returns Type Description Boolean"
  },
  "api/g3.IntrSegment2Segment2.html": {
    "href": "api/g3.IntrSegment2Segment2.html",
    "title": "Class IntrSegment2Segment2 | ViRGIS VR GIS",
    "keywords": "Class IntrSegment2Segment2 Inheritance Object IntrSegment2Segment2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrSegment2Segment2 Constructors IntrSegment2Segment2(Segment2d, Segment2d) Declaration public IntrSegment2Segment2(Segment2d seg1, Segment2d seg2) Parameters Type Name Description Segment2d seg1 Segment2d seg2 Fields Parameter0 Declaration public double Parameter0 Field Value Type Description Double Parameter1 Declaration public double Parameter1 Field Value Type Description Double Point0 Declaration public Vector2d Point0 Field Value Type Description Vector2d Point1 Declaration public Vector2d Point1 Field Value Type Description Vector2d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties DotThreshold Declaration public double DotThreshold { get; set; } Property Value Type Description Double IntervalThreshold Declaration public double IntervalThreshold { get; set; } Property Value Type Description Double IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Segment1 Declaration public Segment2d Segment1 { get; set; } Property Value Type Description Segment2d Segment2 Declaration public Segment2d Segment2 { get; set; } Property Value Type Description Segment2d Methods Compute() Declaration public IntrSegment2Segment2 Compute() Returns Type Description IntrSegment2Segment2 Find() Declaration public bool Find() Returns Type Description Boolean"
  },
  "api/g3.IntrSegment2Triangle2.html": {
    "href": "api/g3.IntrSegment2Triangle2.html",
    "title": "Class IntrSegment2Triangle2 | ViRGIS VR GIS",
    "keywords": "Class IntrSegment2Triangle2 Inheritance Object IntrSegment2Triangle2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrSegment2Triangle2 Constructors IntrSegment2Triangle2(Segment2d, Triangle2d) Declaration public IntrSegment2Triangle2(Segment2d s, Triangle2d t) Parameters Type Name Description Segment2d s Triangle2d t Fields Param0 Declaration public double Param0 Field Value Type Description Double Param1 Declaration public double Param1 Field Value Type Description Double Point0 Declaration public Vector2d Point0 Field Value Type Description Vector2d Point1 Declaration public Vector2d Point1 Field Value Type Description Vector2d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Segment Declaration public Segment2d Segment { get; set; } Property Value Type Description Segment2d Triangle Declaration public Triangle2d Triangle { get; set; } Property Value Type Description Triangle2d Methods Compute() Declaration public IntrSegment2Triangle2 Compute() Returns Type Description IntrSegment2Triangle2 Find() Declaration public bool Find() Returns Type Description Boolean"
  },
  "api/g3.IntrSegment3Box3.html": {
    "href": "api/g3.IntrSegment3Box3.html",
    "title": "Class IntrSegment3Box3 | ViRGIS VR GIS",
    "keywords": "Class IntrSegment3Box3 Inheritance Object IntrSegment3Box3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrSegment3Box3 Constructors IntrSegment3Box3(Segment3d, Box3d, Boolean) Declaration public IntrSegment3Box3(Segment3d s, Box3d b, bool solidBox) Parameters Type Name Description Segment3d s Box3d b Boolean solidBox Fields Point0 Declaration public Vector3d Point0 Field Value Type Description Vector3d Point1 Declaration public Vector3d Point1 Field Value Type Description Vector3d Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult SegmentParam0 Declaration public double SegmentParam0 Field Value Type Description Double SegmentParam1 Declaration public double SegmentParam1 Field Value Type Description Double Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Box Declaration public Box3d Box { get; set; } Property Value Type Description Box3d IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Segment Declaration public Segment3d Segment { get; set; } Property Value Type Description Segment3d Solid Declaration public bool Solid { get; set; } Property Value Type Description Boolean Methods Clip(Double, Double, ref Double, ref Double) Declaration public static bool Clip(double denom, double numer, ref double t0, ref double t1) Parameters Type Name Description Double denom Double numer Double t0 Double t1 Returns Type Description Boolean Compute() Declaration public IntrSegment3Box3 Compute() Returns Type Description IntrSegment3Box3 DoClipping(ref Double, ref Double, Vector3d, Vector3d, Box3d, Boolean, ref Int32, ref Vector3d, ref Vector3d, ref IntersectionType) Declaration public static bool DoClipping(ref double t0, ref double t1, Vector3d origin, Vector3d direction, Box3d box, bool solid, ref int quantity, ref Vector3d point0, ref Vector3d point1, ref IntersectionType intrType) Parameters Type Name Description Double t0 Double t1 Vector3d origin Vector3d direction Box3d box Boolean solid Int32 quantity Vector3d point0 Vector3d point1 IntersectionType intrType Returns Type Description Boolean Find() Declaration public bool Find() Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean"
  },
  "api/g3.IntrTriangle2Triangle2.html": {
    "href": "api/g3.IntrTriangle2Triangle2.html",
    "title": "Class IntrTriangle2Triangle2 | ViRGIS VR GIS",
    "keywords": "Class IntrTriangle2Triangle2 Inheritance Object IntrTriangle2Triangle2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrTriangle2Triangle2 Constructors IntrTriangle2Triangle2(Triangle2d, Triangle2d) Declaration public IntrTriangle2Triangle2(Triangle2d t0, Triangle2d t1) Parameters Type Name Description Triangle2d t0 Triangle2d t1 Fields Points Declaration public Vector2d[] Points Field Value Type Description Vector2d [] Quantity Declaration public int Quantity Field Value Type Description Int32 Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties IsSimpleIntersection Declaration public bool IsSimpleIntersection { get; } Property Value Type Description Boolean Triangle0 Declaration public Triangle2d Triangle0 { get; set; } Property Value Type Description Triangle2d Triangle1 Declaration public Triangle2d Triangle1 { get; set; } Property Value Type Description Triangle2d Methods ClipConvexPolygonAgainstLine(Vector2d, Double, ref Int32, ref Vector2d[]) Declaration public static void ClipConvexPolygonAgainstLine(Vector2d N, double c, ref int quantity, ref Vector2d[] V) Parameters Type Name Description Vector2d N Double c Int32 quantity Vector2d [] V Compute() Declaration public IntrTriangle2Triangle2 Compute() Returns Type Description IntrTriangle2Triangle2 Find() Declaration public bool Find() Returns Type Description Boolean Test() Declaration public bool Test() Returns Type Description Boolean WhichSide(Triangle2d, Vector2d, Vector2d) Declaration public static int WhichSide(Triangle2d V, Vector2d P, Vector2d D) Parameters Type Name Description Triangle2d V Vector2d P Vector2d D Returns Type Description Int32"
  },
  "api/g3.IntrTriangle3Triangle3.html": {
    "href": "api/g3.IntrTriangle3Triangle3.html",
    "title": "Class IntrTriangle3Triangle3 | ViRGIS VR GIS",
    "keywords": "Class IntrTriangle3Triangle3 Inheritance Object IntrTriangle3Triangle3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntrTriangle3Triangle3 Constructors IntrTriangle3Triangle3(Triangle3d, Triangle3d) Declaration public IntrTriangle3Triangle3(Triangle3d t0, Triangle3d t1) Parameters Type Name Description Triangle3d t0 Triangle3d t1 Fields Points Declaration public Vector3dTuple3 Points Field Value Type Description Vector3dTuple3 PolygonPoints Declaration public Vector3d[] PolygonPoints Field Value Type Description Vector3d [] Quantity Declaration public int Quantity Field Value Type Description Int32 ReportCoplanarIntersection Declaration public bool ReportCoplanarIntersection Field Value Type Description Boolean Result Declaration public IntersectionResult Result Field Value Type Description IntersectionResult Type Declaration public IntersectionType Type Field Value Type Description IntersectionType Properties Triangle0 Declaration public Triangle3d Triangle0 { get; set; } Property Value Type Description Triangle3d Triangle1 Declaration public Triangle3d Triangle1 { get; set; } Property Value Type Description Triangle3d Methods Compute() Declaration public IntrTriangle3Triangle3 Compute() Returns Type Description IntrTriangle3Triangle3 Find() Declaration public bool Find() Returns Type Description Boolean Intersects(ref Triangle3d, ref Triangle3d) Declaration public static bool Intersects(ref Triangle3d triangle0, ref Triangle3d triangle1) Parameters Type Name Description Triangle3d triangle0 Triangle3d triangle1 Returns Type Description Boolean ProjectOntoAxis(ref Triangle3d, ref Vector3d, out Double, out Double) Declaration public static void ProjectOntoAxis(ref Triangle3d triangle, ref Vector3d axis, out double fmin, out double fmax) Parameters Type Name Description Triangle3d triangle Vector3d axis Double fmin Double fmax Test() Declaration public bool Test() Returns Type Description Boolean TrianglePlaneRelations(ref Triangle3d, ref Plane3d, out Vector3d, out Index3i, out Int32, out Int32, out Int32) Declaration public static void TrianglePlaneRelations(ref Triangle3d triangle, ref Plane3d plane, out Vector3d distance, out Index3i sign, out int positive, out int negative, out int zero) Parameters Type Name Description Triangle3d triangle Plane3d plane Vector3d distance Index3i sign Int32 positive Int32 negative Int32 zero"
  },
  "api/g3.IntSequence.html": {
    "href": "api/g3.IntSequence.html",
    "title": "Struct IntSequence | ViRGIS VR GIS",
    "keywords": "Struct IntSequence IList wrapper for an Interval1i, ie sequential list of integers Implements IList < Int32 > ICollection < Int32 > IEnumerable < Int32 > IEnumerable Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct IntSequence : IList<int>, ICollection<int>, IEnumerable<int>, IEnumerable Constructors IntSequence(Interval1i) Declaration public IntSequence(Interval1i ival) Parameters Type Name Description Interval1i ival IntSequence(Int32, Int32) Declaration public IntSequence(int iStart, int iEnd) Parameters Type Name Description Int32 iStart Int32 iEnd Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Declaration public int this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Methods Add(Int32) Declaration public void Add(int item) Parameters Type Name Description Int32 item Clear() Declaration public void Clear() Contains(Int32) Declaration public bool Contains(int item) Parameters Type Name Description Int32 item Returns Type Description Boolean CopyTo(Int32[], Int32) Declaration public void CopyTo(int[] array, int arrayIndex) Parameters Type Name Description Int32 [] array Int32 arrayIndex FromToInclusive(Int32, Int32) construct interval [a, b] Declaration public static IntSequence FromToInclusive(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description IntSequence GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > IndexOf(Int32) Declaration public int IndexOf(int item) Parameters Type Name Description Int32 item Returns Type Description Int32 Insert(Int32, Int32) Declaration public void Insert(int index, int item) Parameters Type Name Description Int32 index Int32 item Range(Int32) construct interval [0, N-1] Declaration public static IntSequence Range(int N) Parameters Type Name Description Int32 N Returns Type Description IntSequence Range(Int32, Int32) construct interval [start, start+N-1] Declaration public static IntSequence Range(int start, int N) Parameters Type Name Description Int32 start Int32 N Returns Type Description IntSequence RangeInclusive(Int32) construct interval [0, N-1] Declaration public static IntSequence RangeInclusive(int N) Parameters Type Name Description Int32 N Returns Type Description IntSequence Remove(Int32) Declaration public bool Remove(int item) Parameters Type Name Description Int32 item Returns Type Description Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.IntTagPair.html": {
    "href": "api/g3.IntTagPair.html",
    "title": "Struct IntTagPair | ViRGIS VR GIS",
    "keywords": "Struct IntTagPair integer type/value pair, packed into 32 bits - 8 for type, 24 for value Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct IntTagPair Constructors IntTagPair(Byte, Int32) Declaration public IntTagPair(byte type, int value) Parameters Type Name Description Byte type Int32 value IntTagPair(Int32) Declaration public IntTagPair(int combined) Parameters Type Name Description Int32 combined Fields type Declaration public byte type Field Value Type Description Byte value Declaration public int value Field Value Type Description Int32 Properties intValue Declaration public int intValue { get; } Property Value Type Description Int32"
  },
  "api/g3.IntTagSet-1.html": {
    "href": "api/g3.IntTagSet-1.html",
    "title": "Class IntTagSet<T> | ViRGIS VR GIS",
    "keywords": "Class IntTagSet<T> Basic object->integer mapping Inheritance Object IntTagSet<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IntTagSet<T> Type Parameters Name Description T Constructors IntTagSet() Declaration public IntTagSet() Fields InvalidTag Declaration public const int InvalidTag = 2147483647 Field Value Type Description Int32 Methods Add(T, Int32) Declaration public void Add(T reference, int tag) Parameters Type Name Description T reference Int32 tag Get(T) Declaration public int Get(T reference) Parameters Type Name Description T reference Returns Type Description Int32 Has(T) Declaration public bool Has(T reference) Parameters Type Name Description T reference Returns Type Description Boolean"
  },
  "api/g3.IOCode.html": {
    "href": "api/g3.IOCode.html",
    "title": "Enum IOCode | ViRGIS VR GIS",
    "keywords": "Enum IOCode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum IOCode Fields Name Description ComputingInWorkerThread FileAccessError FileParsingError FormatNotSupportedError GarbageDataError GenericReaderError GenericReaderWarning InvalidFilenameError Ok UnknownFormatError WriterError"
  },
  "api/g3.IOReadResult.html": {
    "href": "api/g3.IOReadResult.html",
    "title": "Struct IOReadResult | ViRGIS VR GIS",
    "keywords": "Struct IOReadResult Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct IOReadResult Constructors IOReadResult(IOCode, String) Declaration public IOReadResult(IOCode r, string s) Parameters Type Name Description IOCode r String s Fields Ok Declaration public static readonly IOReadResult Ok Field Value Type Description IOReadResult Properties code Declaration public IOCode code { get; set; } Property Value Type Description IOCode message Declaration public string message { get; set; } Property Value Type Description String"
  },
  "api/g3.IOrientedProjectionTarget.html": {
    "href": "api/g3.IOrientedProjectionTarget.html",
    "title": "Interface IOrientedProjectionTarget | ViRGIS VR GIS",
    "keywords": "Interface IOrientedProjectionTarget Inherited Members IProjectionTarget.Project(Vector3d, Int32) Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IOrientedProjectionTarget : IProjectionTarget Methods Project(Vector3d, out Vector3d, Int32) Declaration Vector3d Project(Vector3d vPoint, out Vector3d vProjectNormal, int identifier = -1) Parameters Type Name Description Vector3d vPoint Vector3d vProjectNormal Int32 identifier Returns Type Description Vector3d"
  },
  "api/g3.IOWriteResult.html": {
    "href": "api/g3.IOWriteResult.html",
    "title": "Struct IOWriteResult | ViRGIS VR GIS",
    "keywords": "Struct IOWriteResult Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct IOWriteResult Constructors IOWriteResult(IOCode, String) Declaration public IOWriteResult(IOCode r, string s) Parameters Type Name Description IOCode r String s Fields Ok Declaration public static readonly IOWriteResult Ok Field Value Type Description IOWriteResult Properties code Declaration public IOCode code { get; set; } Property Value Type Description IOCode message Declaration public string message { get; set; } Property Value Type Description String"
  },
  "api/g3.IParametricCurve2d.html": {
    "href": "api/g3.IParametricCurve2d.html",
    "title": "Interface IParametricCurve2d | ViRGIS VR GIS",
    "keywords": "Interface IParametricCurve2d Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IParametricCurve2d Properties ArcLength Declaration double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Reverse() Declaration void Reverse() SampleArcLength(Double) Declaration Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform"
  },
  "api/g3.IParametricCurve3d.html": {
    "href": "api/g3.IParametricCurve3d.html",
    "title": "Interface IParametricCurve3d | ViRGIS VR GIS",
    "keywords": "Interface IParametricCurve3d Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IParametricCurve3d Properties ArcLength Declaration double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration bool IsClosed { get; } Property Value Type Description Boolean ParamLength Declaration double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration IParametricCurve3d Clone() Returns Type Description IParametricCurve3d Reverse() Declaration void Reverse() SampleArcLength(Double) Declaration Vector3d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector3d SampleT(Double) Declaration Vector3d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector3d TangentT(Double) Declaration Vector3d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector3d"
  },
  "api/g3.IPointSet.html": {
    "href": "api/g3.IPointSet.html",
    "title": "Interface IPointSet | ViRGIS VR GIS",
    "keywords": "Interface IPointSet Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IPointSet Properties HasVertexColors Declaration bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration bool HasVertexNormals { get; } Property Value Type Description Boolean MaxVertexID Declaration int MaxVertexID { get; } Property Value Type Description Int32 Timestamp Declaration int Timestamp { get; } Property Value Type Description Int32 VertexCount Declaration int VertexCount { get; } Property Value Type Description Int32 Methods GetVertex(Int32) Declaration Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexColor(Int32) Declaration Vector3f GetVertexColor(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexNormal(Int32) Declaration Vector3f GetVertexNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f IsVertex(Int32) Declaration bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean VertexIndices() Declaration IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 >"
  },
  "api/g3.IProjectionTarget.html": {
    "href": "api/g3.IProjectionTarget.html",
    "title": "Interface IProjectionTarget | ViRGIS VR GIS",
    "keywords": "Interface IProjectionTarget Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface IProjectionTarget Methods Project(Vector3d, Int32) Declaration Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d"
  },
  "api/g3.ISampledCurve3d.html": {
    "href": "api/g3.ISampledCurve3d.html",
    "title": "Interface ISampledCurve3d | ViRGIS VR GIS",
    "keywords": "Interface ISampledCurve3d Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ISampledCurve3d Properties Closed Declaration bool Closed { get; } Property Value Type Description Boolean SegmentCount Declaration int SegmentCount { get; } Property Value Type Description Int32 VertexCount Declaration int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration IEnumerable<Vector3d> Vertices { get; } Property Value Type Description IEnumerable < Vector3d > Methods GetSegment(Int32) Declaration Segment3d GetSegment(int i) Parameters Type Name Description Int32 i Returns Type Description Segment3d GetVertex(Int32) Declaration Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d"
  },
  "api/g3.ISpatial.html": {
    "href": "api/g3.ISpatial.html",
    "title": "Interface ISpatial | ViRGIS VR GIS",
    "keywords": "Interface ISpatial Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ISpatial Properties SupportsNearestTriangle Declaration bool SupportsNearestTriangle { get; } Property Value Type Description Boolean SupportsPointContainment Declaration bool SupportsPointContainment { get; } Property Value Type Description Boolean SupportsTriangleRayIntersection Declaration bool SupportsTriangleRayIntersection { get; } Property Value Type Description Boolean Methods FindNearestHitTriangle(Ray3d, Double) Find id of triangle intersected by ray, where intersection point is within distance fMaxDist, or return DMesh3.InvalidID if not found Declaration int FindNearestHitTriangle(Ray3d ray, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Ray3d ray Double fMaxDist Returns Type Description Int32 FindNearestTriangle(Vector3d, Double) Find id of triangle nearest to p within distance fMaxDist, or return DMesh3.InvalidID if not found Declaration int FindNearestTriangle(Vector3d p, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fMaxDist Returns Type Description Int32 IsInside(Vector3d) return true if query point is inside mesh Declaration bool IsInside(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Boolean"
  },
  "api/g3.ITransform2.html": {
    "href": "api/g3.ITransform2.html",
    "title": "Interface ITransform2 | ViRGIS VR GIS",
    "keywords": "Interface ITransform2 Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface ITransform2 Methods TransformN(Vector2d) Declaration Vector2d TransformN(Vector2d n) Parameters Type Name Description Vector2d n Returns Type Description Vector2d TransformP(Vector2d) Declaration Vector2d TransformP(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Vector2d TransformScalar(Double) Declaration double TransformScalar(double s) Parameters Type Name Description Double s Returns Type Description Double"
  },
  "api/g3.IWrappedCurve3d.html": {
    "href": "api/g3.IWrappedCurve3d.html",
    "title": "Class IWrappedCurve3d | ViRGIS VR GIS",
    "keywords": "Class IWrappedCurve3d Simple sampled-curve wrapper type Inheritance Object IWrappedCurve3d Implements ISampledCurve3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class IWrappedCurve3d : ISampledCurve3d Fields VertexList Declaration public IList<Vector3d> VertexList Field Value Type Description IList < Vector3d > Properties Closed Declaration public bool Closed { get; set; } Property Value Type Description Boolean SegmentCount Declaration public int SegmentCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public IEnumerable<Vector3d> Vertices { get; } Property Value Type Description IEnumerable < Vector3d > Methods GetSegment(Int32) Declaration public Segment3d GetSegment(int iSegment) Parameters Type Name Description Int32 iSegment Returns Type Description Segment3d GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d Implements ISampledCurve3d"
  },
  "api/g3.LaplacianCurveDeformer.html": {
    "href": "api/g3.LaplacianCurveDeformer.html",
    "title": "Class LaplacianCurveDeformer | ViRGIS VR GIS",
    "keywords": "Class LaplacianCurveDeformer Variant of LaplacianMeshDeformer that can be applied to 3D curve. Solve in each dimension can be disabled using .SolveX/Y/Z Currently only supports uniform weights (in Initialize) Inheritance Object LaplacianCurveDeformer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LaplacianCurveDeformer Constructors LaplacianCurveDeformer(DCurve3) Declaration public LaplacianCurveDeformer(DCurve3 curve) Parameters Type Name Description DCurve3 curve Fields ConvergeFailed Declaration public bool ConvergeFailed Field Value Type Description Boolean Curve Declaration public DCurve3 Curve Field Value Type Description DCurve3 SolveX Declaration public bool SolveX Field Value Type Description Boolean SolveY Declaration public bool SolveY Field Value Type Description Boolean SolveZ Declaration public bool SolveZ Field Value Type Description Boolean UseSoftConstraintNormalEquations Declaration public bool UseSoftConstraintNormalEquations Field Value Type Description Boolean Methods ClearConstraints() Declaration public void ClearConstraints() Initialize() Declaration public void Initialize() IsConstrained(Int32) Declaration public bool IsConstrained(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean SetConstraint(Int32, Vector3d, Double, Boolean) Declaration public void SetConstraint(int vID, Vector3d targetPos, double weight, bool bForceToFixedPos = false) Parameters Type Name Description Int32 vID Vector3d targetPos Double weight Boolean bForceToFixedPos Solve(Vector3d[]) Declaration public bool Solve(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveAndUpdateCurve() Declaration public bool SolveAndUpdateCurve() Returns Type Description Boolean SolveMultipleCG(Vector3d[]) Declaration public bool SolveMultipleCG(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveMultipleRHS(Vector3d[]) Declaration public bool SolveMultipleRHS(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean"
  },
  "api/g3.LaplacianCurveDeformer.SoftConstraintV.html": {
    "href": "api/g3.LaplacianCurveDeformer.SoftConstraintV.html",
    "title": "Struct LaplacianCurveDeformer.SoftConstraintV | ViRGIS VR GIS",
    "keywords": "Struct LaplacianCurveDeformer.SoftConstraintV Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct SoftConstraintV Fields Position Declaration public Vector3d Position Field Value Type Description Vector3d PostFix Declaration public bool PostFix Field Value Type Description Boolean Weight Declaration public double Weight Field Value Type Description Double"
  },
  "api/g3.LaplacianMeshDeformer.html": {
    "href": "api/g3.LaplacianMeshDeformer.html",
    "title": "Class LaplacianMeshDeformer | ViRGIS VR GIS",
    "keywords": "Class LaplacianMeshDeformer Inheritance Object LaplacianMeshDeformer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LaplacianMeshDeformer Constructors LaplacianMeshDeformer(DMesh3) Declaration public LaplacianMeshDeformer(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 UseSoftConstraintNormalEquations Declaration public bool UseSoftConstraintNormalEquations Field Value Type Description Boolean Methods ClearConstraints() Declaration public void ClearConstraints() Initialize() Declaration public void Initialize() IsConstrained(Int32) Declaration public bool IsConstrained(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean SetConstraint(Int32, Vector3d, Double, Boolean) Declaration public void SetConstraint(int vID, Vector3d targetPos, double weight, bool bForceToFixedPos = false) Parameters Type Name Description Int32 vID Vector3d targetPos Double weight Boolean bForceToFixedPos Solve(Vector3d[]) Declaration public bool Solve(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveAndUpdateMesh() Declaration public bool SolveAndUpdateMesh() Returns Type Description Boolean SolveMultipleCG(Vector3d[]) Declaration public bool SolveMultipleCG(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveMultipleRHS(Vector3d[]) Declaration public bool SolveMultipleRHS(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean"
  },
  "api/g3.LaplacianMeshDeformer.SoftConstraintV.html": {
    "href": "api/g3.LaplacianMeshDeformer.SoftConstraintV.html",
    "title": "Struct LaplacianMeshDeformer.SoftConstraintV | ViRGIS VR GIS",
    "keywords": "Struct LaplacianMeshDeformer.SoftConstraintV Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct SoftConstraintV Fields Position Declaration public Vector3d Position Field Value Type Description Vector3d PostFix Declaration public bool PostFix Field Value Type Description Boolean Weight Declaration public double Weight Field Value Type Description Double"
  },
  "api/g3.LaplacianMeshSmoother.html": {
    "href": "api/g3.LaplacianMeshSmoother.html",
    "title": "Class LaplacianMeshSmoother | ViRGIS VR GIS",
    "keywords": "Class LaplacianMeshSmoother Inheritance Object LaplacianMeshSmoother Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LaplacianMeshSmoother Constructors LaplacianMeshSmoother(DMesh3) Declaration public LaplacianMeshSmoother(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 UseSoftConstraintNormalEquations Declaration public bool UseSoftConstraintNormalEquations Field Value Type Description Boolean Methods ClearConstraints() Declaration public void ClearConstraints() Initialize() Declaration public void Initialize() IsConstrained(Int32) Declaration public bool IsConstrained(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean RegionSmooth(DMesh3, IEnumerable<Int32>, Int32, Int32, Boolean, Double, Double) Apply LaplacianMeshSmoother to subset of mesh triangles. border of subset always has soft constraint with borderWeight, but is then snapped back to original vtx pos after solve. nConstrainLoops inner loops are also soft-constrained, with weight falloff via square roots (defines continuity) interiorWeight is soft constraint added to all vertices Declaration public static void RegionSmooth(DMesh3 mesh, IEnumerable<int> triangles, int nConstrainLoops, int nIncludeExteriorRings, bool bPreserveExteriorRings, double borderWeight = 10, double interiorWeight = 0) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Int32 nConstrainLoops Int32 nIncludeExteriorRings Boolean bPreserveExteriorRings Double borderWeight Double interiorWeight SetConstraint(Int32, Vector3d, Double, Boolean) Declaration public void SetConstraint(int vID, Vector3d targetPos, double weight, bool bForceToFixedPos = false) Parameters Type Name Description Int32 vID Vector3d targetPos Double weight Boolean bForceToFixedPos Solve(Vector3d[]) Declaration public bool Solve(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveAndUpdateMesh() Declaration public bool SolveAndUpdateMesh() Returns Type Description Boolean SolveMultipleCG(Vector3d[]) Declaration public bool SolveMultipleCG(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean SolveMultipleRHS(Vector3d[]) Declaration public bool SolveMultipleRHS(Vector3d[] Result) Parameters Type Name Description Vector3d [] Result Returns Type Description Boolean"
  },
  "api/g3.LaplacianMeshSmoother.SoftConstraintV.html": {
    "href": "api/g3.LaplacianMeshSmoother.SoftConstraintV.html",
    "title": "Struct LaplacianMeshSmoother.SoftConstraintV | ViRGIS VR GIS",
    "keywords": "Struct LaplacianMeshSmoother.SoftConstraintV Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct SoftConstraintV Fields Position Declaration public Vector3d Position Field Value Type Description Vector3d PostFix Declaration public bool PostFix Field Value Type Description Boolean Weight Declaration public double Weight Field Value Type Description Double"
  },
  "api/g3.Line2d.html": {
    "href": "api/g3.Line2d.html",
    "title": "Struct Line2d | ViRGIS VR GIS",
    "keywords": "Struct Line2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Line2d Constructors Line2d(Vector2d, Vector2d) Declaration public Line2d(Vector2d origin, Vector2d direction) Parameters Type Name Description Vector2d origin Vector2d direction Line2d(ref Vector2d, ref Vector2d) Declaration public Line2d(ref Vector2d origin, ref Vector2d direction) Parameters Type Name Description Vector2d origin Vector2d direction Fields Direction Declaration public Vector2d Direction Field Value Type Description Vector2d Origin Declaration public Vector2d Origin Field Value Type Description Vector2d Methods DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Double FromPoints(Vector2d, Vector2d) Declaration public static Line2d FromPoints(Vector2d p0, Vector2d p1) Parameters Type Name Description Vector2d p0 Vector2d p1 Returns Type Description Line2d FromPoints(ref Vector2d, ref Vector2d) Declaration public static Line2d FromPoints(ref Vector2d p0, ref Vector2d p1) Parameters Type Name Description Vector2d p0 Vector2d p1 Returns Type Description Line2d IntersectionPoint(ref Line2d, Double) Calculate intersection point between this line and another one. Returns Vector2d.MaxValue if lines are parallel. Declaration public Vector2d IntersectionPoint(ref Line2d other, double dotThresh = 1E-08) Parameters Type Name Description Line2d other Double dotThresh Returns Type Description Vector2d PointAt(Double) Declaration public Vector2d PointAt(double d) Parameters Type Name Description Double d Returns Type Description Vector2d Project(Vector2d) Declaration public double Project(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Double WhichSide(Vector2d, Double) Returns: +1, on right of line -1, on left of line 0, on the line Declaration public int WhichSide(Vector2d test, double tol = 0) Parameters Type Name Description Vector2d test Double tol Returns Type Description Int32 WhichSide(ref Vector2d, Double) Declaration public int WhichSide(ref Vector2d test, double tol = 0) Parameters Type Name Description Vector2d test Double tol Returns Type Description Int32 Operators Explicit(Line2d to Line2f) Declaration public static explicit operator Line2f(Line2d v) Parameters Type Name Description Line2d v Returns Type Description Line2f Implicit(Line2f to Line2d) Declaration public static implicit operator Line2d(Line2f v) Parameters Type Name Description Line2f v Returns Type Description Line2d"
  },
  "api/g3.Line2f.html": {
    "href": "api/g3.Line2f.html",
    "title": "Struct Line2f | ViRGIS VR GIS",
    "keywords": "Struct Line2f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Line2f Constructors Line2f(Vector2f, Vector2f) Declaration public Line2f(Vector2f origin, Vector2f direction) Parameters Type Name Description Vector2f origin Vector2f direction Fields Direction Declaration public Vector2f Direction Field Value Type Description Vector2f Origin Declaration public Vector2f Origin Field Value Type Description Vector2f Methods DistanceSquared(Vector2f) Declaration public float DistanceSquared(Vector2f p) Parameters Type Name Description Vector2f p Returns Type Description Single PointAt(Single) Declaration public Vector2f PointAt(float d) Parameters Type Name Description Single d Returns Type Description Vector2f Project(Vector2f) Declaration public float Project(Vector2f p) Parameters Type Name Description Vector2f p Returns Type Description Single"
  },
  "api/g3.Line3d.html": {
    "href": "api/g3.Line3d.html",
    "title": "Struct Line3d | ViRGIS VR GIS",
    "keywords": "Struct Line3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Line3d Constructors Line3d(Vector3d, Vector3d) Declaration public Line3d(Vector3d origin, Vector3d direction) Parameters Type Name Description Vector3d origin Vector3d direction Fields Direction Declaration public Vector3d Direction Field Value Type Description Vector3d Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Methods ClosestPoint(Vector3d) Declaration public Vector3d ClosestPoint(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Vector3d DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double PointAt(Double) Declaration public Vector3d PointAt(double d) Parameters Type Name Description Double d Returns Type Description Vector3d Project(Vector3d) Declaration public double Project(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double Operators Explicit(Line3d to Line3f) Declaration public static explicit operator Line3f(Line3d v) Parameters Type Name Description Line3d v Returns Type Description Line3f Implicit(Line3f to Line3d) Declaration public static implicit operator Line3d(Line3f v) Parameters Type Name Description Line3f v Returns Type Description Line3d"
  },
  "api/g3.Line3f.html": {
    "href": "api/g3.Line3f.html",
    "title": "Struct Line3f | ViRGIS VR GIS",
    "keywords": "Struct Line3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Line3f Constructors Line3f(Vector3f, Vector3f) Declaration public Line3f(Vector3f origin, Vector3f direction) Parameters Type Name Description Vector3f origin Vector3f direction Fields Direction Declaration public Vector3f Direction Field Value Type Description Vector3f Origin Declaration public Vector3f Origin Field Value Type Description Vector3f Methods ClosestPoint(Vector3f) Declaration public Vector3f ClosestPoint(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Vector3f DistanceSquared(Vector3f) Declaration public float DistanceSquared(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single PointAt(Single) Declaration public Vector3f PointAt(float d) Parameters Type Name Description Single d Returns Type Description Vector3f Project(Vector3f) Declaration public float Project(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single"
  },
  "api/g3.LinearIntersection.html": {
    "href": "api/g3.LinearIntersection.html",
    "title": "Struct LinearIntersection | ViRGIS VR GIS",
    "keywords": "Struct LinearIntersection returned by linear-primitive intersection functions Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct LinearIntersection Fields intersects Declaration public bool intersects Field Value Type Description Boolean numIntersections Declaration public int numIntersections Field Value Type Description Int32 parameter Declaration public Interval1d parameter Field Value Type Description Interval1d"
  },
  "api/g3.LineGenerator.html": {
    "href": "api/g3.LineGenerator.html",
    "title": "Class LineGenerator | ViRGIS VR GIS",
    "keywords": "Class LineGenerator Inheritance Object CurveGenerator LineGenerator Inherited Members CurveGenerator.vertices CurveGenerator.closed CurveGenerator.Make(DCurve3) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LineGenerator : CurveGenerator Fields End Declaration public Vector3d End Field Value Type Description Vector3d Start Declaration public Vector3d Start Field Value Type Description Vector3d StepSize Declaration public double StepSize Field Value Type Description Double Subdivisions Declaration public int Subdivisions Field Value Type Description Int32 Methods Generate() Declaration public override void Generate() Overrides CurveGenerator.Generate()"
  },
  "api/g3.LocalProfiler.html": {
    "href": "api/g3.LocalProfiler.html",
    "title": "Class LocalProfiler | ViRGIS VR GIS",
    "keywords": "Class LocalProfiler Inheritance Object LocalProfiler Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LocalProfiler : IDisposable Methods Accumulated(String) Declaration public string Accumulated(string label) Parameters Type Name Description String label Returns Type Description String AllAccumulatedTicks(String) Declaration public string AllAccumulatedTicks(string prefix = \"Times:\") Parameters Type Name Description String prefix Returns Type Description String AllAccumulatedTimes(String, String) Declaration public string AllAccumulatedTimes(string prefix = \"Times:\", string separator = \" \") Parameters Type Name Description String prefix String separator Returns Type Description String AllTicks(String) Declaration public string AllTicks(string prefix = \"Times:\") Parameters Type Name Description String prefix Returns Type Description String AllTimes(String, String) Declaration public string AllTimes(string prefix = \"Times:\", string separator = \" \") Parameters Type Name Description String prefix String separator Returns Type Description String Dispose() Declaration public void Dispose() DivideAllAccumulated(Int32) Declaration public void DivideAllAccumulated(int div) Parameters Type Name Description Int32 div Elapsed(String) Declaration public string Elapsed(string label) Parameters Type Name Description String label Returns Type Description String Get(String) Declaration public BlockTimer Get(string label) Parameters Type Name Description String label Returns Type Description BlockTimer Reset(String) Declaration public void Reset(string label) Parameters Type Name Description String label ResetAccumulated(String) Declaration public void ResetAccumulated(string label) Parameters Type Name Description String label ResetAllAccumulated(String) Declaration public void ResetAllAccumulated(string label) Parameters Type Name Description String label Start(String) Declaration public BlockTimer Start(string label) Parameters Type Name Description String label Returns Type Description BlockTimer Stop(String) Declaration public void Stop(string label) Parameters Type Name Description String label StopAll() Declaration public void StopAll() StopAllAndStartNew(String) Declaration public BlockTimer StopAllAndStartNew(string label) Parameters Type Name Description String label Returns Type Description BlockTimer StopAndAccumulate(String, Boolean) Declaration public void StopAndAccumulate(string label, bool bReset = false) Parameters Type Name Description String label Boolean bReset Implements System.IDisposable"
  },
  "api/g3.LockingQueue-1.html": {
    "href": "api/g3.LockingQueue-1.html",
    "title": "Class LockingQueue<T> | ViRGIS VR GIS",
    "keywords": "Class LockingQueue<T> Inheritance Object LockingQueue<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class LockingQueue<T> Type Parameters Name Description T Constructors LockingQueue() Declaration public LockingQueue() Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(T) Declaration public void Add(T obj) Parameters Type Name Description T obj Remove(ref T) Declaration public bool Remove(ref T val) Parameters Type Name Description T val Returns Type Description Boolean"
  },
  "api/g3.MappedList.html": {
    "href": "api/g3.MappedList.html",
    "title": "Class MappedList | ViRGIS VR GIS",
    "keywords": "Class MappedList IList wrapper that remaps values via a Func (eg for index maps) Inheritance Object MappedList Implements IList < Int32 > ICollection < Int32 > IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MappedList : IList<int>, ICollection<int>, IEnumerable<int>, IEnumerable Constructors MappedList(IList<Int32>, Int32[]) Declaration public MappedList(IList<int> list, int[] map) Parameters Type Name Description IList < Int32 > list Int32 [] map Fields BaseList Declaration public IList<int> BaseList Field Value Type Description IList < Int32 > MapF Declaration public Func<int, int> MapF Field Value Type Description Func < Int32 , Int32 > Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Declaration public int this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Methods Add(Int32) Declaration public void Add(int item) Parameters Type Name Description Int32 item Clear() Declaration public void Clear() Contains(Int32) Declaration public bool Contains(int item) Parameters Type Name Description Int32 item Returns Type Description Boolean CopyTo(Int32[], Int32) Declaration public void CopyTo(int[] array, int arrayIndex) Parameters Type Name Description Int32 [] array Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > IndexOf(Int32) Declaration public int IndexOf(int item) Parameters Type Name Description Int32 item Returns Type Description Int32 Insert(Int32, Int32) Declaration public void Insert(int index, int item) Parameters Type Name Description Int32 index Int32 item Remove(Int32) Declaration public bool Remove(int item) Parameters Type Name Description Int32 item Returns Type Description Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MarchingCubes.html": {
    "href": "api/g3.MarchingCubes.html",
    "title": "Class MarchingCubes | ViRGIS VR GIS",
    "keywords": "Class MarchingCubes Basic implementation of marching cubes mesh generation, which can be applied to arbitrary Implicit function. Multi-threading enabled by default. [TODO] support locking on Implicit.Value()? May not be thread-safe!! [TODO] extension that tracks set of triangles in each cube, so we can do partial updates? [TODO] is hash table on vertex x/y/z the best idea? [TODO] hash table for edge vtx-indices instead, like old polygonizer? (how did we index edges?!?) Inheritance Object MarchingCubes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MarchingCubes Constructors MarchingCubes() Declaration public MarchingCubes() Fields Bounds bounding-box we will mesh inside of. We use the min-corner and the width/height/depth, but do not clamp vertices to stay within max-corner, we may spill one cell over Declaration public AxisAlignedBox3d Bounds Field Value Type Description AxisAlignedBox3d CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellDimensions Declaration public Vector3i CellDimensions Field Value Type Description Vector3i CubeSize Length of edges of cubes that are marching. currently, # of cells along axis = (int)(bounds_dimension / CellSize) + 1 Declaration public double CubeSize Field Value Type Description Double Implicit this is the function we will evaluate Declaration public ImplicitFunction3d Implicit Field Value Type Description ImplicitFunction3d IsoValue mesh surface will be at this isovalue. Normally 0 unless you want offset surface or field is not a distance-field. Declaration public double IsoValue Field Value Type Description Double Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ParallelCompute Use multi-threading? Generally a good idea unless problem is very small or you are multi-threading at a higher level (which may be more efficient as we currently use very fine-grained spinlocks to synchronize) Declaration public bool ParallelCompute Field Value Type Description Boolean RootMode Which rootfinding method will be used to converge on surface along edges Declaration public MarchingCubes.RootfindingModes RootMode Field Value Type Description MarchingCubes.RootfindingModes RootModeSteps number of iterations of rootfinding method (ignored for SingleLerp) Declaration public int RootModeSteps Field Value Type Description Int32 VertexHash Declaration public Dictionary<Vector3d, int> VertexHash Field Value Type Description Dictionary < Vector3d , Int32 > Methods Generate() Run MC algorithm and generate Output mesh Declaration public void Generate()"
  },
  "api/g3.MarchingCubes.RootfindingModes.html": {
    "href": "api/g3.MarchingCubes.RootfindingModes.html",
    "title": "Enum MarchingCubes.RootfindingModes | ViRGIS VR GIS",
    "keywords": "Enum MarchingCubes.RootfindingModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum RootfindingModes Fields Name Description Bisection LerpSteps SingleLerp"
  },
  "api/g3.MarchingQuads.html": {
    "href": "api/g3.MarchingQuads.html",
    "title": "Class MarchingQuads | ViRGIS VR GIS",
    "keywords": "Class MarchingQuads 2D MarchingQuads polyline extraction from scalar field [TODO] this is very, very old code. Should at minimum rewrite using current vector classes/etc. Inheritance Object MarchingQuads Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MarchingQuads Constructors MarchingQuads(Int32, AxisAlignedBox2f, Single) Declaration public MarchingQuads(int nSubdivisions, AxisAlignedBox2f bounds, float fIsoValue) Parameters Type Name Description Int32 nSubdivisions AxisAlignedBox2f bounds Single fIsoValue Properties Bounds Declaration public AxisAlignedBox2f Bounds { get; set; } Property Value Type Description AxisAlignedBox2f Stroke Declaration public DPolyLine2f Stroke { get; } Property Value Type Description DPolyLine2f Subdivisions Declaration public int Subdivisions { get; set; } Property Value Type Description Int32 Methods AddSeedPoint(Single, Single) Declaration public void AddSeedPoint(float x, float y) Parameters Type Name Description Single x Single y ClearSeedPoints() Declaration public void ClearSeedPoints() ClearStroke() Declaration public void ClearStroke() GetBounds() Declaration public AxisAlignedBox2f GetBounds() Returns Type Description AxisAlignedBox2f Polygonize(ImplicitField2d) Declaration public void Polygonize(ImplicitField2d field) Parameters Type Name Description ImplicitField2d field"
  },
  "api/g3.MathUtil.html": {
    "href": "api/g3.MathUtil.html",
    "title": "Class MathUtil | ViRGIS VR GIS",
    "keywords": "Class MathUtil Inheritance Object MathUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MathUtil Fields Deg2Rad Declaration public const double Deg2Rad = 0.017453292519943295 Field Value Type Description Double Deg2Radf Declaration public const float Deg2Radf = 0.0174532924F Field Value Type Description Single Epsilon Declaration public const double Epsilon = 2.2204460492503131E-16 Field Value Type Description Double Epsilonf Declaration public const float Epsilonf = 1.1920929E-07F Field Value Type Description Single FourPI Declaration public const double FourPI = 12.566370614359172 Field Value Type Description Double HalfPI Declaration public const double HalfPI = 1.5707963267948966 Field Value Type Description Double HalfPIf Declaration public const float HalfPIf = 1.57079637F Field Value Type Description Single PIf Declaration public const float PIf = 3.14159274F Field Value Type Description Single Rad2Deg Declaration public const double Rad2Deg = 57.295779513082323 Field Value Type Description Double Rad2Degf Declaration public const float Rad2Degf = 57.29578F Field Value Type Description Single SqrtThree Declaration public const double SqrtThree = 1.7320508075688772 Field Value Type Description Double SqrtTwo Declaration public const double SqrtTwo = 1.4142135623730951 Field Value Type Description Double SqrtTwof Declaration public const float SqrtTwof = 1.41421354F Field Value Type Description Single SqrtTwoInv Declaration public const double SqrtTwoInv = 0.70710678118654746 Field Value Type Description Double TwoPI Declaration public const double TwoPI = 6.2831853071795862 Field Value Type Description Double TwoPIf Declaration public const float TwoPIf = 6.28318548F Field Value Type Description Single ZeroTolerance Declaration public const double ZeroTolerance = 1E-08 Field Value Type Description Double ZeroTolerancef Declaration public const float ZeroTolerancef = 1E-06F Field Value Type Description Single Methods Area(Vector3d, Vector3d, Vector3d) Declaration public static double Area(Vector3d v1, Vector3d v2, Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Double Area(ref Vector3d, ref Vector3d, ref Vector3d) Declaration public static double Area(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Double AspectRatio(Vector3d, Vector3d, Vector3d) Declaration public static double AspectRatio(Vector3d v1, Vector3d v2, Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Double AspectRatio(ref Vector3d, ref Vector3d, ref Vector3d) aspect ratio of triangle Declaration public static double AspectRatio(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Double Atan2Positive(Double, Double) Declaration public static double Atan2Positive(double y, double x) Parameters Type Name Description Double y Double x Returns Type Description Double BarycentricCoords(Vector2d, Vector2d, Vector2d, Vector2d) Compute barycentric coordinates/weights of vPoint inside triangle (V0,V1,V2). If point is inside triangle, coords will pe positive and sum to 1. ie if result is a, then vPoint = a.x V0 + a.y V1 + a.z*V2. Declaration public static Vector3d BarycentricCoords(Vector2d vPoint, Vector2d V0, Vector2d V1, Vector2d V2) Parameters Type Name Description Vector2d vPoint Vector2d V0 Vector2d V1 Vector2d V2 Returns Type Description Vector3d BarycentricCoords(Vector3d, Vector3d, Vector3d, Vector3d) Declaration public static Vector3d BarycentricCoords(Vector3d vPoint, Vector3d V0, Vector3d V1, Vector3d V2) Parameters Type Name Description Vector3d vPoint Vector3d V0 Vector3d V1 Vector3d V2 Returns Type Description Vector3d BarycentricCoords(ref Vector3d, ref Vector3d, ref Vector3d, ref Vector3d) Compute barycentric coordinates/weights of vPoint inside triangle (V0,V1,V2). If point is in triangle plane and inside triangle, coords will be positive and sum to 1. ie if result is a, then vPoint = a.x V0 + a.y V1 + a.z*V2. Declaration public static Vector3d BarycentricCoords(ref Vector3d vPoint, ref Vector3d V0, ref Vector3d V1, ref Vector3d V2) Parameters Type Name Description Vector3d vPoint Vector3d V0 Vector3d V1 Vector3d V2 Returns Type Description Vector3d Clamp(Double, Double, Double) Declaration public static double Clamp(double f, double low, double high) Parameters Type Name Description Double f Double low Double high Returns Type Description Double Clamp(Int32, Int32, Int32) Declaration public static int Clamp(int f, int low, int high) Parameters Type Name Description Int32 f Int32 low Int32 high Returns Type Description Int32 Clamp(Single, Single, Single) Declaration public static float Clamp(float f, float low, float high) Parameters Type Name Description Single f Single low Single high Returns Type Description Single Clamp<T>(T, T, T) Declaration public static T Clamp<T>(T f, T low, T high) where T : IComparable Parameters Type Name Description T f T low T high Returns Type Description T Type Parameters Name Description T ClampAngleDeg(Double, Double, Double) Declaration public static double ClampAngleDeg(double theta, double min, double max) Parameters Type Name Description Double theta Double min Double max Returns Type Description Double ClampAngleRad(Double, Double, Double) Declaration public static double ClampAngleRad(double theta, double min, double max) Parameters Type Name Description Double theta Double min Double max Returns Type Description Double EpsilonEqual(Double, Double, Double) Declaration public static bool EpsilonEqual(double a, double b, double epsilon = 2.2204460492503131E-16) Parameters Type Name Description Double a Double b Double epsilon Returns Type Description Boolean EpsilonEqual(Single, Single, Single) Declaration public static bool EpsilonEqual(float a, float b, float epsilon = 1.1920929E-07F) Parameters Type Name Description Single a Single b Single epsilon Returns Type Description Boolean FastNormalArea(ref Vector3d, ref Vector3d, ref Vector3d, out Double) simultaneously compute triangle normal and area, and only normalize after cross-product, not before (so, fewer normalizes then Normal()) Declaration public static Vector3d FastNormalArea(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3, out double area) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Double area Returns Type Description Vector3d FastNormalDirection(ref Vector3d, ref Vector3d, ref Vector3d) compute vector in direction of triangle normal (cross-product). No normalization. Declaration public static Vector3d FastNormalDirection(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Vector3d The normal direction. InRange(Double, Double, Double) Declaration public static bool InRange(double f, double low, double high) Parameters Type Name Description Double f Double low Double high Returns Type Description Boolean InRange(Int32, Int32, Int32) Declaration public static bool InRange(int f, int low, int high) Parameters Type Name Description Int32 f Int32 low Int32 high Returns Type Description Boolean InRange(Single, Single, Single) Declaration public static bool InRange(float f, float low, float high) Parameters Type Name Description Single f Single low Single high Returns Type Description Boolean InvSqrt(Double) Declaration public static double InvSqrt(double f) Parameters Type Name Description Double f Returns Type Description Double IsFinite(Double) Declaration public static bool IsFinite(double d) Parameters Type Name Description Double d Returns Type Description Boolean IsFinite(Single) Declaration public static bool IsFinite(float d) Parameters Type Name Description Single d Returns Type Description Boolean IsLeft(Vector2d, Vector2d, Vector2d) Declaration public static double IsLeft(Vector2d P0, Vector2d P1, Vector2d P2) Parameters Type Name Description Vector2d P0 Vector2d P1 Vector2d P2 Returns Type Description Double IsLeft(ref Vector2d, ref Vector2d, ref Vector2d) Declaration public static double IsLeft(ref Vector2d P0, ref Vector2d P1, ref Vector2d P2) Parameters Type Name Description Vector2d P0 Vector2d P1 Vector2d P2 Returns Type Description Double IsObtuse(Vector3d, Vector3d, Vector3d) Declaration public static bool IsObtuse(Vector3d v1, Vector3d v2, Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Boolean Lerp(Double, Double, Double) Declaration public static double Lerp(double a, double b, double t) Parameters Type Name Description Double a Double b Double t Returns Type Description Double Lerp(Single, Single, Single) Declaration public static float Lerp(float a, float b, float t) Parameters Type Name Description Single a Single b Single t Returns Type Description Single LinearRampT(Single, Single, Single) Declaration public static float LinearRampT(float R, float deadzoneR, float x) Parameters Type Name Description Single R Single deadzoneR Single x Returns Type Description Single Max(Double, Double, Double) Declaration public static double Max(double a, double b, double c) Parameters Type Name Description Double a Double b Double c Returns Type Description Double Max(Int32, Int32, Int32) Declaration public static int Max(int a, int b, int c) Parameters Type Name Description Int32 a Int32 b Int32 c Returns Type Description Int32 Max(Single, Single, Single) Declaration public static float Max(float a, float b, float c) Parameters Type Name Description Single a Single b Single c Returns Type Description Single Min(Double, Double, Double) Declaration public static double Min(double a, double b, double c) Parameters Type Name Description Double a Double b Double c Returns Type Description Double Min(Int32, Int32, Int32) Declaration public static int Min(int a, int b, int c) Parameters Type Name Description Int32 a Int32 b Int32 c Returns Type Description Int32 Min(Single, Single, Single) Declaration public static float Min(float a, float b, float c) Parameters Type Name Description Single a Single b Single c Returns Type Description Single MinMax(Double, Double, Double, out Double, out Double) Declaration public static void MinMax(double a, double b, double c, out double min, out double max) Parameters Type Name Description Double a Double b Double c Double min Double max ModuloClamp(Int32, Int32) Declaration public static int ModuloClamp(int f, int N) Parameters Type Name Description Int32 f Int32 N Returns Type Description Int32 ModuloIteration(Int32, Int32) Iterate from 0 to (nMax-1) using prime-modulo, so we see every index once, but not in-order Declaration public static IEnumerable<int> ModuloIteration(int nMaxExclusive, int nPrime = 31337) Parameters Type Name Description Int32 nMaxExclusive Int32 nPrime Returns Type Description IEnumerable < Int32 > MostParallelAxis(Frame3f, Vector3f) Declaration public static int MostParallelAxis(Frame3f f, Vector3f vDir) Parameters Type Name Description Frame3f f Vector3f vDir Returns Type Description Int32 Normal(Vector3d, Vector3d, Vector3d) Declaration public static Vector3d Normal(Vector3d v1, Vector3d v2, Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Vector3d Normal(ref Vector3d, ref Vector3d, ref Vector3d) Declaration public static Vector3d Normal(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Returns Type Description Vector3d PlaneAngleD(Vector3d, Vector3d, Int32) Declaration public static double PlaneAngleD(Vector3d a, Vector3d b, int nPlaneNormalIdx = 1) Parameters Type Name Description Vector3d a Vector3d b Int32 nPlaneNormalIdx Returns Type Description Double PlaneAngleD(Vector3f, Vector3f, Int32) Declaration public static float PlaneAngleD(Vector3f a, Vector3f b, int nPlaneNormalIdx = 1) Parameters Type Name Description Vector3f a Vector3f b Int32 nPlaneNormalIdx Returns Type Description Single PlaneAngleSignedD(Vector2d, Vector2d) Declaration public static double PlaneAngleSignedD(Vector2d vFrom, Vector2d vTo) Parameters Type Name Description Vector2d vFrom Vector2d vTo Returns Type Description Double PlaneAngleSignedD(Vector2f, Vector2f) Declaration public static float PlaneAngleSignedD(Vector2f vFrom, Vector2f vTo) Parameters Type Name Description Vector2f vFrom Vector2f vTo Returns Type Description Single PlaneAngleSignedD(Vector3d, Vector3d, Vector3d) Declaration public static double PlaneAngleSignedD(Vector3d vFrom, Vector3d vTo, Vector3d planeN) Parameters Type Name Description Vector3d vFrom Vector3d vTo Vector3d planeN Returns Type Description Double PlaneAngleSignedD(Vector3d, Vector3d, Int32) Declaration public static double PlaneAngleSignedD(Vector3d vFrom, Vector3d vTo, int nPlaneNormalIdx = 1) Parameters Type Name Description Vector3d vFrom Vector3d vTo Int32 nPlaneNormalIdx Returns Type Description Double PlaneAngleSignedD(Vector3f, Vector3f, Vector3f) Declaration public static float PlaneAngleSignedD(Vector3f vFrom, Vector3f vTo, Vector3f planeN) Parameters Type Name Description Vector3f vFrom Vector3f vTo Vector3f planeN Returns Type Description Single PlaneAngleSignedD(Vector3f, Vector3f, Int32) Declaration public static float PlaneAngleSignedD(Vector3f vFrom, Vector3f vTo, int nPlaneNormalIdx = 1) Parameters Type Name Description Vector3f vFrom Vector3f vTo Int32 nPlaneNormalIdx Returns Type Description Single PowerOf10(Int32) Declaration public static int PowerOf10(int n) Parameters Type Name Description Int32 n Returns Type Description Int32 RangeClamp(Double, Double) Declaration public static double RangeClamp(double fValue, double fMinMaxValue) Parameters Type Name Description Double fValue Double fMinMaxValue Returns Type Description Double RangeClamp(Single, Single) Declaration public static float RangeClamp(float fValue, float fMinMaxValue) Parameters Type Name Description Single fValue Single fMinMaxValue Returns Type Description Single SignedClamp(Double, Double) Declaration public static double SignedClamp(double f, double fMax) Parameters Type Name Description Double f Double fMax Returns Type Description Double SignedClamp(Double, Double, Double) Declaration public static double SignedClamp(double f, double fMin, double fMax) Parameters Type Name Description Double f Double fMin Double fMax Returns Type Description Double SignedClamp(Single, Single) Declaration public static float SignedClamp(float f, float fMax) Parameters Type Name Description Single f Single fMax Returns Type Description Single SignedClamp(Single, Single, Single) Declaration public static float SignedClamp(float f, float fMin, float fMax) Parameters Type Name Description Single f Single fMin Single fMax Returns Type Description Single SmoothInterp(Double, Double, Double) Declaration public static double SmoothInterp(double a, double b, double t) Parameters Type Name Description Double a Double b Double t Returns Type Description Double SmoothInterp(Single, Single, Single) Declaration public static float SmoothInterp(float a, float b, float t) Parameters Type Name Description Single a Single b Single t Returns Type Description Single SmoothRise0To1(Single, Single, Single, Single) Declaration public static float SmoothRise0To1(float fX, float yshift, float xZero, float speed) Parameters Type Name Description Single fX Single yshift Single xZero Single speed Returns Type Description Single SmoothStep(Double, Double, Double) Declaration public static double SmoothStep(double a, double b, double t) Parameters Type Name Description Double a Double b Double t Returns Type Description Double SmoothStep(Single, Single, Single) Declaration public static float SmoothStep(float a, float b, float t) Parameters Type Name Description Single a Single b Single t Returns Type Description Single SolveQuadratic(Double, Double, Double, out Double, out Double) Declaration public static bool SolveQuadratic(double a, double b, double c, out double minT, out double maxT) Parameters Type Name Description Double a Double b Double c Double minT Double maxT Returns Type Description Boolean TriSolidAngle(Vector3d, Vector3d, Vector3d, ref Vector3d) signed winding angle of oriented triangle [a,b,c] wrt point p formula from Jacobson et al 13 http://igl.ethz.ch/projects/winding-number/ Declaration public static double TriSolidAngle(Vector3d a, Vector3d b, Vector3d c, ref Vector3d p) Parameters Type Name Description Vector3d a Vector3d b Vector3d c Vector3d p Returns Type Description Double VectorCot(Vector3d, Vector3d) Declaration public static double VectorCot(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Double VectorTan(Vector3d, Vector3d) Declaration public static double VectorTan(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Double WrapSignedIndex(Int32, Int32) Declaration public static int WrapSignedIndex(int val, int mod) Parameters Type Name Description Int32 val Int32 mod Returns Type Description Int32 WyvillFalloff(Double, Double, Double) Declaration public static double WyvillFalloff(double fD, double fInnerRad, double fOuterRad) Parameters Type Name Description Double fD Double fInnerRad Double fOuterRad Returns Type Description Double WyvillFalloff(Single, Single, Single) Declaration public static float WyvillFalloff(float fD, float fInnerRad, float fOuterRad) Parameters Type Name Description Single fD Single fInnerRad Single fOuterRad Returns Type Description Single WyvillFalloff01(Double) Declaration public static double WyvillFalloff01(double fX) Parameters Type Name Description Double fX Returns Type Description Double WyvillFalloff01(Single) Declaration public static float WyvillFalloff01(float fX) Parameters Type Name Description Single fX Returns Type Description Single WyvillRise01(Double) Declaration public static double WyvillRise01(double fX) Parameters Type Name Description Double fX Returns Type Description Double WyvillRise01(Single) Declaration public static float WyvillRise01(float fX) Parameters Type Name Description Single fX Returns Type Description Single"
  },
  "api/g3.matrix_entry.html": {
    "href": "api/g3.matrix_entry.html",
    "title": "Struct matrix_entry | ViRGIS VR GIS",
    "keywords": "Struct matrix_entry Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct matrix_entry Fields c Declaration public int c Field Value Type Description Int32 r Declaration public int r Field Value Type Description Int32 value Declaration public double value Field Value Type Description Double"
  },
  "api/g3.Matrix2d.html": {
    "href": "api/g3.Matrix2d.html",
    "title": "Class Matrix2d | ViRGIS VR GIS",
    "keywords": "Class Matrix2d Inheritance Object Matrix2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Matrix2d Constructors Matrix2d(Vector2d, Vector2d) Declaration public Matrix2d(Vector2d u, Vector2d v) Parameters Type Name Description Vector2d u Vector2d v Matrix2d(Vector2d, Vector2d, Boolean) Declaration public Matrix2d(Vector2d u, Vector2d v, bool columns) Parameters Type Name Description Vector2d u Vector2d v Boolean columns Matrix2d(Boolean) Declaration public Matrix2d(bool bIdentity) Parameters Type Name Description Boolean bIdentity Matrix2d(Double, Boolean) Declaration public Matrix2d(double angle, bool bDegrees = false) Parameters Type Name Description Double angle Boolean bDegrees Matrix2d(Double, Double) Declaration public Matrix2d(double m00, double m11) Parameters Type Name Description Double m00 Double m11 Matrix2d(Double, Double, Double, Double) Declaration public Matrix2d(double m00, double m01, double m10, double m11) Parameters Type Name Description Double m00 Double m01 Double m10 Double m11 Fields Identity Declaration public static readonly Matrix2d Identity Field Value Type Description Matrix2d m00 Declaration public double m00 Field Value Type Description Double m01 Declaration public double m01 Field Value Type Description Double m10 Declaration public double m10 Field Value Type Description Double m11 Declaration public double m11 Field Value Type Description Double One Declaration public static readonly Matrix2d One Field Value Type Description Matrix2d Zero Declaration public static readonly Matrix2d Zero Field Value Type Description Matrix2d Properties Determinant Declaration public double Determinant { get; } Property Value Type Description Double Item[Int32, Int32] Declaration public double this[int r, int c] { get; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Methods Adjoint() Declaration public Matrix2d Adjoint() Returns Type Description Matrix2d Column(Int32) Declaration public Vector2d Column(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d EigenDecomposition(ref Matrix2d, ref Matrix2d) Declaration public void EigenDecomposition(ref Matrix2d rot, ref Matrix2d diag) Parameters Type Name Description Matrix2d rot Matrix2d diag ExtractAngle() Declaration public double ExtractAngle() Returns Type Description Double Inverse(Double) Declaration public Matrix2d Inverse(double epsilon = 0) Parameters Type Name Description Double epsilon Returns Type Description Matrix2d Orthonormalize() Declaration public void Orthonormalize() QForm(Vector2d, Vector2d) Declaration public double QForm(Vector2d u, Vector2d v) Parameters Type Name Description Vector2d u Vector2d v Returns Type Description Double Row(Int32) Declaration public Vector2d Row(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d SetToDiagonal(Double, Double) Declaration public void SetToDiagonal(double m00, double m11) Parameters Type Name Description Double m00 Double m11 SetToRotationDeg(Double) Declaration public void SetToRotationDeg(double angleDeg) Parameters Type Name Description Double angleDeg SetToRotationRad(Double) Declaration public void SetToRotationRad(double angleRad) Parameters Type Name Description Double angleRad Transpose() Declaration public Matrix2d Transpose() Returns Type Description Matrix2d Operators Addition(Matrix2d, Matrix2d) Declaration public static Matrix2d operator +(Matrix2d a, Matrix2d o) Parameters Type Name Description Matrix2d a Matrix2d o Returns Type Description Matrix2d Addition(Matrix2d, Double) Declaration public static Matrix2d operator +(Matrix2d a, double f) Parameters Type Name Description Matrix2d a Double f Returns Type Description Matrix2d Division(Matrix2d, Double) Declaration public static Matrix2d operator /(Matrix2d a, double f) Parameters Type Name Description Matrix2d a Double f Returns Type Description Matrix2d Multiply(Matrix2d, Vector2d) Declaration public static Vector2d operator *(Matrix2d m, Vector2d v) Parameters Type Name Description Matrix2d m Vector2d v Returns Type Description Vector2d Multiply(Matrix2d, Double) Declaration public static Matrix2d operator *(Matrix2d a, double f) Parameters Type Name Description Matrix2d a Double f Returns Type Description Matrix2d Multiply(Vector2d, Matrix2d) Declaration public static Vector2d operator *(Vector2d v, Matrix2d m) Parameters Type Name Description Vector2d v Matrix2d m Returns Type Description Vector2d Multiply(Double, Matrix2d) Declaration public static Matrix2d operator *(double f, Matrix2d a) Parameters Type Name Description Double f Matrix2d a Returns Type Description Matrix2d Subtraction(Matrix2d, Matrix2d) Declaration public static Matrix2d operator -(Matrix2d a, Matrix2d o) Parameters Type Name Description Matrix2d a Matrix2d o Returns Type Description Matrix2d Subtraction(Matrix2d, Double) Declaration public static Matrix2d operator -(Matrix2d a, double f) Parameters Type Name Description Matrix2d a Double f Returns Type Description Matrix2d UnaryNegation(Matrix2d) Declaration public static Matrix2d operator -(Matrix2d v) Parameters Type Name Description Matrix2d v Returns Type Description Matrix2d"
  },
  "api/g3.Matrix2f.html": {
    "href": "api/g3.Matrix2f.html",
    "title": "Class Matrix2f | ViRGIS VR GIS",
    "keywords": "Class Matrix2f Inheritance Object Matrix2f Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Matrix2f Constructors Matrix2f(Vector2f, Vector2f) Declaration public Matrix2f(Vector2f u, Vector2f v) Parameters Type Name Description Vector2f u Vector2f v Matrix2f(Vector2f, Vector2f, Boolean) Declaration public Matrix2f(Vector2f u, Vector2f v, bool columns) Parameters Type Name Description Vector2f u Vector2f v Boolean columns Matrix2f(Boolean) Declaration public Matrix2f(bool bIdentity) Parameters Type Name Description Boolean bIdentity Matrix2f(Single) Declaration public Matrix2f(float radians) Parameters Type Name Description Single radians Matrix2f(Single, Single) Declaration public Matrix2f(float m00, float m11) Parameters Type Name Description Single m00 Single m11 Matrix2f(Single, Single, Single, Single) Declaration public Matrix2f(float m00, float m01, float m10, float m11) Parameters Type Name Description Single m00 Single m01 Single m10 Single m11 Fields Identity Declaration public static readonly Matrix2f Identity Field Value Type Description Matrix2f m00 Declaration public float m00 Field Value Type Description Single m01 Declaration public float m01 Field Value Type Description Single m10 Declaration public float m10 Field Value Type Description Single m11 Declaration public float m11 Field Value Type Description Single One Declaration public static readonly Matrix2f One Field Value Type Description Matrix2f Zero Declaration public static readonly Matrix2f Zero Field Value Type Description Matrix2f Properties Determinant Declaration public float Determinant { get; } Property Value Type Description Single Methods Adjoint() Declaration public Matrix2f Adjoint() Returns Type Description Matrix2f EigenDecomposition(ref Matrix2f, ref Matrix2f) Declaration public void EigenDecomposition(ref Matrix2f rot, ref Matrix2f diag) Parameters Type Name Description Matrix2f rot Matrix2f diag ExtractAngle() Declaration public float ExtractAngle() Returns Type Description Single Inverse(Single) Declaration public Matrix2f Inverse(float epsilon = 0F) Parameters Type Name Description Single epsilon Returns Type Description Matrix2f Orthonormalize() Declaration public void Orthonormalize() QForm(Vector2f, Vector2f) Declaration public float QForm(Vector2f u, Vector2f v) Parameters Type Name Description Vector2f u Vector2f v Returns Type Description Single SetToDiagonal(Single, Single) Declaration public void SetToDiagonal(float m00, float m11) Parameters Type Name Description Single m00 Single m11 SetToRotationDeg(Single) Declaration public void SetToRotationDeg(float angleDeg) Parameters Type Name Description Single angleDeg SetToRotationRad(Single) Declaration public void SetToRotationRad(float angleRad) Parameters Type Name Description Single angleRad Transpose() Declaration public Matrix2f Transpose() Returns Type Description Matrix2f Operators Addition(Matrix2f, Matrix2f) Declaration public static Matrix2f operator +(Matrix2f a, Matrix2f o) Parameters Type Name Description Matrix2f a Matrix2f o Returns Type Description Matrix2f Addition(Matrix2f, Single) Declaration public static Matrix2f operator +(Matrix2f a, float f) Parameters Type Name Description Matrix2f a Single f Returns Type Description Matrix2f Division(Matrix2f, Single) Declaration public static Matrix2f operator /(Matrix2f a, float f) Parameters Type Name Description Matrix2f a Single f Returns Type Description Matrix2f Multiply(Matrix2f, Vector2f) Declaration public static Vector2f operator *(Matrix2f m, Vector2f v) Parameters Type Name Description Matrix2f m Vector2f v Returns Type Description Vector2f Multiply(Matrix2f, Single) Declaration public static Matrix2f operator *(Matrix2f a, float f) Parameters Type Name Description Matrix2f a Single f Returns Type Description Matrix2f Multiply(Vector2f, Matrix2f) Declaration public static Vector2f operator *(Vector2f v, Matrix2f m) Parameters Type Name Description Vector2f v Matrix2f m Returns Type Description Vector2f Multiply(Single, Matrix2f) Declaration public static Matrix2f operator *(float f, Matrix2f a) Parameters Type Name Description Single f Matrix2f a Returns Type Description Matrix2f Subtraction(Matrix2f, Matrix2f) Declaration public static Matrix2f operator -(Matrix2f a, Matrix2f o) Parameters Type Name Description Matrix2f a Matrix2f o Returns Type Description Matrix2f Subtraction(Matrix2f, Single) Declaration public static Matrix2f operator -(Matrix2f a, float f) Parameters Type Name Description Matrix2f a Single f Returns Type Description Matrix2f UnaryNegation(Matrix2f) Declaration public static Matrix2f operator -(Matrix2f v) Parameters Type Name Description Matrix2f v Returns Type Description Matrix2f"
  },
  "api/g3.Matrix3d.html": {
    "href": "api/g3.Matrix3d.html",
    "title": "Struct Matrix3d | ViRGIS VR GIS",
    "keywords": "Struct Matrix3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Matrix3d Constructors Matrix3d(Vector3d, Vector3d, Vector3d, Boolean) Declaration public Matrix3d(Vector3d v1, Vector3d v2, Vector3d v3, bool bRows) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Boolean bRows Matrix3d(ref Vector3d, ref Vector3d) Construct outer-product of u*transpose(v) of u and v result is that Mij = u_i * v_j Declaration public Matrix3d(ref Vector3d u, ref Vector3d v) Parameters Type Name Description Vector3d u Vector3d v Matrix3d(ref Vector3d, ref Vector3d, ref Vector3d, Boolean) Declaration public Matrix3d(ref Vector3d v1, ref Vector3d v2, ref Vector3d v3, bool bRows) Parameters Type Name Description Vector3d v1 Vector3d v2 Vector3d v3 Boolean bRows Matrix3d(Boolean) Declaration public Matrix3d(bool bIdentity) Parameters Type Name Description Boolean bIdentity Matrix3d(Double, Double, Double) Declaration public Matrix3d(double m00, double m11, double m22) Parameters Type Name Description Double m00 Double m11 Double m22 Matrix3d(Double, Double, Double, Double, Double, Double, Double, Double, Double) Declaration public Matrix3d(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22) Parameters Type Name Description Double m00 Double m01 Double m02 Double m10 Double m11 Double m12 Double m20 Double m21 Double m22 Matrix3d(Double[]) Declaration public Matrix3d(double[] mat) Parameters Type Name Description Double [] mat Matrix3d(Double[,]) Declaration public Matrix3d(double[, ] mat) Parameters Type Name Description Double [,] mat Matrix3d(Func<Int32, Double>) Declaration public Matrix3d(Func<int, double> matBufferF) Parameters Type Name Description Func < Int32 , Double > matBufferF Matrix3d(Func<Int32, Int32, Double>) Declaration public Matrix3d(Func<int, int, double> matF) Parameters Type Name Description Func < Int32 , Int32 , Double > matF Matrix3d(Single[]) Declaration public Matrix3d(float[] mat) Parameters Type Name Description Single [] mat Matrix3d(Single[,]) Declaration public Matrix3d(float[, ] mat) Parameters Type Name Description Single [,] mat Fields Identity Declaration public static readonly Matrix3d Identity Field Value Type Description Matrix3d Row0 Declaration public Vector3d Row0 Field Value Type Description Vector3d Row1 Declaration public Vector3d Row1 Field Value Type Description Vector3d Row2 Declaration public Vector3d Row2 Field Value Type Description Vector3d Zero Declaration public static readonly Matrix3d Zero Field Value Type Description Matrix3d Properties Determinant Declaration public double Determinant { get; } Property Value Type Description Double Item[Int32] Declaration public double this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Double Item[Int32, Int32] Declaration public double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Methods AxisAngleD(Vector3d, Double) Declaration public static Matrix3d AxisAngleD(Vector3d axis, double angleDeg) Parameters Type Name Description Vector3d axis Double angleDeg Returns Type Description Matrix3d Column(Int32) Declaration public Vector3d Column(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d EpsilonEqual(Matrix3d, Double) Declaration public bool EpsilonEqual(Matrix3d m2, double epsilon) Parameters Type Name Description Matrix3d m2 Double epsilon Returns Type Description Boolean InnerProduct(ref Matrix3d) Declaration public double InnerProduct(ref Matrix3d m2) Parameters Type Name Description Matrix3d m2 Returns Type Description Double Inverse() Declaration public Matrix3d Inverse() Returns Type Description Matrix3d Multiply(ref Vector3d) Declaration public Vector3d Multiply(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d Multiply(ref Vector3d, ref Vector3d) Declaration public void Multiply(ref Vector3d v, ref Vector3d vOut) Parameters Type Name Description Vector3d v Vector3d vOut Row(Int32) Declaration public Vector3d Row(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d ToBuffer() Declaration public double[] ToBuffer() Returns Type Description Double [] ToBuffer(Double[]) Declaration public void ToBuffer(double[] buf) Parameters Type Name Description Double [] buf ToQuaternion() Declaration public Quaterniond ToQuaternion() Returns Type Description Quaterniond ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Transpose() Declaration public Matrix3d Transpose() Returns Type Description Matrix3d Operators Addition(Matrix3d, Matrix3d) Declaration public static Matrix3d operator +(Matrix3d mat1, Matrix3d mat2) Parameters Type Name Description Matrix3d mat1 Matrix3d mat2 Returns Type Description Matrix3d Multiply(Matrix3d, Matrix3d) Declaration public static Matrix3d operator *(Matrix3d mat1, Matrix3d mat2) Parameters Type Name Description Matrix3d mat1 Matrix3d mat2 Returns Type Description Matrix3d Multiply(Matrix3d, Vector3d) Declaration public static Vector3d operator *(Matrix3d mat, Vector3d v) Parameters Type Name Description Matrix3d mat Vector3d v Returns Type Description Vector3d Multiply(Matrix3d, Double) Declaration public static Matrix3d operator *(Matrix3d mat, double f) Parameters Type Name Description Matrix3d mat Double f Returns Type Description Matrix3d Multiply(Double, Matrix3d) Declaration public static Matrix3d operator *(double f, Matrix3d mat) Parameters Type Name Description Double f Matrix3d mat Returns Type Description Matrix3d Subtraction(Matrix3d, Matrix3d) Declaration public static Matrix3d operator -(Matrix3d mat1, Matrix3d mat2) Parameters Type Name Description Matrix3d mat1 Matrix3d mat2 Returns Type Description Matrix3d"
  },
  "api/g3.Matrix3f.html": {
    "href": "api/g3.Matrix3f.html",
    "title": "Struct Matrix3f | ViRGIS VR GIS",
    "keywords": "Struct Matrix3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Matrix3f Constructors Matrix3f(Vector3f, Vector3f, Vector3f, Boolean) Declaration public Matrix3f(Vector3f v1, Vector3f v2, Vector3f v3, bool bRows) Parameters Type Name Description Vector3f v1 Vector3f v2 Vector3f v3 Boolean bRows Matrix3f(Boolean) Declaration public Matrix3f(bool bIdentity) Parameters Type Name Description Boolean bIdentity Matrix3f(Double[]) Declaration public Matrix3f(double[] mat) Parameters Type Name Description Double [] mat Matrix3f(Double[,]) Declaration public Matrix3f(double[, ] mat) Parameters Type Name Description Double [,] mat Matrix3f(Func<Int32, Int32, Single>) Declaration public Matrix3f(Func<int, int, float> matF) Parameters Type Name Description Func < Int32 , Int32 , Single > matF Matrix3f(Func<Int32, Single>) Declaration public Matrix3f(Func<int, float> matBufferF) Parameters Type Name Description Func < Int32 , Single > matBufferF Matrix3f(Single, Single, Single) Declaration public Matrix3f(float m00, float m11, float m22) Parameters Type Name Description Single m00 Single m11 Single m22 Matrix3f(Single, Single, Single, Single, Single, Single, Single, Single, Single) Declaration public Matrix3f(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) Parameters Type Name Description Single m00 Single m01 Single m02 Single m10 Single m11 Single m12 Single m20 Single m21 Single m22 Matrix3f(Single[]) Declaration public Matrix3f(float[] mat) Parameters Type Name Description Single [] mat Matrix3f(Single[,]) Declaration public Matrix3f(float[, ] mat) Parameters Type Name Description Single [,] mat Fields Identity Declaration public static readonly Matrix3f Identity Field Value Type Description Matrix3f Row0 Declaration public Vector3f Row0 Field Value Type Description Vector3f Row1 Declaration public Vector3f Row1 Field Value Type Description Vector3f Row2 Declaration public Vector3f Row2 Field Value Type Description Vector3f Zero Declaration public static readonly Matrix3f Zero Field Value Type Description Matrix3f Properties Determinant Declaration public float Determinant { get; } Property Value Type Description Single Item[Int32] Declaration public float this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Single Item[Int32, Int32] Declaration public float this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Single Methods AxisAngleD(Vector3f, Single) Declaration public static Matrix3f AxisAngleD(Vector3f axis, float angleDeg) Parameters Type Name Description Vector3f axis Single angleDeg Returns Type Description Matrix3f Column(Int32) Declaration public Vector3f Column(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f EpsilonEqual(Matrix3f, Single) Declaration public bool EpsilonEqual(Matrix3f m2, float epsilon) Parameters Type Name Description Matrix3f m2 Single epsilon Returns Type Description Boolean Inverse() Declaration public Matrix3f Inverse() Returns Type Description Matrix3f Multiply(ref Vector3f) Declaration public Vector3f Multiply(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f Multiply(ref Vector3f, ref Vector3f) Declaration public void Multiply(ref Vector3f v, ref Vector3f vOut) Parameters Type Name Description Vector3f v Vector3f vOut Row(Int32) Declaration public Vector3f Row(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f ToBuffer() Declaration public float[] ToBuffer() Returns Type Description Single [] ToBuffer(Single[]) Declaration public void ToBuffer(float[] buf) Parameters Type Name Description Single [] buf ToQuaternion() Declaration public Quaternionf ToQuaternion() Returns Type Description Quaternionf ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Transpose() Declaration public Matrix3f Transpose() Returns Type Description Matrix3f Operators Addition(Matrix3f, Matrix3f) Declaration public static Matrix3f operator +(Matrix3f mat1, Matrix3f mat2) Parameters Type Name Description Matrix3f mat1 Matrix3f mat2 Returns Type Description Matrix3f Multiply(Matrix3f, Matrix3f) Declaration public static Matrix3f operator *(Matrix3f mat1, Matrix3f mat2) Parameters Type Name Description Matrix3f mat1 Matrix3f mat2 Returns Type Description Matrix3f Multiply(Matrix3f, Vector3f) Declaration public static Vector3f operator *(Matrix3f mat, Vector3f v) Parameters Type Name Description Matrix3f mat Vector3f v Returns Type Description Vector3f Multiply(Matrix3f, Single) Declaration public static Matrix3f operator *(Matrix3f mat, float f) Parameters Type Name Description Matrix3f mat Single f Returns Type Description Matrix3f Multiply(Single, Matrix3f) Declaration public static Matrix3f operator *(float f, Matrix3f mat) Parameters Type Name Description Single f Matrix3f mat Returns Type Description Matrix3f Subtraction(Matrix3f, Matrix3f) Declaration public static Matrix3f operator -(Matrix3f mat1, Matrix3f mat2) Parameters Type Name Description Matrix3f mat1 Matrix3f mat2 Returns Type Description Matrix3f"
  },
  "api/g3.MatrixUtil.html": {
    "href": "api/g3.MatrixUtil.html",
    "title": "Class MatrixUtil | ViRGIS VR GIS",
    "keywords": "Class MatrixUtil Inheritance Object MatrixUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MatrixUtil Methods Determinant3x3(Double[]) Declaration public static double Determinant3x3(double[] M) Parameters Type Name Description Double [] M Returns Type Description Double MakeDiagonal3x3(Double, Double, Double) Declaration public static double[] MakeDiagonal3x3(double a, double b, double c) Parameters Type Name Description Double a Double b Double c Returns Type Description Double [] MakeIdentity3x3(Double, Double, Double) Declaration public static double[] MakeIdentity3x3(double a, double b, double c) Parameters Type Name Description Double a Double b Double c Returns Type Description Double [] Multiply3x3(Double[], Vector3d) Declaration public static Vector3d Multiply3x3(double[] M, Vector3d vec) Parameters Type Name Description Double [] M Vector3d vec Returns Type Description Vector3d Multiply3x3(Double[], Double[], Double[]) Declaration public static void Multiply3x3(double[] A, double[] B, double[] C) Parameters Type Name Description Double [] A Double [] B Double [] C SetDiagonal3x3(Double[], Double, Double, Double) Declaration public static void SetDiagonal3x3(double[] M, double a, double b, double c) Parameters Type Name Description Double [] M Double a Double b Double c SetIdentity3x3(Double[], Double, Double, Double) Declaration public static void SetIdentity3x3(double[] M, double a, double b, double c) Parameters Type Name Description Double [] M Double a Double b Double c Transpose3x3(Double[]) Declaration public static void Transpose3x3(double[] M) Parameters Type Name Description Double [] M Transpose3x3(Double[], Double[]) Declaration public static void Transpose3x3(double[] M, double[] MTranspose) Parameters Type Name Description Double [] M Double [] MTranspose"
  },
  "api/g3.MemoryPool-1.html": {
    "href": "api/g3.MemoryPool-1.html",
    "title": "Class MemoryPool<T> | ViRGIS VR GIS",
    "keywords": "Class MemoryPool<T> Very basic object pool class. Inheritance Object MemoryPool<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MemoryPool<T> where T : class, new() Type Parameters Name Description T Constructors MemoryPool() Declaration public MemoryPool() Methods Allocate() Declaration public T Allocate() Returns Type Description T FreeAll() Declaration public void FreeAll() Return(T) Declaration public void Return(T obj) Parameters Type Name Description T obj ReturnAll() Declaration public void ReturnAll()"
  },
  "api/g3.MeshBoolean.html": {
    "href": "api/g3.MeshBoolean.html",
    "title": "Class MeshBoolean | ViRGIS VR GIS",
    "keywords": "Class MeshBoolean Inheritance Object MeshBoolean Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshBoolean Fields Result Declaration public DMesh3 Result Field Value Type Description DMesh3 Target Declaration public DMesh3 Target Field Value Type Description DMesh3 Tool Declaration public DMesh3 Tool Field Value Type Description DMesh3 VertexSnapTol Declaration public double VertexSnapTol Field Value Type Description Double Methods Compute() Declaration public bool Compute() Returns Type Description Boolean"
  },
  "api/g3.MeshBoundaryEdgeMidpoints.html": {
    "href": "api/g3.MeshBoundaryEdgeMidpoints.html",
    "title": "Class MeshBoundaryEdgeMidpoints | ViRGIS VR GIS",
    "keywords": "Class MeshBoundaryEdgeMidpoints Present mesh boundary-edge midpoints as a point set Inheritance Object MeshBoundaryEdgeMidpoints Implements IPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshBoundaryEdgeMidpoints : IPointSet Constructors MeshBoundaryEdgeMidpoints(DMesh3) Declaration public MeshBoundaryEdgeMidpoints(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 Timestamp Timestamp is incremented any time any change is made to the mesh Declaration public int Timestamp { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > Implements IPointSet"
  },
  "api/g3.MeshBoundaryLoops.FailureBehaviors.html": {
    "href": "api/g3.MeshBoundaryLoops.FailureBehaviors.html",
    "title": "Enum MeshBoundaryLoops.FailureBehaviors | ViRGIS VR GIS",
    "keywords": "Enum MeshBoundaryLoops.FailureBehaviors Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum FailureBehaviors Fields Name Description ConvertToOpenSpan ThrowException"
  },
  "api/g3.MeshBoundaryLoops.html": {
    "href": "api/g3.MeshBoundaryLoops.html",
    "title": "Class MeshBoundaryLoops | ViRGIS VR GIS",
    "keywords": "Class MeshBoundaryLoops Extract boundary EdgeLoops from Mesh. Can also extract EdgeSpans for open areas, however default behavior is to ignore these. Set .SpanBehavior to configure. Inheritance Object MeshBoundaryLoops Implements IEnumerable < EdgeLoop > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshBoundaryLoops : IEnumerable<EdgeLoop>, IEnumerable Constructors MeshBoundaryLoops(DMesh3, Boolean) Declaration public MeshBoundaryLoops(DMesh3 mesh, bool bAutoCompute = true) Parameters Type Name Description DMesh3 mesh Boolean bAutoCompute Fields EdgeFilterF Declaration public Func<int, bool> EdgeFilterF Field Value Type Description Func < Int32 , Boolean > FailureBehavior Declaration public MeshBoundaryLoops.FailureBehaviors FailureBehavior Field Value Type Description MeshBoundaryLoops.FailureBehaviors FailureBowties Declaration public List<int> FailureBowties Field Value Type Description List < Int32 > FellBackToSpansOnFailure Declaration public bool FellBackToSpansOnFailure Field Value Type Description Boolean Loops Declaration public List<EdgeLoop> Loops Field Value Type Description List < EdgeLoop > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 SawOpenSpans Declaration public bool SawOpenSpans Field Value Type Description Boolean SpanBehavior Declaration public MeshBoundaryLoops.SpanBehaviors SpanBehavior Field Value Type Description MeshBoundaryLoops.SpanBehaviors Spans Declaration public List<EdgeSpan> Spans Field Value Type Description List < EdgeSpan > Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public EdgeLoop this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description EdgeLoop MaxVerticesLoopIndex Index of Loop with largest vertex count Declaration public int MaxVerticesLoopIndex { get; } Property Value Type Description Int32 SpanCount Declaration public int SpanCount { get; } Property Value Type Description Int32 Methods Compute() Find the set of boundary EdgeLoops. Note that if we encounter topological issues, we will throw MeshBoundaryLoopsException w/ more info (if possible) Declaration public bool Compute() Returns Type Description Boolean FindLoopContainingEdge(Int32) find the loop index that contains an edge, or return -1 Declaration public int FindLoopContainingEdge(int eid) Parameters Type Name Description Int32 eid Returns Type Description Int32 FindLoopContainingVertex(Int32) find the loop index that contains a vertex, or return -1 Declaration public int FindLoopContainingVertex(int vid) Parameters Type Name Description Int32 vid Returns Type Description Int32 FindVertexIndex(Int32) find pair (loop_index,in_loop_index) of vertex vID in EdgeLoops, or Index2i.Max if not found Declaration public Index2i FindVertexIndex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Index2i GetEnumerator() Declaration public IEnumerator<EdgeLoop> GetEnumerator() Returns Type Description IEnumerator < EdgeLoop > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshBoundaryLoops.SpanBehaviors.html": {
    "href": "api/g3.MeshBoundaryLoops.SpanBehaviors.html",
    "title": "Enum MeshBoundaryLoops.SpanBehaviors | ViRGIS VR GIS",
    "keywords": "Enum MeshBoundaryLoops.SpanBehaviors Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum SpanBehaviors Fields Name Description Compute Ignore ThrowException"
  },
  "api/g3.MeshBoundaryLoopsException.html": {
    "href": "api/g3.MeshBoundaryLoopsException.html",
    "title": "Class MeshBoundaryLoopsException | ViRGIS VR GIS",
    "keywords": "Class MeshBoundaryLoopsException Inheritance Object Exception MeshBoundaryLoopsException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshBoundaryLoopsException : Exception, ISerializable, _Exception Constructors MeshBoundaryLoopsException(String) Declaration public MeshBoundaryLoopsException(string message) Parameters Type Name Description String message Fields BowtieFailure Declaration public bool BowtieFailure Field Value Type Description Boolean RepeatedEdge Declaration public bool RepeatedEdge Field Value Type Description Boolean UnclosedLoop Declaration public bool UnclosedLoop Field Value Type Description Boolean Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/g3.MeshComponents.html": {
    "href": "api/g3.MeshComponents.html",
    "title": "Enum MeshComponents | ViRGIS VR GIS",
    "keywords": "Enum MeshComponents Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum MeshComponents Fields Name Description All FaceGroups None VertexColors VertexNormals VertexUVs"
  },
  "api/g3.MeshConnectedComponents.Component.html": {
    "href": "api/g3.MeshConnectedComponents.Component.html",
    "title": "Struct MeshConnectedComponents.Component | ViRGIS VR GIS",
    "keywords": "Struct MeshConnectedComponents.Component Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Component Fields Indices Declaration public int[] Indices Field Value Type Description Int32 []"
  },
  "api/g3.MeshConnectedComponents.html": {
    "href": "api/g3.MeshConnectedComponents.html",
    "title": "Class MeshConnectedComponents | ViRGIS VR GIS",
    "keywords": "Class MeshConnectedComponents Inheritance Object MeshConnectedComponents Implements IEnumerable < MeshConnectedComponents.Component > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshConnectedComponents : IEnumerable<MeshConnectedComponents.Component>, IEnumerable Constructors MeshConnectedComponents(DMesh3) Declaration public MeshConnectedComponents(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Components Declaration public List<MeshConnectedComponents.Component> Components Field Value Type Description List < MeshConnectedComponents.Component > FilterF Declaration public Func<int, bool> FilterF Field Value Type Description Func < Int32 , Boolean > FilterSet Declaration public IEnumerable<int> FilterSet Field Value Type Description IEnumerable < Int32 > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 SeedFilterF Declaration public Func<int, bool> SeedFilterF Field Value Type Description Func < Int32 , Boolean > Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public MeshConnectedComponents.Component this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description MeshConnectedComponents.Component LargestByCount Declaration public int LargestByCount { get; } Property Value Type Description Int32 Methods FindConnectedT() Declaration public void FindConnectedT() FindConnectedT(DMesh3, Int32) Utility function that finds set of triangles connected to tSeed. Does not use MeshConnectedComponents class. Declaration public static HashSet<int> FindConnectedT(DMesh3 mesh, int tSeed) Parameters Type Name Description DMesh3 mesh Int32 tSeed Returns Type Description HashSet < Int32 > GetEnumerator() Declaration public IEnumerator<MeshConnectedComponents.Component> GetEnumerator() Returns Type Description IEnumerator < MeshConnectedComponents.Component > LargestT(DMesh3) extract largest shell of meshIn Declaration public static DMesh3 LargestT(DMesh3 meshIn) Parameters Type Name Description DMesh3 meshIn Returns Type Description DMesh3 Separate(DMesh3) Separate input mesh into disconnected shells. Resulting array is sorted by decreasing triangle count. Declaration public static DMesh3[] Separate(DMesh3 meshIn) Parameters Type Name Description DMesh3 meshIn Returns Type Description DMesh3 [] SortByCount(Boolean) Declaration public void SortByCount(bool bIncreasing = true) Parameters Type Name Description Boolean bIncreasing SortByValue(Func<MeshConnectedComponents.Component, Double>, Boolean) Evaluate valueF for each component and sort by that Declaration public void SortByValue(Func<MeshConnectedComponents.Component, double> valueF, bool bIncreasing = true) Parameters Type Name Description Func < MeshConnectedComponents.Component , Double > valueF Boolean bIncreasing Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshConstraints.html": {
    "href": "api/g3.MeshConstraints.html",
    "title": "Class MeshConstraints | ViRGIS VR GIS",
    "keywords": "Class MeshConstraints Inheritance Object MeshConstraints Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshConstraints Constructors MeshConstraints() Declaration public MeshConstraints() Properties HasConstraints Declaration public bool HasConstraints { get; } Property Value Type Description Boolean Methods AllocateSetID() Declaration public int AllocateSetID() Returns Type Description Int32 ClearEdgeConstraint(Int32) Declaration public void ClearEdgeConstraint(int eid) Parameters Type Name Description Int32 eid ClearVertexConstraint(Int32) Declaration public void ClearVertexConstraint(int vid) Parameters Type Name Description Int32 vid FindConstrainedEdgesBySetID(Int32) Declaration public List<int> FindConstrainedEdgesBySetID(int setID) Parameters Type Name Description Int32 setID Returns Type Description List < Int32 > GetEdgeConstraint(Int32) Declaration public EdgeConstraint GetEdgeConstraint(int eid) Parameters Type Name Description Int32 eid Returns Type Description EdgeConstraint GetVertexConstraint(Int32) Declaration public VertexConstraint GetVertexConstraint(int vid) Parameters Type Name Description Int32 vid Returns Type Description VertexConstraint GetVertexConstraint(Int32, ref VertexConstraint) Declaration public bool GetVertexConstraint(int vid, ref VertexConstraint vc) Parameters Type Name Description Int32 vid VertexConstraint vc Returns Type Description Boolean HasEdgeConstraint(Int32) Declaration public bool HasEdgeConstraint(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean HasVertexConstraint(Int32) Declaration public bool HasVertexConstraint(int vid) Parameters Type Name Description Int32 vid Returns Type Description Boolean SetOrUpdateEdgeConstraint(Int32, EdgeConstraint) Declaration public void SetOrUpdateEdgeConstraint(int eid, EdgeConstraint ec) Parameters Type Name Description Int32 eid EdgeConstraint ec SetOrUpdateVertexConstraint(Int32, VertexConstraint) Declaration public void SetOrUpdateVertexConstraint(int vid, VertexConstraint vc) Parameters Type Name Description Int32 vid VertexConstraint vc VertexConstraintsItr() Declaration public IEnumerable VertexConstraintsItr() Returns Type Description IEnumerable"
  },
  "api/g3.MeshConstraintUtil.html": {
    "href": "api/g3.MeshConstraintUtil.html",
    "title": "Class MeshConstraintUtil | ViRGIS VR GIS",
    "keywords": "Class MeshConstraintUtil Inheritance Object MeshConstraintUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshConstraintUtil Methods AddTrackedEdges(MeshConstraints, Int32[], Int32) Declaration public static void AddTrackedEdges(MeshConstraints cons, int[] edges, int setID) Parameters Type Name Description MeshConstraints cons Int32 [] edges Int32 setID ConstrainVtxLoopTo(MeshConstraints, DMesh3, IList<Int32>, IProjectionTarget, Int32) Declaration public static void ConstrainVtxLoopTo(MeshConstraints cons, DMesh3 mesh, IList<int> loopV, IProjectionTarget target, int setID = -1) Parameters Type Name Description MeshConstraints cons DMesh3 mesh IList < Int32 > loopV IProjectionTarget target Int32 setID ConstrainVtxLoopTo(Remesher, Int32[], IProjectionTarget, Int32) Declaration public static void ConstrainVtxLoopTo(Remesher r, int[] loopV, IProjectionTarget target, int setID = -1) Parameters Type Name Description Remesher r Int32 [] loopV IProjectionTarget target Int32 setID ConstrainVtxSpanTo(MeshConstraints, DMesh3, IList<Int32>, IProjectionTarget, Int32) Declaration public static void ConstrainVtxSpanTo(MeshConstraints cons, DMesh3 mesh, IList<int> spanV, IProjectionTarget target, int setID = -1) Parameters Type Name Description MeshConstraints cons DMesh3 mesh IList < Int32 > spanV IProjectionTarget target Int32 setID ConstrainVtxSpanTo(Remesher, Int32[], IProjectionTarget, Int32) Declaration public static void ConstrainVtxSpanTo(Remesher r, int[] spanV, IProjectionTarget target, int setID = -1) Parameters Type Name Description Remesher r Int32 [] spanV IProjectionTarget target Int32 setID FixAllBoundaryEdges(MeshConstraints, DMesh3) Declaration public static void FixAllBoundaryEdges(MeshConstraints cons, DMesh3 mesh) Parameters Type Name Description MeshConstraints cons DMesh3 mesh FixAllBoundaryEdges(Remesher) Declaration public static void FixAllBoundaryEdges(Remesher r) Parameters Type Name Description Remesher r FixAllBoundaryEdges_AllowCollapse(MeshConstraints, DMesh3, Int32) Declaration public static void FixAllBoundaryEdges_AllowCollapse(MeshConstraints cons, DMesh3 mesh, int setID) Parameters Type Name Description MeshConstraints cons DMesh3 mesh Int32 setID FixAllBoundaryEdges_AllowSplit(MeshConstraints, DMesh3, Int32) Declaration public static void FixAllBoundaryEdges_AllowSplit(MeshConstraints cons, DMesh3 mesh, int setID) Parameters Type Name Description MeshConstraints cons DMesh3 mesh Int32 setID FixAllGroupBoundaryEdges(MeshConstraints, DMesh3, Boolean) Declaration public static void FixAllGroupBoundaryEdges(MeshConstraints cons, DMesh3 mesh, bool bPinVertices) Parameters Type Name Description MeshConstraints cons DMesh3 mesh Boolean bPinVertices FixAllGroupBoundaryEdges(Remesher, Boolean) Declaration public static void FixAllGroupBoundaryEdges(Remesher r, bool bPinVertices) Parameters Type Name Description Remesher r Boolean bPinVertices FixEdges(MeshConstraints, DMesh3, IEnumerable<Int32>) Declaration public static void FixEdges(MeshConstraints cons, DMesh3 mesh, IEnumerable<int> edges) Parameters Type Name Description MeshConstraints cons DMesh3 mesh IEnumerable < Int32 > edges FixSubmeshBoundaryEdges(MeshConstraints, DSubmesh3) Declaration public static void FixSubmeshBoundaryEdges(MeshConstraints cons, DSubmesh3 sub) Parameters Type Name Description MeshConstraints cons DSubmesh3 sub PreserveBoundaryLoops(MeshConstraints, DMesh3) Declaration public static void PreserveBoundaryLoops(MeshConstraints cons, DMesh3 mesh) Parameters Type Name Description MeshConstraints cons DMesh3 mesh PreserveBoundaryLoops(Remesher) Declaration public static void PreserveBoundaryLoops(Remesher r) Parameters Type Name Description Remesher r"
  },
  "api/g3.MeshDecomposition.Component.html": {
    "href": "api/g3.MeshDecomposition.Component.html",
    "title": "Struct MeshDecomposition.Component | ViRGIS VR GIS",
    "keywords": "Struct MeshDecomposition.Component Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Component Fields id Declaration public int id Field Value Type Description Int32 source_vertices Declaration public int[] source_vertices Field Value Type Description Int32 [] tri_count Declaration public int tri_count Field Value Type Description Int32 triangles Declaration public int[] triangles Field Value Type Description Int32 []"
  },
  "api/g3.MeshDecomposition.html": {
    "href": "api/g3.MeshDecomposition.html",
    "title": "Class MeshDecomposition | ViRGIS VR GIS",
    "keywords": "Class MeshDecomposition Inheritance Object MeshDecomposition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshDecomposition Constructors MeshDecomposition(DMesh3, IMeshComponentManager) Declaration public MeshDecomposition(DMesh3 mesh, IMeshComponentManager manager) Parameters Type Name Description DMesh3 mesh IMeshComponentManager manager Fields TrackVertexMapping Declaration public bool TrackVertexMapping Field Value Type Description Boolean Properties Manager Declaration public IMeshComponentManager Manager { get; set; } Property Value Type Description IMeshComponentManager MaxComponentSize Declaration public int MaxComponentSize { get; set; } Property Value Type Description Int32 Methods BuildLinear() Declaration public void BuildLinear()"
  },
  "api/g3.MeshEdgeMidpoints.html": {
    "href": "api/g3.MeshEdgeMidpoints.html",
    "title": "Class MeshEdgeMidpoints | ViRGIS VR GIS",
    "keywords": "Class MeshEdgeMidpoints Present mesh edge midpoints as a point set Inheritance Object MeshEdgeMidpoints Implements IPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshEdgeMidpoints : IPointSet Constructors MeshEdgeMidpoints(DMesh3) Declaration public MeshEdgeMidpoints(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 Timestamp Timestamp is incremented any time any change is made to the mesh Declaration public int Timestamp { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > Implements IPointSet"
  },
  "api/g3.MeshEdgeSelection.html": {
    "href": "api/g3.MeshEdgeSelection.html",
    "title": "Class MeshEdgeSelection | ViRGIS VR GIS",
    "keywords": "Class MeshEdgeSelection Inheritance Object MeshEdgeSelection Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshEdgeSelection : IEnumerable<int>, IEnumerable Constructors MeshEdgeSelection(DMesh3) Declaration public MeshEdgeSelection(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh MeshEdgeSelection(DMesh3, MeshFaceSelection, Int32) Declaration public MeshEdgeSelection(DMesh3 mesh, MeshFaceSelection convertT, int minCount = 1) Parameters Type Name Description DMesh3 mesh MeshFaceSelection convertT Int32 minCount MeshEdgeSelection(DMesh3, MeshVertexSelection, Int32) Declaration public MeshEdgeSelection(DMesh3 mesh, MeshVertexSelection convertV, int minCount = 2) Parameters Type Name Description DMesh3 mesh MeshVertexSelection convertV Int32 minCount MeshEdgeSelection(MeshEdgeSelection) Declaration public MeshEdgeSelection(MeshEdgeSelection copy) Parameters Type Name Description MeshEdgeSelection copy Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties Bitmap Declaration protected BitArray Bitmap { get; } Property Value Type Description BitArray Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Deselect(IEnumerable<Int32>) Declaration public void Deselect(IEnumerable<int> edges) Parameters Type Name Description IEnumerable < Int32 > edges Deselect(Int32) Declaration public void Deselect(int tid) Parameters Type Name Description Int32 tid Deselect(Int32[]) Declaration public void Deselect(int[] edges) Parameters Type Name Description Int32 [] edges DeselectAll() Declaration public void DeselectAll() GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > IsSelected(Int32) Declaration public bool IsSelected(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean Select(IEnumerable<Int32>) Declaration public void Select(IEnumerable<int> edges) Parameters Type Name Description IEnumerable < Int32 > edges Select(List<Int32>) Declaration public void Select(List<int> edges) Parameters Type Name Description List < Int32 > edges Select(Func<Int32, Boolean>) Declaration public void Select(Func<int, bool> selectF) Parameters Type Name Description Func < Int32 , Boolean > selectF Select(Int32) Declaration public void Select(int eid) Parameters Type Name Description Int32 eid Select(Int32[]) Declaration public void Select(int[] edges) Parameters Type Name Description Int32 [] edges SelectBoundaryTriEdges(MeshFaceSelection) Declaration public void SelectBoundaryTriEdges(MeshFaceSelection triangles) Parameters Type Name Description MeshFaceSelection triangles SelectTriangleEdges(IEnumerable<Int32>) Declaration public void SelectTriangleEdges(IEnumerable<int> triangles) Parameters Type Name Description IEnumerable < Int32 > triangles SelectVertexEdges(IEnumerable<Int32>) Declaration public void SelectVertexEdges(IEnumerable<int> vertices) Parameters Type Name Description IEnumerable < Int32 > vertices SelectVertexEdges(Int32[]) Declaration public void SelectVertexEdges(int[] vertices) Parameters Type Name Description Int32 [] vertices ToArray() Declaration public int[] ToArray() Returns Type Description Int32 [] Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshEditor.DuplicateTriBehavior.html": {
    "href": "api/g3.MeshEditor.DuplicateTriBehavior.html",
    "title": "Enum MeshEditor.DuplicateTriBehavior | ViRGIS VR GIS",
    "keywords": "Enum MeshEditor.DuplicateTriBehavior Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum DuplicateTriBehavior Fields Name Description AssertAbort AssertContinue Replace UseExisting"
  },
  "api/g3.MeshEditor.html": {
    "href": "api/g3.MeshEditor.html",
    "title": "Class MeshEditor | ViRGIS VR GIS",
    "keywords": "Class MeshEditor Inheritance Object MeshEditor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshEditor Constructors MeshEditor(DMesh3) Declaration public MeshEditor(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Methods AddTriangleFan_OrderedEdgeLoop(Int32, Int32[], Int32) Declaration public virtual int[] AddTriangleFan_OrderedEdgeLoop(int center, int[] edge_loop, int group_id = -1) Parameters Type Name Description Int32 center Int32 [] edge_loop Int32 group_id Returns Type Description Int32 [] AddTriangleFan_OrderedVertexLoop(Int32, Int32[], Int32) Declaration public virtual int[] AddTriangleFan_OrderedVertexLoop(int center, int[] vertex_loop, int group_id = -1) Parameters Type Name Description Int32 center Int32 [] vertex_loop Int32 group_id Returns Type Description Int32 [] AddTriangleStrip(IList<Frame3f>, IList<Interval1d>, Int32) Declaration public virtual int[] AddTriangleStrip(IList<Frame3f> frames, IList<Interval1d> spans, int group_id = -1) Parameters Type Name Description IList < Frame3f > frames IList < Interval1d > spans Int32 group_id Returns Type Description Int32 [] Append(DMesh3, DMesh3) Declaration public static void Append(DMesh3 appendTo, DMesh3 append) Parameters Type Name Description DMesh3 appendTo DMesh3 append AppendBox(DMesh3, Frame3f, Vector3f, Colorf) Declaration public static void AppendBox(DMesh3 mesh, Frame3f frame, Vector3f size, Colorf color) Parameters Type Name Description DMesh3 mesh Frame3f frame Vector3f size Colorf color AppendBox(DMesh3, Vector3d, Vector3d, Single) Declaration public static void AppendBox(DMesh3 mesh, Vector3d pos, Vector3d normal, float size) Parameters Type Name Description DMesh3 mesh Vector3d pos Vector3d normal Single size AppendBox(DMesh3, Vector3d, Vector3d, Single, Colorf) Declaration public static void AppendBox(DMesh3 mesh, Vector3d pos, Vector3d normal, float size, Colorf color) Parameters Type Name Description DMesh3 mesh Vector3d pos Vector3d normal Single size Colorf color AppendBox(DMesh3, Vector3d, Single) Declaration public static void AppendBox(DMesh3 mesh, Vector3d pos, float size) Parameters Type Name Description DMesh3 mesh Vector3d pos Single size AppendBox(DMesh3, Vector3d, Single, Colorf) Declaration public static void AppendBox(DMesh3 mesh, Vector3d pos, float size, Colorf color) Parameters Type Name Description DMesh3 mesh Vector3d pos Single size Colorf color AppendBox(Frame3f, Vector3f) Declaration public void AppendBox(Frame3f frame, Vector3f size) Parameters Type Name Description Frame3f frame Vector3f size AppendBox(Frame3f, Vector3f, Colorf) Declaration public void AppendBox(Frame3f frame, Vector3f size, Colorf color) Parameters Type Name Description Frame3f frame Vector3f size Colorf color AppendBox(Frame3f, Single) Declaration public void AppendBox(Frame3f frame, float size) Parameters Type Name Description Frame3f frame Single size AppendLine(DMesh3, Segment3d, Single) Declaration public static void AppendLine(DMesh3 mesh, Segment3d seg, float size) Parameters Type Name Description DMesh3 mesh Segment3d seg Single size AppendLine(Segment3d, Single) Declaration public void AppendLine(Segment3d seg, float size) Parameters Type Name Description Segment3d seg Single size AppendLine(Segment3d, Single, Colorf) Declaration public void AppendLine(Segment3d seg, float size, Colorf color) Parameters Type Name Description Segment3d seg Single size Colorf color AppendMesh(IMesh, IndexMap, out Int32[], Int32) Declaration public bool AppendMesh(IMesh appendMesh, IndexMap mergeMapV, out int[] mapV, int appendGID = -1) Parameters Type Name Description IMesh appendMesh IndexMap mergeMapV Int32 [] mapV Int32 appendGID Returns Type Description Boolean AppendMesh(IMesh, Int32) Declaration public bool AppendMesh(IMesh appendMesh, int appendGID = -1) Parameters Type Name Description IMesh appendMesh Int32 appendGID Returns Type Description Boolean AppendMesh(IMesh, out Int32[], Int32) Declaration public bool AppendMesh(IMesh appendMesh, out int[] mapV, int appendGID = -1) Parameters Type Name Description IMesh appendMesh Int32 [] mapV Int32 appendGID Returns Type Description Boolean AppendPathSolid(IEnumerable<Vector3d>, Double, Colorf) Declaration public void AppendPathSolid(IEnumerable<Vector3d> vertices, double radius, Colorf color) Parameters Type Name Description IEnumerable < Vector3d > vertices Double radius Colorf color Combine(IMesh[]) Declaration public static DMesh3 Combine(params IMesh[] appendMeshes) Parameters Type Name Description IMesh [] appendMeshes Returns Type Description DMesh3 DisconnectAllBowties(Int32) Disconnect all bowtie vertices in mesh. Iterates because sometimes disconnecting a bowtie creates new bowties (how??). Returns number of remaining bowties after iterations. Declaration public int DisconnectAllBowties(int nMaxIters = 10) Parameters Type Name Description Int32 nMaxIters Returns Type Description Int32 DisconnectBowtie(Int32) separate triangle one-ring at vertex into connected components, and then duplicate vertex once for each component Declaration public void DisconnectBowtie(int vid) Parameters Type Name Description Int32 vid DuplicateTriangles(IEnumerable<Int32>, ref IndexMap, Int32) Make a copy of provided triangles, with new vertices. You provide MapV because you know if you are doing a small subset or a full-mesh-copy. Declaration public List<int> DuplicateTriangles(IEnumerable<int> triangles, ref IndexMap MapV, int group_id = -1) Parameters Type Name Description IEnumerable < Int32 > triangles IndexMap MapV Int32 group_id Returns Type Description List < Int32 > ReinsertSubmesh(DSubmesh3, ref Int32[], out IndexMap, MeshEditor.DuplicateTriBehavior) Declaration public bool ReinsertSubmesh(DSubmesh3 sub, ref int[] new_tris, out IndexMap SubToNewV, MeshEditor.DuplicateTriBehavior eDuplicateBehavior = MeshEditor.DuplicateTriBehavior.AssertAbort) Parameters Type Name Description DSubmesh3 sub Int32 [] new_tris IndexMap SubToNewV MeshEditor.DuplicateTriBehavior eDuplicateBehavior Returns Type Description Boolean RemoveAllBowtieVertices(Boolean) Remove all bowtie vertices in mesh. Makes one pass unless bRepeatUntilClean = true, in which case repeats until no more bowties found Returns true if any vertices were removed Declaration public bool RemoveAllBowtieVertices(bool bRepeatUntilClean) Parameters Type Name Description Boolean bRepeatUntilClean Returns Type Description Boolean RemoveFinTriangles(DMesh3, Func<DMesh3, Int32, Boolean>, Boolean) Remove 'fin' triangles that have only one connected triangle. Removing one fin can create another, by default will keep iterating until all fins removed (in a not very efficient way!). Pass bRepeatToConvergence=false to only do one pass. [TODO] if we are repeating, construct face selection from nbrs of first list and iterate over that on future passes! Declaration public static int RemoveFinTriangles(DMesh3 mesh, Func<DMesh3, int, bool> removeF = null, bool bRepeatToConvergence = true) Parameters Type Name Description DMesh3 mesh Func < DMesh3 , Int32 , Boolean > removeF Boolean bRepeatToConvergence Returns Type Description Int32 RemoveIsolatedTriangles(DMesh3) Remove 'loner' triangles that have no connected neighbours. Declaration public static bool RemoveIsolatedTriangles(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description Boolean RemoveSmallComponents(DMesh3, Double, Double) Declaration public static int RemoveSmallComponents(DMesh3 mesh, double min_volume, double min_area) Parameters Type Name Description DMesh3 mesh Double min_volume Double min_area Returns Type Description Int32 RemoveSmallComponents(Double, Double) Remove any connected components with volume < min_volume area lt; min_area Declaration public int RemoveSmallComponents(double min_volume, double min_area) Parameters Type Name Description Double min_volume Double min_area Returns Type Description Int32 RemoveTriangles(DMesh3, IEnumerable<Int32>, Boolean) Declaration public static bool RemoveTriangles(DMesh3 Mesh, IEnumerable<int> triangles, bool bRemoveIsolatedVerts = true) Parameters Type Name Description DMesh3 Mesh IEnumerable < Int32 > triangles Boolean bRemoveIsolatedVerts Returns Type Description Boolean RemoveTriangles(DMesh3, IList<Int32>, Boolean) Declaration public static bool RemoveTriangles(DMesh3 Mesh, IList<int> triangles, bool bRemoveIsolatedVerts = true) Parameters Type Name Description DMesh3 Mesh IList < Int32 > triangles Boolean bRemoveIsolatedVerts Returns Type Description Boolean RemoveTriangles(IEnumerable<Int32>, Boolean) Declaration public bool RemoveTriangles(IEnumerable<int> triangles, bool bRemoveIsolatedVerts) Parameters Type Name Description IEnumerable < Int32 > triangles Boolean bRemoveIsolatedVerts Returns Type Description Boolean RemoveTriangles(IList<Int32>, Boolean) Declaration public bool RemoveTriangles(IList<int> triangles, bool bRemoveIsolatedVerts) Parameters Type Name Description IList < Int32 > triangles Boolean bRemoveIsolatedVerts Returns Type Description Boolean RemoveTriangles(Func<Int32, Boolean>, Boolean) Declaration public bool RemoveTriangles(Func<int, bool> selectorF, bool bRemoveIsolatedVerts) Parameters Type Name Description Func < Int32 , Boolean > selectorF Boolean bRemoveIsolatedVerts Returns Type Description Boolean RemoveUnusedVertices() Remove any unused vertices in mesh, ie vertices with no edges. Returns number of removed vertices. Declaration public int RemoveUnusedVertices() Returns Type Description Int32 RemoveUnusedVertices(DMesh3) Declaration public static int RemoveUnusedVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description Int32 ReverseTriangles(IEnumerable<Int32>, Boolean) Reverse face orientation on a subset of triangles Declaration public void ReverseTriangles(IEnumerable<int> triangles, bool bFlipVtxNormals = true) Parameters Type Name Description IEnumerable < Int32 > triangles Boolean bFlipVtxNormals SeparateTriangles(IEnumerable<Int32>, Boolean, out List<Index2i>) Disconnect the given triangles from their neighbours, by duplicating \"boundary\" vertices, ie vertices on edges for which one triangle is in-set and the other is not. If bComputeEdgePairs is true, we return list of old/new edge pairs (useful for stitching) [TODO] currently boundary-edge behaviour is to not duplicate boundary verts Declaration public bool SeparateTriangles(IEnumerable<int> triangles, bool bComputeEdgePairs, out List<Index2i> EdgePairs) Parameters Type Name Description IEnumerable < Int32 > triangles Boolean bComputeEdgePairs List < Index2i > EdgePairs Returns Type Description Boolean StitchLoop(Int32[], Int32[], Int32) Trivial back-and-forth stitch between two vertex loops with same length. Loops must have appropriate orientation (which is...??) [TODO] check and fail on bad orientation Declaration public virtual int[] StitchLoop(int[] vloop1, int[] vloop2, int group_id = -1) Parameters Type Name Description Int32 [] vloop1 Int32 [] vloop2 Int32 group_id Returns Type Description Int32 [] StitchSpan(IList<Int32>, IList<Int32>, Int32) Trivial back-and-forth stitch between two vertex spans with same length. vertex ordering must reslut in appropriate orientation (which is...??) [TODO] check and fail on bad orientation Declaration public virtual int[] StitchSpan(IList<int> vspan1, IList<int> vspan2, int group_id = -1) Parameters Type Name Description IList < Int32 > vspan1 IList < Int32 > vspan2 Int32 group_id Returns Type Description Int32 [] StitchUnorderedEdges(List<Index2i>, Int32, Boolean) Declaration public virtual int[] StitchUnorderedEdges(List<Index2i> EdgePairs, int group_id = -1, bool bAbortOnFailure = true) Parameters Type Name Description List < Index2i > EdgePairs Int32 group_id Boolean bAbortOnFailure Returns Type Description Int32 [] StitchUnorderedEdges(List<Index2i>, Int32, Boolean, out Boolean) Stitch two sets of boundary edges that are provided as unordered pairs of edges, by adding triangulated quads between each edge pair. If bAbortOnFailure==true and a failure is encountered during stitching, the triangles added up to that point are removed. If bAbortOnFailure==false, failures are ignored and the returned triangle list may contain invalid values! Declaration public virtual int[] StitchUnorderedEdges(List<Index2i> EdgePairs, int group_id, bool bAbortOnFailure, out bool stitch_incomplete) Parameters Type Name Description List < Index2i > EdgePairs Int32 group_id Boolean bAbortOnFailure Boolean stitch_incomplete Returns Type Description Int32 [] StitchVertexLoops_NearestV(Int32[], Int32[], Int32) Trivial back-and-forth stitch between two vertex loops with same length. If nearest vertices of input loops would not be matched, cycles loops so that this is the case. Loops must have appropriate orientation. Declaration public virtual int[] StitchVertexLoops_NearestV(int[] loop0, int[] loop1, int group_id = -1) Parameters Type Name Description Int32 [] loop0 Int32 [] loop1 Int32 group_id Returns Type Description Int32 []"
  },
  "api/g3.MeshExtrudeFaces.html": {
    "href": "api/g3.MeshExtrudeFaces.html",
    "title": "Class MeshExtrudeFaces | ViRGIS VR GIS",
    "keywords": "Class MeshExtrudeFaces Extrude a subset of faces of Mesh. Steps are: 1) separate subset from neighbouring triangles 2) offset them 3) connect original and offset edges (now boundary edges) with a triangle strip Caveats: not sure it works for multiple regions? boundary vertices are currently attached to offset region, rather than also duplicated and then connected w/ strip [TODO] implement this behavior Inheritance Object MeshExtrudeFaces Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshExtrudeFaces Constructors MeshExtrudeFaces(DMesh3, IEnumerable<Int32>) Declaration public MeshExtrudeFaces(DMesh3 mesh, IEnumerable<int> triangles) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles MeshExtrudeFaces(DMesh3, Int32[], Boolean) Declaration public MeshExtrudeFaces(DMesh3 mesh, int[] triangles, bool bForceCopyArray = false) Parameters Type Name Description DMesh3 mesh Int32 [] triangles Boolean bForceCopyArray Fields EdgePairs Declaration public List<Index2i> EdgePairs Field Value Type Description List < Index2i > ExtrudedPositionF Declaration public Func<Vector3d, Vector3f, int, Vector3d> ExtrudedPositionF Field Value Type Description Func < Vector3d , Vector3f , Int32 , Vector3d > ExtrudeVertices Declaration public MeshVertexSelection ExtrudeVertices Field Value Type Description MeshVertexSelection Group Declaration public SetGroupBehavior Group Field Value Type Description SetGroupBehavior JoinGroupID Declaration public int JoinGroupID Field Value Type Description Int32 JoinIncomplete Declaration public bool JoinIncomplete Field Value Type Description Boolean JoinTriangles Declaration public int[] JoinTriangles Field Value Type Description Int32 [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Triangles Declaration public int[] Triangles Field Value Type Description Int32 [] Methods Extrude() Apply the extrustion operation to input Mesh. Will return false if operation is not completed. However changes are not backed out, so if false is returned, input Mesh is in undefined state (generally means there are some holes) Declaration public virtual bool Extrude() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshExtrudeLoop.html": {
    "href": "api/g3.MeshExtrudeLoop.html",
    "title": "Class MeshExtrudeLoop | ViRGIS VR GIS",
    "keywords": "Class MeshExtrudeLoop Assumption is that Loop is a boundary loop on Mesh. Operation makes a duplicate loop of vertices, at location defind by PositionF, then stitches input and new loops together with a ring of triangles. Inheritance Object MeshExtrudeLoop Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshExtrudeLoop Constructors MeshExtrudeLoop(DMesh3, EdgeLoop) Declaration public MeshExtrudeLoop(DMesh3 mesh, EdgeLoop loop) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Fields Loop Declaration public EdgeLoop Loop Field Value Type Description EdgeLoop Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 NewLoop Declaration public EdgeLoop NewLoop Field Value Type Description EdgeLoop NewTriangles Declaration public int[] NewTriangles Field Value Type Description Int32 [] PositionF Declaration public Func<Vector3d, Vector3f, int, Vector3d> PositionF Field Value Type Description Func < Vector3d , Vector3f , Int32 , Vector3d > Methods Extrude(Int32) Declaration public virtual bool Extrude(int group_id = -1) Parameters Type Name Description Int32 group_id Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshExtrudeMesh.html": {
    "href": "api/g3.MeshExtrudeMesh.html",
    "title": "Class MeshExtrudeMesh | ViRGIS VR GIS",
    "keywords": "Class MeshExtrudeMesh Extrude all faces of a mesh, and stitch together any boundary loops. Steps are: 1) make a copy of all triangles in mesh 2) offset copy vertices 3) connect up loops with triangle strips Inheritance Object MeshExtrudeMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshExtrudeMesh Constructors MeshExtrudeMesh(DMesh3) Declaration public MeshExtrudeMesh(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields ExtrudedPositionF Declaration public Func<Vector3d, Vector3f, int, Vector3d> ExtrudedPositionF Field Value Type Description Func < Vector3d , Vector3f , Int32 , Vector3d > InitialLoops Declaration public MeshBoundaryLoops InitialLoops Field Value Type Description MeshBoundaryLoops InitialToOffsetMapV Declaration public IndexMap InitialToOffsetMapV Field Value Type Description IndexMap InitialTriangles Declaration public int[] InitialTriangles Field Value Type Description Int32 [] InitialVertices Declaration public int[] InitialVertices Field Value Type Description Int32 [] IsPositiveOffset Declaration public bool IsPositiveOffset Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 NewLoops Declaration public EdgeLoop[] NewLoops Field Value Type Description EdgeLoop [] OffsetGroup Declaration public SetGroupBehavior OffsetGroup Field Value Type Description SetGroupBehavior OffsetGroupID Declaration public int OffsetGroupID Field Value Type Description Int32 StitchGroupIDs Declaration public int[] StitchGroupIDs Field Value Type Description Int32 [] StitchGroups Declaration public SetGroupBehavior StitchGroups Field Value Type Description SetGroupBehavior StitchTriangles Declaration public int[][] StitchTriangles Field Value Type Description Int32 [][] Methods Extrude() Declaration public virtual bool Extrude() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshFaceSelection.html": {
    "href": "api/g3.MeshFaceSelection.html",
    "title": "Class MeshFaceSelection | ViRGIS VR GIS",
    "keywords": "Class MeshFaceSelection Inheritance Object MeshFaceSelection Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshFaceSelection : IEnumerable<int>, IEnumerable Constructors MeshFaceSelection(DMesh3) Declaration public MeshFaceSelection(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh MeshFaceSelection(DMesh3, MeshVertexSelection, Int32) Declaration public MeshFaceSelection(DMesh3 mesh, MeshVertexSelection convertV, int minCount = 3) Parameters Type Name Description DMesh3 mesh MeshVertexSelection convertV Int32 minCount MeshFaceSelection(DMesh3, Int32) Declaration public MeshFaceSelection(DMesh3 mesh, int group_id) Parameters Type Name Description DMesh3 mesh Int32 group_id MeshFaceSelection(MeshFaceSelection) Declaration public MeshFaceSelection(MeshFaceSelection copy) Parameters Type Name Description MeshFaceSelection copy Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties Bitmap Declaration protected BitArray Bitmap { get; } Property Value Type Description BitArray Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ClipFins(Boolean) Declaration public bool ClipFins(bool bClipLoners) Parameters Type Name Description Boolean bClipLoners Returns Type Description Boolean ContractBorderByOneRingNeighbours() remove all triangles in vertex one-rings of current selection to set. On a large mesh this is quite expensive as we don't know the boundary, so we have to iterate over all triangles. Return false from FilterF to prevent triangles from being deselected. Declaration public void ContractBorderByOneRingNeighbours() Deselect(IEnumerable<Int32>) Declaration public void Deselect(IEnumerable<int> triangles) Parameters Type Name Description IEnumerable < Int32 > triangles Deselect(Int32) Declaration public void Deselect(int tid) Parameters Type Name Description Int32 tid Deselect(Int32[]) Declaration public void Deselect(int[] triangles) Parameters Type Name Description Int32 [] triangles DeselectAll() Declaration public void DeselectAll() DeselectGroup(Int32) Declaration public void DeselectGroup(int gid) Parameters Type Name Description Int32 gid ExpandToFaceNeighbours(Func<Int32, Boolean>) Declaration public void ExpandToFaceNeighbours(Func<int, bool> FilterF = null) Parameters Type Name Description Func < Int32 , Boolean > FilterF ExpandToFaceNeighbours(Int32, Func<Int32, Boolean>) Declaration public void ExpandToFaceNeighbours(int rounds, Func<int, bool> FilterF = null) Parameters Type Name Description Int32 rounds Func < Int32 , Boolean > FilterF ExpandToOneRingNeighbours(Func<Int32, Boolean>) Add all triangles in vertex one-rings of current selection to set. On a large mesh this is quite expensive as we don't know the boundary, so we have to iterate over all triangles. Return false from FilterF to prevent triangles from being included. Declaration public void ExpandToOneRingNeighbours(Func<int, bool> FilterF = null) Parameters Type Name Description Func < Int32 , Boolean > FilterF ExpandToOneRingNeighbours(Int32, Func<Int32, Boolean>) Expand selection by N vertex one-rings. This is significantly faster than calling ExpandToOnering() multiple times, because we can track the growing front and only check the new triangles. Return false from FilterF to prevent triangles from being included. Declaration public void ExpandToOneRingNeighbours(int nRings, Func<int, bool> FilterF = null) Parameters Type Name Description Int32 nRings Func < Int32 , Boolean > FilterF FillEars(Boolean) Declaration public bool FillEars(bool bFillTinyHoles) Parameters Type Name Description Boolean bFillTinyHoles Returns Type Description Boolean FindBorderTris() find set of tris just inside border of selection Declaration public List<int> FindBorderTris() Returns Type Description List < Int32 > FindNeighbourTris() find set of tris just outside border of selection Declaration public List<int> FindNeighbourTris() Returns Type Description List < Int32 > FloodFill(Int32, Func<Int32, Boolean>, Func<Int32, Boolean>) Grow selection outwards from seed triangle, until it hits boundaries defined by triangle and edge filters. Edge filter is not effective unless it (possibly combined w/ triangle filter) defines closed loops. Declaration public void FloodFill(int tSeed, Func<int, bool> TriFilterF = null, Func<int, bool> EdgeFilterF = null) Parameters Type Name Description Int32 tSeed Func < Int32 , Boolean > TriFilterF Func < Int32 , Boolean > EdgeFilterF FloodFill(Int32[], Func<Int32, Boolean>, Func<Int32, Boolean>) Grow selection outwards from seed triangles, until it hits boundaries defined by triangle and edge filters. Edge filter is not effective unless it (possibly combined w/ triangle filter) defines closed loops. Declaration public void FloodFill(int[] Seeds, Func<int, bool> TriFilterF = null, Func<int, bool> EdgeFilterF = null) Parameters Type Name Description Int32 [] Seeds Func < Int32 , Boolean > TriFilterF Func < Int32 , Boolean > EdgeFilterF GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > IsSelected(Int32) Declaration public bool IsSelected(int tid) Parameters Type Name Description Int32 tid Returns Type Description Boolean LocalOptimize(Boolean) Declaration public bool LocalOptimize(bool bRemoveBowties = true) Parameters Type Name Description Boolean bRemoveBowties Returns Type Description Boolean LocalOptimize(Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public bool LocalOptimize(bool bClipFins, bool bFillEars, bool bFillTinyHoles = true, bool bClipLoners = true, bool bRemoveBowties = false) Parameters Type Name Description Boolean bClipFins Boolean bFillEars Boolean bFillTinyHoles Boolean bClipLoners Boolean bRemoveBowties Returns Type Description Boolean remove_bowties(HashSet<Int32>) Declaration public bool remove_bowties(HashSet<int> tempHash) Parameters Type Name Description HashSet < Int32 > tempHash Returns Type Description Boolean RemoveBowties() Find any \"bowtie\" vertices - ie vertex v such taht there is multiple spans of triangles selected in v's triangle one-ring - and deselect those one-rings. Returns true if selection was modified. Declaration public bool RemoveBowties() Returns Type Description Boolean Select(IEnumerable<Int32>) Declaration public void Select(IEnumerable<int> triangles) Parameters Type Name Description IEnumerable < Int32 > triangles Select(List<Int32>) Declaration public void Select(List<int> triangles) Parameters Type Name Description List < Int32 > triangles Select(Func<Int32, Boolean>) Declaration public void Select(Func<int, bool> selectF) Parameters Type Name Description Func < Int32 , Boolean > selectF Select(Int32) Declaration public void Select(int tid) Parameters Type Name Description Int32 tid Select(Int32[]) Declaration public void Select(int[] triangles) Parameters Type Name Description Int32 [] triangles SelectEdgeTris(Int32) Declaration public void SelectEdgeTris(int eid) Parameters Type Name Description Int32 eid SelectGroup(Int32) Declaration public void SelectGroup(int gid) Parameters Type Name Description Int32 gid SelectGroupInverse(Int32) Declaration public void SelectGroupInverse(int gid) Parameters Type Name Description Int32 gid SelectVertexOneRing(Int32) Declaration public void SelectVertexOneRing(int vid) Parameters Type Name Description Int32 vid SelectVertexOneRings(IEnumerable<Int32>) Declaration public void SelectVertexOneRings(IEnumerable<int> vertices) Parameters Type Name Description IEnumerable < Int32 > vertices SelectVertexOneRings(Int32[]) Declaration public void SelectVertexOneRings(int[] vertices) Parameters Type Name Description Int32 [] vertices ToArray() Declaration public int[] ToArray() Returns Type Description Int32 [] Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshFacesFromLoop.html": {
    "href": "api/g3.MeshFacesFromLoop.html",
    "title": "Class MeshFacesFromLoop | ViRGIS VR GIS",
    "keywords": "Class MeshFacesFromLoop Find mesh triangles enclosed by a curve embedded in the mesh If a seed triangle in the enclosed region is not provided, then the smaller of the two largest connected-components is chosen as the \"inside\". Inheritance Object MeshFacesFromLoop Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshFacesFromLoop Constructors MeshFacesFromLoop(DMesh3, DCurve3, ISpatial) Declaration public MeshFacesFromLoop(DMesh3 Mesh, DCurve3 SpaceCurve, ISpatial Spatial) Parameters Type Name Description DMesh3 Mesh DCurve3 SpaceCurve ISpatial Spatial MeshFacesFromLoop(DMesh3, DCurve3, ISpatial, Int32) Declaration public MeshFacesFromLoop(DMesh3 Mesh, DCurve3 SpaceCurve, ISpatial Spatial, int tSeed) Parameters Type Name Description DMesh3 Mesh DCurve3 SpaceCurve ISpatial Spatial Int32 tSeed Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties InteriorTriangles Declaration public IList<int> InteriorTriangles { get; } Property Value Type Description IList < Int32 > PathTriangles Declaration public IList<int> PathTriangles { get; } Property Value Type Description IList < Int32 > Methods ToArray() returns new array containing selected triangles Declaration public int[] ToArray() Returns Type Description Int32 [] ToSelection() Declaration public MeshFaceSelection ToSelection() Returns Type Description MeshFaceSelection"
  },
  "api/g3.MeshFormatReader.html": {
    "href": "api/g3.MeshFormatReader.html",
    "title": "Interface MeshFormatReader | ViRGIS VR GIS",
    "keywords": "Interface MeshFormatReader Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface MeshFormatReader Properties SupportedExtensions Declaration List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler warnings) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler warnings Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler warnings) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler warnings Returns Type Description IOReadResult"
  },
  "api/g3.MeshGenerator.CircularSection.html": {
    "href": "api/g3.MeshGenerator.CircularSection.html",
    "title": "Struct MeshGenerator.CircularSection | ViRGIS VR GIS",
    "keywords": "Struct MeshGenerator.CircularSection Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct CircularSection Constructors CircularSection(Single, Single) Declaration public CircularSection(float r, float y) Parameters Type Name Description Single r Single y Fields Radius Declaration public float Radius Field Value Type Description Single SectionY Declaration public float SectionY Field Value Type Description Single"
  },
  "api/g3.MeshGenerator.html": {
    "href": "api/g3.MeshGenerator.html",
    "title": "Class MeshGenerator | ViRGIS VR GIS",
    "keywords": "Class MeshGenerator Inheritance Object MeshGenerator CappedCylinderGenerator ConeGenerator Curve3Axis3RevolveGenerator Curve3Curve3RevolveGenerator GridBox3Generator OpenCylinderGenerator PointSplatsGenerator PuncturedDiscGenerator RoundRectGenerator TriangulatedPolygonGenerator TrivialBox3Generator TrivialDiscGenerator TrivialRectGenerator TubeGenerator VerticalGeneralizedCylinderGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class MeshGenerator Fields Clockwise Declaration public bool Clockwise Field Value Type Description Boolean groups Declaration public int[] groups Field Value Type Description Int32 [] normals Declaration public VectorArray3f normals Field Value Type Description VectorArray3f triangles Declaration public IndexArray3i triangles Field Value Type Description IndexArray3i uv Declaration public VectorArray2f uv Field Value Type Description VectorArray2f vertices Declaration public VectorArray3d vertices Field Value Type Description VectorArray3d WantGroups Declaration public bool WantGroups Field Value Type Description Boolean WantNormals Declaration public bool WantNormals Field Value Type Description Boolean WantUVs Declaration public bool WantUVs Field Value Type Description Boolean Methods append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, ref Int32, ref Int32, Int32, Double) Declaration protected void append_2d_disc_segment(int iCenter, int iEnd1, int iEnd2, int nSteps, bool bCycle, ref int vtx_counter, ref int tri_counter, int groupid = -1, double force_r = 0) Parameters Type Name Description Int32 iCenter Int32 iEnd1 Int32 iEnd2 Int32 nSteps Boolean bCycle Int32 vtx_counter Int32 tri_counter Int32 groupid Double force_r append_disc(Int32, Int32, Int32, Boolean, Boolean, ref Int32, Int32) Declaration protected void append_disc(int Slices, int nCenterV, int nRingStart, bool bClosed, bool bCycle, ref int tri_counter, int groupid = -1) Parameters Type Name Description Int32 Slices Int32 nCenterV Int32 nRingStart Boolean bClosed Boolean bCycle Int32 tri_counter Int32 groupid append_rectangle(Int32, Int32, Int32, Int32, Boolean, ref Int32, Int32) Declaration protected void append_rectangle(int v0, int v1, int v2, int v3, bool bCycle, ref int tri_counter, int groupid = -1) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Int32 v3 Boolean bCycle Int32 tri_counter Int32 groupid bilerp(ref Vector2d, ref Vector2d, ref Vector2d, ref Vector2d, Double, Double) Declaration protected Vector2d bilerp(ref Vector2d v00, ref Vector2d v10, ref Vector2d v11, ref Vector2d v01, double tx, double ty) Parameters Type Name Description Vector2d v00 Vector2d v10 Vector2d v11 Vector2d v01 Double tx Double ty Returns Type Description Vector2d bilerp(ref Vector2f, ref Vector2f, ref Vector2f, ref Vector2f, Single, Single) Declaration protected Vector2f bilerp(ref Vector2f v00, ref Vector2f v10, ref Vector2f v11, ref Vector2f v01, float tx, float ty) Parameters Type Name Description Vector2f v00 Vector2f v10 Vector2f v11 Vector2f v01 Single tx Single ty Returns Type Description Vector2f bilerp(ref Vector3d, ref Vector3d, ref Vector3d, ref Vector3d, Double, Double) Declaration protected Vector3d bilerp(ref Vector3d v00, ref Vector3d v10, ref Vector3d v11, ref Vector3d v01, double tx, double ty) Parameters Type Name Description Vector3d v00 Vector3d v10 Vector3d v11 Vector3d v01 Double tx Double ty Returns Type Description Vector3d bilerp(ref Vector3i, ref Vector3i, ref Vector3i, ref Vector3i, Double, Double) Declaration protected Vector3i bilerp(ref Vector3i v00, ref Vector3i v10, ref Vector3i v11, ref Vector3i v01, double tx, double ty) Parameters Type Name Description Vector3i v00 Vector3i v10 Vector3i v11 Vector3i v01 Double tx Double ty Returns Type Description Vector3i duplicate_vertex_span(Int32, Int32) Declaration protected void duplicate_vertex_span(int nStart, int nCount) Parameters Type Name Description Int32 nStart Int32 nCount estimate_normal(Int32, Int32, Int32) Declaration protected Vector3f estimate_normal(int v0, int v1, int v2) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Returns Type Description Vector3f Generate() Declaration public abstract MeshGenerator Generate() Returns Type Description MeshGenerator lerp(ref Vector3i, ref Vector3i, Double) Declaration protected Vector3i lerp(ref Vector3i a, ref Vector3i b, double t) Parameters Type Name Description Vector3i a Vector3i b Double t Returns Type Description Vector3i MakeDMesh() Declaration public virtual DMesh3 MakeDMesh() Returns Type Description DMesh3 MakeMesh(DMesh3) Declaration public virtual void MakeMesh(DMesh3 m) Parameters Type Name Description DMesh3 m MakeMesh(NTMesh3) Declaration public virtual void MakeMesh(NTMesh3 m) Parameters Type Name Description NTMesh3 m MakeMesh(SimpleMesh) Declaration public virtual void MakeMesh(SimpleMesh m) Parameters Type Name Description SimpleMesh m MakeNTMesh() Declaration public virtual NTMesh3 MakeNTMesh() Returns Type Description NTMesh3 MakeSimpleMesh() Declaration public virtual SimpleMesh MakeSimpleMesh() Returns Type Description SimpleMesh"
  },
  "api/g3.MeshHints.html": {
    "href": "api/g3.MeshHints.html",
    "title": "Enum MeshHints | ViRGIS VR GIS",
    "keywords": "Enum MeshHints Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum MeshHints Fields Name Description IsCompact None"
  },
  "api/g3.MeshICP.html": {
    "href": "api/g3.MeshICP.html",
    "title": "Class MeshICP | ViRGIS VR GIS",
    "keywords": "Class MeshICP Inheritance Object MeshICP Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshICP Constructors MeshICP(IPointSet, DMeshAABBTree3) Declaration public MeshICP(IPointSet source, DMeshAABBTree3 target) Parameters Type Name Description IPointSet source DMeshAABBTree3 target Fields Converged Declaration public bool Converged Field Value Type Description Boolean ConvergeTolerance Declaration public double ConvergeTolerance Field Value Type Description Double MaxAllowableDistance Declaration public double MaxAllowableDistance Field Value Type Description Double MaxIterations Declaration public int MaxIterations Field Value Type Description Int32 Rotation Declaration public Quaterniond Rotation Field Value Type Description Quaterniond Source Declaration public IPointSet Source Field Value Type Description IPointSet TargetSurface Declaration public DMeshAABBTree3 TargetSurface Field Value Type Description DMeshAABBTree3 Translation Declaration public Vector3d Translation Field Value Type Description Vector3d UseNormals Declaration public bool UseNormals Field Value Type Description Boolean VerboseF Declaration public Action<string> VerboseF Field Value Type Description Action < String > Properties Error returns last measured deviation error metric (currently mean distance) Declaration public double Error { get; } Property Value Type Description Double Methods Solve(Boolean) Solve MaxIterations steps, or until convergence. If bUpdate = true, will improve on previous solution. Declaration public void Solve(bool bUpdate = false) Parameters Type Name Description Boolean bUpdate UpdateVertices(IDeformableMesh) Transfer new vertex positions to target Declaration public void UpdateVertices(IDeformableMesh target) Parameters Type Name Description IDeformableMesh target"
  },
  "api/g3.MeshIndexUtil.html": {
    "href": "api/g3.MeshIndexUtil.html",
    "title": "Class MeshIndexUtil | ViRGIS VR GIS",
    "keywords": "Class MeshIndexUtil Utility functions for manipulating sets/lists of mesh indices Inheritance Object MeshIndexUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshIndexUtil Methods MapEdgesViaVertexMap(IIndexMap, DMesh3, DMesh3, List<Int32>) given list of edges of MeshA, and vertex map from A to B, map to list of edges on B Declaration public static List<int> MapEdgesViaVertexMap(IIndexMap AtoBV, DMesh3 MeshA, DMesh3 MeshB, List<int> edges) Parameters Type Name Description IIndexMap AtoBV DMesh3 MeshA DMesh3 MeshB List < Int32 > edges Returns Type Description List < Int32 > MapLoopViaVertexMap(IIndexMap, DMesh3, DMesh3, EdgeLoop) given EdgeLoop on MeshA, and vertex map from A to B, map to EdgeLoop on B Declaration public static EdgeLoop MapLoopViaVertexMap(IIndexMap AtoBV, DMesh3 MeshA, DMesh3 MeshB, EdgeLoop loopIn) Parameters Type Name Description IIndexMap AtoBV DMesh3 MeshA DMesh3 MeshB EdgeLoop loopIn Returns Type Description EdgeLoop"
  },
  "api/g3.MeshInsertPolygon.html": {
    "href": "api/g3.MeshInsertPolygon.html",
    "title": "Class MeshInsertPolygon | ViRGIS VR GIS",
    "keywords": "Class MeshInsertPolygon Insert Polygon into Mesh. Assumption is that Mesh has 3D coordinates (u,v,0). This is basically a helper/wrapper around MeshInsertUVPolyCurve. Inserted edge set is avaliable as .InsertedPolygonEdges, and triangles inside polygon as .InteriorTriangles Inheritance Object MeshInsertPolygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshInsertPolygon Fields HoleInserts Declaration public List<MeshInsertUVPolyCurve> HoleInserts Field Value Type Description List < MeshInsertUVPolyCurve > InsertedPolygonEdges Declaration public HashSet<int> InsertedPolygonEdges Field Value Type Description HashSet < Int32 > InteriorTriangles Declaration public MeshFaceSelection InteriorTriangles Field Value Type Description MeshFaceSelection Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OuterInsert Declaration public MeshInsertUVPolyCurve OuterInsert Field Value Type Description MeshInsertUVPolyCurve Polygon Declaration public GeneralPolygon2d Polygon Field Value Type Description GeneralPolygon2d SimplifyInsertion Declaration public bool SimplifyInsertion Field Value Type Description Boolean Methods Insert() Declaration public bool Insert() Returns Type Description Boolean"
  },
  "api/g3.MeshInsertUVPolyCurve.html": {
    "href": "api/g3.MeshInsertUVPolyCurve.html",
    "title": "Class MeshInsertUVPolyCurve | ViRGIS VR GIS",
    "keywords": "Class MeshInsertUVPolyCurve Cut mesh with a path of 2D line segments Assumptions: mesh vertex x/y coordinates are 2D coordinates we want to use. Replace PointF if this is not the case. segments of Curve lie entirely within UV-triangles Limitations: currently not robust to near-parallel line segments that are within epsilon-band of the input loop. In this case, we will include all such segments in the 'cut' set, but we will probably not be able to find a connected path through them. not robust to degenerate geometry. Strongly recommend that you use Validate() and/or preprocess the input mesh to remove degenerate faces/edges Inheritance Object MeshInsertUVPolyCurve Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshInsertUVPolyCurve Constructors MeshInsertUVPolyCurve(DMesh3, Polygon2d) Declaration public MeshInsertUVPolyCurve(DMesh3 mesh, Polygon2d loop) Parameters Type Name Description DMesh3 mesh Polygon2d loop MeshInsertUVPolyCurve(DMesh3, PolyLine2d) Declaration public MeshInsertUVPolyCurve(DMesh3 mesh, PolyLine2d path) Parameters Type Name Description DMesh3 mesh PolyLine2d path MeshInsertUVPolyCurve(DMesh3, PolyLine2d, Boolean) Declaration public MeshInsertUVPolyCurve(DMesh3 mesh, PolyLine2d curve, bool isLoop = false) Parameters Type Name Description DMesh3 mesh PolyLine2d curve Boolean isLoop Fields Curve Declaration public PolyLine2d Curve Field Value Type Description PolyLine2d CurveVertices Declaration public int[] CurveVertices Field Value Type Description Int32 [] EnableCutSpansAndLoops Declaration public bool EnableCutSpansAndLoops Field Value Type Description Boolean IsLoop Declaration public bool IsLoop Field Value Type Description Boolean Loops Declaration public List<EdgeLoop> Loops Field Value Type Description List < EdgeLoop > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OnCutEdges Declaration public HashSet<int> OnCutEdges Field Value Type Description HashSet < Int32 > PointF Declaration public Func<int, Vector2d> PointF Field Value Type Description Func < Int32 , Vector2d > SetPointF Declaration public Action<int, Vector2d> SetPointF Field Value Type Description Action < Int32 , Vector2d > Spans Declaration public List<EdgeSpan> Spans Field Value Type Description List < EdgeSpan > SpatialEpsilon Declaration public double SpatialEpsilon Field Value Type Description Double UseTriSpatial Declaration public bool UseTriSpatial Field Value Type Description Boolean Methods Apply() Declaration public virtual bool Apply() Returns Type Description Boolean Simplify() Generally after calling Apply(), we have over-triangulated the mesh, because we have split the original edges multiple times, etc. This function will walk the edges and collapse the unnecessary edges/vertices along the inserted loops. Declaration public void Simplify() Validate(Double) Declaration public virtual ValidationStatus Validate(double fDegenerateTol = 9.9999999747524271E-07) Parameters Type Name Description Double fDegenerateTol Returns Type Description ValidationStatus"
  },
  "api/g3.MeshIOUtil.html": {
    "href": "api/g3.MeshIOUtil.html",
    "title": "Class MeshIOUtil | ViRGIS VR GIS",
    "keywords": "Class MeshIOUtil Inheritance Object MeshIOUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshIOUtil Methods FindUniqueMaterialList(List<WriteMesh>) Declaration public static List<GenericMaterial> FindUniqueMaterialList(List<WriteMesh> meshes) Parameters Type Name Description List < WriteMesh > meshes Returns Type Description List < GenericMaterial >"
  },
  "api/g3.MeshIsoCurves.GraphEdgeInfo.html": {
    "href": "api/g3.MeshIsoCurves.GraphEdgeInfo.html",
    "title": "Struct MeshIsoCurves.GraphEdgeInfo | ViRGIS VR GIS",
    "keywords": "Struct MeshIsoCurves.GraphEdgeInfo Information about edge of the computed Graph. mesh_tri is triangle ID of crossed triangle mesh_edges depends on case. EdgeEdge is [edgeid,edgeid], EdgeVertex is [edgeid,vertexid], and OnEdge is [edgeid,-1] Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct GraphEdgeInfo Fields caseType Declaration public MeshIsoCurves.TriangleCase caseType Field Value Type Description MeshIsoCurves.TriangleCase mesh_edges Declaration public Index2i mesh_edges Field Value Type Description Index2i mesh_tri Declaration public int mesh_tri Field Value Type Description Int32 order Declaration public Index2i order Field Value Type Description Index2i"
  },
  "api/g3.MeshIsoCurves.html": {
    "href": "api/g3.MeshIsoCurves.html",
    "title": "Class MeshIsoCurves | ViRGIS VR GIS",
    "keywords": "Class MeshIsoCurves Inheritance Object MeshIsoCurves Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshIsoCurves Constructors MeshIsoCurves(DMesh3, Func<Vector3d, Double>) Declaration public MeshIsoCurves(DMesh3 mesh, Func<Vector3d, double> valueF) Parameters Type Name Description DMesh3 mesh Func < Vector3d , Double > valueF Fields Graph Declaration public DGraph3 Graph Field Value Type Description DGraph3 GraphEdges Declaration public DVector<MeshIsoCurves.GraphEdgeInfo> GraphEdges Field Value Type Description DVector < MeshIsoCurves.GraphEdgeInfo > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 PrecomputeVertexValues If true, then we internally precompute vertex values. THIS COMPUTATION IS MULTI-THREADED Declaration public bool PrecomputeVertexValues Field Value Type Description Boolean RootMode Which rootfinding method will be used to converge on surface along edges Declaration public MeshIsoCurves.RootfindingModes RootMode Field Value Type Description MeshIsoCurves.RootfindingModes RootModeSteps number of iterations of rootfinding method (ignored for SingleLerp) Declaration public int RootModeSteps Field Value Type Description Int32 ValueF Declaration public Func<Vector3d, double> ValueF Field Value Type Description Func < Vector3d , Double > VertexValueF Optional - provide value at vertex (which may be precomputed) Declaration public Func<int, double> VertexValueF Field Value Type Description Func < Int32 , Double > WantGraphEdgeInfo Declaration public bool WantGraphEdgeInfo Field Value Type Description Boolean Methods Compute() Declaration public void Compute() Compute(IEnumerable<Int32>) Declaration public void Compute(IEnumerable<int> Triangles) Parameters Type Name Description IEnumerable < Int32 > Triangles compute_full(IEnumerable<Int32>, Boolean) Declaration protected void compute_full(IEnumerable<int> Triangles, bool bIsFullMeshHint = false) Parameters Type Name Description IEnumerable < Int32 > Triangles Boolean bIsFullMeshHint ShouldReverseGraphEdge(Int32) DGraph3 edges are not oriented, which means they cannot inherit orientation from mesh. This function returns true if, for a given graph_eid, the vertex pair returned by Graph.GetEdgeV(graph_eid) should be reversed to be consistent with mesh orientation. Mainly inteded to be passed to DGraph3Util.ExtractCurves Declaration public bool ShouldReverseGraphEdge(int graph_eid) Parameters Type Name Description Int32 graph_eid Returns Type Description Boolean SplitAtIsoCrossings(Double) Split the mesh edges at the iso-crossings, unless edge is shorter than min_len, or inserted point would be within min_len or vertex [TODO] do we want to return any info here?? Declaration public void SplitAtIsoCrossings(double min_len = 0) Parameters Type Name Description Double min_len"
  },
  "api/g3.MeshIsoCurves.RootfindingModes.html": {
    "href": "api/g3.MeshIsoCurves.RootfindingModes.html",
    "title": "Enum MeshIsoCurves.RootfindingModes | ViRGIS VR GIS",
    "keywords": "Enum MeshIsoCurves.RootfindingModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum RootfindingModes Fields Name Description Bisection LerpSteps SingleLerp"
  },
  "api/g3.MeshIsoCurves.TriangleCase.html": {
    "href": "api/g3.MeshIsoCurves.TriangleCase.html",
    "title": "Enum MeshIsoCurves.TriangleCase | ViRGIS VR GIS",
    "keywords": "Enum MeshIsoCurves.TriangleCase Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum TriangleCase Fields Name Description EdgeEdge EdgeVertex OnEdge"
  },
  "api/g3.MeshIterativeSmooth.html": {
    "href": "api/g3.MeshIterativeSmooth.html",
    "title": "Class MeshIterativeSmooth | ViRGIS VR GIS",
    "keywords": "Class MeshIterativeSmooth Inheritance Object MeshIterativeSmooth Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshIterativeSmooth Constructors MeshIterativeSmooth(DMesh3, Int32[], Boolean) Declaration public MeshIterativeSmooth(DMesh3 mesh, int[] vertices, bool bOwnVertices = false) Parameters Type Name Description DMesh3 mesh Int32 [] vertices Boolean bOwnVertices Fields Alpha Declaration public double Alpha Field Value Type Description Double Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ProjectF Declaration public Func<Vector3d, Vector3f, int, Vector3d> ProjectF Field Value Type Description Func < Vector3d , Vector3f , Int32 , Vector3d > Rounds Declaration public int Rounds Field Value Type Description Int32 SmoothType Declaration public MeshIterativeSmooth.SmoothTypes SmoothType Field Value Type Description MeshIterativeSmooth.SmoothTypes Vertices Declaration public int[] Vertices Field Value Type Description Int32 [] Methods Smooth() Declaration public virtual bool Smooth() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshIterativeSmooth.SmoothTypes.html": {
    "href": "api/g3.MeshIterativeSmooth.SmoothTypes.html",
    "title": "Enum MeshIterativeSmooth.SmoothTypes | ViRGIS VR GIS",
    "keywords": "Enum MeshIterativeSmooth.SmoothTypes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum SmoothTypes Fields Name Description Cotan MeanValue Uniform"
  },
  "api/g3.MeshIterators.html": {
    "href": "api/g3.MeshIterators.html",
    "title": "Class MeshIterators | ViRGIS VR GIS",
    "keywords": "Class MeshIterators Inheritance Object MeshIterators Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshIterators Methods BoundaryEdges(DMesh3) Declaration public static IEnumerable<int> BoundaryEdges(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > BoundaryEdgeVertices(DMesh3) boundary vertices of mesh, but based on edges, so returns each vertex twice! Declaration public static IEnumerable<int> BoundaryEdgeVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > BoundaryVertices(DMesh3) Boundary vertices of mesh Declaration public static IEnumerable<int> BoundaryVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > BowtieVertices(DMesh3) Declaration public static IEnumerable<int> BowtieVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > FilteredEdges(DMesh3, Func<DMesh3, Int32, Boolean>) Declaration public static IEnumerable<int> FilteredEdges(DMesh3 mesh, Func<DMesh3, int, bool> FilterF) Parameters Type Name Description DMesh3 mesh Func < DMesh3 , Int32 , Boolean > FilterF Returns Type Description IEnumerable < Int32 > FilteredTriangles(DMesh3, Func<DMesh3, Int32, Boolean>) Declaration public static IEnumerable<int> FilteredTriangles(DMesh3 mesh, Func<DMesh3, int, bool> FilterF) Parameters Type Name Description DMesh3 mesh Func < DMesh3 , Int32 , Boolean > FilterF Returns Type Description IEnumerable < Int32 > FilteredVertices(DMesh3, Func<DMesh3, Int32, Boolean>) Declaration public static IEnumerable<int> FilteredVertices(DMesh3 mesh, Func<DMesh3, int, bool> FilterF) Parameters Type Name Description DMesh3 mesh Func < DMesh3 , Int32 , Boolean > FilterF Returns Type Description IEnumerable < Int32 > GroupBoundaryEdges(DMesh3) Declaration public static IEnumerable<int> GroupBoundaryEdges(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > GroupBoundaryVertices(DMesh3) Declaration public static IEnumerable<int> GroupBoundaryVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > GroupJunctionVertices(DMesh3) Declaration public static IEnumerable<int> GroupJunctionVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > InteriorEdges(DMesh3) Declaration public static IEnumerable<int> InteriorEdges(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 > InteriorVertices(DMesh3) Declaration public static IEnumerable<int> InteriorVertices(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description IEnumerable < Int32 >"
  },
  "api/g3.MeshLocalParam.html": {
    "href": "api/g3.MeshLocalParam.html",
    "title": "Class MeshLocalParam | ViRGIS VR GIS",
    "keywords": "Class MeshLocalParam Inheritance Object MeshLocalParam Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshLocalParam Constructors MeshLocalParam(Int32, Func<Int32, Vector3f>, Func<Int32, Vector3f>, Func<Int32, IEnumerable<Int32>>) Declaration public MeshLocalParam(int nMaxID, Func<int, Vector3f> nodePositionF, Func<int, Vector3f> nodeNormalF, Func<int, IEnumerable<int>> neighboursF) Parameters Type Name Description Int32 nMaxID Func < Int32 , Vector3f > nodePositionF Func < Int32 , Vector3f > nodeNormalF Func < Int32 , IEnumerable < Int32 >> neighboursF Fields InvalidUV Declaration public static readonly Vector2f InvalidUV Field Value Type Description Vector2f UVMode Declaration public MeshLocalParam.UVModes UVMode Field Value Type Description MeshLocalParam.UVModes Properties MaxGraphDistance Get the maximum distance encountered during the Compute() Declaration public float MaxGraphDistance { get; } Property Value Type Description Single MaxUVDistance Declaration public float MaxUVDistance { get; } Property Value Type Description Single Methods ApplyUVs(Action<Int32, Vector2f>) Declaration public void ApplyUVs(Action<int, Vector2f> applyF) Parameters Type Name Description Action < Int32 , Vector2f > applyF ComputeToMaxDistance(Frame3f, Index3i, Single) Compute distances that are less/equal to fMaxDistance from the seeds Terminates early, so Queue may not be empty Declaration public void ComputeToMaxDistance(Frame3f seedFrame, Index3i seedNbrs, float fMaxGraphDistance) Parameters Type Name Description Frame3f seedFrame Index3i seedNbrs Single fMaxGraphDistance GetUV(Int32) Get the computed uv at node id Declaration public Vector2f GetUV(int id) Parameters Type Name Description Int32 id Returns Type Description Vector2f Reset() Declaration public void Reset() TransformUV(Single, Vector2f) Declaration public void TransformUV(float fScale, Vector2f vTranslate) Parameters Type Name Description Single fScale Vector2f vTranslate"
  },
  "api/g3.MeshLocalParam.UVModes.html": {
    "href": "api/g3.MeshLocalParam.UVModes.html",
    "title": "Enum MeshLocalParam.UVModes | ViRGIS VR GIS",
    "keywords": "Enum MeshLocalParam.UVModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum UVModes Fields Name Description ExponentialMap ExponentialMap_UpwindAvg PlanarProjection"
  },
  "api/g3.MeshLoopClosure.html": {
    "href": "api/g3.MeshLoopClosure.html",
    "title": "Class MeshLoopClosure | ViRGIS VR GIS",
    "keywords": "Class MeshLoopClosure Inheritance Object MeshLoopClosure Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshLoopClosure Constructors MeshLoopClosure(DMesh3, EdgeLoop) Declaration public MeshLoopClosure(DMesh3 mesh, EdgeLoop border_loop) Parameters Type Name Description DMesh3 mesh EdgeLoop border_loop Fields ExtrudeGroup Declaration public int ExtrudeGroup Field Value Type Description Int32 FillGroup Declaration public int FillGroup Field Value Type Description Int32 FlatClosePlane Declaration public Frame3f FlatClosePlane Field Value Type Description Frame3f InitialBorderLoop Declaration public EdgeLoop InitialBorderLoop Field Value Type Description EdgeLoop Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 TargetEdgeLen Declaration public double TargetEdgeLen Field Value Type Description Double Methods cleanup_boundary(DMesh3, EdgeLoop, Double, out List<Int32>, Int32) Declaration public static void cleanup_boundary(DMesh3 mesh, EdgeLoop loop, double target_edge_len, out List<int> result_edges, int nRings = 3) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Double target_edge_len List < Int32 > result_edges Int32 nRings Close() Declaration public virtual bool Close() Returns Type Description Boolean Close_Flat() Declaration public void Close_Flat() smooth_loop(DMesh3, EdgeLoop, Int32) Declaration public static void smooth_loop(DMesh3 mesh, EdgeLoop loop, int nRings) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Int32 nRings smooth_region(DMesh3, IEnumerable<Int32>, Int32) Declaration public static void smooth_region(DMesh3 mesh, IEnumerable<int> vertices, int nRings) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > vertices Int32 nRings Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshLoopSmooth.html": {
    "href": "api/g3.MeshLoopSmooth.html",
    "title": "Class MeshLoopSmooth | ViRGIS VR GIS",
    "keywords": "Class MeshLoopSmooth Inheritance Object MeshLoopSmooth Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshLoopSmooth Constructors MeshLoopSmooth(DMesh3, EdgeLoop) Declaration public MeshLoopSmooth(DMesh3 mesh, EdgeLoop loop) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Fields Alpha Declaration public double Alpha Field Value Type Description Double Loop Declaration public EdgeLoop Loop Field Value Type Description EdgeLoop Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ProjectF Declaration public Func<Vector3d, int, Vector3d> ProjectF Field Value Type Description Func < Vector3d , Int32 , Vector3d > Rounds Declaration public int Rounds Field Value Type Description Int32 Methods Smooth() Declaration public virtual bool Smooth() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshMeasurements.GenusResult.html": {
    "href": "api/g3.MeshMeasurements.GenusResult.html",
    "title": "Struct MeshMeasurements.GenusResult | ViRGIS VR GIS",
    "keywords": "Struct MeshMeasurements.GenusResult Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct GenusResult Fields Genus Declaration public int Genus Field Value Type Description Int32 HasBoundary Declaration public bool HasBoundary Field Value Type Description Boolean HasBowtieVertices Declaration public bool HasBowtieVertices Field Value Type Description Boolean MultipleConnectedComponents Declaration public bool MultipleConnectedComponents Field Value Type Description Boolean Valid Declaration public bool Valid Field Value Type Description Boolean"
  },
  "api/g3.MeshMeasurements.html": {
    "href": "api/g3.MeshMeasurements.html",
    "title": "Class MeshMeasurements | ViRGIS VR GIS",
    "keywords": "Class MeshMeasurements Inheritance Object MeshMeasurements Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshMeasurements Methods AreaT(DMesh3, IEnumerable<Int32>) Declaration public static double AreaT(DMesh3 mesh, IEnumerable<int> triangleIndices) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangleIndices Returns Type Description Double Bounds(DMesh3, Func<Vector3d, Vector3d>) Declaration public static AxisAlignedBox3d Bounds(DMesh3 mesh, Func<Vector3d, Vector3d> TransformF) Parameters Type Name Description DMesh3 mesh Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d Bounds(IMesh, Func<Vector3d, Vector3d>) Declaration public static AxisAlignedBox3d Bounds(IMesh mesh, Func<Vector3d, Vector3d> TransformF) Parameters Type Name Description IMesh mesh Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d BoundsInFrame(DMesh3, Frame3f, Func<Vector3d, Vector3d>) calculate extents of mesh along axes of frame, with optional transform Declaration public static AxisAlignedBox3d BoundsInFrame(DMesh3 mesh, Frame3f frame, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh Frame3f frame Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d BoundsT(IMesh, IEnumerable<Int32>, Func<Vector3d, Vector3d>) Declaration public static AxisAlignedBox3d BoundsT(IMesh mesh, IEnumerable<int> triangleIndices, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description IMesh mesh IEnumerable < Int32 > triangleIndices Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d BoundsV(IMesh, IEnumerable<Int32>, Func<Vector3d, Vector3d>) Declaration public static AxisAlignedBox3d BoundsV(IMesh mesh, IEnumerable<int> vertexIndices, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description IMesh mesh IEnumerable < Int32 > vertexIndices Func < Vector3d , Vector3d > TransformF Returns Type Description AxisAlignedBox3d Centroid(DMesh3, Boolean) Declaration public static Vector3d Centroid(DMesh3 mesh, bool bOnlyTriVertices = true) Parameters Type Name Description DMesh3 mesh Boolean bOnlyTriVertices Returns Type Description Vector3d Centroid(IEnumerable<Vector3d>) Declaration public static Vector3d Centroid(IEnumerable<Vector3d> vertices) Parameters Type Name Description IEnumerable < Vector3d > vertices Returns Type Description Vector3d Centroid<T>(IEnumerable<T>, Func<T, Vector3d>) Declaration public static Vector3d Centroid<T>(IEnumerable<T> values, Func<T, Vector3d> PositionF) Parameters Type Name Description IEnumerable <T> values Func <T, Vector3d > PositionF Returns Type Description Vector3d Type Parameters Name Description T ExtentsOnAxis(DMesh3, Vector3d, Func<Vector3d, Vector3d>) Calculate extents of mesh along an axis, with optional transform Declaration public static Interval1d ExtentsOnAxis(DMesh3 mesh, Vector3d axis, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh Vector3d axis Func < Vector3d , Vector3d > TransformF Returns Type Description Interval1d ExtentsOnAxis(IMesh, Vector3d, Func<Vector3d, Vector3d>) Calculate extents of mesh along an axis, with optional transform Declaration public static Interval1d ExtentsOnAxis(IMesh mesh, Vector3d axis, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description IMesh mesh Vector3d axis Func < Vector3d , Vector3d > TransformF Returns Type Description Interval1d ExtremeVertices(DMesh3, Vector3d, Func<Vector3d, Vector3d>) Calculate the two most extreme vertices along an axis, with optional transform Declaration public static Interval1i ExtremeVertices(DMesh3 mesh, Vector3d axis, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh Vector3d axis Func < Vector3d , Vector3d > TransformF Returns Type Description Interval1i Genus(DMesh3) Declaration public static MeshMeasurements.GenusResult Genus(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description MeshMeasurements.GenusResult MassProperties(DMesh3, out Double, out Vector3d, out Double[,], Boolean) Declaration public static void MassProperties(DMesh3 mesh, out double mass, out Vector3d center, out double[, ] inertia3x3, bool bodyCoords = false) Parameters Type Name Description DMesh3 mesh Double mass Vector3d center Double [,] inertia3x3 Boolean bodyCoords MassProperties(IEnumerable<Index3i>, Func<Int32, Vector3d>, out Double, out Vector3d, out Double[,], Boolean) Declaration public static void MassProperties(IEnumerable<Index3i> triangle_indices, Func<int, Vector3d> getVertexF, out double mass, out Vector3d center, out double[, ] inertia3x3, bool bodyCoords = false) Parameters Type Name Description IEnumerable < Index3i > triangle_indices Func < Int32 , Vector3d > getVertexF Double mass Vector3d center Double [,] inertia3x3 Boolean bodyCoords VertexOneRingArea(DMesh3, Int32, Boolean) Compute area of one-ring of mesh vertex by summing triangle areas. If bDisjoint = true, we multiple each triangle area by 1/3 Declaration public static double VertexOneRingArea(DMesh3 mesh, int vid, bool bDisjoint = true) Parameters Type Name Description DMesh3 mesh Int32 vid Boolean bDisjoint Returns Type Description Double VolumeArea(DMesh3, IEnumerable<Int32>, Func<Int32, Vector3d>) Compute volume and surface area of triangles of mesh. Return value is (volume,area) Note that if triangles don't define closed region, volume is probably nonsense... Declaration public static Vector2d VolumeArea(DMesh3 mesh, IEnumerable<int> triangles, Func<int, Vector3d> getVertexF) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Func < Int32 , Vector3d > getVertexF Returns Type Description Vector2d"
  },
  "api/g3.MeshMeshCut.html": {
    "href": "api/g3.MeshMeshCut.html",
    "title": "Class MeshMeshCut | ViRGIS VR GIS",
    "keywords": "Class MeshMeshCut TODO: track descendant triangles of each input face for missing segments, can resolve in 2D in plane of face Inheritance Object MeshMeshCut Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshMeshCut Fields CutMesh Declaration public DMesh3 CutMesh Field Value Type Description DMesh3 CutVertices Declaration public List<int> CutVertices Field Value Type Description List < Int32 > Target Declaration public DMesh3 Target Field Value Type Description DMesh3 VertexSnapTol Declaration public double VertexSnapTol Field Value Type Description Double Methods AppendSegments(Double) Declaration public void AppendSegments(double r) Parameters Type Name Description Double r ColorFaces() Declaration public void ColorFaces() Compute() Declaration public void Compute() find_existing_vertex(Vector3d) find existing vertex at point, if it exists Declaration protected int find_existing_vertex(Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Int32 find_nearest_vertex(Vector3d, Double, Int32) find closest vertex, within searchRadius Declaration protected int find_nearest_vertex(Vector3d pt, double searchRadius, int ignore_vid = -1) Parameters Type Name Description Vector3d pt Double searchRadius Int32 ignore_vid Returns Type Description Int32 is_in_triangle(Int32, Vector3d) Declaration protected bool is_in_triangle(int tid, Vector3d v) Parameters Type Name Description Int32 tid Vector3d v Returns Type Description Boolean is_on_edge(Int32, Vector3d) Declaration protected bool is_on_edge(int eid, Vector3d v) Parameters Type Name Description Int32 eid Vector3d v Returns Type Description Boolean on_edge(ref Triangle3d, ref Vector3d) Declaration protected int on_edge(ref Triangle3d tri, ref Vector3d v) Parameters Type Name Description Triangle3d tri Vector3d v Returns Type Description Int32 on_edge_eid(Int32, Vector3d) Declaration protected int on_edge_eid(int tid, Vector3d v) Parameters Type Name Description Int32 tid Vector3d v Returns Type Description Int32 RemoveContained() Declaration public void RemoveContained()"
  },
  "api/g3.MeshNormals.html": {
    "href": "api/g3.MeshNormals.html",
    "title": "Class MeshNormals | ViRGIS VR GIS",
    "keywords": "Class MeshNormals Inheritance Object MeshNormals Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshNormals Constructors MeshNormals(IMesh, MeshNormals.NormalsTypes) Declaration public MeshNormals(IMesh mesh, MeshNormals.NormalsTypes eType = MeshNormals.NormalsTypes.Vertex_OneRingFaceAverage_AreaWeighted) Parameters Type Name Description IMesh mesh MeshNormals.NormalsTypes eType Fields Mesh Declaration public IMesh Mesh Field Value Type Description IMesh Normals Declaration public DVector<Vector3d> Normals Field Value Type Description DVector < Vector3d > NormalType Declaration public MeshNormals.NormalsTypes NormalType Field Value Type Description MeshNormals.NormalsTypes VertexF By default this is Mesh.GetVertex(). Can override to provide alternate vertex source. Declaration public Func<int, Vector3d> VertexF Field Value Type Description Func < Int32 , Vector3d > Properties Item[Int32] Declaration public Vector3d this[int vid] { get; } Parameters Type Name Description Int32 vid Property Value Type Description Vector3d Methods Compute() Declaration public void Compute() CopyTo(DMesh3) Declaration public void CopyTo(DMesh3 SetMesh) Parameters Type Name Description DMesh3 SetMesh QuickCompute(DMesh3) Declaration public static void QuickCompute(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh QuickCompute(DMesh3, Int32, MeshNormals.NormalsTypes) Declaration public static Vector3d QuickCompute(DMesh3 mesh, int vid, MeshNormals.NormalsTypes type = MeshNormals.NormalsTypes.Vertex_OneRingFaceAverage_AreaWeighted) Parameters Type Name Description DMesh3 mesh Int32 vid MeshNormals.NormalsTypes type Returns Type Description Vector3d"
  },
  "api/g3.MeshNormals.NormalsTypes.html": {
    "href": "api/g3.MeshNormals.NormalsTypes.html",
    "title": "Enum MeshNormals.NormalsTypes | ViRGIS VR GIS",
    "keywords": "Enum MeshNormals.NormalsTypes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum NormalsTypes Fields Name Description Vertex_OneRingFaceAverage_AreaWeighted"
  },
  "api/g3.MeshOps.html": {
    "href": "api/g3.MeshOps.html",
    "title": "Class MeshOps | ViRGIS VR GIS",
    "keywords": "Class MeshOps Inheritance Object MeshOps Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshOps"
  },
  "api/g3.MeshPlaneCut.html": {
    "href": "api/g3.MeshPlaneCut.html",
    "title": "Class MeshPlaneCut | ViRGIS VR GIS",
    "keywords": "Class MeshPlaneCut Inheritance Object MeshPlaneCut Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshPlaneCut Constructors MeshPlaneCut(DMesh3, Vector3d, Vector3d) Cut mesh with plane. Assumption is that plane normal is Z value. Declaration public MeshPlaneCut(DMesh3 mesh, Vector3d origin, Vector3d normal) Parameters Type Name Description DMesh3 mesh Vector3d origin Vector3d normal Fields CollapseDegenerateEdgesOnCut Declaration public bool CollapseDegenerateEdgesOnCut Field Value Type Description Boolean CutFaceSet Declaration public MeshFaceSelection CutFaceSet Field Value Type Description MeshFaceSelection CutLoops Declaration public List<EdgeLoop> CutLoops Field Value Type Description List < EdgeLoop > CutLoopsFailed Declaration public bool CutLoopsFailed Field Value Type Description Boolean CutSpans Declaration public List<EdgeSpan> CutSpans Field Value Type Description List < EdgeSpan > DegenerateEdgeTol Declaration public double DegenerateEdgeTol Field Value Type Description Double FoundOpenSpans Declaration public bool FoundOpenSpans Field Value Type Description Boolean LoopFillTriangles Declaration public List<int[]> LoopFillTriangles Field Value Type Description List < Int32 []> Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 PlaneNormal Declaration public Vector3d PlaneNormal Field Value Type Description Vector3d PlaneOrigin Declaration public Vector3d PlaneOrigin Field Value Type Description Vector3d Methods collapse_degenerate_edges(HashSet<Int32>, HashSet<Int32>) Declaration protected void collapse_degenerate_edges(HashSet<int> OnCutEdges, HashSet<int> ZeroEdges) Parameters Type Name Description HashSet < Int32 > OnCutEdges HashSet < Int32 > ZeroEdges Cut() Declaration public virtual bool Cut() Returns Type Description Boolean FillHoles(Int32) A quick-and-dirty hole filling. If you want something better, process the returned CutLoops yourself. Declaration public bool FillHoles(int constantGroupID = -1) Parameters Type Name Description Int32 constantGroupID Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshProjectionTarget.html": {
    "href": "api/g3.MeshProjectionTarget.html",
    "title": "Class MeshProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class MeshProjectionTarget MeshProjectionTarget provides an IProjectionTarget interface to a mesh + spatial data structure. Use to project points to mesh surface. Inheritance Object MeshProjectionTarget TransformedMeshProjectionTarget Implements IOrientedProjectionTarget IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshProjectionTarget : IOrientedProjectionTarget, IProjectionTarget Constructors MeshProjectionTarget() Declaration public MeshProjectionTarget() MeshProjectionTarget(DMesh3) Declaration public MeshProjectionTarget(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh MeshProjectionTarget(DMesh3, ISpatial) Declaration public MeshProjectionTarget(DMesh3 mesh, ISpatial spatial) Parameters Type Name Description DMesh3 mesh ISpatial spatial Properties Mesh Declaration public DMesh3 Mesh { get; set; } Property Value Type Description DMesh3 Spatial Declaration public ISpatial Spatial { get; set; } Property Value Type Description ISpatial Methods Auto(DMesh3, Boolean) Automatically construct fastest projection target for mesh Declaration public static MeshProjectionTarget Auto(DMesh3 mesh, bool bForceCopy = true) Parameters Type Name Description DMesh3 mesh Boolean bForceCopy Returns Type Description MeshProjectionTarget Auto(DMesh3, IEnumerable<Int32>, Int32) Automatically construct fastest projection target for region of mesh Declaration public static MeshProjectionTarget Auto(DMesh3 mesh, IEnumerable<int> triangles, int nExpandRings = 5) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles Int32 nExpandRings Returns Type Description MeshProjectionTarget Project(Vector3d, out Vector3d, Int32) Declaration public virtual Vector3d Project(Vector3d vPoint, out Vector3d vProjectNormal, int identifier = -1) Parameters Type Name Description Vector3d vPoint Vector3d vProjectNormal Int32 identifier Returns Type Description Vector3d Project(Vector3d, Int32) Declaration public virtual Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Implements IOrientedProjectionTarget IProjectionTarget"
  },
  "api/g3.MeshQueries.html": {
    "href": "api/g3.MeshQueries.html",
    "title": "Class MeshQueries | ViRGIS VR GIS",
    "keywords": "Class MeshQueries Inheritance Object MeshQueries Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshQueries Methods BaryCoords(DMesh3, Int32, Vector3d) Get barycentric coords of point in triangle Declaration public static Vector3d BaryCoords(DMesh3 mesh, int tID, Vector3d point) Parameters Type Name Description DMesh3 mesh Int32 tID Vector3d point Returns Type Description Vector3d EdgeLengthStats(DMesh3, out Double, out Double, out Double, Int32) Declaration public static void EdgeLengthStats(DMesh3 mesh, out double minEdgeLen, out double maxEdgeLen, out double avgEdgeLen, int samples = 0) Parameters Type Name Description DMesh3 mesh Double minEdgeLen Double maxEdgeLen Double avgEdgeLen Int32 samples EdgeLengthStatsFromEdges(DMesh3, IEnumerable<Int32>, out Double, out Double, out Double, Int32) Declaration public static void EdgeLengthStatsFromEdges(DMesh3 mesh, IEnumerable<int> EdgeItr, out double minEdgeLen, out double maxEdgeLen, out double avgEdgeLen, int samples = 0) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > EdgeItr Double minEdgeLen Double maxEdgeLen Double avgEdgeLen Int32 samples FindHitTriangle_LinearSearch(DMesh3, Ray3d) Declaration public static int FindHitTriangle_LinearSearch(DMesh3 mesh, Ray3d ray) Parameters Type Name Description DMesh3 mesh Ray3d ray Returns Type Description Int32 FindIntersectingTriangles_LinearSearch(DMesh3, DMesh3) brute force search for any intersecting triangles on two meshes Declaration public static Index2i FindIntersectingTriangles_LinearSearch(DMesh3 mesh1, DMesh3 mesh2) Parameters Type Name Description DMesh3 mesh1 DMesh3 mesh2 Returns Type Description Index2i FindNearestTriangle_LinearSearch(DMesh3, Vector3d) Declaration public static int FindNearestTriangle_LinearSearch(DMesh3 mesh, Vector3d p) Parameters Type Name Description DMesh3 mesh Vector3d p Returns Type Description Int32 FindNearestTriangles_LinearSearch(DMesh3, DMesh3, out Double) Brute-force search for closest pair of triangles on two meshes Declaration public static Index2i FindNearestTriangles_LinearSearch(DMesh3 mesh1, DMesh3 mesh2, out double fNearestSqr) Parameters Type Name Description DMesh3 mesh1 DMesh3 mesh2 Double fNearestSqr Returns Type Description Index2i FindNearestVertex_LinearSearch(DMesh3, Vector3d) Declaration public static int FindNearestVertex_LinearSearch(DMesh3 mesh, Vector3d p) Parameters Type Name Description DMesh3 mesh Vector3d p Returns Type Description Int32 NearestPointDistance(DMesh3, ISpatial, Vector3d, Double) Find distance from point to mesh Returns interpolated vertex-normal frame if available, otherwise tri-normal frame. Declaration public static double NearestPointDistance(DMesh3 mesh, ISpatial spatial, Vector3d queryPoint, double maxDist = 1.7976931348623157E+308) Parameters Type Name Description DMesh3 mesh ISpatial spatial Vector3d queryPoint Double maxDist Returns Type Description Double NearestPointFrame(DMesh3, ISpatial, Vector3d, Boolean) Find point-normal(Z) frame at closest point to queryPoint on mesh. Returns interpolated vertex-normal frame if available, otherwise tri-normal frame. Declaration public static Frame3f NearestPointFrame(DMesh3 mesh, ISpatial spatial, Vector3d queryPoint, bool bForceFaceNormal = false) Parameters Type Name Description DMesh3 mesh ISpatial spatial Vector3d queryPoint Boolean bForceFaceNormal Returns Type Description Frame3f RayHitPointFrame(DMesh3, ISpatial, Ray3d, out Frame3f, Boolean) Find point-normal frame at ray-intersection point on mesh, or return false if no hit. Returns interpolated vertex-normal frame if available, otherwise tri-normal frame. Declaration public static bool RayHitPointFrame(DMesh3 mesh, ISpatial spatial, Ray3d ray, out Frame3f hitPosFrame, bool bForceFaceNormal = false) Parameters Type Name Description DMesh3 mesh ISpatial spatial Ray3d ray Frame3f hitPosFrame Boolean bForceFaceNormal Returns Type Description Boolean SurfaceFrame(DMesh3, Int32, Vector3d, Boolean) Get point-normal frame on surface of mesh. Assumption is that point lies in tID. returns interpolated vertex-normal frame if available, otherwise tri-normal frame. Declaration public static Frame3f SurfaceFrame(DMesh3 mesh, int tID, Vector3d point, bool bForceFaceNormal = false) Parameters Type Name Description DMesh3 mesh Int32 tID Vector3d point Boolean bForceFaceNormal Returns Type Description Frame3f TriangleDistance(DMesh3, Int32, Vector3d) construct a DistPoint3Triangle3 object for a mesh triangle Declaration public static DistPoint3Triangle3 TriangleDistance(DMesh3 mesh, int ti, Vector3d point) Parameters Type Name Description DMesh3 mesh Int32 ti Vector3d point Returns Type Description DistPoint3Triangle3 TriangleIntersection(DMesh3, Int32, Ray3d) convenience function to construct a IntrRay3Triangle3 object for a mesh triangle Declaration public static IntrRay3Triangle3 TriangleIntersection(DMesh3 mesh, int ti, Ray3d ray) Parameters Type Name Description DMesh3 mesh Int32 ti Ray3d ray Returns Type Description IntrRay3Triangle3 TrianglesDistance(DMesh3, Int32, DMesh3, Int32, Func<Vector3d, Vector3d>) convenience function to construct a DistTriangle3Triangle3 object for two mesh triangles Declaration public static DistTriangle3Triangle3 TrianglesDistance(DMesh3 mesh1, int ti, DMesh3 mesh2, int tj, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh1 Int32 ti DMesh3 mesh2 Int32 tj Func < Vector3d , Vector3d > TransformF Returns Type Description DistTriangle3Triangle3 TrianglesIntersection(DMesh3, Int32, DMesh3, Int32, Func<Vector3d, Vector3d>) convenience function to construct a IntrTriangle3Triangle3 object for two mesh triangles Declaration public static IntrTriangle3Triangle3 TrianglesIntersection(DMesh3 mesh1, int ti, DMesh3 mesh2, int tj, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh1 Int32 ti DMesh3 mesh2 Int32 tj Func < Vector3d , Vector3d > TransformF Returns Type Description IntrTriangle3Triangle3 TriangleTriangleDistance(DMesh3, Int32, DMesh3, Int32, Func<Vector3d, Vector3d>) find distance between two triangles, with optional transform on second triangle Declaration public static DistTriangle3Triangle3 TriangleTriangleDistance(DMesh3 mesh1, int ti, DMesh3 mesh2, int tj, Func<Vector3d, Vector3d> TransformF = null) Parameters Type Name Description DMesh3 mesh1 Int32 ti DMesh3 mesh2 Int32 tj Func < Vector3d , Vector3d > TransformF Returns Type Description DistTriangle3Triangle3 TriDistanceSqr(DMesh3, Int32, Vector3d) Compute distance from point to triangle in mesh, with minimal extra objects/etc Declaration public static double TriDistanceSqr(DMesh3 mesh, int ti, Vector3d point) Parameters Type Name Description DMesh3 mesh Int32 ti Vector3d point Returns Type Description Double"
  },
  "api/g3.MeshRefinerBase.html": {
    "href": "api/g3.MeshRefinerBase.html",
    "title": "Class MeshRefinerBase | ViRGIS VR GIS",
    "keywords": "Class MeshRefinerBase Inheritance Object MeshRefinerBase Reducer Remesher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshRefinerBase Constructors MeshRefinerBase() Declaration protected MeshRefinerBase() MeshRefinerBase(DMesh3) Declaration public MeshRefinerBase(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields AllowCollapseFixedVertsWithSameSetID Declaration public bool AllowCollapseFixedVertsWithSameSetID Field Value Type Description Boolean constraints Declaration protected MeshConstraints constraints Field Value Type Description MeshConstraints edge_flip_tol Declaration protected double edge_flip_tol Field Value Type Description Double mesh Declaration protected DMesh3 mesh Field Value Type Description DMesh3 Progress Set this to be able to cancel running remesher Declaration public ProgressCancel Progress Field Value Type Description ProgressCancel Properties Constraints Declaration public MeshConstraints Constraints { get; } Property Value Type Description MeshConstraints EdgeFlipTolerance If normals dot product is less than this, we consider it a normal flip. default = 0 Declaration public double EdgeFlipTolerance { get; set; } Property Value Type Description Double Mesh Declaration public DMesh3 Mesh { get; } Property Value Type Description DMesh3 Methods can_collapse_constraints(Int32, Int32, Int32, Int32, Int32, Int32, Int32, out Int32) Declaration protected bool can_collapse_constraints(int eid, int a, int b, int c, int d, int tc, int td, out int collapse_to) Parameters Type Name Description Int32 eid Int32 a Int32 b Int32 c Int32 d Int32 tc Int32 td Int32 collapse_to Returns Type Description Boolean can_collapse_vtx(Int32, Int32, Int32, out Int32) Declaration protected bool can_collapse_vtx(int eid, int a, int b, out int collapse_to) Parameters Type Name Description Int32 eid Int32 a Int32 b Int32 collapse_to Returns Type Description Boolean Cancelled() if this returns true, abort computation. Declaration protected virtual bool Cancelled() Returns Type Description Boolean collapse_creates_flip_or_invalid(Int32, Int32, ref Vector3d, Int32, Int32) check if edge collapse will create a face-normal flip. Also checks if collapse would violate link condition, since we are iterating over one-ring anyway. This only checks one-ring of vid, so you have to call it twice, with vid and vother reversed, to check both one-rings Declaration protected bool collapse_creates_flip_or_invalid(int vid, int vother, ref Vector3d newv, int tc, int td) Parameters Type Name Description Int32 vid Int32 vother Vector3d newv Int32 tc Int32 td Returns Type Description Boolean edge_flip_metric(ref Vector3d, ref Vector3d) Declaration protected double edge_flip_metric(ref Vector3d n0, ref Vector3d n1) Parameters Type Name Description Vector3d n0 Vector3d n1 Returns Type Description Double flip_inverts_normals(Int32, Int32, Int32, Int32, Int32) Check if edge flip might reverse normal direction. Not entirely clear on how to implement this test. Currently checking if any normal-pairs are reversed. Declaration protected bool flip_inverts_normals(int a, int b, int c, int d, int t0) Parameters Type Name Description Int32 a Int32 b Int32 c Int32 d Int32 t0 Returns Type Description Boolean get_vertex_constraint(Int32) Declaration protected VertexConstraint get_vertex_constraint(int vid) Parameters Type Name Description Int32 vid Returns Type Description VertexConstraint get_vertex_constraint(Int32, ref VertexConstraint) Declaration protected bool get_vertex_constraint(int vid, ref VertexConstraint vc) Parameters Type Name Description Int32 vid VertexConstraint vc Returns Type Description Boolean SetExternalConstraints(MeshConstraints) Declaration public void SetExternalConstraints(MeshConstraints cons) Parameters Type Name Description MeshConstraints cons vertex_is_constrained(Int32) Declaration protected bool vertex_is_constrained(int vid) Parameters Type Name Description Int32 vid Returns Type Description Boolean vertex_is_fixed(Int32) Declaration protected bool vertex_is_fixed(int vid) Parameters Type Name Description Int32 vid Returns Type Description Boolean"
  },
  "api/g3.MeshRegionBoundaryLoops.html": {
    "href": "api/g3.MeshRegionBoundaryLoops.html",
    "title": "Class MeshRegionBoundaryLoops | ViRGIS VR GIS",
    "keywords": "Class MeshRegionBoundaryLoops Extract boundary EdgeLoops for subregions of Mesh Inheritance Object MeshRegionBoundaryLoops Implements IEnumerable < EdgeLoop > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshRegionBoundaryLoops : IEnumerable<EdgeLoop>, IEnumerable Constructors MeshRegionBoundaryLoops(DMesh3, Int32[], Boolean) Declaration public MeshRegionBoundaryLoops(DMesh3 mesh, int[] RegionTris, bool bAutoCompute = true) Parameters Type Name Description DMesh3 mesh Int32 [] RegionTris Boolean bAutoCompute Fields Loops Declaration public List<EdgeLoop> Loops Field Value Type Description List < EdgeLoop > Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public EdgeLoop this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description EdgeLoop MaxVerticesLoopIndex Index of Loop with largest vertex count Declaration public int MaxVerticesLoopIndex { get; } Property Value Type Description Int32 Methods all_vertex_boundary_edges(Int32, Int32[]) Declaration public int all_vertex_boundary_edges(int vID, int[] e) Parameters Type Name Description Int32 vID Int32 [] e Returns Type Description Int32 Compute() Find the set of EdgeLoops bounding 'in' triangles. Note that if we encounter topological issues, we will throw MeshBoundaryLoopsException w/ more info (if possible) Declaration public bool Compute() Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<EdgeLoop> GetEnumerator() Returns Type Description IEnumerator < EdgeLoop > vertex_boundary_edges(Int32, ref Int32, ref Int32) Declaration public int vertex_boundary_edges(int vID, ref int e0, ref int e1) Parameters Type Name Description Int32 vID Int32 e0 Int32 e1 Returns Type Description Int32 Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshResult.html": {
    "href": "api/g3.MeshResult.html",
    "title": "Enum MeshResult | ViRGIS VR GIS",
    "keywords": "Enum MeshResult Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum MeshResult Fields Name Description Failed_BrokenTopology Failed_CannotAllocateTriangle Failed_CannotAllocateVertex Failed_CollapseTetrahedron Failed_CollapseTriangle Failed_FlippedEdgeExists Failed_FoundDuplicateTriangle Failed_HitValenceLimit Failed_InvalidNeighbourhood Failed_IsBoundaryEdge Failed_IsBowtieVertex Failed_NotABoundaryEdge Failed_NotAnEdge Failed_NotATriangle Failed_NotAVertex Failed_SameOrientation Failed_TriangleAlreadyExists Failed_VertexAlreadyExists Failed_WouldCreateBowtie Failed_WouldCreateNonmanifoldEdge Ok"
  },
  "api/g3.MeshSignedDistanceGrid.ComputeModes.html": {
    "href": "api/g3.MeshSignedDistanceGrid.ComputeModes.html",
    "title": "Enum MeshSignedDistanceGrid.ComputeModes | ViRGIS VR GIS",
    "keywords": "Enum MeshSignedDistanceGrid.ComputeModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum ComputeModes Fields Name Description FullGrid NarrowBand_SpatialFloodFill NarrowBandOnly"
  },
  "api/g3.MeshSignedDistanceGrid.html": {
    "href": "api/g3.MeshSignedDistanceGrid.html",
    "title": "Class MeshSignedDistanceGrid | ViRGIS VR GIS",
    "keywords": "Class MeshSignedDistanceGrid Compute discretely-sampled (ie gridded) signed distance field for a mesh The basic approach is, first compute exact distances in a narrow band, and then extend out to rest of grid using fast \"sweeping\" (ie like a distance transform). The resulting unsigned grid is then signed using ray-intersection counting, which is also computed on the grid, so no BVH is necessary If you set ComputeMode to NarrowBandOnly, result is a narrow-band signed distance field. This is quite a bit faster as the sweeping is the most computationally-intensive step. Caveats: the \"narrow band\" is based on triangle bounding boxes, so it is not necessarily that \"narrow\" if you have large triangles on a diagonal to grid axes Potential optimizations: Often we have a spatial data structure that would allow faster computation of the narrow-band distances (which become quite expensive if we want a wider band!) Not clear how to take advantage of this though. Perhaps we could have a binary grid that, in first pass, we set bits inside triangle bboxes to 1? Or perhaps same as current code, but we use spatial-dist, and so for each ijk we only compute once? (then have to test for computed value at each cell of each triangle...) This code is based on the C++ implementation found at https://github.com/christopherbatty/SDFGen Original license was public domain. Permission granted by Christopher Batty to include C# port under Boost license. Inheritance Object MeshSignedDistanceGrid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshSignedDistanceGrid Constructors MeshSignedDistanceGrid(DMesh3, Double, DMeshAABBTree3) Declaration public MeshSignedDistanceGrid(DMesh3 mesh, double cellSize, DMeshAABBTree3 spatial = null) Parameters Type Name Description DMesh3 mesh Double cellSize DMeshAABBTree3 spatial Fields CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellSize Declaration public float CellSize Field Value Type Description Single ComputeMode Declaration public MeshSignedDistanceGrid.ComputeModes ComputeMode Field Value Type Description MeshSignedDistanceGrid.ComputeModes ComputeSigns Declaration public bool ComputeSigns Field Value Type Description Boolean DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean ExactBandWidth Declaration public int ExactBandWidth Field Value Type Description Int32 ExpandBounds Declaration public Vector3d ExpandBounds Field Value Type Description Vector3d InsideMode Declaration public MeshSignedDistanceGrid.InsideModes InsideMode Field Value Type Description MeshSignedDistanceGrid.InsideModes Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 NarrowBandMaxDistance Declaration public double NarrowBandMaxDistance Field Value Type Description Double Spatial Declaration public DMeshAABBTree3 Spatial Field Value Type Description DMeshAABBTree3 UseParallel Declaration public bool UseParallel Field Value Type Description Boolean WantClosestTriGrid Declaration public bool WantClosestTriGrid Field Value Type Description Boolean WantIntersectionsGrid Declaration public bool WantIntersectionsGrid Field Value Type Description Boolean Properties ClosestTriGrid Declaration public DenseGrid3i ClosestTriGrid { get; } Property Value Type Description DenseGrid3i Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid SDF grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the SDF grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f IntersectionsGrid Declaration public DenseGrid3i IntersectionsGrid { get; } Property Value Type Description DenseGrid3i Item[Vector3i] Declaration public float this[Vector3i idx] { get; } Parameters Type Name Description Vector3i idx Property Value Type Description Single Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single Methods CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f Compute() Declaration public void Compute() orientation(Double, Double, Double, Double, out Double) Declaration public static int orientation(double x1, double y1, double x2, double y2, out double twice_signed_area) Parameters Type Name Description Double x1 Double y1 Double x2 Double y2 Double twice_signed_area Returns Type Description Int32 point_in_triangle_2d(Double, Double, Double, Double, Double, Double, Double, Double, out Double, out Double, out Double) Declaration public static bool point_in_triangle_2d(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, out double a, out double b, out double c) Parameters Type Name Description Double x0 Double y0 Double x1 Double y1 Double x2 Double y2 Double x3 Double y3 Double a Double b Double c Returns Type Description Boolean point_segment_distance(ref Vector3d, ref Vector3d, ref Vector3d) Declaration public static double point_segment_distance(ref Vector3d x0, ref Vector3d x1, ref Vector3d x2) Parameters Type Name Description Vector3d x0 Vector3d x1 Vector3d x2 Returns Type Description Double point_segment_distance(ref Vector3f, ref Vector3f, ref Vector3f) Declaration public static float point_segment_distance(ref Vector3f x0, ref Vector3f x1, ref Vector3f x2) Parameters Type Name Description Vector3f x0 Vector3f x1 Vector3f x2 Returns Type Description Single point_triangle_distance(ref Vector3d, ref Vector3d, ref Vector3d, ref Vector3d) Declaration public static double point_triangle_distance(ref Vector3d x0, ref Vector3d x1, ref Vector3d x2, ref Vector3d x3) Parameters Type Name Description Vector3d x0 Vector3d x1 Vector3d x2 Vector3d x3 Returns Type Description Double point_triangle_distance(ref Vector3f, ref Vector3f, ref Vector3f, ref Vector3f) Declaration public static float point_triangle_distance(ref Vector3f x0, ref Vector3f x1, ref Vector3f x2, ref Vector3f x3) Parameters Type Name Description Vector3f x0 Vector3f x1 Vector3f x2 Vector3f x3 Returns Type Description Single"
  },
  "api/g3.MeshSignedDistanceGrid.InsideModes.html": {
    "href": "api/g3.MeshSignedDistanceGrid.InsideModes.html",
    "title": "Enum MeshSignedDistanceGrid.InsideModes | ViRGIS VR GIS",
    "keywords": "Enum MeshSignedDistanceGrid.InsideModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum InsideModes Fields Name Description CrossingCount ParityCount"
  },
  "api/g3.MeshTransforms.html": {
    "href": "api/g3.MeshTransforms.html",
    "title": "Class MeshTransforms | ViRGIS VR GIS",
    "keywords": "Class MeshTransforms Inheritance Object MeshTransforms Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshTransforms Methods ConvertYUpToZUp(Frame3f) Declaration public static Frame3f ConvertYUpToZUp(Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f ConvertYUpToZUp(IDeformableMesh) Declaration public static void ConvertYUpToZUp(IDeformableMesh mesh) Parameters Type Name Description IDeformableMesh mesh ConvertYUpToZUp(Vector3d) Declaration public static Vector3d ConvertYUpToZUp(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ConvertYUpToZUp(Vector3f) Declaration public static Vector3f ConvertYUpToZUp(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f ConvertZUpToYUp(Frame3f) Declaration public static Frame3f ConvertZUpToYUp(Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f ConvertZUpToYUp(IDeformableMesh) Declaration public static void ConvertZUpToYUp(IDeformableMesh mesh) Parameters Type Name Description IDeformableMesh mesh ConvertZUpToYUp(Vector3d) Declaration public static Vector3d ConvertZUpToYUp(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d ConvertZUpToYUp(Vector3f) Declaration public static Vector3f ConvertZUpToYUp(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FlipLeftRightCoordSystems(Frame3f) Declaration public static Frame3f FlipLeftRightCoordSystems(Frame3f f) Parameters Type Name Description Frame3f f Returns Type Description Frame3f FlipLeftRightCoordSystems(IDeformableMesh) Declaration public static void FlipLeftRightCoordSystems(IDeformableMesh mesh) Parameters Type Name Description IDeformableMesh mesh FlipLeftRightCoordSystems(Vector3d) Declaration public static Vector3d FlipLeftRightCoordSystems(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d FlipLeftRightCoordSystems(Vector3f) Declaration public static Vector3f FlipLeftRightCoordSystems(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f FromFrame(IDeformableMesh, Frame3f) Map mesh from local frame coordinates into \"world\" coordinates Declaration public static void FromFrame(IDeformableMesh mesh, Frame3f f) Parameters Type Name Description IDeformableMesh mesh Frame3f f PerVertexTransform(IDeformableMesh, IDeformableMesh, Int32[], Func<Vector3d, Int32, Int32, Vector3d>) Apply TransformF to subset of mesh vertices defined by MapV[vertices] Declaration public static void PerVertexTransform(IDeformableMesh targetMesh, IDeformableMesh sourceMesh, int[] mapV, Func<Vector3d, int, int, Vector3d> TransformF) Parameters Type Name Description IDeformableMesh targetMesh IDeformableMesh sourceMesh Int32 [] mapV Func < Vector3d , Int32 , Int32 , Vector3d > TransformF PerVertexTransform(IDeformableMesh, TransformSequence) Apply Transform to vertices and normals of mesh Declaration public static void PerVertexTransform(IDeformableMesh mesh, TransformSequence xform) Parameters Type Name Description IDeformableMesh mesh TransformSequence xform PerVertexTransform(IDeformableMesh, IEnumerable<Int32>, Func<Vector3d, Int32, Vector3d>) Apply TransformF to subset of vertices of mesh Declaration public static void PerVertexTransform(IDeformableMesh mesh, IEnumerable<int> vertices, Func<Vector3d, int, Vector3d> TransformF) Parameters Type Name Description IDeformableMesh mesh IEnumerable < Int32 > vertices Func < Vector3d , Int32 , Vector3d > TransformF PerVertexTransform(IDeformableMesh, IEnumerable<Int32>, Func<Int32, Int32>, Func<Vector3d, Int32, Int32, Vector3d>) Apply TransformF to subset of mesh vertices defined by MapV[vertices] Declaration public static void PerVertexTransform(IDeformableMesh mesh, IEnumerable<int> vertices, Func<int, int> MapV, Func<Vector3d, int, int, Vector3d> TransformF) Parameters Type Name Description IDeformableMesh mesh IEnumerable < Int32 > vertices Func < Int32 , Int32 > MapV Func < Vector3d , Int32 , Int32 , Vector3d > TransformF PerVertexTransform(IDeformableMesh, Func<Vector3d, Vector3d>) Apply TransformF to vertices of mesh Declaration public static void PerVertexTransform(IDeformableMesh mesh, Func<Vector3d, Vector3d> TransformF) Parameters Type Name Description IDeformableMesh mesh Func < Vector3d , Vector3d > TransformF PerVertexTransform(IDeformableMesh, Func<Vector3d, Vector3f, Vector3d>) Declaration public static void PerVertexTransform(IDeformableMesh mesh, Func<Vector3d, Vector3f, Vector3d> TransformF) Parameters Type Name Description IDeformableMesh mesh Func < Vector3d , Vector3f , Vector3d > TransformF PerVertexTransform(IDeformableMesh, Func<Vector3d, Vector3f, Vector3dTuple2>) Apply TransformF to vertices and normals of mesh Declaration public static void PerVertexTransform(IDeformableMesh mesh, Func<Vector3d, Vector3f, Vector3dTuple2> TransformF) Parameters Type Name Description IDeformableMesh mesh Func < Vector3d , Vector3f , Vector3dTuple2 > TransformF Rotate(Frame3f, Vector3d, Quaterniond) Declaration public static Frame3f Rotate(Frame3f f, Vector3d origin, Quaterniond rotation) Parameters Type Name Description Frame3f f Vector3d origin Quaterniond rotation Returns Type Description Frame3f Rotate(Frame3f, Vector3d, Quaternionf) Declaration public static Frame3f Rotate(Frame3f f, Vector3d origin, Quaternionf rotation) Parameters Type Name Description Frame3f f Vector3d origin Quaternionf rotation Returns Type Description Frame3f Rotate(IDeformableMesh, Vector3d, Quaterniond) Declaration public static void Rotate(IDeformableMesh mesh, Vector3d origin, Quaterniond rotation) Parameters Type Name Description IDeformableMesh mesh Vector3d origin Quaterniond rotation Rotate(IDeformableMesh, Vector3d, Quaternionf) Declaration public static void Rotate(IDeformableMesh mesh, Vector3d origin, Quaternionf rotation) Parameters Type Name Description IDeformableMesh mesh Vector3d origin Quaternionf rotation Rotate(Vector3d, Vector3d, Quaterniond) Declaration public static Vector3d Rotate(Vector3d pos, Vector3d origin, Quaterniond rotation) Parameters Type Name Description Vector3d pos Vector3d origin Quaterniond rotation Returns Type Description Vector3d Rotate(Vector3d, Vector3d, Quaternionf) Declaration public static Vector3d Rotate(Vector3d pos, Vector3d origin, Quaternionf rotation) Parameters Type Name Description Vector3d pos Vector3d origin Quaternionf rotation Returns Type Description Vector3d Scale(IDeformableMesh, Vector3d, Vector3d) Declaration public static void Scale(IDeformableMesh mesh, Vector3d scale, Vector3d origin) Parameters Type Name Description IDeformableMesh mesh Vector3d scale Vector3d origin Scale(IDeformableMesh, Double) Declaration public static void Scale(IDeformableMesh mesh, double s) Parameters Type Name Description IDeformableMesh mesh Double s Scale(IDeformableMesh, Double, Double, Double) Declaration public static void Scale(IDeformableMesh mesh, double sx, double sy, double sz) Parameters Type Name Description IDeformableMesh mesh Double sx Double sy Double sz ToFrame(IDeformableMesh, Frame3f) Map mesh into local coordinates of Frame Declaration public static void ToFrame(IDeformableMesh mesh, Frame3f f) Parameters Type Name Description IDeformableMesh mesh Frame3f f Translate(IDeformableMesh, Vector3d) Declaration public static void Translate(IDeformableMesh mesh, Vector3d v) Parameters Type Name Description IDeformableMesh mesh Vector3d v Translate(IDeformableMesh, Double, Double, Double) Declaration public static void Translate(IDeformableMesh mesh, double tx, double ty, double tz) Parameters Type Name Description IDeformableMesh mesh Double tx Double ty Double tz VertexNormalOffset(IDeformableMesh, Double) Declaration public static void VertexNormalOffset(IDeformableMesh mesh, double offsetDistance) Parameters Type Name Description IDeformableMesh mesh Double offsetDistance"
  },
  "api/g3.MeshTriInfoCache.html": {
    "href": "api/g3.MeshTriInfoCache.html",
    "title": "Class MeshTriInfoCache | ViRGIS VR GIS",
    "keywords": "Class MeshTriInfoCache Inheritance Object MeshTriInfoCache Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshTriInfoCache Constructors MeshTriInfoCache(DMesh3) Declaration public MeshTriInfoCache(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields Areas Declaration public DVector<double> Areas Field Value Type Description DVector < Double > Centroids Declaration public DVector<Vector3d> Centroids Field Value Type Description DVector < Vector3d > Normals Declaration public DVector<Vector3d> Normals Field Value Type Description DVector < Vector3d > Methods GetTriInfo(Int32, ref Vector3d, ref Double, ref Vector3d) Declaration public void GetTriInfo(int tid, ref Vector3d n, ref double a, ref Vector3d c) Parameters Type Name Description Int32 tid Vector3d n Double a Vector3d c"
  },
  "api/g3.MeshTrimLoop.html": {
    "href": "api/g3.MeshTrimLoop.html",
    "title": "Class MeshTrimLoop | ViRGIS VR GIS",
    "keywords": "Class MeshTrimLoop Delete triangles inside on/near-surface trimming curve, and then adapt the new boundary loop to conform to the loop. [DANGER] To use this class, we require a spatial data structure we can project onto. Currently we assume that this is a DMesh3AABBTree because if you don't provide a seed triangle, we use FindNearestTriangle() to find this index on the input mesh. So, it must be a tree for the exact same mesh (!). However we then delete a bunch of triangles and use this spatial DS only for reprojection. Possibly these should be two separate things? Or force caller to provide seed triangle for trim loop, instead of solving this problem for them? (But basically there is no way around having a full mesh copy...) TODO: output boundary EdgeLoop that has been aligned w/ trim curve handle cases where input mesh has open borders Inheritance Object MeshTrimLoop Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshTrimLoop Constructors MeshTrimLoop(DMesh3, DCurve3, Vector3d, DMeshAABBTree3) Declaration public MeshTrimLoop(DMesh3 mesh, DCurve3 trimline, Vector3d vSeedPt, DMeshAABBTree3 spatial = null) Parameters Type Name Description DMesh3 mesh DCurve3 trimline Vector3d vSeedPt DMeshAABBTree3 spatial MeshTrimLoop(DMesh3, DCurve3, Int32, DMeshAABBTree3) Cut mesh with plane. Assumption is that plane normal is Z value. Declaration public MeshTrimLoop(DMesh3 mesh, DCurve3 trimline, int tSeedTID, DMeshAABBTree3 spatial = null) Parameters Type Name Description DMesh3 mesh DCurve3 trimline Int32 tSeedTID DMeshAABBTree3 spatial Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 RemeshBorderRings Declaration public int RemeshBorderRings Field Value Type Description Int32 RemeshRounds Declaration public int RemeshRounds Field Value Type Description Int32 SmoothingAlpha Declaration public double SmoothingAlpha Field Value Type Description Double Spatial Declaration public DMeshAABBTree3 Spatial Field Value Type Description DMeshAABBTree3 TargetEdgeLength Declaration public double TargetEdgeLength Field Value Type Description Double TrimLine Declaration public DCurve3 TrimLine Field Value Type Description DCurve3 Methods Trim() Declaration public virtual bool Trim() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.MeshUtil.html": {
    "href": "api/g3.MeshUtil.html",
    "title": "Class MeshUtil | ViRGIS VR GIS",
    "keywords": "Class MeshUtil Inheritance Object MeshUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshUtil Methods CheckIfCollapseCreatesFlip(DMesh3, Int32, Vector3d) Check if collapsing edge edgeID to point newv will flip normal of any attached face Declaration public static bool CheckIfCollapseCreatesFlip(DMesh3 mesh, int edgeID, Vector3d newv) Parameters Type Name Description DMesh3 mesh Int32 edgeID Vector3d newv Returns Type Description Boolean CheckIfEdgeFlipCreatesFlip(DMesh3, Int32, Double) if before a flip we have normals (n1,n2) and after we have (m1,m2), check if the dot between any of the 4 pairs changes sign after the flip, or is less than the dot-product tolerance (ie angle tolerance) Declaration public static bool CheckIfEdgeFlipCreatesFlip(DMesh3 mesh, int eID, double flip_dot_tol = 0) Parameters Type Name Description DMesh3 mesh Int32 eID Double flip_dot_tol Returns Type Description Boolean CotanSmooth(DMesh3, Int32, Double) Declaration public static Vector3d CotanSmooth(DMesh3 mesh, int vID, double t) Parameters Type Name Description DMesh3 mesh Int32 vID Double t Returns Type Description Vector3d DiscreteGaussCurvature(DMesh3, Int32) computes sum of opening-angles in triangles around vid, minus 2pi. This is zero on flat areas. Declaration public static double DiscreteGaussCurvature(DMesh3 mesh, int vid) Parameters Type Name Description DMesh3 mesh Int32 vid Returns Type Description Double ExtractLoopV(IMesh, IEnumerable<Int32>) Declaration public static DCurve3 ExtractLoopV(IMesh mesh, IEnumerable<int> vertices) Parameters Type Name Description IMesh mesh IEnumerable < Int32 > vertices Returns Type Description DCurve3 ExtractLoopV(IMesh, Int32[]) Declaration public static DCurve3 ExtractLoopV(IMesh mesh, int[] vertices) Parameters Type Name Description IMesh mesh Int32 [] vertices Returns Type Description DCurve3 GetEdgeFlipNormals(DMesh3, Int32, out Vector3d, out Vector3d, out Vector3d, out Vector3d) For given edge, return normals of it's two triangles, and normals of the triangles created if edge is flipped (used in edge-flip optimizers) Declaration public static void GetEdgeFlipNormals(DMesh3 mesh, int eID, out Vector3d n1, out Vector3d n2, out Vector3d on1, out Vector3d on2) Parameters Type Name Description DMesh3 mesh Int32 eID Vector3d n1 Vector3d n2 Vector3d on1 Vector3d on2 GetEdgeFlipTris(DMesh3, Int32, out Index3i, out Index3i, out Index3i, out Index3i) For given edge, return it's triangles and the triangles that would be created if it was flipped (used in edge-flip optimizers) Declaration public static void GetEdgeFlipTris(DMesh3 mesh, int eID, out Index3i orig_t0, out Index3i orig_t1, out Index3i flip_t0, out Index3i flip_t1) Parameters Type Name Description DMesh3 mesh Int32 eID Index3i orig_t0 Index3i orig_t1 Index3i flip_t0 Index3i flip_t1 MeanValueSmooth(DMesh3, Int32, Double) Declaration public static Vector3d MeanValueSmooth(DMesh3 mesh, int vID, double t) Parameters Type Name Description DMesh3 mesh Int32 vID Double t Returns Type Description Vector3d OpeningAngleD(DMesh3, Int32) computes opening angle between the two triangles connected to edge Declaration public static double OpeningAngleD(DMesh3 mesh, int eid) Parameters Type Name Description DMesh3 mesh Int32 eid Returns Type Description Double ScaleMesh(DMesh3, Frame3f, Vector3f) Declaration public static void ScaleMesh(DMesh3 mesh, Frame3f f, Vector3f vScale) Parameters Type Name Description DMesh3 mesh Frame3f f Vector3f vScale UniformSmooth(DMesh3, Int32, Double) Declaration public static Vector3d UniformSmooth(DMesh3 mesh, int vID, double t) Parameters Type Name Description DMesh3 mesh Int32 vID Double t Returns Type Description Vector3d"
  },
  "api/g3.MeshValidation.html": {
    "href": "api/g3.MeshValidation.html",
    "title": "Class MeshValidation | ViRGIS VR GIS",
    "keywords": "Class MeshValidation Inheritance Object MeshValidation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshValidation Methods HasDuplicateTriangles(DMesh3) Declaration public static ValidationStatus HasDuplicateTriangles(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description ValidationStatus IsBoundaryLoop(DMesh3, EdgeLoop) Declaration public static ValidationStatus IsBoundaryLoop(DMesh3 mesh, EdgeLoop loop) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Returns Type Description ValidationStatus IsEdgeLoop(DMesh3, EdgeLoop) Declaration public static ValidationStatus IsEdgeLoop(DMesh3 mesh, EdgeLoop loop) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Returns Type Description ValidationStatus"
  },
  "api/g3.MeshVertexSelection.html": {
    "href": "api/g3.MeshVertexSelection.html",
    "title": "Class MeshVertexSelection | ViRGIS VR GIS",
    "keywords": "Class MeshVertexSelection Inheritance Object MeshVertexSelection Implements IEnumerable < Int32 > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class MeshVertexSelection : IEnumerable<int>, IEnumerable Constructors MeshVertexSelection(DMesh3) Declaration public MeshVertexSelection(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh MeshVertexSelection(DMesh3, MeshEdgeSelection) Declaration public MeshVertexSelection(DMesh3 mesh, MeshEdgeSelection convertE) Parameters Type Name Description DMesh3 mesh MeshEdgeSelection convertE MeshVertexSelection(DMesh3, MeshFaceSelection) Declaration public MeshVertexSelection(DMesh3 mesh, MeshFaceSelection convertT) Parameters Type Name Description DMesh3 mesh MeshFaceSelection convertT Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Deselect(IEnumerable<Int32>) Declaration public void Deselect(IEnumerable<int> vertices) Parameters Type Name Description IEnumerable < Int32 > vertices Deselect(Int32) Declaration public void Deselect(int vID) Parameters Type Name Description Int32 vID Deselect(Int32[]) Declaration public void Deselect(int[] vertices) Parameters Type Name Description Int32 [] vertices DeselectEdge(Int32) Declaration public void DeselectEdge(int eid) Parameters Type Name Description Int32 eid DeselectEdges(IEnumerable<Int32>) Declaration public void DeselectEdges(IEnumerable<int> edges) Parameters Type Name Description IEnumerable < Int32 > edges ExpandToOneRingNeighbours(Func<Int32, Boolean>) Add all one-ring neighbours of current selection to set. On a large mesh this is quite expensive as we don't know the boundary, so we have to iterate over all triangles. Return false from FilterF to prevent vertices from being included. Declaration public void ExpandToOneRingNeighbours(Func<int, bool> FilterF = null) Parameters Type Name Description Func < Int32 , Boolean > FilterF ExpandToOneRingNeighbours(Int32, Func<Int32, Boolean>) Declaration public void ExpandToOneRingNeighbours(int nRings, Func<int, bool> FilterF = null) Parameters Type Name Description Int32 nRings Func < Int32 , Boolean > FilterF ExtractSelected() Declaration public HashSet<int> ExtractSelected() Returns Type Description HashSet < Int32 > FloodFill(Int32, Func<Int32, Boolean>) Grow selection outwards from seed vertex, until it hits boundaries defined by vertex filter. Declaration public void FloodFill(int vSeed, Func<int, bool> VertIncludedF = null) Parameters Type Name Description Int32 vSeed Func < Int32 , Boolean > VertIncludedF FloodFill(Int32[], Func<Int32, Boolean>) Grow selection outwards from seed vertex, until it hits boundaries defined by vertex filter. Declaration public void FloodFill(int[] Seeds, Func<int, bool> VertIncludedF = null) Parameters Type Name Description Int32 [] Seeds Func < Int32 , Boolean > VertIncludedF GetEnumerator() Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator < Int32 > IsSelected(Int32) Declaration public bool IsSelected(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean Select(IEnumerable<Int32>) Declaration public void Select(IEnumerable<int> vertices) Parameters Type Name Description IEnumerable < Int32 > vertices Select(Int32) Declaration public void Select(int vID) Parameters Type Name Description Int32 vID Select(Int32[]) Declaration public void Select(int[] vertices) Parameters Type Name Description Int32 [] vertices SelectConnectedBoundaryV(Int32) Select set of boundary vertices connected to vSeed. Declaration public void SelectConnectedBoundaryV(int vSeed) Parameters Type Name Description Int32 vSeed SelectEdgeVertices(IEnumerable<Int32>) Declaration public void SelectEdgeVertices(IEnumerable<int> edges) Parameters Type Name Description IEnumerable < Int32 > edges SelectEdgeVertices(Int32[]) Declaration public void SelectEdgeVertices(int[] edges) Parameters Type Name Description Int32 [] edges SelectInteriorVertices(MeshFaceSelection) for each vertex of input triangle set, select vertex if all one-ring triangles are contained in triangle set (ie vertex is not on boundary of triangle set). Declaration public void SelectInteriorVertices(MeshFaceSelection triangles) Parameters Type Name Description MeshFaceSelection triangles SelectTriangleVertices(MeshFaceSelection) Declaration public void SelectTriangleVertices(MeshFaceSelection triangles) Parameters Type Name Description MeshFaceSelection triangles SelectTriangleVertices(IEnumerable<Int32>) Declaration public void SelectTriangleVertices(IEnumerable<int> triangles) Parameters Type Name Description IEnumerable < Int32 > triangles SelectTriangleVertices(Int32[]) Declaration public void SelectTriangleVertices(int[] triangles) Parameters Type Name Description Int32 [] triangles ToArray() Declaration public int[] ToArray() Returns Type Description Int32 [] Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.MeshWeights.html": {
    "href": "api/g3.MeshWeights.html",
    "title": "Class MeshWeights | ViRGIS VR GIS",
    "keywords": "Class MeshWeights Inheritance Object MeshWeights Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class MeshWeights Methods CotanCentroid(DMesh3, Int32) Declaration public static Vector3d CotanCentroid(DMesh3 mesh, int v_i) Parameters Type Name Description DMesh3 mesh Int32 v_i Returns Type Description Vector3d MeanValueCentroid(DMesh3, Int32) Declaration public static Vector3d MeanValueCentroid(DMesh3 mesh, int v_i) Parameters Type Name Description DMesh3 mesh Int32 v_i Returns Type Description Vector3d OneRingCentroid(DMesh3, Int32) Declaration public static Vector3d OneRingCentroid(DMesh3 mesh, int vID) Parameters Type Name Description DMesh3 mesh Int32 vID Returns Type Description Vector3d VectorTanHalfAngle(Vector3d, Vector3d) Declaration public static double VectorTanHalfAngle(Vector3d a, Vector3d b) Parameters Type Name Description Vector3d a Vector3d b Returns Type Description Double VoronoiArea(DMesh3, Int32) Declaration public static double VoronoiArea(DMesh3 mesh, int v_i) Parameters Type Name Description DMesh3 mesh Int32 v_i Returns Type Description Double"
  },
  "api/g3.ModifyVerticesMeshChange.html": {
    "href": "api/g3.ModifyVerticesMeshChange.html",
    "title": "Class ModifyVerticesMeshChange | ViRGIS VR GIS",
    "keywords": "Class ModifyVerticesMeshChange Mesh change for vertex deformations. Currently minimal support for initializing buffers. AppendNewVertex() can be used to accumulate modified vertices and their initial positions. Inheritance Object ModifyVerticesMeshChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ModifyVerticesMeshChange Constructors ModifyVerticesMeshChange(DMesh3, MeshComponents) Declaration public ModifyVerticesMeshChange(DMesh3 mesh, MeshComponents wantComponents = MeshComponents.VertexNormals | MeshComponents.VertexColors | MeshComponents.VertexUVs | MeshComponents.FaceGroups | MeshComponents.All) Parameters Type Name Description DMesh3 mesh MeshComponents wantComponents Fields ModifiedV Declaration public DVector<int> ModifiedV Field Value Type Description DVector < Int32 > NewColors Declaration public DVector<Vector3f> NewColors Field Value Type Description DVector < Vector3f > NewNormals Declaration public DVector<Vector3f> NewNormals Field Value Type Description DVector < Vector3f > NewPositions Declaration public DVector<Vector3d> NewPositions Field Value Type Description DVector < Vector3d > NewUVs Declaration public DVector<Vector2f> NewUVs Field Value Type Description DVector < Vector2f > OldColors Declaration public DVector<Vector3f> OldColors Field Value Type Description DVector < Vector3f > OldNormals Declaration public DVector<Vector3f> OldNormals Field Value Type Description DVector < Vector3f > OldPositions Declaration public DVector<Vector3d> OldPositions Field Value Type Description DVector < Vector3d > OldUVs Declaration public DVector<Vector2f> OldUVs Field Value Type Description DVector < Vector2f > OnApplyF Declaration public Action<ModifyVerticesMeshChange> OnApplyF Field Value Type Description Action < ModifyVerticesMeshChange > OnRevertF Declaration public Action<ModifyVerticesMeshChange> OnRevertF Field Value Type Description Action < ModifyVerticesMeshChange > Methods AppendNewVertex(DMesh3, Int32) Declaration public int AppendNewVertex(DMesh3 mesh, int vid) Parameters Type Name Description DMesh3 mesh Int32 vid Returns Type Description Int32 Apply(DMesh3) Declaration public void Apply(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Revert(DMesh3) Declaration public void Revert(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh"
  },
  "api/g3.MultigridIndexer2.html": {
    "href": "api/g3.MultigridIndexer2.html",
    "title": "Struct MultigridIndexer2 | ViRGIS VR GIS",
    "keywords": "Struct MultigridIndexer2 map between \"outer\" (ie higher-res) grid coordinates and \"blocks\" of those coordinates. Implements IMultigridIndexer2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct MultigridIndexer2 : IMultigridIndexer2 Constructors MultigridIndexer2(Vector2i) Declaration public MultigridIndexer2(Vector2i blockSize) Parameters Type Name Description Vector2i blockSize Fields BlockShift Declaration public Vector2i BlockShift Field Value Type Description Vector2i BlockSize Declaration public Vector2i BlockSize Field Value Type Description Vector2i OuterShift Declaration public Vector2i OuterShift Field Value Type Description Vector2i Methods FromBlock(Vector2i) Declaration public Vector2i FromBlock(Vector2i block_idx) Parameters Type Name Description Vector2i block_idx Returns Type Description Vector2i ToBlock(Vector2i) Declaration public GridLevelIndex2 ToBlock(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description GridLevelIndex2 ToBlockIndex(Vector2i) Declaration public Vector2i ToBlockIndex(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description Vector2i ToBlockLocal(Vector2i) Declaration public Vector2i ToBlockLocal(Vector2i outer_index) Parameters Type Name Description Vector2i outer_index Returns Type Description Vector2i Implements IMultigridIndexer2"
  },
  "api/g3.MultigridIndexer3.html": {
    "href": "api/g3.MultigridIndexer3.html",
    "title": "Struct MultigridIndexer3 | ViRGIS VR GIS",
    "keywords": "Struct MultigridIndexer3 map between \"outer\" (ie higher-res) grid coordinates and \"blocks\" of those coordinates. Implements IMultigridIndexer3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct MultigridIndexer3 : IMultigridIndexer3 Constructors MultigridIndexer3(Vector3i) Declaration public MultigridIndexer3(Vector3i blockSize) Parameters Type Name Description Vector3i blockSize Fields BlockShift Declaration public Vector3i BlockShift Field Value Type Description Vector3i BlockSize Declaration public Vector3i BlockSize Field Value Type Description Vector3i OuterShift Declaration public Vector3i OuterShift Field Value Type Description Vector3i Methods FromBlock(Vector3i) Declaration public Vector3i FromBlock(Vector3i block_idx) Parameters Type Name Description Vector3i block_idx Returns Type Description Vector3i ToBlock(Vector3i) Declaration public GridLevelIndex ToBlock(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description GridLevelIndex ToBlockIndex(Vector3i) Declaration public Vector3i ToBlockIndex(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description Vector3i ToBlockLocal(Vector3i) Declaration public Vector3i ToBlockLocal(Vector3i outer_index) Parameters Type Name Description Vector3i outer_index Returns Type Description Vector3i Implements IMultigridIndexer3"
  },
  "api/g3.NewVertexInfo.html": {
    "href": "api/g3.NewVertexInfo.html",
    "title": "Struct NewVertexInfo | ViRGIS VR GIS",
    "keywords": "Struct NewVertexInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct NewVertexInfo Constructors NewVertexInfo(Vector3d) Declaration public NewVertexInfo(Vector3d v) Parameters Type Name Description Vector3d v NewVertexInfo(Vector3d, Vector3f) Declaration public NewVertexInfo(Vector3d v, Vector3f n) Parameters Type Name Description Vector3d v Vector3f n NewVertexInfo(Vector3d, Vector3f, Vector3f) Declaration public NewVertexInfo(Vector3d v, Vector3f n, Vector3f c) Parameters Type Name Description Vector3d v Vector3f n Vector3f c NewVertexInfo(Vector3d, Vector3f, Vector3f, Vector2f) Declaration public NewVertexInfo(Vector3d v, Vector3f n, Vector3f c, Vector2f uv) Parameters Type Name Description Vector3d v Vector3f n Vector3f c Vector2f uv Fields bHaveC Declaration public bool bHaveC Field Value Type Description Boolean bHaveN Declaration public bool bHaveN Field Value Type Description Boolean bHaveUV Declaration public bool bHaveUV Field Value Type Description Boolean c Declaration public Vector3f c Field Value Type Description Vector3f n Declaration public Vector3f n Field Value Type Description Vector3f uv Declaration public Vector2f uv Field Value Type Description Vector2f v Declaration public Vector3d v Field Value Type Description Vector3d"
  },
  "api/g3.NormalHistogram.html": {
    "href": "api/g3.NormalHistogram.html",
    "title": "Class NormalHistogram | ViRGIS VR GIS",
    "keywords": "Class NormalHistogram Construct spherical histogram of normals of mesh. Binning is done using a Spherical Fibonacci point set. Inheritance Object NormalHistogram Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class NormalHistogram Constructors NormalHistogram(DMesh3, Boolean, Int32) legacy API Declaration public NormalHistogram(DMesh3 mesh, bool bWeightByArea = true, int bins = 1024) Parameters Type Name Description DMesh3 mesh Boolean bWeightByArea Int32 bins NormalHistogram(Int32, Boolean) Declaration public NormalHistogram(int bins, bool bTrackUsed = false) Parameters Type Name Description Int32 bins Boolean bTrackUsed Fields Bins Declaration public int Bins Field Value Type Description Int32 Counts Declaration public double[] Counts Field Value Type Description Double [] Points Declaration public SphericalFibonacciPointSet Points Field Value Type Description SphericalFibonacciPointSet UsedBins Declaration public HashSet<int> UsedBins Field Value Type Description HashSet < Int32 > Methods Count(Vector3d, Double, Boolean) bin and count point, and optionally normalize Declaration public void Count(Vector3d pt, double weight = 1, bool bIsNormalized = false) Parameters Type Name Description Vector3d pt Double weight Boolean bIsNormalized CountFaceNormals(DMesh3, Boolean) Count all input mesh face normals Declaration public void CountFaceNormals(DMesh3 mesh, bool bWeightByArea = true) Parameters Type Name Description DMesh3 mesh Boolean bWeightByArea FindMaxNormal() return (quantized) normal associated w/ maximum weight/area Declaration public Vector3d FindMaxNormal() Returns Type Description Vector3d"
  },
  "api/g3.NTMesh3.EdgeSplitInfo.html": {
    "href": "api/g3.NTMesh3.EdgeSplitInfo.html",
    "title": "Struct NTMesh3.EdgeSplitInfo | ViRGIS VR GIS",
    "keywords": "Struct NTMesh3.EdgeSplitInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct EdgeSplitInfo Fields bIsBoundary Declaration public bool bIsBoundary Field Value Type Description Boolean eNewBN Declaration public int eNewBN Field Value Type Description Int32 NewEdges Declaration public List<int> NewEdges Field Value Type Description List < Int32 > vNew Declaration public int vNew Field Value Type Description Int32"
  },
  "api/g3.NTMesh3.html": {
    "href": "api/g3.NTMesh3.html",
    "title": "Class NTMesh3 | ViRGIS VR GIS",
    "keywords": "Class NTMesh3 Inheritance Object NTMesh3 Implements IDeformableMesh IMesh IPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class NTMesh3 : IDeformableMesh, IMesh, IPointSet Constructors NTMesh3(DMesh3) Declaration public NTMesh3(DMesh3 copy) Parameters Type Name Description DMesh3 copy NTMesh3(MeshComponents) Declaration public NTMesh3(MeshComponents flags) Parameters Type Name Description MeshComponents flags NTMesh3(NTMesh3) Declaration public NTMesh3(NTMesh3 copy) Parameters Type Name Description NTMesh3 copy NTMesh3(Boolean, Boolean, Boolean) Declaration public NTMesh3(bool bWantNormals = true, bool bWantColors = false, bool bWantTriGroups = false) Parameters Type Name Description Boolean bWantNormals Boolean bWantColors Boolean bWantTriGroups Fields InvalidEdge Declaration public static readonly Index2i InvalidEdge Field Value Type Description Index2i InvalidID Declaration public const int InvalidID = -1 Field Value Type Description Int32 InvalidTriangle Declaration public static readonly Index3i InvalidTriangle Field Value Type Description Index3i InvalidVertex Declaration public static readonly Vector3d InvalidVertex Field Value Type Description Vector3d NonManifoldID Declaration public const int NonManifoldID = -2 Field Value Type Description Int32 Properties CachedBounds Declaration public AxisAlignedBox3d CachedBounds { get; } Property Value Type Description AxisAlignedBox3d CachedIsClosed Declaration public bool CachedIsClosed { get; } Property Value Type Description Boolean Components Declaration public MeshComponents Components { get; } Property Value Type Description MeshComponents EdgeCount Declaration public int EdgeCount { get; } Property Value Type Description Int32 HasTriangleGroups Declaration public bool HasTriangleGroups { get; } Property Value Type Description Boolean HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean HasVertexUVs Declaration public bool HasVertexUVs { get; } Property Value Type Description Boolean IsCompact Declaration public bool IsCompact { get; } Property Value Type Description Boolean IsCompactV Declaration public bool IsCompactV { get; } Property Value Type Description Boolean MaxEdgeID Declaration public int MaxEdgeID { get; } Property Value Type Description Int32 MaxGroupID Declaration public int MaxGroupID { get; } Property Value Type Description Int32 MaxTriangleID Declaration public int MaxTriangleID { get; } Property Value Type Description Int32 MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 ShapeTimestamp Declaration public int ShapeTimestamp { get; } Property Value Type Description Int32 Timestamp Declaration public int Timestamp { get; } Property Value Type Description Int32 TriangleCount Declaration public int TriangleCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods AllocateTriangleGroup() Declaration public int AllocateTriangleGroup() Returns Type Description Int32 AppendTriangle(Index3i, Int32) Declaration public int AppendTriangle(Index3i tv, int gid = -1) Parameters Type Name Description Index3i tv Int32 gid Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32, Int32) Declaration public int AppendTriangle(int v0, int v1, int v2, int gid = -1) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Int32 gid Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Vector3d) Declaration public int AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 BoundaryEdgeIndices() Declaration public IEnumerable<int> BoundaryEdgeIndices() Returns Type Description IEnumerable < Int32 > CheckValidity(FailMode) Declaration public bool CheckValidity(FailMode eFailMode = FailMode.Throw) Parameters Type Name Description FailMode eFailMode Returns Type Description Boolean Copy(NTMesh3, Boolean, Boolean) Declaration public void Copy(NTMesh3 copy, bool bNormals = true, bool bColors = true) Parameters Type Name Description NTMesh3 copy Boolean bNormals Boolean bColors debug_check_is_edge(Int32) Declaration public void debug_check_is_edge(int e) Parameters Type Name Description Int32 e debug_check_is_triangle(Int32) Declaration public void debug_check_is_triangle(int t) Parameters Type Name Description Int32 t debug_check_is_vertex(Int32) Declaration public void debug_check_is_vertex(int v) Parameters Type Name Description Int32 v Deconstruct() Declaration public DMesh3 Deconstruct() Returns Type Description DMesh3 DiscardTriangleGroups() Declaration public void DiscardTriangleGroups() DiscardVertexColors() Declaration public void DiscardVertexColors() DiscardVertexNormals() Declaration public void DiscardVertexNormals() edge_has_t(Int32, Int32) Declaration protected bool edge_has_t(int eid, int tid) Parameters Type Name Description Int32 eid Int32 tid Returns Type Description Boolean edge_has_v(Int32, Int32) Declaration protected bool edge_has_v(int eid, int vid) Parameters Type Name Description Int32 eid Int32 vid Returns Type Description Boolean edge_is_boundary(Int32) Declaration protected bool edge_is_boundary(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean edge_other_v(Int32, Int32) Declaration protected int edge_other_v(int eID, int vID) Parameters Type Name Description Int32 eID Int32 vID Returns Type Description Int32 EdgeIndices() Declaration public IEnumerable<int> EdgeIndices() Returns Type Description IEnumerable < Int32 > EdgeTrianglesCount(Int32) Declaration public int EdgeTrianglesCount(int eID) Parameters Type Name Description Int32 eID Returns Type Description Int32 EdgeTrianglesItr(Int32) Declaration public IEnumerable<int> EdgeTrianglesItr(int eID) Parameters Type Name Description Int32 eID Returns Type Description IEnumerable < Int32 > EnableTriangleGroups(Int32) Declaration public void EnableTriangleGroups(int initial_group = 0) Parameters Type Name Description Int32 initial_group EnableVertexColors(Vector3f) Declaration public void EnableVertexColors(Vector3f initial_color) Parameters Type Name Description Vector3f initial_color EnableVertexNormals(Vector3f) Declaration public void EnableVertexNormals(Vector3f initial_normal) Parameters Type Name Description Vector3f initial_normal find_tri_neighbour_edge(Int32, Int32, Int32) Declaration protected int find_tri_neighbour_edge(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Int32 find_tri_neighbour_index(Int32, Int32, Int32) Declaration protected int find_tri_neighbour_index(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Int32 FindEdge(Int32, Int32) Declaration public int FindEdge(int vA, int vB) Parameters Type Name Description Int32 vA Int32 vB Returns Type Description Int32 FindEdgeFromTri(Int32, Int32, Int32) Declaration public int FindEdgeFromTri(int vA, int vB, int t) Parameters Type Name Description Int32 vA Int32 vB Int32 t Returns Type Description Int32 GetBounds() Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetEdgeV(Int32) Declaration public Index2i GetEdgeV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetEdgeV(Int32, ref Vector3d, ref Vector3d) Declaration public bool GetEdgeV(int eID, ref Vector3d a, ref Vector3d b) Parameters Type Name Description Int32 eID Vector3d a Vector3d b Returns Type Description Boolean GetMaxVtxEdgeCount() Declaration public int GetMaxVtxEdgeCount() Returns Type Description Int32 GetOrientedBoundaryEdgeV(Int32) Declaration public Index2i GetOrientedBoundaryEdgeV(int eID) Parameters Type Name Description Int32 eID Returns Type Description Index2i GetTriangle(Int32) Declaration public Index3i GetTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Index3i GetTriangleGroup(Int32) Declaration public int GetTriangleGroup(int tID) Parameters Type Name Description Int32 tID Returns Type Description Int32 GetTriArea(Int32) Declaration public double GetTriArea(int tID) Parameters Type Name Description Int32 tID Returns Type Description Double GetTriBounds(Int32) Declaration public AxisAlignedBox3d GetTriBounds(int tID) Parameters Type Name Description Int32 tID Returns Type Description AxisAlignedBox3d GetTriEdge(Int32, Int32) Declaration public int GetTriEdge(int tid, int j) Parameters Type Name Description Int32 tid Int32 j Returns Type Description Int32 GetTriEdges(Int32) Declaration public Index3i GetTriEdges(int tID) Parameters Type Name Description Int32 tID Returns Type Description Index3i GetTriFrame(Int32, Int32) Declaration public Frame3f GetTriFrame(int tID, int nEdge = 0) Parameters Type Name Description Int32 tID Int32 nEdge Returns Type Description Frame3f GetTriInfo(Int32, out Vector3d, out Double, out Vector3d) Declaration public void GetTriInfo(int tID, out Vector3d normal, out double fArea, out Vector3d vCentroid) Parameters Type Name Description Int32 tID Vector3d normal Double fArea Vector3d vCentroid GetTriNormal(Int32) Declaration public Vector3d GetTriNormal(int tID) Parameters Type Name Description Int32 tID Returns Type Description Vector3d GetTriVertex(Int32, Int32) Declaration public Vector3d GetTriVertex(int tid, int j) Parameters Type Name Description Int32 tid Int32 j Returns Type Description Vector3d GetTriVertices(Int32, ref Vector3d, ref Vector3d, ref Vector3d) Declaration public void GetTriVertices(int tID, ref Vector3d v0, ref Vector3d v1, ref Vector3d v2) Parameters Type Name Description Int32 tID Vector3d v0 Vector3d v1 Vector3d v2 GetVertex(Int32) Declaration public Vector3d GetVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3d GetVertex(Int32, ref NewVertexInfo, Boolean, Boolean, Boolean) Declaration public bool GetVertex(int vID, ref NewVertexInfo vinfo, bool bWantNormals, bool bWantColors, bool bWantUVs) Parameters Type Name Description Int32 vID NewVertexInfo vinfo Boolean bWantNormals Boolean bWantColors Boolean bWantUVs Returns Type Description Boolean GetVertexAll(Int32) Declaration public NewVertexInfo GetVertexAll(int i) Parameters Type Name Description Int32 i Returns Type Description NewVertexInfo GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexf(Int32) Declaration public Vector3f GetVertexf(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int vID) Parameters Type Name Description Int32 vID Returns Type Description Vector3f GetVertexUV(Int32) Declaration public Vector2f GetVertexUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f GetVtxEdgeCount(Int32) Declaration public int GetVtxEdgeCount(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 GetVtxTriangleCount(Int32, Boolean) return # of triangles attached to vID, or -1 if invalid vertex Declaration public int GetVtxTriangleCount(int vID, bool bBruteForce = false) Parameters Type Name Description Int32 vID Boolean bBruteForce Returns Type Description Int32 GetVtxTriangles(Int32, List<Int32>) Declaration public MeshResult GetVtxTriangles(int vID, List<int> vTriangles) Parameters Type Name Description Int32 vID List < Int32 > vTriangles Returns Type Description MeshResult IsBoundaryEdge(Int32) Declaration public bool IsBoundaryEdge(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean IsBoundaryTriangle(Int32) Declaration public bool IsBoundaryTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean IsBoundaryVertex(Int32) Declaration public bool IsBoundaryVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsBowtieVertex(Int32) returns true if vID is a \"bowtie\" vertex, ie multiple disjoint triangle sets in one-ring Declaration public bool IsBowtieVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean IsClosed() Declaration public bool IsClosed() Returns Type Description Boolean IsEdge(Int32) Declaration public bool IsEdge(int eID) Parameters Type Name Description Int32 eID Returns Type Description Boolean IsNonManifoldEdge(Int32) Declaration public bool IsNonManifoldEdge(int eid) Parameters Type Name Description Int32 eid Returns Type Description Boolean IsTriangle(Int32) Declaration public bool IsTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean PokeTriangle(Int32, out NTMesh3.PokeTriangleInfo) Declaration public virtual MeshResult PokeTriangle(int tid, out NTMesh3.PokeTriangleInfo result) Parameters Type Name Description Int32 tid NTMesh3.PokeTriangleInfo result Returns Type Description MeshResult PokeTriangle(Int32, Vector3d, out NTMesh3.PokeTriangleInfo) Declaration public virtual MeshResult PokeTriangle(int tid, Vector3d baryCoordinates, out NTMesh3.PokeTriangleInfo result) Parameters Type Name Description Int32 tid Vector3d baryCoordinates NTMesh3.PokeTriangleInfo result Returns Type Description MeshResult RemoveTriangle(Int32, Boolean) Remove a tID from the mesh. Also removes any unreferenced edges after tri is removed. If bRemoveIsolatedVertices is false, then if you remove all tris from a vert, that vert is also removed. If bPreserveManifold, we check that you will not create a bowtie vertex (and return false). If this check is not done, you have to make sure you don't create a bowtie, because other code assumes we don't have bowties, and will not handle it properly Declaration public MeshResult RemoveTriangle(int tID, bool bRemoveIsolatedVertices = true) Parameters Type Name Description Int32 tID Boolean bRemoveIsolatedVertices Returns Type Description MeshResult SetTriangleGroup(Int32, Int32) Declaration public void SetTriangleGroup(int tid, int group_id) Parameters Type Name Description Int32 tid Int32 group_id SetVertex(Int32, Vector3d) Declaration public void SetVertex(int vID, Vector3d vNewPos) Parameters Type Name Description Int32 vID Vector3d vNewPos SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int vID, Vector3f vNewColor) Parameters Type Name Description Int32 vID Vector3f vNewColor SetVertexNormal(Int32, Vector3f) Declaration public void SetVertexNormal(int vID, Vector3f vNewNormal) Parameters Type Name Description Int32 vID Vector3f vNewNormal SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int vID, Vector2f UV) Parameters Type Name Description Int32 vID Vector2f UV SplitEdge(Int32, out NTMesh3.EdgeSplitInfo) Declaration public MeshResult SplitEdge(int eab, out NTMesh3.EdgeSplitInfo split) Parameters Type Name Description Int32 eab NTMesh3.EdgeSplitInfo split Returns Type Description MeshResult SplitEdge(Int32, Int32, out NTMesh3.EdgeSplitInfo) Declaration public MeshResult SplitEdge(int vA, int vB, out NTMesh3.EdgeSplitInfo split) Parameters Type Name Description Int32 vA Int32 vB NTMesh3.EdgeSplitInfo split Returns Type Description MeshResult tri_has_neighbour_t(Int32, Int32) Declaration protected bool tri_has_neighbour_t(int tCheck, int tNbr) Parameters Type Name Description Int32 tCheck Int32 tNbr Returns Type Description Boolean tri_has_sequential_v(Int32, Int32, Int32) Declaration protected bool tri_has_sequential_v(int tID, int vA, int vB) Parameters Type Name Description Int32 tID Int32 vA Int32 vB Returns Type Description Boolean tri_has_v(Int32, Int32) Declaration protected bool tri_has_v(int tID, int vID) Parameters Type Name Description Int32 tID Int32 vID Returns Type Description Boolean tri_is_boundary(Int32) Declaration protected bool tri_is_boundary(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean TriangleIndices() Declaration public IEnumerable<int> TriangleIndices() Returns Type Description IEnumerable < Int32 > Triangles() Declaration public IEnumerable<Index3i> Triangles() Returns Type Description IEnumerable < Index3i > TriTrianglesItr(Int32) Declaration public IEnumerable<int> TriTrianglesItr(int tID) Parameters Type Name Description Int32 tID Returns Type Description IEnumerable < Int32 > vertex_is_boundary(Int32) Declaration public bool vertex_is_boundary(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > Vertices() Declaration public IEnumerable<Vector3d> Vertices() Returns Type Description IEnumerable < Vector3d > VtxAllBoundaryEdges(Int32, Int32[]) e needs to be large enough (ie call VtxBoundaryEdges, or as large as max one-ring) returns count, ie number of elements of e that were filled Declaration public int VtxAllBoundaryEdges(int vID, int[] e) Parameters Type Name Description Int32 vID Int32 [] e Returns Type Description Int32 VtxBoundaryEdges(Int32) Returns count of boundary edges at vertex Declaration public int VtxBoundaryEdges(int vID) Parameters Type Name Description Int32 vID Returns Type Description Int32 VtxEdgesItr(Int32) Declaration public IEnumerable<int> VtxEdgesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > VtxTrianglesItr(Int32) Declaration public IEnumerable<int> VtxTrianglesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > VtxVerticesItr(Int32) Declaration public IEnumerable<int> VtxVerticesItr(int vID) Parameters Type Name Description Int32 vID Returns Type Description IEnumerable < Int32 > Implements IDeformableMesh IMesh IPointSet"
  },
  "api/g3.NTMesh3.PokeTriangleInfo.html": {
    "href": "api/g3.NTMesh3.PokeTriangleInfo.html",
    "title": "Struct NTMesh3.PokeTriangleInfo | ViRGIS VR GIS",
    "keywords": "Struct NTMesh3.PokeTriangleInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct PokeTriangleInfo Fields new_edges Declaration public Index3i new_edges Field Value Type Description Index3i new_t1 Declaration public int new_t1 Field Value Type Description Int32 new_t2 Declaration public int new_t2 Field Value Type Description Int32 new_vid Declaration public int new_vid Field Value Type Description Int32"
  },
  "api/g3.NURBSCurve2.CurveDerivatives.html": {
    "href": "api/g3.NURBSCurve2.CurveDerivatives.html",
    "title": "Struct NURBSCurve2.CurveDerivatives | ViRGIS VR GIS",
    "keywords": "Struct NURBSCurve2.CurveDerivatives Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct CurveDerivatives Fields bDer1 Declaration public bool bDer1 Field Value Type Description Boolean bDer2 Declaration public bool bDer2 Field Value Type Description Boolean bDer3 Declaration public bool bDer3 Field Value Type Description Boolean bPosition Declaration public bool bPosition Field Value Type Description Boolean d1 Declaration public Vector2d d1 Field Value Type Description Vector2d d2 Declaration public Vector2d d2 Field Value Type Description Vector2d d3 Declaration public Vector2d d3 Field Value Type Description Vector2d p Declaration public Vector2d p Field Value Type Description Vector2d Methods init() Declaration public void init() init(Boolean, Boolean, Boolean, Boolean) Declaration public void init(bool pos, bool der1, bool der2, bool der3) Parameters Type Name Description Boolean pos Boolean der1 Boolean der2 Boolean der3"
  },
  "api/g3.NURBSCurve2.html": {
    "href": "api/g3.NURBSCurve2.html",
    "title": "Class NURBSCurve2 | ViRGIS VR GIS",
    "keywords": "Class NURBSCurve2 Inheritance Object BaseCurve2 NURBSCurve2 Implements IParametricCurve2d Inherited Members BaseCurve2.mTMin BaseCurve2.mTMax BaseCurve2.GetMinTime() BaseCurve2.GetMaxTime() BaseCurve2.SetTimeInterval(Double, Double) BaseCurve2.GetSpeed(Double) BaseCurve2.GetLength(Double, Double) BaseCurve2.GetTotalLength() BaseCurve2.GetTangent(Double) BaseCurve2.GetNormal(Double) BaseCurve2.GetFrame(Double, Vector2d, Vector2d, Vector2d) BaseCurve2.GetCurvature(Double) BaseCurve2.GetTime(Double, Int32, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class NURBSCurve2 : BaseCurve2, IParametricCurve2d Constructors NURBSCurve2() Declaration protected NURBSCurve2() NURBSCurve2(Int32, Vector2d[], Double[], Int32, Boolean, Boolean) Declaration public NURBSCurve2(int numCtrlPoints, Vector2d[] ctrlPoint, double[] ctrlWeight, int degree, bool loop, bool open) Parameters Type Name Description Int32 numCtrlPoints Vector2d [] ctrlPoint Double [] ctrlWeight Int32 degree Boolean loop Boolean open NURBSCurve2(Int32, Vector2d[], Double[], Int32, Boolean, Double[], Boolean) Declaration public NURBSCurve2(int numCtrlPoints, Vector2d[] ctrlPoint, double[] ctrlWeight, int degree, bool loop, double[] knot, bool bIsInteriorKnot = true) Parameters Type Name Description Int32 numCtrlPoints Vector2d [] ctrlPoint Double [] ctrlWeight Int32 degree Boolean loop Double [] knot Boolean bIsInteriorKnot Fields is_closed Declaration protected bool is_closed Field Value Type Description Boolean mBasis Declaration protected BSplineBasis mBasis Field Value Type Description BSplineBasis mCtrlPoint Declaration protected Vector2d[] mCtrlPoint Field Value Type Description Vector2d [] mCtrlWeight Declaration protected double[] mCtrlWeight Field Value Type Description Double [] mLoop Declaration protected bool mLoop Field Value Type Description Boolean mNumCtrlPoints Declaration protected int mNumCtrlPoints Field Value Type Description Int32 mReplicate Declaration protected int mReplicate Field Value Type Description Int32 Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; set; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d CreateControl(Vector2d[], Double[]) Declaration protected void CreateControl(Vector2d[] ctrlPoint, double[] ctrlWeight) Parameters Type Name Description Vector2d [] ctrlPoint Double [] ctrlWeight Get(Double, ref NURBSCurve2.CurveDerivatives) Declaration public void Get(double t, ref NURBSCurve2.CurveDerivatives result) Parameters Type Name Description Double t NURBSCurve2.CurveDerivatives result GetBasis() Declaration public BSplineBasis GetBasis() Returns Type Description BSplineBasis GetContinuousParamIntervals() Declaration public List<double> GetContinuousParamIntervals() Returns Type Description List < Double > GetControlPoint(Int32) Declaration public Vector2d GetControlPoint(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d GetControlWeight(Int32) Declaration public double GetControlWeight(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetDegree() Declaration public int GetDegree() Returns Type Description Int32 GetFirstDerivative(Double) Declaration public override Vector2d GetFirstDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetFirstDerivative(Double) GetKnot(Int32) Declaration public double GetKnot(int i) Parameters Type Name Description Int32 i Returns Type Description Double GetNumCtrlPoints() Declaration public int GetNumCtrlPoints() Returns Type Description Int32 GetParamIntervals() Declaration public List<double> GetParamIntervals() Returns Type Description List < Double > GetPosition(Double) Declaration public override Vector2d GetPosition(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetPosition(Double) GetSecondDerivative(Double) Declaration public override Vector2d GetSecondDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetSecondDerivative(Double) GetThirdDerivative(Double) Declaration public override Vector2d GetThirdDerivative(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Overrides BaseCurve2.GetThirdDerivative(Double) IsUniform() Declaration public bool IsUniform() Returns Type Description Boolean Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d SetControlPoint(Int32, Vector2d) Declaration public void SetControlPoint(int i, Vector2d ctrl) Parameters Type Name Description Int32 i Vector2d ctrl SetControlWeight(Int32, Double) Declaration public void SetControlWeight(int i, double weight) Parameters Type Name Description Int32 i Double weight SetKnot(Int32, Double) Declaration public void SetKnot(int i, double value) Parameters Type Name Description Int32 i Double value TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.OBJFormatReader.html": {
    "href": "api/g3.OBJFormatReader.html",
    "title": "Class OBJFormatReader | ViRGIS VR GIS",
    "keywords": "Class OBJFormatReader Inheritance Object OBJFormatReader Implements MeshFormatReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OBJFormatReader : MeshFormatReader Properties SupportedExtensions Declaration public List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult Implements MeshFormatReader"
  },
  "api/g3.OBJMaterial.html": {
    "href": "api/g3.OBJMaterial.html",
    "title": "Class OBJMaterial | ViRGIS VR GIS",
    "keywords": "Class OBJMaterial Inheritance Object GenericMaterial OBJMaterial Inherited Members GenericMaterial.Invalidf GenericMaterial.Invalid GenericMaterial.name GenericMaterial.id GenericMaterial.Type Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OBJMaterial : GenericMaterial Constructors OBJMaterial() Declaration public OBJMaterial() Fields bump Declaration public string bump Field Value Type Description String d Declaration public float d Field Value Type Description Single decal Declaration public string decal Field Value Type Description String disp Declaration public string disp Field Value Type Description String illum Declaration public int illum Field Value Type Description Int32 Ka Declaration public Vector3f Ka Field Value Type Description Vector3f Kd Declaration public Vector3f Kd Field Value Type Description Vector3f Ke Declaration public Vector3f Ke Field Value Type Description Vector3f Ks Declaration public Vector3f Ks Field Value Type Description Vector3f map_d Declaration public string map_d Field Value Type Description String map_Ka Declaration public string map_Ka Field Value Type Description String map_Kd Declaration public string map_Kd Field Value Type Description String map_Ke Declaration public string map_Ke Field Value Type Description String map_Ks Declaration public string map_Ks Field Value Type Description String map_Ns Declaration public string map_Ns Field Value Type Description String Ni Declaration public float Ni Field Value Type Description Single Ns Declaration public float Ns Field Value Type Description Single refl Declaration public string refl Field Value Type Description String sharpness Declaration public float sharpness Field Value Type Description Single Tf Declaration public Vector3f Tf Field Value Type Description Vector3f Properties Alpha Declaration public override float Alpha { get; set; } Property Value Type Description Single Overrides GenericMaterial.Alpha DiffuseColor Declaration public override Vector3f DiffuseColor { get; set; } Property Value Type Description Vector3f Overrides GenericMaterial.DiffuseColor"
  },
  "api/g3.OBJReader.html": {
    "href": "api/g3.OBJReader.html",
    "title": "Class OBJReader | ViRGIS VR GIS",
    "keywords": "Class OBJReader Inheritance Object OBJReader Implements IMeshReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OBJReader : IMeshReader Constructors OBJReader() Declaration public OBJReader() Properties HasComplexVertices Declaration public bool HasComplexVertices { get; set; } Property Value Type Description Boolean HasPerVertexColors Declaration public bool HasPerVertexColors { get; } Property Value Type Description Boolean HasTriangleGroups Declaration public bool HasTriangleGroups { get; } Property Value Type Description Boolean MTLFileSearchPaths Declaration public List<string> MTLFileSearchPaths { get; set; } Property Value Type Description List < String > UVDimension Declaration public int UVDimension { get; } Property Value Type Description Int32 Methods ParseInput(TextReader, ReadOptions) Declaration public IOReadResult ParseInput(TextReader reader, ReadOptions options) Parameters Type Name Description TextReader reader ReadOptions options Returns Type Description IOReadResult Read(BinaryReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(BinaryReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description BinaryReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Read(TextReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(TextReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description TextReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult ReadMaterials(String) Declaration public IOReadResult ReadMaterials(string sPath) Parameters Type Name Description String sPath Returns Type Description IOReadResult Events warningEvent Declaration public event ParsingMessagesHandler warningEvent Event Type Type Description ParsingMessagesHandler Implements IMeshReader"
  },
  "api/g3.OBJWriter.html": {
    "href": "api/g3.OBJWriter.html",
    "title": "Class OBJWriter | ViRGIS VR GIS",
    "keywords": "Class OBJWriter gradientspace OBJ writer [TODO] if mesh has groups, usemtl lines will not be written (see TODO below) [TODO] options to preserve vertex and triangle indices Inheritance Object OBJWriter Implements IMeshWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OBJWriter : IMeshWriter Fields CloseStreamF Declaration public Action<Stream> CloseStreamF Field Value Type Description Action < Stream > GroupNameF Declaration public Func<int, string> GroupNameF Field Value Type Description Func < Int32 , String > GroupNamePrefix Declaration public string GroupNamePrefix Field Value Type Description String OpenStreamF Declaration public Func<string, Stream> OpenStreamF Field Value Type Description Func < String , Stream > Methods set_current_material(TextWriter, Int32, WriteMesh, ref Int32) Declaration public void set_current_material(TextWriter writer, int ti, WriteMesh mesh, ref int cur_material) Parameters Type Name Description TextWriter writer Int32 ti WriteMesh mesh Int32 cur_material Write(BinaryWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(BinaryWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description BinaryWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Write(TextWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(TextWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description TextWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Implements IMeshWriter"
  },
  "api/g3.OFFFormatReader.html": {
    "href": "api/g3.OFFFormatReader.html",
    "title": "Class OFFFormatReader | ViRGIS VR GIS",
    "keywords": "Class OFFFormatReader Inheritance Object OFFFormatReader Implements MeshFormatReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OFFFormatReader : MeshFormatReader Properties SupportedExtensions Declaration public List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult Implements MeshFormatReader"
  },
  "api/g3.OFFWriter.html": {
    "href": "api/g3.OFFWriter.html",
    "title": "Class OFFWriter | ViRGIS VR GIS",
    "keywords": "Class OFFWriter Inheritance Object OFFWriter Implements IMeshWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OFFWriter : IMeshWriter Methods Write(BinaryWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(BinaryWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description BinaryWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Write(TextWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(TextWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description TextWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Implements IMeshWriter"
  },
  "api/g3.OpenCylinderGenerator.html": {
    "href": "api/g3.OpenCylinderGenerator.html",
    "title": "Class OpenCylinderGenerator | ViRGIS VR GIS",
    "keywords": "Class OpenCylinderGenerator Inheritance Object MeshGenerator OpenCylinderGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OpenCylinderGenerator : MeshGenerator Fields BaseRadius Declaration public float BaseRadius Field Value Type Description Single EndAngleDeg Declaration public float EndAngleDeg Field Value Type Description Single Height Declaration public float Height Field Value Type Description Single NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Slices Declaration public int Slices Field Value Type Description Int32 StartAngleDeg Declaration public float StartAngleDeg Field Value Type Description Single TopRadius Declaration public float TopRadius Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.OrthogonalPlaneFit3.html": {
    "href": "api/g3.OrthogonalPlaneFit3.html",
    "title": "Class OrthogonalPlaneFit3 | ViRGIS VR GIS",
    "keywords": "Class OrthogonalPlaneFit3 Inheritance Object OrthogonalPlaneFit3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OrthogonalPlaneFit3 Constructors OrthogonalPlaneFit3(IEnumerable<Vector3d>) Declaration public OrthogonalPlaneFit3(IEnumerable<Vector3d> points) Parameters Type Name Description IEnumerable < Vector3d > points Fields Normal Declaration public Vector3d Normal Field Value Type Description Vector3d Origin Declaration public Vector3d Origin Field Value Type Description Vector3d ResultValid Declaration public bool ResultValid Field Value Type Description Boolean"
  },
  "api/g3.PackedSparseMatrix.html": {
    "href": "api/g3.PackedSparseMatrix.html",
    "title": "Class PackedSparseMatrix | ViRGIS VR GIS",
    "keywords": "Class PackedSparseMatrix This is a sparse matrix where each row is an array of (column,value) pairs This is more efficient for Matrix*Vector multiply. Inheritance Object PackedSparseMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PackedSparseMatrix Constructors PackedSparseMatrix(DVector<matrix_entry>, Int32, Int32, Boolean) Declaration public PackedSparseMatrix(DVector<matrix_entry> entries, int numRows, int numCols, bool bSymmetric = true) Parameters Type Name Description DVector < matrix_entry > entries Int32 numRows Int32 numCols Boolean bSymmetric PackedSparseMatrix(PackedSparseMatrix) Declaration public PackedSparseMatrix(PackedSparseMatrix copy) Parameters Type Name Description PackedSparseMatrix copy PackedSparseMatrix(SymmetricSparseMatrix, Boolean) Declaration public PackedSparseMatrix(SymmetricSparseMatrix m, bool bTranspose = false) Parameters Type Name Description SymmetricSparseMatrix m Boolean bTranspose Fields Columns Declaration public int Columns Field Value Type Description Int32 IsSymmetric Declaration public bool IsSymmetric Field Value Type Description Boolean NumNonZeros Declaration public int NumNonZeros Field Value Type Description Int32 Rows Declaration public PackedSparseMatrix.nonzero[][] Rows Field Value Type Description PackedSparseMatrix.nonzero [][] Sorted Declaration public bool Sorted Field Value Type Description Boolean StorageMode Declaration public PackedSparseMatrix.StorageModes StorageMode Field Value Type Description PackedSparseMatrix.StorageModes Properties FrobeniusNorm Declaration public double FrobeniusNorm { get; } Property Value Type Description Double Item[Int32, Int32] Declaration public double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double MaxNorm Declaration public double MaxNorm { get; } Property Value Type Description Double Trace Declaration public double Trace { get; } Property Value Type Description Double Methods DotColumnVector(Int32, Double[], Int32, Int32) Compute dot product of this.row[r1] and this.row[r2], up to N elements Declaration public double DotColumnVector(int c, double[] vec, int start_row = 0, int end_row = 2147483647) Parameters Type Name Description Int32 c Double [] vec Int32 start_row Int32 end_row Returns Type Description Double DotRowAllColumns(Int32, Double[], Int32[], PackedSparseMatrix) Compute dot product of this.row[r] with all columns of M, where columns are stored in MTranspose rows. In theory more efficient than doing DotRowColumn(r,c) for each c, however so far the difference is negligible...perhaps because there are quite a few more branches in the inner loop Declaration public void DotRowAllColumns(int r, double[] sums, int[] col_indices, PackedSparseMatrix MTranspose) Parameters Type Name Description Int32 r Double [] sums Int32 [] col_indices PackedSparseMatrix MTranspose DotRowColumn(Int32, Int32, PackedSparseMatrix) Compute dot product of this.row[r] and M.col[c], where the column is stored as MTranspose.row[c] Declaration public double DotRowColumn(int r, int c, PackedSparseMatrix MTranspose) Parameters Type Name Description Int32 r Int32 c PackedSparseMatrix MTranspose Returns Type Description Double DotRows(Int32, Int32, Int32) Compute dot product of this.row[r1] and this.row[r2], up to N elements Declaration public double DotRows(int r1, int r2, int MaxCol = 2147483647) Parameters Type Name Description Int32 r1 Int32 r2 Int32 MaxCol Returns Type Description Double DotRowSelf(Int32) Dot product of this.row[r] with itself Declaration public double DotRowSelf(int r) Parameters Type Name Description Int32 r Returns Type Description Double DotRowVector(Int32, Double[], Int32) Compute dot product of this.row[r] and vec, up to N elements Declaration public double DotRowVector(int r, double[] vec, int MaxCol = 2147483647) Parameters Type Name Description Int32 r Double [] vec Int32 MaxCol Returns Type Description Double FromDense(DenseMatrix, Boolean) Declaration public static PackedSparseMatrix FromDense(DenseMatrix m, bool bSymmetric) Parameters Type Name Description DenseMatrix m Boolean bSymmetric Returns Type Description PackedSparseMatrix MatrixInfo(Boolean) Declaration public string MatrixInfo(bool bExtended = false) Parameters Type Name Description Boolean bExtended Returns Type Description String Multiply(Double[], Double[]) Declaration public void Multiply(double[] X, double[] Result) Parameters Type Name Description Double [] X Double [] Result Multiply_Parallel(Double[], Double[]) Declaration public void Multiply_Parallel(double[] X, double[] Result) Parameters Type Name Description Double [] X Double [] Result Multiply_Parallel_3(Double[][], Double[][]) Hardcoded variant for 3 RHS vectors, much faster Declaration public void Multiply_Parallel_3(double[][] X, double[][] Result) Parameters Type Name Description Double [][] X Double [][] Result NonZeroIndicesByRow(Boolean) Declaration public IEnumerable<Vector2i> NonZeroIndicesByRow(bool bWantSorted = true) Parameters Type Name Description Boolean bWantSorted Returns Type Description IEnumerable < Vector2i > NonZeroIndicesForRow(Int32, Boolean) Declaration public IEnumerable<Vector2i> NonZeroIndicesForRow(int r, bool bWantSorted = true) Parameters Type Name Description Int32 r Boolean bWantSorted Returns Type Description IEnumerable < Vector2i > NonZerosRange(Int32) For row r, find interval that nonzeros lie in Declaration public Interval1i NonZerosRange(int r) Parameters Type Name Description Int32 r Returns Type Description Interval1i Sort(Boolean) sort each row Declaration public void Sort(bool bParallel = true) Parameters Type Name Description Boolean bParallel Square() Declaration public PackedSparseMatrix Square() Returns Type Description PackedSparseMatrix"
  },
  "api/g3.PackedSparseMatrix.nonzero.html": {
    "href": "api/g3.PackedSparseMatrix.nonzero.html",
    "title": "Struct PackedSparseMatrix.nonzero | ViRGIS VR GIS",
    "keywords": "Struct PackedSparseMatrix.nonzero Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct nonzero Fields d Declaration public double d Field Value Type Description Double j Declaration public int j Field Value Type Description Int32"
  },
  "api/g3.PackedSparseMatrix.StorageModes.html": {
    "href": "api/g3.PackedSparseMatrix.StorageModes.html",
    "title": "Enum PackedSparseMatrix.StorageModes | ViRGIS VR GIS",
    "keywords": "Enum PackedSparseMatrix.StorageModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum StorageModes Fields Name Description Full"
  },
  "api/g3.ParallelStream-2.html": {
    "href": "api/g3.ParallelStream-2.html",
    "title": "Class ParallelStream<V, T> | ViRGIS VR GIS",
    "keywords": "Class ParallelStream<V, T> Inheritance Object ParallelStream<V, T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ParallelStream<V, T> Type Parameters Name Description V T Fields ConsumerF Declaration public Action<T> ConsumerF Field Value Type Description Action <T> ProducerF Declaration public Func<V, T> ProducerF Field Value Type Description Func <V, T> Methods Run(IEnumerable<V>) Declaration public void Run(IEnumerable<V> sourceIn) Parameters Type Name Description IEnumerable <V> sourceIn Run_NoThreads(IEnumerable<V>) Declaration public void Run_NoThreads(IEnumerable<V> sourceIn) Parameters Type Name Description IEnumerable <V> sourceIn"
  },
  "api/g3.ParametricCurveSequence2.html": {
    "href": "api/g3.ParametricCurveSequence2.html",
    "title": "Class ParametricCurveSequence2 | ViRGIS VR GIS",
    "keywords": "Class ParametricCurveSequence2 Inheritance Object ParametricCurveSequence2 Implements IParametricCurve2d IMultiCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ParametricCurveSequence2 : IParametricCurve2d, IMultiCurve2d Constructors ParametricCurveSequence2() Declaration public ParametricCurveSequence2() ParametricCurveSequence2(IEnumerable<IParametricCurve2d>, Boolean) Declaration public ParametricCurveSequence2(IEnumerable<IParametricCurve2d> curvesIn, bool isClosed = false) Parameters Type Name Description IEnumerable < IParametricCurve2d > curvesIn Boolean isClosed Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Count Declaration public int Count { get; } Property Value Type Description Int32 Curves Declaration public ReadOnlyCollection<IParametricCurve2d> Curves { get; } Property Value Type Description ReadOnlyCollection < IParametricCurve2d > HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; set; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Append(IParametricCurve2d) Declaration public void Append(IParametricCurve2d c) Parameters Type Name Description IParametricCurve2d c Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Prepend(IParametricCurve2d) Declaration public void Prepend(IParametricCurve2d c) Parameters Type Name Description IParametricCurve2d c Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d IMultiCurve2d"
  },
  "api/g3.ParsingMessagesHandler.html": {
    "href": "api/g3.ParsingMessagesHandler.html",
    "title": "Delegate ParsingMessagesHandler | ViRGIS VR GIS",
    "keywords": "Delegate ParsingMessagesHandler Namespace : g3 Assembly : cs.temp.dll.dll Syntax public delegate void ParsingMessagesHandler(string message, object extra_data); Parameters Type Name Description String message Object extra_data"
  },
  "api/g3.PlanarComplex.ClosedLoopsInfo.html": {
    "href": "api/g3.PlanarComplex.ClosedLoopsInfo.html",
    "title": "Class PlanarComplex.ClosedLoopsInfo | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.ClosedLoopsInfo Inheritance Object PlanarComplex.ClosedLoopsInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ClosedLoopsInfo Fields Loops Declaration public List<IParametricCurve2d> Loops Field Value Type Description List < IParametricCurve2d > Polygons Declaration public List<Polygon2d> Polygons Field Value Type Description List < Polygon2d > Properties Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d"
  },
  "api/g3.PlanarComplex.Element.html": {
    "href": "api/g3.PlanarComplex.Element.html",
    "title": "Class PlanarComplex.Element | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.Element Inheritance Object PlanarComplex.Element PlanarComplex.SmoothCurveElement PlanarComplex.SmoothLoopElement Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class Element Fields ID Declaration public int ID Field Value Type Description Int32 source Declaration public IParametricCurve2d source Field Value Type Description IParametricCurve2d Properties Color Declaration public Colorf Color { get; set; } Property Value Type Description Colorf HasSetColor Declaration public bool HasSetColor { get; } Property Value Type Description Boolean Methods Bounds() Declaration public abstract AxisAlignedBox2d Bounds() Returns Type Description AxisAlignedBox2d Clone() Declaration public abstract PlanarComplex.Element Clone() Returns Type Description PlanarComplex.Element copy_to(PlanarComplex.Element) Declaration protected void copy_to(PlanarComplex.Element new_element) Parameters Type Name Description PlanarComplex.Element new_element SegmentItr() Declaration public abstract IEnumerable<Segment2d> SegmentItr() Returns Type Description IEnumerable < Segment2d >"
  },
  "api/g3.PlanarComplex.FindSolidsOptions.html": {
    "href": "api/g3.PlanarComplex.FindSolidsOptions.html",
    "title": "Struct PlanarComplex.FindSolidsOptions | ViRGIS VR GIS",
    "keywords": "Struct PlanarComplex.FindSolidsOptions Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct FindSolidsOptions Fields AllowOverlappingHoles Declaration public bool AllowOverlappingHoles Field Value Type Description Boolean Default Declaration public static readonly PlanarComplex.FindSolidsOptions Default Field Value Type Description PlanarComplex.FindSolidsOptions SimplifyDeviationTolerance Declaration public double SimplifyDeviationTolerance Field Value Type Description Double SortPolygons Declaration public static readonly PlanarComplex.FindSolidsOptions SortPolygons Field Value Type Description PlanarComplex.FindSolidsOptions TrustOrientations Declaration public bool TrustOrientations Field Value Type Description Boolean WantCurveSolids Declaration public bool WantCurveSolids Field Value Type Description Boolean"
  },
  "api/g3.PlanarComplex.GeneralSolid.html": {
    "href": "api/g3.PlanarComplex.GeneralSolid.html",
    "title": "Class PlanarComplex.GeneralSolid | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.GeneralSolid Inheritance Object PlanarComplex.GeneralSolid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class GeneralSolid Fields Holes Declaration public List<PlanarComplex.Element> Holes Field Value Type Description List < PlanarComplex.Element > Outer Declaration public PlanarComplex.Element Outer Field Value Type Description PlanarComplex.Element"
  },
  "api/g3.PlanarComplex.html": {
    "href": "api/g3.PlanarComplex.html",
    "title": "Class PlanarComplex | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex Inheritance Object PlanarComplex Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlanarComplex Constructors PlanarComplex() Declaration public PlanarComplex() Fields AngleAccuracyDeg Declaration public double AngleAccuracyDeg Field Value Type Description Double DistanceAccuracy Declaration public double DistanceAccuracy Field Value Type Description Double MinimizeSampling Declaration public bool MinimizeSampling Field Value Type Description Boolean SpacingT Declaration public double SpacingT Field Value Type Description Double Properties ElementCount Declaration public int ElementCount { get; } Property Value Type Description Int32 Methods Add(IParametricCurve2d) Declaration public PlanarComplex.Element Add(IParametricCurve2d curve) Parameters Type Name Description IParametricCurve2d curve Returns Type Description PlanarComplex.Element Add(Polygon2d) Declaration public PlanarComplex.Element Add(Polygon2d poly) Parameters Type Name Description Polygon2d poly Returns Type Description PlanarComplex.Element Add(PolyLine2d) Declaration public PlanarComplex.Element Add(PolyLine2d pline) Parameters Type Name Description PolyLine2d pline Returns Type Description PlanarComplex.Element AllSegmentsItr() Declaration public IEnumerable<ComplexSegment2d> AllSegmentsItr() Returns Type Description IEnumerable < ComplexSegment2d > Append(PlanarComplex) Declaration public void Append(PlanarComplex append) Parameters Type Name Description PlanarComplex append Bounds() Declaration public AxisAlignedBox2d Bounds() Returns Type Description AxisAlignedBox2d Clone() Declaration public PlanarComplex Clone() Returns Type Description PlanarComplex ConvertToLoop(PlanarComplex.SmoothCurveElement, Double) Declaration public void ConvertToLoop(PlanarComplex.SmoothCurveElement curve, double tolerance = 1E-08) Parameters Type Name Description PlanarComplex.SmoothCurveElement curve Double tolerance CountType(IMultiCurve2d, Type) Declaration public int CountType(IMultiCurve2d curve, Type t) Parameters Type Name Description IMultiCurve2d curve Type t Returns Type Description Int32 CountType(Type) Declaration public int CountType(Type t) Parameters Type Name Description Type t Returns Type Description Int32 CurvesItr() Declaration public IEnumerable<PlanarComplex.SmoothCurveElement> CurvesItr() Returns Type Description IEnumerable < PlanarComplex.SmoothCurveElement > ElementsItr() Declaration public IEnumerable<PlanarComplex.Element> ElementsItr() Returns Type Description IEnumerable < PlanarComplex.Element > EndpointsItr() Declaration public IEnumerable<ComplexEndpoint2d> EndpointsItr() Returns Type Description IEnumerable < ComplexEndpoint2d > FindClosedLoops(Double) Declaration public PlanarComplex.ClosedLoopsInfo FindClosedLoops(double fSimplifyDeviationTol = 0.1) Parameters Type Name Description Double fSimplifyDeviationTol Returns Type Description PlanarComplex.ClosedLoopsInfo FindOpenCurves(Double) Declaration public PlanarComplex.OpenCurvesInfo FindOpenCurves(double fSimplifyDeviationTol = 0.1) Parameters Type Name Description Double fSimplifyDeviationTol Returns Type Description PlanarComplex.OpenCurvesInfo FindSolidRegions(PlanarComplex.FindSolidsOptions) Declaration public PlanarComplex.SolidRegionInfo FindSolidRegions(PlanarComplex.FindSolidsOptions options) Parameters Type Name Description PlanarComplex.FindSolidsOptions options Returns Type Description PlanarComplex.SolidRegionInfo FindSolidRegions(Double, Boolean) Declaration public PlanarComplex.SolidRegionInfo FindSolidRegions(double fSimplifyDeviationTol = 0.1, bool bWantCurveSolids = true) Parameters Type Name Description Double fSimplifyDeviationTol Boolean bWantCurveSolids Returns Type Description PlanarComplex.SolidRegionInfo HasOpenCurves() Declaration public bool HasOpenCurves() Returns Type Description Boolean JoinElements(ComplexEndpoint2d, ComplexEndpoint2d, Double) Declaration public bool JoinElements(ComplexEndpoint2d a, ComplexEndpoint2d b, double loop_tolerance = 1E-08) Parameters Type Name Description ComplexEndpoint2d a ComplexEndpoint2d b Double loop_tolerance Returns Type Description Boolean LoopLeafComponentsItr() iterate through \"leaf\" curves, ie all the IParametricCurve2D's embedded in loops that do not contain any child curves Declaration public IEnumerable<IParametricCurve2d> LoopLeafComponentsItr() Returns Type Description IEnumerable < IParametricCurve2d > LoopsItr() Declaration public IEnumerable<PlanarComplex.SmoothLoopElement> LoopsItr() Returns Type Description IEnumerable < PlanarComplex.SmoothLoopElement > PrintStats(String) Declaration public void PrintStats(string label = \"\") Parameters Type Name Description String label Remove(PlanarComplex.Element) Declaration public void Remove(PlanarComplex.Element e) Parameters Type Name Description PlanarComplex.Element e Reverse(PlanarComplex.SmoothCurveElement) Declaration public void Reverse(PlanarComplex.SmoothCurveElement c) Parameters Type Name Description PlanarComplex.SmoothCurveElement c SplitAllLoops() Declaration public void SplitAllLoops() Transform(ITransform2, Boolean, Boolean) Declaration public void Transform(ITransform2 xform, bool bApplyToSources, bool bRecomputePolygons = false) Parameters Type Name Description ITransform2 xform Boolean bApplyToSources Boolean bRecomputePolygons"
  },
  "api/g3.PlanarComplex.OpenCurvesInfo.html": {
    "href": "api/g3.PlanarComplex.OpenCurvesInfo.html",
    "title": "Class PlanarComplex.OpenCurvesInfo | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.OpenCurvesInfo Inheritance Object PlanarComplex.OpenCurvesInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class OpenCurvesInfo Fields Curves Declaration public List<IParametricCurve2d> Curves Field Value Type Description List < IParametricCurve2d > Polylines Declaration public List<PolyLine2d> Polylines Field Value Type Description List < PolyLine2d > Properties Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d"
  },
  "api/g3.PlanarComplex.SmoothCurveElement.html": {
    "href": "api/g3.PlanarComplex.SmoothCurveElement.html",
    "title": "Class PlanarComplex.SmoothCurveElement | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.SmoothCurveElement Inheritance Object PlanarComplex.Element PlanarComplex.SmoothCurveElement Inherited Members PlanarComplex.Element.source PlanarComplex.Element.ID PlanarComplex.Element.Color PlanarComplex.Element.HasSetColor PlanarComplex.Element.copy_to(PlanarComplex.Element) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SmoothCurveElement : PlanarComplex.Element Fields polyLine Declaration public PolyLine2d polyLine Field Value Type Description PolyLine2d Methods Bounds() Declaration public override AxisAlignedBox2d Bounds() Returns Type Description AxisAlignedBox2d Overrides PlanarComplex.Element.Bounds() Clone() Declaration public override PlanarComplex.Element Clone() Returns Type Description PlanarComplex.Element Overrides PlanarComplex.Element.Clone() SegmentItr() Declaration public override IEnumerable<Segment2d> SegmentItr() Returns Type Description IEnumerable < Segment2d > Overrides PlanarComplex.Element.SegmentItr()"
  },
  "api/g3.PlanarComplex.SmoothLoopElement.html": {
    "href": "api/g3.PlanarComplex.SmoothLoopElement.html",
    "title": "Class PlanarComplex.SmoothLoopElement | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.SmoothLoopElement Inheritance Object PlanarComplex.Element PlanarComplex.SmoothLoopElement Inherited Members PlanarComplex.Element.source PlanarComplex.Element.ID PlanarComplex.Element.Color PlanarComplex.Element.HasSetColor PlanarComplex.Element.copy_to(PlanarComplex.Element) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SmoothLoopElement : PlanarComplex.Element Fields polygon Declaration public Polygon2d polygon Field Value Type Description Polygon2d Methods Bounds() Declaration public override AxisAlignedBox2d Bounds() Returns Type Description AxisAlignedBox2d Overrides PlanarComplex.Element.Bounds() Clone() Declaration public override PlanarComplex.Element Clone() Returns Type Description PlanarComplex.Element Overrides PlanarComplex.Element.Clone() SegmentItr() Declaration public override IEnumerable<Segment2d> SegmentItr() Returns Type Description IEnumerable < Segment2d > Overrides PlanarComplex.Element.SegmentItr()"
  },
  "api/g3.PlanarComplex.SolidRegionInfo.html": {
    "href": "api/g3.PlanarComplex.SolidRegionInfo.html",
    "title": "Class PlanarComplex.SolidRegionInfo | ViRGIS VR GIS",
    "keywords": "Class PlanarComplex.SolidRegionInfo Inheritance Object PlanarComplex.SolidRegionInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SolidRegionInfo Fields Polygons Declaration public List<GeneralPolygon2d> Polygons Field Value Type Description List < GeneralPolygon2d > PolygonsSources Declaration public List<PlanarComplex.GeneralSolid> PolygonsSources Field Value Type Description List < PlanarComplex.GeneralSolid > Solids Declaration public List<PlanarSolid2d> Solids Field Value Type Description List < PlanarSolid2d > Properties Area Declaration public double Area { get; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d HolesArea Declaration public double HolesArea { get; } Property Value Type Description Double"
  },
  "api/g3.PlanarHoleFiller.html": {
    "href": "api/g3.PlanarHoleFiller.html",
    "title": "Class PlanarHoleFiller | ViRGIS VR GIS",
    "keywords": "Class PlanarHoleFiller Try to fill planar holes in a mesh. The fill is computed by mapping the hole boundary into 2D, filling using 2D algorithms, and then mapping back to 3D. This allows us to properly handle cases like nested holes (eg from slicing a torus in half). PlanarComplex is used to sort the input 2D polyons. MeshInsertUVPolyCurve is used to insert each 2D polygon into a generated planar mesh. The resolution of the generated mesh is controlled by .FillTargetEdgeLen In theory this approach can handle more geometric degeneracies than Delaunay triangluation. However, the current code requires that MeshInsertUVPolyCurve produce output boundary loops that have a 1-1 correspondence with the input polygons. This is not always possible. Currently these failure cases are not handled properly. In that case the loops will not be stitched. Inheritance Object PlanarHoleFiller Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlanarHoleFiller Constructors PlanarHoleFiller(DMesh3) Declaration public PlanarHoleFiller(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh PlanarHoleFiller(MeshPlaneCut) Declaration public PlanarHoleFiller(MeshPlaneCut cut) Parameters Type Name Description MeshPlaneCut cut Fields FailedInsertions Declaration public int FailedInsertions Field Value Type Description Int32 FailedMerges Declaration public int FailedMerges Field Value Type Description Int32 FillTargetEdgeLen fill mesh will be tessellated to this length, set to double.MaxValue to use zero-length tessellation Declaration public double FillTargetEdgeLen Field Value Type Description Double MergeFillBoundary in some cases fill can succeed but we can't merge w/o creating holes. In such cases it might be better to not merge at all... Declaration public bool MergeFillBoundary Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OutputHasCracks Declaration public bool OutputHasCracks Field Value Type Description Boolean PlaneNormal Declaration public Vector3d PlaneNormal Field Value Type Description Vector3d PlaneOrigin Declaration public Vector3d PlaneOrigin Field Value Type Description Vector3d Methods AddFillLoop(EdgeLoop) Declaration public void AddFillLoop(EdgeLoop loop) Parameters Type Name Description EdgeLoop loop AddFillLoops(IEnumerable<EdgeLoop>) Declaration public void AddFillLoops(IEnumerable<EdgeLoop> loops) Parameters Type Name Description IEnumerable < EdgeLoop > loops Fill() Compute the fill mesh and append it. This returns false if anything went wrong. The Error Feedback properties (.OutputHasCracks, etc) will provide more info. Declaration public bool Fill() Returns Type Description Boolean SetPlane(Vector3d, Vector3d) Declaration public void SetPlane(Vector3d origin, Vector3d normal) Parameters Type Name Description Vector3d origin Vector3d normal SetPlane(Vector3d, Vector3d, Vector3d, Vector3d) Declaration public void SetPlane(Vector3d origin, Vector3d normal, Vector3d planeX, Vector3d planeY) Parameters Type Name Description Vector3d origin Vector3d normal Vector3d planeX Vector3d planeY"
  },
  "api/g3.PlanarSolid2d.html": {
    "href": "api/g3.PlanarSolid2d.html",
    "title": "Class PlanarSolid2d | ViRGIS VR GIS",
    "keywords": "Class PlanarSolid2d Inheritance Object PlanarSolid2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlanarSolid2d Constructors PlanarSolid2d() Declaration public PlanarSolid2d() Properties HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean Holes Declaration public ReadOnlyCollection<IParametricCurve2d> Holes { get; } Property Value Type Description ReadOnlyCollection < IParametricCurve2d > Outer Declaration public IParametricCurve2d Outer { get; } Property Value Type Description IParametricCurve2d Perimeter Declaration public double Perimeter { get; } Property Value Type Description Double Methods AddHole(IParametricCurve2d) Declaration public void AddHole(IParametricCurve2d hole) Parameters Type Name Description IParametricCurve2d hole Convert(Double, Double, Double) Resample parametric solid into polygonal solid Declaration public GeneralPolygon2d Convert(double fSpacingLength, double fSpacingT, double fDeviationTolerance) Parameters Type Name Description Double fSpacingLength Double fSpacingT Double fDeviationTolerance Returns Type Description GeneralPolygon2d SetOuter(IParametricCurve2d, Boolean) Declaration public void SetOuter(IParametricCurve2d loop, bool bIsClockwise) Parameters Type Name Description IParametricCurve2d loop Boolean bIsClockwise"
  },
  "api/g3.PlanarSpansFiller.html": {
    "href": "api/g3.PlanarSpansFiller.html",
    "title": "Class PlanarSpansFiller | ViRGIS VR GIS",
    "keywords": "Class PlanarSpansFiller This class fills an ordered sequence of planar spans. The 2D polygon is formed by chaining the spans. Current issues: connectors have a single segment, so when simplified, they become a single edge. should subsample them instead. currently mapping from inserted edges back to span edges is not calculated, so we have no way to merge them (ie MergeFillBoundary not implemented) fill triangles not returned? Inheritance Object PlanarSpansFiller Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlanarSpansFiller Constructors PlanarSpansFiller(DMesh3, IList<EdgeSpan>) Declaration public PlanarSpansFiller(DMesh3 mesh, IList<EdgeSpan> spans) Parameters Type Name Description DMesh3 mesh IList < EdgeSpan > spans Fields FillTargetEdgeLen fill mesh will be tessellated to this length, set to double.MaxValue to use zero-length tessellation Declaration public double FillTargetEdgeLen Field Value Type Description Double MergeFillBoundary in some cases fill can succeed but we can't merge w/o creating holes. In such cases it might be better to not merge at all... Declaration public bool MergeFillBoundary Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 PlaneNormal Declaration public Vector3d PlaneNormal Field Value Type Description Vector3d PlaneOrigin Declaration public Vector3d PlaneOrigin Field Value Type Description Vector3d Methods Fill() Declaration public bool Fill() Returns Type Description Boolean SetPlane(Vector3d, Vector3d) Declaration public void SetPlane(Vector3d origin, Vector3d normal) Parameters Type Name Description Vector3d origin Vector3d normal SetPlane(Vector3d, Vector3d, Vector3d, Vector3d) Declaration public void SetPlane(Vector3d origin, Vector3d normal, Vector3d planeX, Vector3d planeY) Parameters Type Name Description Vector3d origin Vector3d normal Vector3d planeX Vector3d planeY"
  },
  "api/g3.Plane3d.html": {
    "href": "api/g3.Plane3d.html",
    "title": "Struct Plane3d | ViRGIS VR GIS",
    "keywords": "Struct Plane3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Plane3d Constructors Plane3d(Vector3d, Vector3d) Declaration public Plane3d(Vector3d normal, Vector3d point) Parameters Type Name Description Vector3d normal Vector3d point Plane3d(Vector3d, Vector3d, Vector3d) Declaration public Plane3d(Vector3d p0, Vector3d p1, Vector3d p2) Parameters Type Name Description Vector3d p0 Vector3d p1 Vector3d p2 Plane3d(Vector3d, Double) Declaration public Plane3d(Vector3d normal, double constant) Parameters Type Name Description Vector3d normal Double constant Fields Constant Declaration public double Constant Field Value Type Description Double Normal Declaration public Vector3d Normal Field Value Type Description Vector3d Methods DistanceTo(Vector3d) Declaration public double DistanceTo(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double WhichSide(Vector3d) Declaration public int WhichSide(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Int32"
  },
  "api/g3.Plane3f.html": {
    "href": "api/g3.Plane3f.html",
    "title": "Struct Plane3f | ViRGIS VR GIS",
    "keywords": "Struct Plane3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Plane3f Constructors Plane3f(Vector3f, Vector3f) Declaration public Plane3f(Vector3f normal, Vector3f point) Parameters Type Name Description Vector3f normal Vector3f point Plane3f(Vector3f, Vector3f, Vector3f) Declaration public Plane3f(Vector3f p0, Vector3f p1, Vector3f p2) Parameters Type Name Description Vector3f p0 Vector3f p1 Vector3f p2 Plane3f(Vector3f, Single) Declaration public Plane3f(Vector3f normal, float constant) Parameters Type Name Description Vector3f normal Single constant Fields Constant Declaration public float Constant Field Value Type Description Single Normal Declaration public Vector3f Normal Field Value Type Description Vector3f Methods DistanceTo(Vector3f) Declaration public float DistanceTo(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single WhichSide(Vector3f) Declaration public int WhichSide(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Int32"
  },
  "api/g3.PlaneIntersectionTarget.html": {
    "href": "api/g3.PlaneIntersectionTarget.html",
    "title": "Class PlaneIntersectionTarget | ViRGIS VR GIS",
    "keywords": "Class PlaneIntersectionTarget Compute ray-intersection with plane Inheritance Object PlaneIntersectionTarget Implements IIntersectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlaneIntersectionTarget : IIntersectionTarget Fields NormalAxis Declaration public int NormalAxis Field Value Type Description Int32 PlaneFrame Declaration public Frame3f PlaneFrame Field Value Type Description Frame3f Properties HasNormal Declaration public bool HasNormal { get; } Property Value Type Description Boolean Methods RayIntersect(Ray3d, out Vector3d, out Vector3d) Declaration public bool RayIntersect(Ray3d ray, out Vector3d vHit, out Vector3d vHitNormal) Parameters Type Name Description Ray3d ray Vector3d vHit Vector3d vHitNormal Returns Type Description Boolean Implements IIntersectionTarget"
  },
  "api/g3.PlaneProjectionTarget.html": {
    "href": "api/g3.PlaneProjectionTarget.html",
    "title": "Class PlaneProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class PlaneProjectionTarget Inheritance Object PlaneProjectionTarget Implements IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PlaneProjectionTarget : IProjectionTarget Fields Normal Declaration public Vector3d Normal Field Value Type Description Vector3d Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Methods Project(Vector3d, Int32) Declaration public Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Implements IProjectionTarget"
  },
  "api/g3.PointAABBTree3.BuildStrategy.html": {
    "href": "api/g3.PointAABBTree3.BuildStrategy.html",
    "title": "Enum PointAABBTree3.BuildStrategy | ViRGIS VR GIS",
    "keywords": "Enum PointAABBTree3.BuildStrategy Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum BuildStrategy Fields Name Description Default TopDownMedian TopDownMidpoint"
  },
  "api/g3.PointAABBTree3.html": {
    "href": "api/g3.PointAABBTree3.html",
    "title": "Class PointAABBTree3 | ViRGIS VR GIS",
    "keywords": "Class PointAABBTree3 Hierarchical Axis-Aligned-Bounding-Box tree for an IPointSet TODO: no timestamp support right now... Inheritance Object PointAABBTree3 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PointAABBTree3 Constructors PointAABBTree3(IPointSet, Boolean) Declaration public PointAABBTree3(IPointSet pointsIn, bool autoBuild = true) Parameters Type Name Description IPointSet pointsIn Boolean autoBuild Fields FWNApproxOrder FWN approximation order. can be 1 or 2. 2 is more accurate, obviously. Declaration public int FWNApproxOrder Field Value Type Description Int32 FWNAreaEstimateF Replace this with function that returns proper area estimate Declaration public Func<int, double> FWNAreaEstimateF Field Value Type Description Func < Int32 , Double > FWNBeta FWN beta parameter - is 2.0 in paper Declaration public double FWNBeta Field Value Type Description Double LeafMaxPointCount Declaration public int LeafMaxPointCount Field Value Type Description Int32 PointFilterF Declaration public Func<int, bool> PointFilterF Field Value Type Description Func < Int32 , Boolean > Properties Bounds Root bounding box of tree (note: tree must be generated by calling a query function first!) Declaration public AxisAlignedBox3d Bounds { get; } Property Value Type Description AxisAlignedBox3d Points Declaration public IPointSet Points { get; } Property Value Type Description IPointSet Methods box_contains(Int32, Vector3d) Declaration protected bool box_contains(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Boolean branch_fast_winding_num(Int32, Vector3d) Declaration protected double branch_fast_winding_num(int iBox, Vector3d p) Parameters Type Name Description Int32 iBox Vector3d p Returns Type Description Double Build(PointAABBTree3.BuildStrategy) Declaration public void Build(PointAABBTree3.BuildStrategy eStrategy = PointAABBTree3.BuildStrategy.TopDownMidpoint) Parameters Type Name Description PointAABBTree3.BuildStrategy eStrategy build_fast_winding_cache() Declaration protected void build_fast_winding_cache() build_fast_winding_cache(Int32, Int32, Int32, out HashSet<Int32>) Declaration protected int build_fast_winding_cache(int iBox, int depth, int pt_count_thresh, out HashSet<int> pts_hash) Parameters Type Name Description Int32 iBox Int32 depth Int32 pt_count_thresh HashSet < Int32 > pts_hash Returns Type Description Int32 can_use_fast_winding_cache(Int32, ref Vector3d) Declaration protected bool can_use_fast_winding_cache(int iBox, ref Vector3d q) Parameters Type Name Description Int32 iBox Vector3d q Returns Type Description Boolean collect_points(Int32, HashSet<Int32>) Declaration protected void collect_points(int iBox, HashSet<int> points) Parameters Type Name Description Int32 iBox HashSet < Int32 > points DoTraversal(PointAABBTree3.TreeTraversal) Hierarchically descend through the tree nodes, calling the TreeTrversal functions at each level Declaration public virtual void DoTraversal(PointAABBTree3.TreeTraversal traversal) Parameters Type Name Description PointAABBTree3.TreeTraversal traversal evaluate_box_fast_winding_cache(Int32, ref Vector3d) Declaration protected double evaluate_box_fast_winding_cache(int iBox, ref Vector3d q) Parameters Type Name Description Int32 iBox Vector3d q Returns Type Description Double FastWindingNumber(Vector3d) Fast approximation of winding number using far-field approximations Declaration public virtual double FastWindingNumber(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double find_nearest_point(Int32, Vector3d, ref Double, ref Int32) Declaration protected void find_nearest_point(int iBox, Vector3d p, ref double fNearestSqr, ref int tID) Parameters Type Name Description Int32 iBox Vector3d p Double fNearestSqr Int32 tID FindNearestPoint(Vector3d, Double) Find the point closest to p, within distance fMaxDist, or return InvalidID Declaration public virtual int FindNearestPoint(Vector3d p, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fMaxDist Returns Type Description Int32 make_box_fast_winding_cache(Int32, IEnumerable<Int32>) Declaration protected void make_box_fast_winding_cache(int iBox, IEnumerable<int> pointIndices) Parameters Type Name Description Int32 iBox IEnumerable < Int32 > pointIndices TestCoverage() Declaration public void TestCoverage() TotalExtentSum() Total sum-of-extents over all boxes in the tree. Mainly useful to evaluate tree quality. Declaration public double TotalExtentSum() Returns Type Description Double TotalVolume() Total sum of volumes of all boxes in the tree. Mainly useful to evaluate tree quality. Declaration public double TotalVolume() Returns Type Description Double tree_traversal(Int32, Int32, PointAABBTree3.TreeTraversal) Declaration protected virtual void tree_traversal(int iBox, int depth, PointAABBTree3.TreeTraversal traversal) Parameters Type Name Description Int32 iBox Int32 depth PointAABBTree3.TreeTraversal traversal"
  },
  "api/g3.PointAABBTree3.TreeTraversal.html": {
    "href": "api/g3.PointAABBTree3.TreeTraversal.html",
    "title": "Class PointAABBTree3.TreeTraversal | ViRGIS VR GIS",
    "keywords": "Class PointAABBTree3.TreeTraversal Instances of this class can be passed in to the DoTraversal() function to implement your own tree-traversal queries. NextBoxF() is called for each box node. Return false from this function to halt terminate that branch of the traversal, or true to descend into that box's children (boxes or points). NextPointF() is called for each point. Inheritance Object PointAABBTree3.TreeTraversal Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TreeTraversal Fields NextBoxF Declaration public Func<AxisAlignedBox3d, int, bool> NextBoxF Field Value Type Description Func < AxisAlignedBox3d , Int32 , Boolean > NextPointF Declaration public Action<int> NextPointF Field Value Type Description Action < Int32 >"
  },
  "api/g3.PointHashGrid2d-1.html": {
    "href": "api/g3.PointHashGrid2d-1.html",
    "title": "Class PointHashGrid2d<T> | ViRGIS VR GIS",
    "keywords": "Class PointHashGrid2d<T> Hash Grid for 2D points. You provide the 'point' type. If you have an indexable set of points this can just be int, or can be more complex point data structure (but be careful w/ structs...) Does not actually store 2D points. So, to remove a point you must also know it's 2D coordinate, so we can look up the cell coordinates. Hence, to 'update' a point, you need to know both it's old and new 2D coordinates. Inheritance Object PointHashGrid2d<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PointHashGrid2d<T> Type Parameters Name Description T Constructors PointHashGrid2d(Double, T) \"invalid\" value will be returned by queries if no valid result is found (eg bounded-distance query) Declaration public PointHashGrid2d(double cellSize, T invalidValue) Parameters Type Name Description Double cellSize T invalidValue Properties InvalidValue Declaration public T InvalidValue { get; } Property Value Type Description T Methods FindNearestInRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>) Find nearest point in grid, within radius, without locking / thread-safety You must provided distF which returns distance between query_pt and the point argument You can ignore specific points via ignoreF lambda Declaration public KeyValuePair<T, double> FindNearestInRadius(Vector2d query_pt, double radius, Func<T, double> distF, Func<T, bool> ignoreF = null) Parameters Type Name Description Vector2d query_pt Double radius Func <T, Double > distF Func <T, Boolean > ignoreF Returns Type Description KeyValuePair <T, Double > InsertPoint(T, Vector2d) Insert point at position. This function is thread-safe, uses a SpinLock internally Declaration public void InsertPoint(T value, Vector2d pos) Parameters Type Name Description T value Vector2d pos InsertPointUnsafe(T, Vector2d) Insert point without locking / thread-safety Declaration public void InsertPointUnsafe(T value, Vector2d pos) Parameters Type Name Description T value Vector2d pos RemovePoint(T, Vector2d) Insert point. This function is thread-safe, uses a SpinLock internally Declaration public bool RemovePoint(T value, Vector2d pos) Parameters Type Name Description T value Vector2d pos Returns Type Description Boolean RemovePointUnsafe(T, Vector2d) Remove point without locking / thread-safety Declaration public bool RemovePointUnsafe(T value, Vector2d pos) Parameters Type Name Description T value Vector2d pos Returns Type Description Boolean UpdatePoint(T, Vector2d, Vector2d) Move point from old to new position. This function is thread-safe, uses a SpinLock internally Declaration public void UpdatePoint(T value, Vector2d old_pos, Vector2d new_pos) Parameters Type Name Description T value Vector2d old_pos Vector2d new_pos UpdatePointUnsafe(T, Vector2d, Vector2d) Move point from old to new position without locking / thread-safety Declaration public void UpdatePointUnsafe(T value, Vector2d old_pos, Vector2d new_pos) Parameters Type Name Description T value Vector2d old_pos Vector2d new_pos"
  },
  "api/g3.PointHashGrid3d-1.html": {
    "href": "api/g3.PointHashGrid3d-1.html",
    "title": "Class PointHashGrid3d<T> | ViRGIS VR GIS",
    "keywords": "Class PointHashGrid3d<T> Hash Grid for 3D points. You provide the 'point' type. If you have an indexable set of points this can just be int, or can be more complex point data structure (but be careful w/ structs...) Does not actually store 3D points. So, to remove a point you must also know it's 3D coordinate, so we can look up the cell coordinates. Hence, to 'update' a point, you need to know both it's old and new 3D coordinates. TODO: if a lot of points are in the same spot, this is still a disaster. What if we had a second level of hashing, where once a list at a level gets too big, we build a sub-hash there? Inheritance Object PointHashGrid3d<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PointHashGrid3d<T> Type Parameters Name Description T Constructors PointHashGrid3d(Double, T) \"invalid\" value will be returned by queries if no valid result is found (eg bounded-distance query) Declaration public PointHashGrid3d(double cellSize, T invalidValue) Parameters Type Name Description Double cellSize T invalidValue Properties InvalidValue Declaration public T InvalidValue { get; } Property Value Type Description T Methods FindNearestInRadius(Vector3d, Double, Func<T, Double>, Func<T, Boolean>) Find nearest point in grid, within radius, without locking / thread-safety You must provided distF which returns distance between query_pt and the point argument You can ignore specific points via ignoreF lambda. returned key is InvalidValue if not found Declaration public KeyValuePair<T, double> FindNearestInRadius(Vector3d query_pt, double radius, Func<T, double> distF, Func<T, bool> ignoreF = null) Parameters Type Name Description Vector3d query_pt Double radius Func <T, Double > distF Func <T, Boolean > ignoreF Returns Type Description KeyValuePair <T, Double > InsertPoint(T, Vector3d) Insert point at position. This function is thread-safe, uses a SpinLock internally Declaration public void InsertPoint(T value, Vector3d pos) Parameters Type Name Description T value Vector3d pos InsertPointUnsafe(T, Vector3d) Insert point without locking / thread-safety Declaration public void InsertPointUnsafe(T value, Vector3d pos) Parameters Type Name Description T value Vector3d pos print_large_buckets() Declaration public void print_large_buckets() RemovePoint(T, Vector3d) Insert point. This function is thread-safe, uses a SpinLock internally Declaration public bool RemovePoint(T value, Vector3d pos) Parameters Type Name Description T value Vector3d pos Returns Type Description Boolean RemovePointUnsafe(T, Vector3d) Remove point without locking / thread-safety Declaration public bool RemovePointUnsafe(T value, Vector3d pos) Parameters Type Name Description T value Vector3d pos Returns Type Description Boolean UpdatePoint(T, Vector3d, Vector3d) Move point from old to new position. This function is thread-safe, uses a SpinLock internally Declaration public void UpdatePoint(T value, Vector3d old_pos, Vector3d new_pos) Parameters Type Name Description T value Vector3d old_pos Vector3d new_pos UpdatePointUnsafe(T, Vector3d, Vector3d) Move point from old to new position without locking / thread-safety Declaration public void UpdatePointUnsafe(T value, Vector3d old_pos, Vector3d new_pos) Parameters Type Name Description T value Vector3d old_pos Vector3d new_pos"
  },
  "api/g3.PointSplatsGenerator.html": {
    "href": "api/g3.PointSplatsGenerator.html",
    "title": "Class PointSplatsGenerator | ViRGIS VR GIS",
    "keywords": "Class PointSplatsGenerator Create a mesh that contains a planar element for each point and normal (currently only triangles) Inheritance Object MeshGenerator PointSplatsGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PointSplatsGenerator : MeshGenerator Constructors PointSplatsGenerator() Declaration public PointSplatsGenerator() Fields NormalF Declaration public Func<int, Vector3d> NormalF Field Value Type Description Func < Int32 , Vector3d > PointF Declaration public Func<int, Vector3d> PointF Field Value Type Description Func < Int32 , Vector3d > PointIndices Declaration public IEnumerable<int> PointIndices Field Value Type Description IEnumerable < Int32 > PointIndicesCount Declaration public int PointIndicesCount Field Value Type Description Int32 Radius Declaration public double Radius Field Value Type Description Double Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate() Generate(IList<Int32>, Func<Int32, Vector3d>, Func<Int32, Vector3d>, Double) shortcut utility Declaration public static DMesh3 Generate(IList<int> indices, Func<int, Vector3d> PointF, Func<int, Vector3d> NormalF, double radius) Parameters Type Name Description IList < Int32 > indices Func < Int32 , Vector3d > PointF Func < Int32 , Vector3d > NormalF Double radius Returns Type Description DMesh3"
  },
  "api/g3.Polygon2d.html": {
    "href": "api/g3.Polygon2d.html",
    "title": "Class Polygon2d | ViRGIS VR GIS",
    "keywords": "Class Polygon2d Inheritance Object Polygon2d Implements IDuplicatable < Polygon2d > Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Polygon2d : IDuplicatable<Polygon2d> Constructors Polygon2d() Declaration public Polygon2d() Polygon2d(Polygon2d) Declaration public Polygon2d(Polygon2d copy) Parameters Type Name Description Polygon2d copy Polygon2d(Vector2d[]) Declaration public Polygon2d(Vector2d[] v) Parameters Type Name Description Vector2d [] v Polygon2d(VectorArray2d) Declaration public Polygon2d(VectorArray2d v) Parameters Type Name Description VectorArray2d v Polygon2d(IEnumerable<Vector2d>) Declaration public Polygon2d(IEnumerable<Vector2d> copy) Parameters Type Name Description IEnumerable < Vector2d > copy Polygon2d(IList<Vector2d>) Declaration public Polygon2d(IList<Vector2d> copy) Parameters Type Name Description IList < Vector2d > copy Polygon2d(Double[]) Declaration public Polygon2d(double[] values) Parameters Type Name Description Double [] values Polygon2d(Func<Int32, Vector2d>, Int32) Declaration public Polygon2d(Func<int, Vector2d> SourceF, int N) Parameters Type Name Description Func < Int32 , Vector2d > SourceF Int32 N Fields Timestamp Declaration public int Timestamp Field Value Type Description Int32 vertices Declaration protected List<Vector2d> vertices Field Value Type Description List < Vector2d > Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Area Declaration public double Area { get; } Property Value Type Description Double AverageEdgeLength Declaration public double AverageEdgeLength { get; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d IsClockwise Declaration public bool IsClockwise { get; } Property Value Type Description Boolean Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d Perimeter Declaration public double Perimeter { get; } Property Value Type Description Double SignedArea Declaration public double SignedArea { get; } Property Value Type Description Double Start Declaration public Vector2d Start { get; } Property Value Type Description Vector2d VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public ReadOnlyCollection<Vector2d> Vertices { get; } Property Value Type Description ReadOnlyCollection < Vector2d > Methods AppendVertex(Vector2d) Declaration public void AppendVertex(Vector2d v) Parameters Type Name Description Vector2d v AppendVertices(IEnumerable<Vector2d>) Declaration public void AppendVertices(IEnumerable<Vector2d> v) Parameters Type Name Description IEnumerable < Vector2d > v Chamfer(Double, Double, Double) Declaration public void Chamfer(double chamfer_dist, double minConvexAngleDeg = 30, double minConcaveAngleDeg = 30) Parameters Type Name Description Double chamfer_dist Double minConvexAngleDeg Double minConcaveAngleDeg Contains(Polygon2d) Declaration public bool Contains(Polygon2d o) Parameters Type Name Description Polygon2d o Returns Type Description Boolean Contains(Segment2d) Checks that all points on a segment are within the area defined by the Polygon2d. Declaration public bool Contains(Segment2d o) Parameters Type Name Description Segment2d o Returns Type Description Boolean Contains(Vector2d) Returns true if point inside polygon, using fast winding-number computation Declaration public bool Contains(Vector2d P) Parameters Type Name Description Vector2d P Returns Type Description Boolean DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Double DistanceSquared(Vector2d, out Int32, out Double) Declaration public double DistanceSquared(Vector2d p, out int iNearSeg, out double fNearSegT) Parameters Type Name Description Vector2d p Int32 iNearSeg Double fNearSegT Returns Type Description Double Duplicate() Declaration public virtual Polygon2d Duplicate() Returns Type Description Polygon2d FindIntersections(Polygon2d) Declaration public List<Vector2d> FindIntersections(Polygon2d o) Parameters Type Name Description Polygon2d o Returns Type Description List < Vector2d > GetBounds() Declaration public AxisAlignedBox2d GetBounds() Returns Type Description AxisAlignedBox2d GetNormal(Int32) Normal at vertex i, which is perp to tangent direction, which is not so intuitive if edges have very different lengths. Points \"inward\" for clockwise polygon, outward for counter-clockwise Declaration public Vector2d GetNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d GetNormal(Int32, Double) Declaration public Vector2d GetNormal(int iSeg, double segT) Parameters Type Name Description Int32 iSeg Double segT Returns Type Description Vector2d GetNormal_FaceAvg(Int32) Construct normal at poly vertex by averaging face normals. This is equivalent (?) to angle-based normal, ie is local/independent of segment lengths. Points \"inward\" for clockwise polygon, outward for counter-clockwise Declaration public Vector2d GetNormal_FaceAvg(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d GetTangent(Int32) Declaration public Vector2d GetTangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d Intersects(Polygon2d) Declaration public bool Intersects(Polygon2d o) Parameters Type Name Description Polygon2d o Returns Type Description Boolean Intersects(Segment2d) Checks if any point on a segment is within the area defined by the Polygon2d. Declaration public bool Intersects(Segment2d o) Parameters Type Name Description Segment2d o Returns Type Description Boolean MakeCircle(Double, Int32, Double) Declaration public static Polygon2d MakeCircle(double fRadius, int nSteps, double angleShiftRad = 0) Parameters Type Name Description Double fRadius Int32 nSteps Double angleShiftRad Returns Type Description Polygon2d MakeRectangle(Vector2d, Double, Double) Declaration public static Polygon2d MakeRectangle(Vector2d center, double width, double height) Parameters Type Name Description Vector2d center Double width Double height Returns Type Description Polygon2d MinimalBoundingBox(Double) Return minimal bounding box of vertices, computed to epsilon tolerance Declaration public Box2d MinimalBoundingBox(double epsilon) Parameters Type Name Description Double epsilon Returns Type Description Box2d NeighboursP(Int32, ref Vector2d, ref Vector2d) Declaration public void NeighboursP(int iVertex, ref Vector2d p0, ref Vector2d p1) Parameters Type Name Description Int32 iVertex Vector2d p0 Vector2d p1 NeighboursV(Int32, ref Vector2d, ref Vector2d, Boolean) Declaration public void NeighboursV(int iVertex, ref Vector2d v0, ref Vector2d v1, bool bNormalize = false) Parameters Type Name Description Int32 iVertex Vector2d v0 Vector2d v1 Boolean bNormalize OpeningAngleDeg(Int32) Declaration public double OpeningAngleDeg(int iVertex) Parameters Type Name Description Int32 iVertex Returns Type Description Double PointAt(Int32, Double) Declaration public Vector2d PointAt(int iSegment, double fSegT) Parameters Type Name Description Int32 iSegment Double fSegT Returns Type Description Vector2d PolyOffset(Double) offset polygon by fixed distance, by offsetting and intersecting edges. CCW polygon offsets \"outwards\", CW \"inwards\". Declaration public void PolyOffset(double dist) Parameters Type Name Description Double dist RemoveVertex(Int32) Declaration public void RemoveVertex(int idx) Parameters Type Name Description Int32 idx Reverse() Declaration public void Reverse() Rotate(Matrix2d, Vector2d) Declaration public Polygon2d Rotate(Matrix2d rotation, Vector2d origin) Parameters Type Name Description Matrix2d rotation Vector2d origin Returns Type Description Polygon2d Scale(Vector2d, Vector2d) Declaration public Polygon2d Scale(Vector2d scale, Vector2d origin) Parameters Type Name Description Vector2d scale Vector2d origin Returns Type Description Polygon2d Segment(Int32) Declaration public Segment2d Segment(int iSegment) Parameters Type Name Description Int32 iSegment Returns Type Description Segment2d SegmentItr() Declaration public IEnumerable<Segment2d> SegmentItr() Returns Type Description IEnumerable < Segment2d > SetVertices(List<Vector2d>, Boolean) Declaration public void SetVertices(List<Vector2d> newVertices, bool bTakeOwnership) Parameters Type Name Description List < Vector2d > newVertices Boolean bTakeOwnership Simplify(Double, Double, Boolean) Declaration public void Simplify(double clusterTol = 0.0001, double lineDeviationTol = 0.01, bool bSimplifyStraightLines = true) Parameters Type Name Description Double clusterTol Double lineDeviationTol Boolean bSimplifyStraightLines Transform(ITransform2) Declaration public Polygon2d Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Returns Type Description Polygon2d Transform(Func<Vector2d, Vector2d>) Declaration public Polygon2d Transform(Func<Vector2d, Vector2d> transformF) Parameters Type Name Description Func < Vector2d , Vector2d > transformF Returns Type Description Polygon2d Translate(Vector2d) Declaration public Polygon2d Translate(Vector2d translate) Parameters Type Name Description Vector2d translate Returns Type Description Polygon2d VerticesItr(Boolean) Declaration public IEnumerable<Vector2d> VerticesItr(bool bRepeatFirstAtEnd) Parameters Type Name Description Boolean bRepeatFirstAtEnd Returns Type Description IEnumerable < Vector2d > VtxNormalOffset(Double, Boolean) Offset each point by dist along vertex normal direction (ie tangent-perp) CCW polygon offsets \"outwards\", CW \"inwards\". Declaration public void VtxNormalOffset(double dist, bool bUseFaceAvg = false) Parameters Type Name Description Double dist Boolean bUseFaceAvg WindingIntegral(Vector2d) Compute winding integral at point P Declaration public double WindingIntegral(Vector2d P) Parameters Type Name Description Vector2d P Returns Type Description Double Implements IDuplicatable<T>"
  },
  "api/g3.Polygon2dBoxTree.html": {
    "href": "api/g3.Polygon2dBoxTree.html",
    "title": "Class Polygon2dBoxTree | ViRGIS VR GIS",
    "keywords": "Class Polygon2dBoxTree tree of Oriented Boxes (OBB) for a Polygon2d. Construction is sequential, ie pairs of segments are merged into boxes, then pairs of boxes, and so on [TODO] is this the best strategy? is there maybe some kind of sorting/sweepline algo? [TODO] would it make more sense to have more than just 2 segments at lowest level? Inheritance Object Polygon2dBoxTree Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Polygon2dBoxTree Constructors Polygon2dBoxTree(Polygon2d) Declaration public Polygon2dBoxTree(Polygon2d poly) Parameters Type Name Description Polygon2d poly Fields Polygon Declaration public Polygon2d Polygon Field Value Type Description Polygon2d Methods Distance(Vector2d) Declaration public double Distance(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Double NearestPoint(Vector2d) Declaration public Vector2d NearestPoint(Vector2d pt) Parameters Type Name Description Vector2d pt Returns Type Description Vector2d SquaredDistance(Vector2d, out Int32, out Double, Double) Declaration public double SquaredDistance(Vector2d pt, out int iNearSeg, out double fNearSegT, double max_dist = 1.7976931348623157E+308) Parameters Type Name Description Vector2d pt Int32 iNearSeg Double fNearSegT Double max_dist Returns Type Description Double"
  },
  "api/g3.Polygon2DCurve.html": {
    "href": "api/g3.Polygon2DCurve.html",
    "title": "Class Polygon2DCurve | ViRGIS VR GIS",
    "keywords": "Class Polygon2DCurve Wrapper for a Polygon2d that provides minimal IParametricCurve2D interface Inheritance Object Polygon2DCurve Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Polygon2DCurve : IParametricCurve2d Fields Polygon Declaration public Polygon2d Polygon Field Value Type Description Polygon2d Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.PolygonFont2d.CharacterInfo.html": {
    "href": "api/g3.PolygonFont2d.CharacterInfo.html",
    "title": "Class PolygonFont2d.CharacterInfo | ViRGIS VR GIS",
    "keywords": "Class PolygonFont2d.CharacterInfo Inheritance Object PolygonFont2d.CharacterInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class CharacterInfo Fields Bounds Declaration public AxisAlignedBox2d Bounds Field Value Type Description AxisAlignedBox2d Polygons Declaration public GeneralPolygon2d[] Polygons Field Value Type Description GeneralPolygon2d []"
  },
  "api/g3.PolygonFont2d.html": {
    "href": "api/g3.PolygonFont2d.html",
    "title": "Class PolygonFont2d | ViRGIS VR GIS",
    "keywords": "Class PolygonFont2d This class represents an outline font, where the outline is composed of polygons. Each font is a list of GeneralPolygon2D objects, so each outline may have 1 or more holes. (In fact, the mapping is [string,list_of_gpolygons], so you can actually keep entire strings together if desired) Inheritance Object PolygonFont2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PolygonFont2d Constructors PolygonFont2d() Declaration public PolygonFont2d() Fields Characters Declaration public Dictionary<string, PolygonFont2d.CharacterInfo> Characters Field Value Type Description Dictionary < String , PolygonFont2d.CharacterInfo > MaxBounds Declaration public AxisAlignedBox2d MaxBounds Field Value Type Description AxisAlignedBox2d Methods AddCharacter(String, GeneralPolygon2d[]) Declaration public void AddCharacter(string s, GeneralPolygon2d[] polygons) Parameters Type Name Description String s GeneralPolygon2d [] polygons GetCharacter(Char) Declaration public List<GeneralPolygon2d> GetCharacter(char c) Parameters Type Name Description Char c Returns Type Description List < GeneralPolygon2d > GetCharacter(String) Declaration public List<GeneralPolygon2d> GetCharacter(string s) Parameters Type Name Description String s Returns Type Description List < GeneralPolygon2d > GetCharacterBounds(Char) Declaration public AxisAlignedBox2d GetCharacterBounds(char c) Parameters Type Name Description Char c Returns Type Description AxisAlignedBox2d HasCharacter(Char) Declaration public bool HasCharacter(char c) Parameters Type Name Description Char c Returns Type Description Boolean ReadFont(Stream) Declaration public static PolygonFont2d ReadFont(Stream s) Parameters Type Name Description Stream s Returns Type Description PolygonFont2d ReadFont(String) Declaration public static PolygonFont2d ReadFont(string filename) Parameters Type Name Description String filename Returns Type Description PolygonFont2d Restore(PolygonFont2d, BinaryReader) Declaration public static void Restore(PolygonFont2d font, BinaryReader reader) Parameters Type Name Description PolygonFont2d font BinaryReader reader Store(PolygonFont2d, BinaryWriter) Declaration public static void Store(PolygonFont2d font, BinaryWriter writer) Parameters Type Name Description PolygonFont2d font BinaryWriter writer"
  },
  "api/g3.PolyLine2d.html": {
    "href": "api/g3.PolyLine2d.html",
    "title": "Class PolyLine2d | ViRGIS VR GIS",
    "keywords": "Class PolyLine2d Inheritance Object PolyLine2d Implements IEnumerable < Vector2d > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PolyLine2d : IEnumerable<Vector2d>, IEnumerable Constructors PolyLine2d() Declaration public PolyLine2d() PolyLine2d(Polygon2d, Boolean) Declaration public PolyLine2d(Polygon2d copy, bool bDuplicateFirstLast) Parameters Type Name Description Polygon2d copy Boolean bDuplicateFirstLast PolyLine2d(PolyLine2d) Declaration public PolyLine2d(PolyLine2d copy) Parameters Type Name Description PolyLine2d copy PolyLine2d(Vector2d[]) Declaration public PolyLine2d(Vector2d[] v) Parameters Type Name Description Vector2d [] v PolyLine2d(VectorArray2d) Declaration public PolyLine2d(VectorArray2d v) Parameters Type Name Description VectorArray2d v PolyLine2d(IEnumerable<Vector2d>) Declaration public PolyLine2d(IEnumerable<Vector2d> copy) Parameters Type Name Description IEnumerable < Vector2d > copy PolyLine2d(IList<Vector2d>) Declaration public PolyLine2d(IList<Vector2d> copy) Parameters Type Name Description IList < Vector2d > copy Fields Timestamp Declaration public int Timestamp Field Value Type Description Int32 vertices Declaration protected List<Vector2d> vertices Field Value Type Description List < Vector2d > Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d End Declaration public Vector2d End { get; } Property Value Type Description Vector2d Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d Length Declaration [Obsolete(\"This method name is confusing. Will remove in future. Use ArcLength instead\")] public double Length { get; } Property Value Type Description Double Start Declaration public Vector2d Start { get; } Property Value Type Description Vector2d VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public ReadOnlyCollection<Vector2d> Vertices { get; } Property Value Type Description ReadOnlyCollection < Vector2d > Methods AppendVertex(Vector2d) Declaration public virtual void AppendVertex(Vector2d v) Parameters Type Name Description Vector2d v AppendVertices(IEnumerable<Vector2d>) Declaration public virtual void AppendVertices(IEnumerable<Vector2d> v) Parameters Type Name Description IEnumerable < Vector2d > v DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Double GetBounds() Declaration public AxisAlignedBox2d GetBounds() Returns Type Description AxisAlignedBox2d GetEnumerator() Declaration public IEnumerator<Vector2d> GetEnumerator() Returns Type Description IEnumerator < Vector2d > GetNormal(Int32) Declaration public Vector2d GetNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d GetTangent(Int32) Declaration public Vector2d GetTangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d MakeBoxSpiral(Vector2d, Double, Double) Declaration public static PolyLine2d MakeBoxSpiral(Vector2d center, double len, double spacing) Parameters Type Name Description Vector2d center Double len Double spacing Returns Type Description PolyLine2d Reverse() Declaration public virtual void Reverse() Segment(Int32) Declaration public Segment2d Segment(int iSegment) Parameters Type Name Description Int32 iSegment Returns Type Description Segment2d SegmentItr() Declaration public IEnumerable<Segment2d> SegmentItr() Returns Type Description IEnumerable < Segment2d > Simplify(Double, Double, Boolean) Declaration public virtual void Simplify(double clusterTol = 0.0001, double lineDeviationTol = 0.01, bool bSimplifyStraightLines = true) Parameters Type Name Description Double clusterTol Double lineDeviationTol Boolean bSimplifyStraightLines simplifyDP(Double, Vector2d[], Int32, Int32, Boolean[]) Declaration protected static void simplifyDP(double tol, Vector2d[] v, int j, int k, bool[] mk) Parameters Type Name Description Double tol Vector2d [] v Int32 j Int32 k Boolean [] mk Transform(ITransform2) Declaration public PolyLine2d Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Returns Type Description PolyLine2d Trim(Double) make polyline shorter by removing each_end_dist from start and end Declaration public bool Trim(double each_end_dist) Parameters Type Name Description Double each_end_dist Returns Type Description Boolean TrimEnd(Double) make polyline shorter by dist length, by removing from end Declaration public bool TrimEnd(double dist) Parameters Type Name Description Double dist Returns Type Description Boolean TrimStart(Double) make polyline shorter by dist length, by removing from front Declaration public bool TrimStart(double dist) Parameters Type Name Description Double dist Returns Type Description Boolean VertexOffset(Double) Offset each point by dist along vertex normal direction (ie tangent-perp) Declaration public void VertexOffset(double dist) Parameters Type Name Description Double dist Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.PolyLine2DCurve.html": {
    "href": "api/g3.PolyLine2DCurve.html",
    "title": "Class PolyLine2DCurve | ViRGIS VR GIS",
    "keywords": "Class PolyLine2DCurve Wrapper for a PolyLine2d that provides minimal IParametricCurve2D interface Inheritance Object PolyLine2DCurve Implements IParametricCurve2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PolyLine2DCurve : IParametricCurve2d Fields Polyline Declaration public PolyLine2d Polyline Field Value Type Description PolyLine2d Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform Implements IParametricCurve2d"
  },
  "api/g3.PolyLine3d.html": {
    "href": "api/g3.PolyLine3d.html",
    "title": "Class PolyLine3d | ViRGIS VR GIS",
    "keywords": "Class PolyLine3d Inheritance Object PolyLine3d Implements IEnumerable < Vector3d > IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PolyLine3d : IEnumerable<Vector3d>, IEnumerable Constructors PolyLine3d() Declaration public PolyLine3d() PolyLine3d(PolyLine3d) Declaration public PolyLine3d(PolyLine3d copy) Parameters Type Name Description PolyLine3d copy PolyLine3d(Vector3d[]) Declaration public PolyLine3d(Vector3d[] v) Parameters Type Name Description Vector3d [] v PolyLine3d(VectorArray3d) Declaration public PolyLine3d(VectorArray3d v) Parameters Type Name Description VectorArray3d v Fields Timestamp Declaration public int Timestamp Field Value Type Description Int32 vertices Declaration protected List<Vector3d> vertices Field Value Type Description List < Vector3d > Properties End Declaration public Vector3d End { get; } Property Value Type Description Vector3d Item[Int32] Declaration public Vector3d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3d Start Declaration public Vector3d Start { get; } Property Value Type Description Vector3d VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Vertices Declaration public ReadOnlyCollection<Vector3d> Vertices { get; } Property Value Type Description ReadOnlyCollection < Vector3d > Methods AppendVertex(Vector3d) Declaration public void AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v GetBounds() Declaration public AxisAlignedBox3d GetBounds() Returns Type Description AxisAlignedBox3d GetEnumerator() Declaration public IEnumerator<Vector3d> GetEnumerator() Returns Type Description IEnumerator < Vector3d > GetTangent(Int32) Declaration public Vector3d GetTangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d SegmentItr() Declaration public IEnumerable<Segment3d> SegmentItr() Returns Type Description IEnumerable < Segment3d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.PolySimplification2.html": {
    "href": "api/g3.PolySimplification2.html",
    "title": "Class PolySimplification2 | ViRGIS VR GIS",
    "keywords": "Class PolySimplification2 2D Polyline/Polygon simplification. This is a more complex approach than Polygon.Simplify(), which uses sequential vtx clustering and then runs douglas-peucker algorithm. That method can end up modifying long straight segments, which is not ideal in many contexts (eg manufacturing). Strategy here is : 1) find runs of vertices that are very close to straight lines (default 0.01mm deviation tol) 2) find all straight segments longer than threshold distance (default 2mm) 3) discard vertices that deviate less than tolerance (default = 0.2mm) from sequential-points-segment, unless they are required to preserve straight segments [TODO] currently doing greedy search in 1,3. Could do more optimal search. [TODO] currently measuring deviation of p1...pN-1 from line [p0,pN] for points [p0,p1,...pN]. could alternately fit best segment to p1...pN (p0 is already fixed). [TODO] 2d variant of variational shape segmentation? Inheritance Object PolySimplification2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PolySimplification2 Constructors PolySimplification2(Polygon2d) Declaration public PolySimplification2(Polygon2d polygon) Parameters Type Name Description Polygon2d polygon PolySimplification2(PolyLine2d) Declaration public PolySimplification2(PolyLine2d polycurve) Parameters Type Name Description PolyLine2d polycurve Fields PreserveStraightSegLen After collapsing straight lines, any segment longer than this distance is explicitly preserved Declaration public double PreserveStraightSegLen Field Value Type Description Double Result Declaration public List<Vector2d> Result Field Value Type Description List < Vector2d > SimplifyDeviationThreshold we skip vertices that deviate less than this distance from the currently-accumulated line segment Declaration public double SimplifyDeviationThreshold Field Value Type Description Double StraightLineDeviationThreshold A series of points that deviates less than this distance from a line segment are considered 'on' that line Declaration public double StraightLineDeviationThreshold Field Value Type Description Double Methods Simplify() Declaration public void Simplify() Simplify(GeneralPolygon2d, Double) simplify outer and holes of a polygon solid with same thresholds Declaration public static void Simplify(GeneralPolygon2d solid, double deviationThresh) Parameters Type Name Description GeneralPolygon2d solid Double deviationThresh"
  },
  "api/g3.ProgressCancel.html": {
    "href": "api/g3.ProgressCancel.html",
    "title": "Class ProgressCancel | ViRGIS VR GIS",
    "keywords": "Class ProgressCancel This class is intended to be passed to long-running computes to 1) provide progress info back to caller (not implemented yet) 2) allow caller to cancel the computation Inheritance Object ProgressCancel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ProgressCancel Constructors ProgressCancel(ICancelSource) Declaration public ProgressCancel(ICancelSource source) Parameters Type Name Description ICancelSource source ProgressCancel(Func<Boolean>) Declaration public ProgressCancel(Func<bool> cancelF) Parameters Type Name Description Func < Boolean > cancelF Fields Source Declaration public ICancelSource Source Field Value Type Description ICancelSource Methods Cancelled() Check if client would like to cancel Declaration public bool Cancelled() Returns Type Description Boolean"
  },
  "api/g3.PuncturedDiscGenerator.html": {
    "href": "api/g3.PuncturedDiscGenerator.html",
    "title": "Class PuncturedDiscGenerator | ViRGIS VR GIS",
    "keywords": "Class PuncturedDiscGenerator Inheritance Object MeshGenerator PuncturedDiscGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class PuncturedDiscGenerator : MeshGenerator Fields EndAngleDeg Declaration public float EndAngleDeg Field Value Type Description Single InnerRadius Declaration public float InnerRadius Field Value Type Description Single OuterRadius Declaration public float OuterRadius Field Value Type Description Single Slices Declaration public int Slices Field Value Type Description Int32 StartAngleDeg Declaration public float StartAngleDeg Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.QuadraticFit2.html": {
    "href": "api/g3.QuadraticFit2.html",
    "title": "Class QuadraticFit2 | ViRGIS VR GIS",
    "keywords": "Class QuadraticFit2 Inheritance Object QuadraticFit2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class QuadraticFit2 Methods Fit(Vector2d[], Double[]) Declaration public static double Fit(Vector2d[] points, double[] coefficients) Parameters Type Name Description Vector2d [] points Double [] coefficients Returns Type Description Double FitCircle2(Vector2d[], out Circle2d) Declaration public static double FitCircle2(Vector2d[] points, out Circle2d circle) Parameters Type Name Description Vector2d [] points Circle2d circle Returns Type Description Double"
  },
  "api/g3.QuadricError.html": {
    "href": "api/g3.QuadricError.html",
    "title": "Struct QuadricError | ViRGIS VR GIS",
    "keywords": "Struct QuadricError Stores quadratic function that evaluates distance to plane, in minimal 10-coefficient form, following http://mgarland.org/files/papers/qtheory.pdf symmetric matrix A vector b constant c Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct QuadricError Constructors QuadricError(ref QuadricError, ref QuadricError) Declaration public QuadricError(ref QuadricError a, ref QuadricError b) Parameters Type Name Description QuadricError a QuadricError b QuadricError(ref Vector3d, ref Vector3d) Declaration public QuadricError(ref Vector3d n, ref Vector3d p) Parameters Type Name Description Vector3d n Vector3d p Fields Axx Declaration public double Axx Field Value Type Description Double Axy Declaration public double Axy Field Value Type Description Double Axz Declaration public double Axz Field Value Type Description Double Ayy Declaration public double Ayy Field Value Type Description Double Ayz Declaration public double Ayz Field Value Type Description Double Azz Declaration public double Azz Field Value Type Description Double bx Declaration public double bx Field Value Type Description Double by Declaration public double by Field Value Type Description Double bz Declaration public double bz Field Value Type Description Double c Declaration public double c Field Value Type Description Double Zero Declaration public static readonly QuadricError Zero Field Value Type Description QuadricError Methods Add(Double, ref QuadricError) Declaration public void Add(double w, ref QuadricError b) Parameters Type Name Description Double w QuadricError b Evaluate(ref Vector3d) returns pAp + 2*dot(p,b) + c Declaration public double Evaluate(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double OptimalPoint(ref Vector3d) Declaration public bool OptimalPoint(ref Vector3d result) Parameters Type Name Description Vector3d result Returns Type Description Boolean"
  },
  "api/g3.Quaterniond.html": {
    "href": "api/g3.Quaterniond.html",
    "title": "Struct Quaterniond | ViRGIS VR GIS",
    "keywords": "Struct Quaterniond Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Quaterniond Constructors Quaterniond(Matrix3d) Declaration public Quaterniond(Matrix3d mat) Parameters Type Name Description Matrix3d mat Quaterniond(Quaterniond) Declaration public Quaterniond(Quaterniond q2) Parameters Type Name Description Quaterniond q2 Quaterniond(Quaterniond, Quaterniond, Double) Declaration public Quaterniond(Quaterniond p, Quaterniond q, double t) Parameters Type Name Description Quaterniond p Quaterniond q Double t Quaterniond(Vector3d, Vector3d) Declaration public Quaterniond(Vector3d vFrom, Vector3d vTo) Parameters Type Name Description Vector3d vFrom Vector3d vTo Quaterniond(Vector3d, Double) Declaration public Quaterniond(Vector3d axis, double AngleDeg) Parameters Type Name Description Vector3d axis Double AngleDeg Quaterniond(Double, Double, Double, Double) Declaration public Quaterniond(double x, double y, double z, double w) Parameters Type Name Description Double x Double y Double z Double w Quaterniond(Double[]) Declaration public Quaterniond(double[] v2) Parameters Type Name Description Double [] v2 Fields Identity Declaration public static readonly Quaterniond Identity Field Value Type Description Quaterniond w Declaration public double w Field Value Type Description Double x Declaration public double x Field Value Type Description Double y Declaration public double y Field Value Type Description Double z Declaration public double z Field Value Type Description Double Zero Declaration public static readonly Quaterniond Zero Field Value Type Description Quaterniond Properties AxisX Declaration public Vector3d AxisX { get; } Property Value Type Description Vector3d AxisY Declaration public Vector3d AxisY { get; } Property Value Type Description Vector3d AxisZ Declaration public Vector3d AxisZ { get; } Property Value Type Description Vector3d Item[Int32] Declaration public double this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Double Length Declaration public double Length { get; } Property Value Type Description Double LengthSquared Declaration public double LengthSquared { get; } Property Value Type Description Double Normalized Declaration public Quaterniond Normalized { get; } Property Value Type Description Quaterniond Methods AxisAngleD(Vector3d, Double) Declaration public static Quaterniond AxisAngleD(Vector3d axis, double angleDeg) Parameters Type Name Description Vector3d axis Double angleDeg Returns Type Description Quaterniond AxisAngleR(Vector3d, Double) Declaration public static Quaterniond AxisAngleR(Vector3d axis, double angleRad) Parameters Type Name Description Vector3d axis Double angleRad Returns Type Description Quaterniond Conjugate() Equivalent to transpose of matrix. similar to inverse, but w/o normalization... Declaration public Quaterniond Conjugate() Returns Type Description Quaterniond Dot(Quaterniond) Declaration public double Dot(Quaterniond q2) Parameters Type Name Description Quaterniond q2 Returns Type Description Double EpsilonEqual(Quaterniond, Double) Declaration public bool EpsilonEqual(Quaterniond q2, double epsilon) Parameters Type Name Description Quaterniond q2 Double epsilon Returns Type Description Boolean FromTo(Vector3d, Vector3d) Declaration public static Quaterniond FromTo(Vector3d vFrom, Vector3d vTo) Parameters Type Name Description Vector3d vFrom Vector3d vTo Returns Type Description Quaterniond FromToConstrained(Vector3d, Vector3d, Vector3d) Declaration public static Quaterniond FromToConstrained(Vector3d vFrom, Vector3d vTo, Vector3d vAround) Parameters Type Name Description Vector3d vFrom Vector3d vTo Vector3d vAround Returns Type Description Quaterniond Inverse() Declaration public Quaterniond Inverse() Returns Type Description Quaterniond Inverse(Quaterniond) Declaration public static Quaterniond Inverse(Quaterniond q) Parameters Type Name Description Quaterniond q Returns Type Description Quaterniond Normalize(Double) Declaration public double Normalize(double epsilon = 0) Parameters Type Name Description Double epsilon Returns Type Description Double SetAxisAngleD(Vector3d, Double) Declaration public void SetAxisAngleD(Vector3d axis, double AngleDeg) Parameters Type Name Description Vector3d axis Double AngleDeg SetFromRotationMatrix(Matrix3d) Declaration public void SetFromRotationMatrix(Matrix3d rot) Parameters Type Name Description Matrix3d rot SetFromRotationMatrix(ref Matrix3d) Declaration public void SetFromRotationMatrix(ref Matrix3d rot) Parameters Type Name Description Matrix3d rot SetFromTo(Vector3d, Vector3d) Declaration public void SetFromTo(Vector3d vFrom, Vector3d vTo) Parameters Type Name Description Vector3d vFrom Vector3d vTo SetToSlerp(Quaterniond, Quaterniond, Double) Declaration public void SetToSlerp(Quaterniond p, Quaterniond q, double t) Parameters Type Name Description Quaterniond p Quaterniond q Double t Slerp(Quaterniond, Quaterniond, Double) Declaration public static Quaterniond Slerp(Quaterniond p, Quaterniond q, double t) Parameters Type Name Description Quaterniond p Quaterniond q Double t Returns Type Description Quaterniond ToRotationMatrix() Declaration public Matrix3d ToRotationMatrix() Returns Type Description Matrix3d ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Operators Addition(Quaterniond, Quaterniond) Declaration public static Quaterniond operator +(Quaterniond q1, Quaterniond q2) Parameters Type Name Description Quaterniond q1 Quaterniond q2 Returns Type Description Quaterniond Explicit(Quaterniond to Quaternionf) Declaration public static explicit operator Quaternionf(Quaterniond q) Parameters Type Name Description Quaterniond q Returns Type Description Quaternionf Implicit(Quaternionf to Quaterniond) Declaration public static implicit operator Quaterniond(Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaterniond Multiply(Quaterniond, Quaterniond) Declaration public static Quaterniond operator *(Quaterniond a, Quaterniond b) Parameters Type Name Description Quaterniond a Quaterniond b Returns Type Description Quaterniond Multiply(Quaterniond, Vector3d) Declaration public static Vector3d operator *(Quaterniond q, Vector3d v) Parameters Type Name Description Quaterniond q Vector3d v Returns Type Description Vector3d Multiply(Quaterniond, Double) Declaration public static Quaterniond operator *(Quaterniond q1, double d) Parameters Type Name Description Quaterniond q1 Double d Returns Type Description Quaterniond Multiply(Double, Quaterniond) Declaration public static Quaterniond operator *(double d, Quaterniond q1) Parameters Type Name Description Double d Quaterniond q1 Returns Type Description Quaterniond Subtraction(Quaterniond, Quaterniond) Declaration public static Quaterniond operator -(Quaterniond q1, Quaterniond q2) Parameters Type Name Description Quaterniond q1 Quaterniond q2 Returns Type Description Quaterniond UnaryNegation(Quaterniond) Declaration public static Quaterniond operator -(Quaterniond q2) Parameters Type Name Description Quaterniond q2 Returns Type Description Quaterniond"
  },
  "api/g3.Quaternionf.html": {
    "href": "api/g3.Quaternionf.html",
    "title": "Struct Quaternionf | ViRGIS VR GIS",
    "keywords": "Struct Quaternionf Implements IComparable < Quaternionf > IEquatable < Quaternionf > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Quaternionf : IComparable<Quaternionf>, IEquatable<Quaternionf> Constructors Quaternionf(Matrix3f) Declaration public Quaternionf(Matrix3f mat) Parameters Type Name Description Matrix3f mat Quaternionf(Quaternionf) Declaration public Quaternionf(Quaternionf q2) Parameters Type Name Description Quaternionf q2 Quaternionf(Quaternionf, Quaternionf, Single) Declaration public Quaternionf(Quaternionf p, Quaternionf q, float t) Parameters Type Name Description Quaternionf p Quaternionf q Single t Quaternionf(Vector3f, Vector3f) Declaration public Quaternionf(Vector3f vFrom, Vector3f vTo) Parameters Type Name Description Vector3f vFrom Vector3f vTo Quaternionf(Vector3f, Single) Declaration public Quaternionf(Vector3f axis, float AngleDeg) Parameters Type Name Description Vector3f axis Single AngleDeg Quaternionf(Single, Single, Single, Single) Declaration public Quaternionf(float x, float y, float z, float w) Parameters Type Name Description Single x Single y Single z Single w Quaternionf(Single[]) Declaration public Quaternionf(float[] v2) Parameters Type Name Description Single [] v2 Fields Identity Declaration public static readonly Quaternionf Identity Field Value Type Description Quaternionf w Declaration public float w Field Value Type Description Single x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single Zero Declaration public static readonly Quaternionf Zero Field Value Type Description Quaternionf Properties AxisX Declaration public Vector3f AxisX { get; } Property Value Type Description Vector3f AxisY Declaration public Vector3f AxisY { get; } Property Value Type Description Vector3f AxisZ Declaration public Vector3f AxisZ { get; } Property Value Type Description Vector3f Item[Int32] Declaration public float this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Single Length Declaration public float Length { get; } Property Value Type Description Single LengthSquared Declaration public float LengthSquared { get; } Property Value Type Description Single Normalized Declaration public Quaternionf Normalized { get; } Property Value Type Description Quaternionf Methods AxisAngleD(Vector3f, Single) Declaration public static Quaternionf AxisAngleD(Vector3f axis, float angleDeg) Parameters Type Name Description Vector3f axis Single angleDeg Returns Type Description Quaternionf AxisAngleR(Vector3f, Single) Declaration public static Quaternionf AxisAngleR(Vector3f axis, float angleRad) Parameters Type Name Description Vector3f axis Single angleRad Returns Type Description Quaternionf CompareTo(Quaternionf) Declaration public int CompareTo(Quaternionf other) Parameters Type Name Description Quaternionf other Returns Type Description Int32 Dot(Quaternionf) Declaration public float Dot(Quaternionf q2) Parameters Type Name Description Quaternionf q2 Returns Type Description Single EpsilonEqual(Quaternionf, Single) Declaration public bool EpsilonEqual(Quaternionf q2, float epsilon) Parameters Type Name Description Quaternionf q2 Single epsilon Returns Type Description Boolean Equals(Quaternionf) Declaration public bool Equals(Quaternionf other) Parameters Type Name Description Quaternionf other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) FromTo(Vector3f, Vector3f) Declaration public static Quaternionf FromTo(Vector3f vFrom, Vector3f vTo) Parameters Type Name Description Vector3f vFrom Vector3f vTo Returns Type Description Quaternionf FromToConstrained(Vector3f, Vector3f, Vector3f) Declaration public static Quaternionf FromToConstrained(Vector3f vFrom, Vector3f vTo, Vector3f vAround) Parameters Type Name Description Vector3f vFrom Vector3f vTo Vector3f vAround Returns Type Description Quaternionf GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Inverse() Declaration public Quaternionf Inverse() Returns Type Description Quaternionf Inverse(Quaternionf) Declaration public static Quaternionf Inverse(Quaternionf q) Parameters Type Name Description Quaternionf q Returns Type Description Quaternionf InverseMultiply(ref Vector3d) Inverse() * v Declaration public Vector3d InverseMultiply(ref Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d InverseMultiply(ref Vector3f) Inverse() * v Declaration public Vector3f InverseMultiply(ref Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f Normalize(Single) Declaration public float Normalize(float epsilon = 0F) Parameters Type Name Description Single epsilon Returns Type Description Single SetAxisAngleD(Vector3f, Single) Declaration public void SetAxisAngleD(Vector3f axis, float AngleDeg) Parameters Type Name Description Vector3f axis Single AngleDeg SetFromRotationMatrix(Matrix3f) Declaration public void SetFromRotationMatrix(Matrix3f rot) Parameters Type Name Description Matrix3f rot SetFromTo(Vector3f, Vector3f) Declaration public void SetFromTo(Vector3f vFrom, Vector3f vTo) Parameters Type Name Description Vector3f vFrom Vector3f vTo SetToSlerp(Quaternionf, Quaternionf, Single) Declaration public void SetToSlerp(Quaternionf p, Quaternionf q, float t) Parameters Type Name Description Quaternionf p Quaternionf q Single t Slerp(Quaternionf, Quaternionf, Single) Declaration public static Quaternionf Slerp(Quaternionf p, Quaternionf q, float t) Parameters Type Name Description Quaternionf p Quaternionf q Single t Returns Type Description Quaternionf ToRotationMatrix() Declaration public Matrix3f ToRotationMatrix() Returns Type Description Matrix3f ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Operators Equality(Quaternionf, Quaternionf) Declaration public static bool operator ==(Quaternionf a, Quaternionf b) Parameters Type Name Description Quaternionf a Quaternionf b Returns Type Description Boolean Inequality(Quaternionf, Quaternionf) Declaration public static bool operator !=(Quaternionf a, Quaternionf b) Parameters Type Name Description Quaternionf a Quaternionf b Returns Type Description Boolean Multiply(Quaternionf, Quaternionf) Declaration public static Quaternionf operator *(Quaternionf a, Quaternionf b) Parameters Type Name Description Quaternionf a Quaternionf b Returns Type Description Quaternionf Multiply(Quaternionf, Vector3d) Declaration public static Vector3d operator *(Quaternionf q, Vector3d v) Parameters Type Name Description Quaternionf q Vector3d v Returns Type Description Vector3d Multiply(Quaternionf, Vector3f) Declaration public static Vector3f operator *(Quaternionf q, Vector3f v) Parameters Type Name Description Quaternionf q Vector3f v Returns Type Description Vector3f Subtraction(Quaternionf, Quaternionf) Declaration public static Quaternionf operator -(Quaternionf q1, Quaternionf q2) Parameters Type Name Description Quaternionf q1 Quaternionf q2 Returns Type Description Quaternionf Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Query2.html": {
    "href": "api/g3.Query2.html",
    "title": "Interface Query2 | ViRGIS VR GIS",
    "keywords": "Interface Query2 Namespace : g3 Assembly : cs.temp.dll.dll Syntax public interface Query2 Methods ToCircumcircle(ref Vector2d, Int32, Int32, Int32) Declaration int ToCircumcircle(ref Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToCircumcircle(Int32, Int32, Int32, Int32) Declaration int ToCircumcircle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToLine(ref Vector2d, Int32, Int32) Declaration int ToLine(ref Vector2d test, int v0, int v1) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Returns Type Description Int32 ToLine(Int32, Int32, Int32) Declaration int ToLine(int i, int v0, int v1) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Returns Type Description Int32 ToTriangle(ref Vector2d, Int32, Int32, Int32) Declaration int ToTriangle(ref Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToTriangle(Int32, Int32, Int32, Int32) Declaration int ToTriangle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32"
  },
  "api/g3.Query2d.html": {
    "href": "api/g3.Query2d.html",
    "title": "Class Query2d | ViRGIS VR GIS",
    "keywords": "Class Query2d Inheritance Object QueryBase Query2d Query2Int64 Implements Query2 Inherited Members QueryBase.Sort(Int32, Int32) QueryBase.Sort(Int32, Int32, Int32) QueryBase.Sort(Int32, Int32, Int32, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Query2d : QueryBase, Query2 Constructors Query2d(IList<Vector2d>) Declaration public Query2d(IList<Vector2d> Vertices) Parameters Type Name Description IList < Vector2d > Vertices Fields mVertices Declaration protected IList<Vector2d> mVertices Field Value Type Description IList < Vector2d > Methods Det3(Double, Double, Double, Double, Double, Double, Double, Double, Double) Declaration public double Det3(double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2) Parameters Type Name Description Double x0 Double y0 Double z0 Double x1 Double y1 Double z1 Double x2 Double y2 Double z2 Returns Type Description Double Dot(Double, Double, Double, Double) Declaration public double Dot(double x0, double y0, double x1, double y1) Parameters Type Name Description Double x0 Double y0 Double x1 Double y1 Returns Type Description Double GetNumVertices() Declaration public int GetNumVertices() Returns Type Description Int32 GetVertices() Declaration public IList<Vector2d> GetVertices() Returns Type Description IList < Vector2d > ToCircumcircle(ref Vector2d, Int32, Int32, Int32) +1, outside circumcircle of triangle -1, inside circumcircle of triangle 0, on circumcircle of triangle Declaration public virtual int ToCircumcircle(ref Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToCircumcircle(Int32, Int32, Int32, Int32) +1, outside circumcircle of triangle -1, inside circumcircle of triangle 0, on circumcircle of triangle Declaration public virtual int ToCircumcircle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToLine(ref Vector2d, Int32, Int32) +1, on right of line -1, on left of line 0, on the line Declaration public virtual int ToLine(ref Vector2d test, int v0, int v1) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Returns Type Description Int32 ToLine(Int32, Int32, Int32) +1, on right of line -1, on left of line 0, on the line Declaration public virtual int ToLine(int i, int v0, int v1) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Returns Type Description Int32 ToTriangle(ref Vector2d, Int32, Int32, Int32) +1, outside triangle -1, inside triangle 0, on triangle Declaration public virtual int ToTriangle(ref Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToTriangle(Int32, Int32, Int32, Int32) +1, outside triangle -1, inside triangle 0, on triangle Declaration public virtual int ToTriangle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 Implements Query2"
  },
  "api/g3.Query2Int64.html": {
    "href": "api/g3.Query2Int64.html",
    "title": "Class Query2Int64 | ViRGIS VR GIS",
    "keywords": "Class Query2Int64 2D queries for integer coordinates. Note that input Vector2d values are directly cast to int64 - you must scale them to suitable coordinates yourself! Inheritance Object QueryBase Query2d Query2Int64 Implements Query2 Inherited Members Query2d.mVertices Query2d.GetNumVertices() Query2d.GetVertices() Query2d.ToLine(Int32, Int32, Int32) Query2d.ToTriangle(Int32, Int32, Int32, Int32) Query2d.ToTriangle(Vector2d, Int32, Int32, Int32) Query2d.ToCircumcircle(Int32, Int32, Int32, Int32) Query2d.Dot(Double, Double, Double, Double) Query2d.Det3(Double, Double, Double, Double, Double, Double, Double, Double, Double) QueryBase.Sort(Int32, Int32) QueryBase.Sort(Int32, Int32, Int32) QueryBase.Sort(Int32, Int32, Int32, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Query2Int64 : Query2d, Query2 Constructors Query2Int64(IList<Vector2d>) Declaration public Query2Int64(IList<Vector2d> Vertices) Parameters Type Name Description IList < Vector2d > Vertices Methods ToCircumcircle(ref Vector2d, Int32, Int32, Int32) Declaration public override int ToCircumcircle(ref Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 Overrides Query2d.ToCircumcircle(ref Vector2d, Int32, Int32, Int32) ToLine(ref Vector2d, Int32, Int32) Declaration public override int ToLine(ref Vector2d test, int v0, int v1) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Returns Type Description Int32 Overrides Query2d.ToLine(ref Vector2d, Int32, Int32) Implements Query2"
  },
  "api/g3.QueryBase.html": {
    "href": "api/g3.QueryBase.html",
    "title": "Class QueryBase | ViRGIS VR GIS",
    "keywords": "Class QueryBase Port of WildMagic5 Query class Inheritance Object QueryBase Query2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class QueryBase Methods Sort(ref Int32, ref Int32) Declaration public bool Sort(ref int v0, ref int v1) Parameters Type Name Description Int32 v0 Int32 v1 Returns Type Description Boolean Sort(ref Int32, ref Int32, ref Int32) Declaration public bool Sort(ref int v0, ref int v1, ref int v2) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Returns Type Description Boolean Sort(ref Int32, ref Int32, ref Int32, ref Int32) Declaration public bool Sort(ref int v0, ref int v1, ref int v2, ref int v3) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Int32 v3 Returns Type Description Boolean"
  },
  "api/g3.QueryNumberType.html": {
    "href": "api/g3.QueryNumberType.html",
    "title": "Enum QueryNumberType | ViRGIS VR GIS",
    "keywords": "Enum QueryNumberType Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum QueryNumberType Fields Name Description QT_DOUBLE QT_FILTERED QT_INT64 QT_INTEGER QT_RATIONAL"
  },
  "api/g3.QueryTuple2d.html": {
    "href": "api/g3.QueryTuple2d.html",
    "title": "Class QueryTuple2d | ViRGIS VR GIS",
    "keywords": "Class QueryTuple2d Inheritance Object QueryTuple2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class QueryTuple2d Constructors QueryTuple2d(Vector2d, Vector2d, Vector2d) Declaration public QueryTuple2d(Vector2d v0, Vector2d v1, Vector2d v2) Parameters Type Name Description Vector2d v0 Vector2d v1 Vector2d v2 QueryTuple2d(Vector2dTuple3) Declaration public QueryTuple2d(Vector2dTuple3 tuple) Parameters Type Name Description Vector2dTuple3 tuple Methods Det2(Double, Double, Double, Double) Declaration public static double Det2(double x0, double y0, double x1, double y1) Parameters Type Name Description Double x0 Double y0 Double x1 Double y1 Returns Type Description Double Det3(Double, Double, Double, Double, Double, Double, Double, Double, Double) Declaration public static double Det3(double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2) Parameters Type Name Description Double x0 Double y0 Double z0 Double x1 Double y1 Double z1 Double x2 Double y2 Double z2 Returns Type Description Double Dot(Double, Double, Double, Double) Declaration public static double Dot(double x0, double y0, double x1, double y1) Parameters Type Name Description Double x0 Double y0 Double x1 Double y1 Returns Type Description Double Sort(ref Int32, ref Int32) Declaration public static bool Sort(ref int v0, ref int v1) Parameters Type Name Description Int32 v0 Int32 v1 Returns Type Description Boolean Sort(ref Int32, ref Int32, ref Int32) Declaration public static bool Sort(ref int v0, ref int v1, ref int v2) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Returns Type Description Boolean Sort(ref Int32, ref Int32, ref Int32, ref Int32) Declaration public static bool Sort(ref int v0, ref int v1, ref int v2, ref int v3) Parameters Type Name Description Int32 v0 Int32 v1 Int32 v2 Int32 v3 Returns Type Description Boolean ToCircumcircle(Vector2d, Int32, Int32, Int32) Declaration public int ToCircumcircle(Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToCircumcircle(Int32, Int32, Int32, Int32) Declaration public int ToCircumcircle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToLine(Vector2d, Int32, Int32) Declaration public int ToLine(Vector2d test, int v0, int v1) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Returns Type Description Int32 ToLine(Int32, Int32, Int32) Declaration public int ToLine(int i, int v0, int v1) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Returns Type Description Int32 ToTriangle(Vector2d, Int32, Int32, Int32) Declaration public int ToTriangle(Vector2d test, int v0, int v1, int v2) Parameters Type Name Description Vector2d test Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32 ToTriangle(Int32, Int32, Int32, Int32) Declaration public int ToTriangle(int i, int v0, int v1, int v2) Parameters Type Name Description Int32 i Int32 v0 Int32 v1 Int32 v2 Returns Type Description Int32"
  },
  "api/g3.Radial3DArrowGenerator.html": {
    "href": "api/g3.Radial3DArrowGenerator.html",
    "title": "Class Radial3DArrowGenerator | ViRGIS VR GIS",
    "keywords": "Class Radial3DArrowGenerator Inheritance Object MeshGenerator VerticalGeneralizedCylinderGenerator Radial3DArrowGenerator Inherited Members VerticalGeneralizedCylinderGenerator.Sections VerticalGeneralizedCylinderGenerator.Slices VerticalGeneralizedCylinderGenerator.Capped VerticalGeneralizedCylinderGenerator.NoSharedVertices VerticalGeneralizedCylinderGenerator.startCapCenterIndex VerticalGeneralizedCylinderGenerator.endCapCenterIndex MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Radial3DArrowGenerator : VerticalGeneralizedCylinderGenerator Fields HeadBaseRadius Declaration public float HeadBaseRadius Field Value Type Description Single HeadLength Declaration public float HeadLength Field Value Type Description Single StickLength Declaration public float StickLength Field Value Type Description Single StickRadius Declaration public float StickRadius Field Value Type Description Single TipRadius Declaration public float TipRadius Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides VerticalGeneralizedCylinderGenerator.Generate()"
  },
  "api/g3.Ray3d.html": {
    "href": "api/g3.Ray3d.html",
    "title": "Struct Ray3d | ViRGIS VR GIS",
    "keywords": "Struct Ray3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Ray3d Constructors Ray3d(Vector3d, Vector3d, Boolean) Declaration public Ray3d(Vector3d origin, Vector3d direction, bool bIsNormalized = false) Parameters Type Name Description Vector3d origin Vector3d direction Boolean bIsNormalized Ray3d(Vector3f, Vector3f) Declaration public Ray3d(Vector3f origin, Vector3f direction) Parameters Type Name Description Vector3f origin Vector3f direction Fields Direction Declaration public Vector3d Direction Field Value Type Description Vector3d Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Methods ClosestPoint(Vector3d) Declaration public Vector3d ClosestPoint(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Vector3d DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double PointAt(Double) Declaration public Vector3d PointAt(double d) Parameters Type Name Description Double d Returns Type Description Vector3d Project(Vector3d) Declaration public double Project(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double Operators Explicit(Ray3d to Ray3f) Declaration public static explicit operator Ray3f(Ray3d v) Parameters Type Name Description Ray3d v Returns Type Description Ray3f Implicit(Ray3f to Ray3d) Declaration public static implicit operator Ray3d(Ray3f v) Parameters Type Name Description Ray3f v Returns Type Description Ray3d"
  },
  "api/g3.Ray3f.html": {
    "href": "api/g3.Ray3f.html",
    "title": "Struct Ray3f | ViRGIS VR GIS",
    "keywords": "Struct Ray3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Ray3f Constructors Ray3f(Vector3f, Vector3f, Boolean) Declaration public Ray3f(Vector3f origin, Vector3f direction, bool bIsNormalized = false) Parameters Type Name Description Vector3f origin Vector3f direction Boolean bIsNormalized Fields Direction Declaration public Vector3f Direction Field Value Type Description Vector3f Origin Declaration public Vector3f Origin Field Value Type Description Vector3f Methods DistanceSquared(Vector3f) Declaration public float DistanceSquared(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single PointAt(Single) Declaration public Vector3f PointAt(float d) Parameters Type Name Description Single d Returns Type Description Vector3f Project(Vector3f) Declaration public float Project(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single"
  },
  "api/g3.RayIntersection.html": {
    "href": "api/g3.RayIntersection.html",
    "title": "Class RayIntersection | ViRGIS VR GIS",
    "keywords": "Class RayIntersection Inheritance Object RayIntersection Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RayIntersection Methods InfiniteCylinder(Vector3f, Vector3f, Vector3f, Vector3f, Single, out Single) Declaration public static bool InfiniteCylinder(Vector3f vOrigin, Vector3f vDirection, Vector3f vCylOrigin, Vector3f vCylAxis, float fRadius, out float fRayT) Parameters Type Name Description Vector3f vOrigin Vector3f vDirection Vector3f vCylOrigin Vector3f vCylAxis Single fRadius Single fRayT Returns Type Description Boolean InfiniteCylinderSigned(Vector3f, Vector3f, Vector3f, Vector3f, Single, out Single) Declaration public static bool InfiniteCylinderSigned(Vector3f vOrigin, Vector3f vDirection, Vector3f vCylOrigin, Vector3f vCylAxis, float fRadius, out float fRayT) Parameters Type Name Description Vector3f vOrigin Vector3f vDirection Vector3f vCylOrigin Vector3f vCylAxis Single fRadius Single fRayT Returns Type Description Boolean Sphere(Vector3f, Vector3f, Vector3f, Single, out Single) Declaration public static bool Sphere(Vector3f vOrigin, Vector3f vDirection, Vector3f vCenter, float fRadius, out float fRayT) Parameters Type Name Description Vector3f vOrigin Vector3f vDirection Vector3f vCenter Single fRadius Single fRayT Returns Type Description Boolean SphereSigned(ref Vector3d, ref Vector3d, ref Vector3d, Double, out Double) Declaration public static bool SphereSigned(ref Vector3d vOrigin, ref Vector3d vDirection, ref Vector3d vCenter, double fRadius, out double fRayT) Parameters Type Name Description Vector3d vOrigin Vector3d vDirection Vector3d vCenter Double fRadius Double fRayT Returns Type Description Boolean SphereSigned(ref Vector3f, ref Vector3f, ref Vector3f, Single, out Single) Declaration public static bool SphereSigned(ref Vector3f vOrigin, ref Vector3f vDirection, ref Vector3f vCenter, float fRadius, out float fRayT) Parameters Type Name Description Vector3f vOrigin Vector3f vDirection Vector3f vCenter Single fRadius Single fRayT Returns Type Description Boolean"
  },
  "api/g3.ReadOptions.html": {
    "href": "api/g3.ReadOptions.html",
    "title": "Class ReadOptions | ViRGIS VR GIS",
    "keywords": "Class ReadOptions Inheritance Object ReadOptions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ReadOptions Constructors ReadOptions() Declaration public ReadOptions() Fields CustomFlags Declaration public CommandArgumentSet CustomFlags Field Value Type Description CommandArgumentSet Defaults Declaration public static readonly ReadOptions Defaults Field Value Type Description ReadOptions ReadMaterials Declaration public bool ReadMaterials Field Value Type Description Boolean"
  },
  "api/g3.Reducer.html": {
    "href": "api/g3.Reducer.html",
    "title": "Class Reducer | ViRGIS VR GIS",
    "keywords": "Class Reducer Inheritance Object MeshRefinerBase Reducer Inherited Members MeshRefinerBase.mesh MeshRefinerBase.constraints MeshRefinerBase.AllowCollapseFixedVertsWithSameSetID MeshRefinerBase.EdgeFlipTolerance MeshRefinerBase.edge_flip_tol MeshRefinerBase.Mesh MeshRefinerBase.Constraints MeshRefinerBase.SetExternalConstraints(MeshConstraints) MeshRefinerBase.Progress MeshRefinerBase.Cancelled() MeshRefinerBase.edge_flip_metric(Vector3d, Vector3d) MeshRefinerBase.collapse_creates_flip_or_invalid(Int32, Int32, Vector3d, Int32, Int32) MeshRefinerBase.flip_inverts_normals(Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_constraints(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_vtx(Int32, Int32, Int32, Int32) MeshRefinerBase.vertex_is_fixed(Int32) MeshRefinerBase.vertex_is_constrained(Int32) MeshRefinerBase.get_vertex_constraint(Int32) MeshRefinerBase.get_vertex_constraint(Int32, VertexConstraint) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Reducer : MeshRefinerBase Constructors Reducer() Declaration protected Reducer() Reducer(DMesh3) Declaration public Reducer(DMesh3 m) Parameters Type Name Description DMesh3 m Fields DebugEdges Declaration public List<int> DebugEdges Field Value Type Description List < Int32 > EdgeQuadrics Declaration protected Reducer.QEdge[] EdgeQuadrics Field Value Type Description Reducer.QEdge [] EdgeQueue Declaration protected IndexPriorityQueue EdgeQueue Field Value Type Description IndexPriorityQueue ENABLE_DEBUG_CHECKS Declaration public bool ENABLE_DEBUG_CHECKS Field Value Type Description Boolean ENABLE_PROFILING Declaration public bool ENABLE_PROFILING Field Value Type Description Boolean HaveBoundary Declaration protected bool HaveBoundary Field Value Type Description Boolean IsBoundaryVtxCache Declaration protected bool[] IsBoundaryVtxCache Field Value Type Description Boolean [] MinEdgeLength Declaration protected double MinEdgeLength Field Value Type Description Double MinimizeQuadricPositionError Declaration public bool MinimizeQuadricPositionError Field Value Type Description Boolean PreserveBoundaryShape Declaration public bool PreserveBoundaryShape Field Value Type Description Boolean ProjectionMode Declaration public Reducer.TargetProjectionMode ProjectionMode Field Value Type Description Reducer.TargetProjectionMode ReduceMode Declaration protected Reducer.TargetModes ReduceMode Field Value Type Description Reducer.TargetModes target Declaration protected IProjectionTarget target Field Value Type Description IProjectionTarget TargetCount Declaration protected int TargetCount Field Value Type Description Int32 vertQuadrics Declaration protected QuadricError[] vertQuadrics Field Value Type Description QuadricError [] Methods begin_collapse() Declaration protected virtual void begin_collapse() begin_ops() Declaration protected virtual void begin_ops() begin_pass() Declaration protected virtual void begin_pass() begin_project() Declaration protected virtual void begin_project() begin_setup() Declaration protected virtual void begin_setup() CollapseEdge(Int32, Vector3d, out Int32) Declaration protected virtual Reducer.ProcessResult CollapseEdge(int edgeID, Vector3d vNewPos, out int collapseToV) Parameters Type Name Description Int32 edgeID Vector3d vNewPos Int32 collapseToV Returns Type Description Reducer.ProcessResult DebugCheckVertexConstraints() Declaration protected virtual void DebugCheckVertexConstraints() DoDebugChecks() Declaration protected virtual void DoDebugChecks() DoReduce() Declaration public virtual void DoReduce() end_collapse() Declaration protected virtual void end_collapse() end_ops() Declaration protected virtual void end_ops() end_pass() Declaration protected virtual void end_pass() end_project() Declaration protected virtual void end_project() end_setup() Declaration protected virtual void end_setup() FastCollapsePass(Double, Int32, Boolean) Declaration public virtual void FastCollapsePass(double fMinEdgeLength, int nRounds = 1, bool MeshIsClosedHint = false) Parameters Type Name Description Double fMinEdgeLength Int32 nRounds Boolean MeshIsClosedHint FullProjectionPass() Declaration protected virtual void FullProjectionPass() get_projected_collapse_position(Int32, Vector3d) Declaration protected Vector3d get_projected_collapse_position(int vid, Vector3d vNewPos) Parameters Type Name Description Int32 vid Vector3d vNewPos Returns Type Description Vector3d InitializeQueue() Declaration protected virtual void InitializeQueue() InitializeVertexQuadrics() Declaration protected virtual void InitializeVertexQuadrics() IsBoundaryV(Int32) Declaration protected bool IsBoundaryV(int vid) Parameters Type Name Description Int32 vid Returns Type Description Boolean next_edge(Int32, out Boolean) Declaration protected virtual int next_edge(int cur_eid, out bool bDone) Parameters Type Name Description Int32 cur_eid Boolean bDone Returns Type Description Int32 OnEdgeCollapse(Int32, Int32, Int32, DMesh3.EdgeCollapseInfo) Declaration protected virtual void OnEdgeCollapse(int edgeID, int va, int vb, DMesh3.EdgeCollapseInfo collapseInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeCollapseInfo collapseInfo OptimalPoint(Int32, ref QuadricError, Int32, Int32) Declaration protected Vector3d OptimalPoint(int eid, ref QuadricError q, int ea, int eb) Parameters Type Name Description Int32 eid QuadricError q Int32 ea Int32 eb Returns Type Description Vector3d Precompute(Boolean) Declaration protected virtual void Precompute(bool bMeshIsClosed = false) Parameters Type Name Description Boolean bMeshIsClosed project_vertex(Int32, IProjectionTarget) Declaration protected void project_vertex(int vID, IProjectionTarget targetIn) Parameters Type Name Description Int32 vID IProjectionTarget targetIn project_vertices() Declaration protected virtual IEnumerable<int> project_vertices() Returns Type Description IEnumerable < Int32 > ReduceToEdgeLength(Double) Declaration public virtual void ReduceToEdgeLength(double minEdgeLen) Parameters Type Name Description Double minEdgeLen ReduceToTriangleCount(Int32) Declaration public virtual void ReduceToTriangleCount(int nCount) Parameters Type Name Description Int32 nCount ReduceToVertexCount(Int32) Declaration public virtual void ReduceToVertexCount(int nCount) Parameters Type Name Description Int32 nCount Reproject() Declaration protected virtual void Reproject() RuntimeDebugCheck(Int32) Declaration protected virtual void RuntimeDebugCheck(int eid) Parameters Type Name Description Int32 eid SetProjectionTarget(IProjectionTarget) Declaration public void SetProjectionTarget(IProjectionTarget target) Parameters Type Name Description IProjectionTarget target start_edges() Declaration protected virtual int start_edges() Returns Type Description Int32 UpdateNeighbours(Int32) Declaration protected virtual void UpdateNeighbours(int vid) Parameters Type Name Description Int32 vid"
  },
  "api/g3.Reducer.ProcessResult.html": {
    "href": "api/g3.Reducer.ProcessResult.html",
    "title": "Enum Reducer.ProcessResult | ViRGIS VR GIS",
    "keywords": "Enum Reducer.ProcessResult Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected enum ProcessResult Fields Name Description Failed_NotAnEdge Failed_OpNotSuccessful Ignored_CannotCollapse Ignored_Constrained Ignored_CreatesFlip Ignored_EdgeIsFullyConstrained Ignored_EdgeTooLong Ok_Collapsed"
  },
  "api/g3.Reducer.QEdge.html": {
    "href": "api/g3.Reducer.QEdge.html",
    "title": "Struct Reducer.QEdge | ViRGIS VR GIS",
    "keywords": "Struct Reducer.QEdge Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected struct QEdge Constructors QEdge(Int32, ref QuadricError, ref Vector3d) Declaration public QEdge(int edge_id, ref QuadricError qin, ref Vector3d pt) Parameters Type Name Description Int32 edge_id QuadricError qin Vector3d pt Fields collapse_pt Declaration public Vector3d collapse_pt Field Value Type Description Vector3d eid Declaration public int eid Field Value Type Description Int32 q Declaration public QuadricError q Field Value Type Description QuadricError"
  },
  "api/g3.Reducer.TargetModes.html": {
    "href": "api/g3.Reducer.TargetModes.html",
    "title": "Enum Reducer.TargetModes | ViRGIS VR GIS",
    "keywords": "Enum Reducer.TargetModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected enum TargetModes Fields Name Description MinEdgeLength TriangleCount VertexCount"
  },
  "api/g3.Reducer.TargetProjectionMode.html": {
    "href": "api/g3.Reducer.TargetProjectionMode.html",
    "title": "Enum Reducer.TargetProjectionMode | ViRGIS VR GIS",
    "keywords": "Enum Reducer.TargetProjectionMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum TargetProjectionMode Fields Name Description AfterRefinement Inline NoProjection"
  },
  "api/g3.RefCountVector.html": {
    "href": "api/g3.RefCountVector.html",
    "title": "Class RefCountVector | ViRGIS VR GIS",
    "keywords": "Class RefCountVector RefCountedVector is used to keep track of which indices in a linear index list are in use/referenced. A free list is tracked so that unreferenced indices can be re-used. The enumerator iterates over valid indices (ie where refcount > 0) refcounts are shorts so the maximum count is 65536. No overflow checking is done in release builds. Inheritance Object RefCountVector Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RefCountVector : IEnumerable Constructors RefCountVector() Declaration public RefCountVector() RefCountVector(RefCountVector) Declaration public RefCountVector(RefCountVector copy) Parameters Type Name Description RefCountVector copy RefCountVector(Int16[], Boolean) Declaration public RefCountVector(short[] raw_ref_counts, bool build_free_list = false) Parameters Type Name Description Int16 [] raw_ref_counts Boolean build_free_list Fields invalid Declaration public static readonly short invalid Field Value Type Description Int16 Properties count Declaration public int count { get; } Property Value Type Description Int32 empty Declaration public bool empty { get; } Property Value Type Description Boolean is_dense Declaration public bool is_dense { get; } Property Value Type Description Boolean max_index Declaration public int max_index { get; } Property Value Type Description Int32 RawRefCounts Declaration public DVector<short> RawRefCounts { get; } Property Value Type Description DVector < Int16 > UsageStats Declaration public string UsageStats { get; } Property Value Type Description String Methods allocate() Declaration public int allocate() Returns Type Description Int32 allocate_at(Int32) allocate at specific index, which must either be larger than current max index, or on the free list. If larger, all elements up to this one will be pushed onto free list. otherwise we have to do a linear search through free list. If you are doing many of these, it is likely faster to use allocate_at_unsafe(), and then rebuild_free_list() after you are done. Declaration public bool allocate_at(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean allocate_at_unsafe(Int32) allocate at specific index, which must be free or larger than current max index. However, we do not update free list. So, you probably need to do rebuild_free_list() after calling this. Declaration public bool allocate_at_unsafe(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean debug_print() Declaration public string debug_print() Returns Type Description String decrement(Int32, Int16) Declaration public void decrement(int index, short decrement = 1) Parameters Type Name Description Int32 index Int16 decrement GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator increment(Int32, Int16) Declaration public int increment(int index, short increment = 1) Parameters Type Name Description Int32 index Int16 increment Returns Type Description Int32 isValid(Int32) Declaration public bool isValid(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean isValidUnsafe(Int32) Declaration public bool isValidUnsafe(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean rawRefCount(Int32) Declaration public int rawRefCount(int index) Parameters Type Name Description Int32 index Returns Type Description Int32 rebuild_free_list() Declaration public void rebuild_free_list() refCount(Int32) Declaration public int refCount(int index) Parameters Type Name Description Int32 index Returns Type Description Int32 set_Unsafe(Int32, Int16) Declaration public void set_Unsafe(int index, short count) Parameters Type Name Description Int32 index Int16 count trim(Int32) Declaration public void trim(int maxIndex) Parameters Type Name Description Int32 maxIndex Implements System.Collections.IEnumerable"
  },
  "api/g3.RegionOperator.html": {
    "href": "api/g3.RegionOperator.html",
    "title": "Class RegionOperator | ViRGIS VR GIS",
    "keywords": "Class RegionOperator This class automatically extracts a submesh from a mesh, and can re-insert it after you have edited it, as long as you have not messed up the boundary [TODO] Nearly all the code here is duplicated from RegionRemesher. Maybe this could be a base class for that? [TODO] ReinsertSubToBaseMapT is not returned by the MeshEditor.ReinsertSubmesh, instead we are trying to guess it here, by making some assumptions about what happens. It works for now, but it would better if MeshEditor returned this information. Inheritance Object RegionOperator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RegionOperator Constructors RegionOperator(DMesh3, IEnumerable<Int32>, Action<DSubmesh3>) Declaration public RegionOperator(DMesh3 mesh, IEnumerable<int> regionTris, Action<DSubmesh3> submeshConfigF = null) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > regionTris Action < DSubmesh3 > submeshConfigF RegionOperator(DMesh3, Int32[], Action<DSubmesh3>) Declaration public RegionOperator(DMesh3 mesh, int[] regionTris, Action<DSubmesh3> submeshConfigF = null) Parameters Type Name Description DMesh3 mesh Int32 [] regionTris Action < DSubmesh3 > submeshConfigF Fields BaseMesh Declaration public DMesh3 BaseMesh Field Value Type Description DMesh3 Region Declaration public DSubmesh3 Region Field Value Type Description DSubmesh3 ReinsertDuplicateTriBehavior Declaration public MeshEditor.DuplicateTriBehavior ReinsertDuplicateTriBehavior Field Value Type Description MeshEditor.DuplicateTriBehavior ReinsertSubToBaseMapT Declaration public IndexMap ReinsertSubToBaseMapT Field Value Type Description IndexMap ReinsertSubToBaseMapV Declaration public IndexMap ReinsertSubToBaseMapV Field Value Type Description IndexMap Properties CurrentBaseTriangles list of sub-region triangles. This is either the input regionTris, or the submesh triangles after they are re-inserted. Declaration public int[] CurrentBaseTriangles { get; } Property Value Type Description Int32 [] Methods BackPropropagate(Boolean) Declaration public bool BackPropropagate(bool bAllowSubmeshRepairs = true) Parameters Type Name Description Boolean bAllowSubmeshRepairs Returns Type Description Boolean BackPropropagateVertices(Boolean) Declaration public bool BackPropropagateVertices(bool bRecomputeBoundaryNormals = false) Parameters Type Name Description Boolean bRecomputeBoundaryNormals Returns Type Description Boolean CurrentBaseInteriorVertices() find base-mesh interior vertices of region (ie does not include region boundary vertices) Declaration public HashSet<int> CurrentBaseInteriorVertices() Returns Type Description HashSet < Int32 > RepairPossibleNonManifoldEdges() Declaration public void RepairPossibleNonManifoldEdges() SetSubmeshGroupID(Int32) set group ID for entire submesh Declaration public void SetSubmeshGroupID(int gid) Parameters Type Name Description Int32 gid"
  },
  "api/g3.RegionRemesher.html": {
    "href": "api/g3.RegionRemesher.html",
    "title": "Class RegionRemesher | ViRGIS VR GIS",
    "keywords": "Class RegionRemesher Inheritance Object MeshRefinerBase Remesher RegionRemesher Inherited Members Remesher.EnableFlips Remesher.EnableCollapses Remesher.EnableSplits Remesher.EnableSmoothing Remesher.PreventNormalFlips Remesher.MinEdgeLength Remesher.MaxEdgeLength Remesher.SmoothSpeedT Remesher.SmoothType Remesher.CustomSmoothF Remesher.VertexControlF Remesher.DebugEdges Remesher.ProjectionMode Remesher.EnableParallelProjection Remesher.EnableParallelSmooth Remesher.EnableSmoothInPlace Remesher.ProjectionTarget Remesher.SetProjectionTarget(IProjectionTarget) Remesher.SetTargetEdgeLength(Double) Remesher.ENABLE_PROFILING Remesher.Precompute() Remesher.ModifiedEdgesLastPass Remesher.BasicRemeshPass() Remesher.OnEdgeSplit(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Remesher.OnEdgeCollapse(Int32, Int32, Int32, DMesh3.EdgeCollapseInfo) Remesher.start_edges() Remesher.next_edge(Int32, Boolean) Remesher.smooth_vertices() Remesher.project_vertices() Remesher.ProcessEdge(Int32) Remesher.update_after_split(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Remesher.project_vertex(Int32, IProjectionTarget) Remesher.get_projected_collapse_position(Int32, Vector3d) Remesher.FullSmoothPass_InPlace(Boolean) Remesher.FullSmoothPass_Buffer(Boolean) Remesher.vBufferV Remesher.vModifiedV Remesher.InitializeVertexBufferForPass() Remesher.ApplyVertexBuffer(Boolean) Remesher.ComputeSmoothedVertexPos(Int32, Func<DMesh3, Int32, Double, Vector3d>, Boolean) Remesher.FullProjectionPass() Remesher.ENABLE_DEBUG_CHECKS Remesher.DoDebugChecks() Remesher.begin_pass() Remesher.end_pass() Remesher.begin_ops() Remesher.end_ops() Remesher.begin_smooth() Remesher.end_smooth() Remesher.begin_project() Remesher.end_project() Remesher.begin_collapse() Remesher.end_collapse() Remesher.begin_flip() Remesher.end_flip() Remesher.begin_split() Remesher.end_split() MeshRefinerBase.mesh MeshRefinerBase.constraints MeshRefinerBase.AllowCollapseFixedVertsWithSameSetID MeshRefinerBase.EdgeFlipTolerance MeshRefinerBase.edge_flip_tol MeshRefinerBase.Mesh MeshRefinerBase.Constraints MeshRefinerBase.SetExternalConstraints(MeshConstraints) MeshRefinerBase.Progress MeshRefinerBase.Cancelled() MeshRefinerBase.edge_flip_metric(Vector3d, Vector3d) MeshRefinerBase.collapse_creates_flip_or_invalid(Int32, Int32, Vector3d, Int32, Int32) MeshRefinerBase.flip_inverts_normals(Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_constraints(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_vtx(Int32, Int32, Int32, Int32) MeshRefinerBase.vertex_is_fixed(Int32) MeshRefinerBase.vertex_is_constrained(Int32) MeshRefinerBase.get_vertex_constraint(Int32) MeshRefinerBase.get_vertex_constraint(Int32, VertexConstraint) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RegionRemesher : Remesher Constructors RegionRemesher(DMesh3, IEnumerable<Int32>) Declaration public RegionRemesher(DMesh3 mesh, IEnumerable<int> regionTris) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > regionTris RegionRemesher(DMesh3, Int32[]) Declaration public RegionRemesher(DMesh3 mesh, int[] regionTris) Parameters Type Name Description DMesh3 mesh Int32 [] regionTris Fields BaseMesh Declaration public DMesh3 BaseMesh Field Value Type Description DMesh3 Region Declaration public DSubmesh3 Region Field Value Type Description DSubmesh3 ReinsertDuplicateTriBehavior Declaration public MeshEditor.DuplicateTriBehavior ReinsertDuplicateTriBehavior Field Value Type Description MeshEditor.DuplicateTriBehavior ReinsertSubToBaseMapV Declaration public IndexMap ReinsertSubToBaseMapV Field Value Type Description IndexMap Properties CurrentBaseTriangles list of sub-region triangles. This is either the input regionTris, or the submesh triangles after they are re-inserted. Declaration public int[] CurrentBaseTriangles { get; } Property Value Type Description Int32 [] Methods BackPropropagate(Boolean) Declaration public bool BackPropropagate(bool bAllowSubmeshRepairs = true) Parameters Type Name Description Boolean bAllowSubmeshRepairs Returns Type Description Boolean QuickRemesh(DMesh3, Int32[], Double, Double, Double, Int32, IProjectionTarget, RegionRemesher.QuickRemeshFlags) Declaration public static RegionRemesher QuickRemesh(DMesh3 mesh, int[] tris, double minEdgeLen, double maxEdgeLen, double smoothSpeed, int rounds, IProjectionTarget target, RegionRemesher.QuickRemeshFlags flags = RegionRemesher.QuickRemeshFlags.PreventNormalFlips) Parameters Type Name Description DMesh3 mesh Int32 [] tris Double minEdgeLen Double maxEdgeLen Double smoothSpeed Int32 rounds IProjectionTarget target RegionRemesher.QuickRemeshFlags flags Returns Type Description RegionRemesher QuickRemesh(DMesh3, Int32[], Double, Double, Int32, IProjectionTarget, RegionRemesher.QuickRemeshFlags) Declaration public static RegionRemesher QuickRemesh(DMesh3 mesh, int[] tris, double targetEdgeLen, double smoothSpeed, int rounds, IProjectionTarget target, RegionRemesher.QuickRemeshFlags flags = RegionRemesher.QuickRemeshFlags.PreventNormalFlips) Parameters Type Name Description DMesh3 mesh Int32 [] tris Double targetEdgeLen Double smoothSpeed Int32 rounds IProjectionTarget target RegionRemesher.QuickRemeshFlags flags Returns Type Description RegionRemesher RepairPossibleNonManifoldEdges() Declaration public void RepairPossibleNonManifoldEdges() SetSubmeshGroupID(Int32) set group ID for entire submesh Declaration public void SetSubmeshGroupID(int gid) Parameters Type Name Description Int32 gid"
  },
  "api/g3.RegionRemesher.QuickRemeshFlags.html": {
    "href": "api/g3.RegionRemesher.QuickRemeshFlags.html",
    "title": "Enum RegionRemesher.QuickRemeshFlags | ViRGIS VR GIS",
    "keywords": "Enum RegionRemesher.QuickRemeshFlags Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum QuickRemeshFlags Fields Name Description NoFlags PreventNormalFlips"
  },
  "api/g3.RemapItr-2.html": {
    "href": "api/g3.RemapItr-2.html",
    "title": "Class RemapItr<T, T2> | ViRGIS VR GIS",
    "keywords": "Class RemapItr<T, T2> Iterator that re-maps iterated values via a Func Inheritance Object RemapItr<T, T2> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RemapItr<T, T2> : IEnumerable<T>, IEnumerable Type Parameters Name Description T T2 Constructors RemapItr(IEnumerable<T2>, Func<T2, T>) Declaration public RemapItr(IEnumerable<T2> otherIterator, Func<T2, T> valueFunction) Parameters Type Name Description IEnumerable <T2> otherIterator Func <T2, T> valueFunction Fields OtherItr Declaration public IEnumerable<T2> OtherItr Field Value Type Description IEnumerable <T2> ValueF Declaration public Func<T2, T> ValueF Field Value Type Description Func <T2, T> Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.Remesher.html": {
    "href": "api/g3.Remesher.html",
    "title": "Class Remesher | ViRGIS VR GIS",
    "keywords": "Class Remesher Inheritance Object MeshRefinerBase Remesher EdgeLoopRemesher RegionRemesher Inherited Members MeshRefinerBase.mesh MeshRefinerBase.constraints MeshRefinerBase.AllowCollapseFixedVertsWithSameSetID MeshRefinerBase.EdgeFlipTolerance MeshRefinerBase.edge_flip_tol MeshRefinerBase.Mesh MeshRefinerBase.Constraints MeshRefinerBase.SetExternalConstraints(MeshConstraints) MeshRefinerBase.Progress MeshRefinerBase.Cancelled() MeshRefinerBase.edge_flip_metric(Vector3d, Vector3d) MeshRefinerBase.collapse_creates_flip_or_invalid(Int32, Int32, Vector3d, Int32, Int32) MeshRefinerBase.flip_inverts_normals(Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_constraints(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) MeshRefinerBase.can_collapse_vtx(Int32, Int32, Int32, Int32) MeshRefinerBase.vertex_is_fixed(Int32) MeshRefinerBase.vertex_is_constrained(Int32) MeshRefinerBase.get_vertex_constraint(Int32) MeshRefinerBase.get_vertex_constraint(Int32, VertexConstraint) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Remesher : MeshRefinerBase Constructors Remesher() Declaration protected Remesher() Remesher(DMesh3) Declaration public Remesher(DMesh3 m) Parameters Type Name Description DMesh3 m Fields CustomSmoothF Declaration public Func<DMesh3, int, double, Vector3d> CustomSmoothF Field Value Type Description Func < DMesh3 , Int32 , Double , Vector3d > DebugEdges Declaration public List<int> DebugEdges Field Value Type Description List < Int32 > ENABLE_DEBUG_CHECKS Declaration public bool ENABLE_DEBUG_CHECKS Field Value Type Description Boolean ENABLE_PROFILING Declaration public bool ENABLE_PROFILING Field Value Type Description Boolean EnableCollapses Declaration public bool EnableCollapses Field Value Type Description Boolean EnableFlips Declaration public bool EnableFlips Field Value Type Description Boolean EnableParallelProjection Declaration public bool EnableParallelProjection Field Value Type Description Boolean EnableParallelSmooth Declaration public bool EnableParallelSmooth Field Value Type Description Boolean EnableSmoothing Declaration public bool EnableSmoothing Field Value Type Description Boolean EnableSmoothInPlace Declaration public bool EnableSmoothInPlace Field Value Type Description Boolean EnableSplits Declaration public bool EnableSplits Field Value Type Description Boolean MaxEdgeLength Declaration public double MaxEdgeLength Field Value Type Description Double MinEdgeLength Declaration public double MinEdgeLength Field Value Type Description Double ModifiedEdgesLastPass Number of edges that were modified in previous Remesh pass. If this number gets small relative to edge count, you have probably converged (ish) Declaration public int ModifiedEdgesLastPass Field Value Type Description Int32 PreventNormalFlips Declaration public bool PreventNormalFlips Field Value Type Description Boolean ProjectionMode Declaration public Remesher.TargetProjectionMode ProjectionMode Field Value Type Description Remesher.TargetProjectionMode SmoothSpeedT Declaration public double SmoothSpeedT Field Value Type Description Double SmoothType Declaration public Remesher.SmoothTypes SmoothType Field Value Type Description Remesher.SmoothTypes vBufferV Declaration protected DVector<Vector3d> vBufferV Field Value Type Description DVector < Vector3d > VertexControlF Declaration public Func<int, Remesher.VertexControl> VertexControlF Field Value Type Description Func < Int32 , Remesher.VertexControl > vModifiedV Declaration protected BitArray vModifiedV Field Value Type Description BitArray Properties ProjectionTarget Declaration public IProjectionTarget ProjectionTarget { get; } Property Value Type Description IProjectionTarget Methods ApplyVertexBuffer(Boolean) Declaration protected virtual void ApplyVertexBuffer(bool bParallel) Parameters Type Name Description Boolean bParallel BasicRemeshPass() Linear edge-refinement pass, followed by smoothing and projection Edges are processed in prime-modulo-order to break symmetry smoothing is done in parallel if EnableParallelSmooth = true Projection pass if ProjectionMode == AfterRefinement number of modified edges returned in ModifiedEdgesLastPass Declaration public virtual void BasicRemeshPass() begin_collapse() Declaration protected virtual void begin_collapse() begin_flip() Declaration protected virtual void begin_flip() begin_ops() Declaration protected virtual void begin_ops() begin_pass() Declaration protected virtual void begin_pass() begin_project() Declaration protected virtual void begin_project() begin_smooth() Declaration protected virtual void begin_smooth() begin_split() Declaration protected virtual void begin_split() ComputeSmoothedVertexPos(Int32, Func<DMesh3, Int32, Double, Vector3d>, out Boolean) This computes smoothed positions w/ proper constraints/etc. Does not modify mesh. Declaration protected virtual Vector3d ComputeSmoothedVertexPos(int vID, Func<DMesh3, int, double, Vector3d> smoothFunc, out bool bModified) Parameters Type Name Description Int32 vID Func < DMesh3 , Int32 , Double , Vector3d > smoothFunc Boolean bModified Returns Type Description Vector3d DoDebugChecks() Declaration protected virtual void DoDebugChecks() end_collapse() Declaration protected virtual void end_collapse() end_flip() Declaration protected virtual void end_flip() end_ops() Declaration protected virtual void end_ops() end_pass() Declaration protected virtual void end_pass() end_project() Declaration protected virtual void end_project() end_smooth() Declaration protected virtual void end_smooth() end_split() Declaration protected virtual void end_split() FullProjectionPass() Declaration protected virtual void FullProjectionPass() FullSmoothPass_Buffer(Boolean) Declaration protected virtual void FullSmoothPass_Buffer(bool bParallel) Parameters Type Name Description Boolean bParallel FullSmoothPass_InPlace(Boolean) Declaration protected virtual void FullSmoothPass_InPlace(bool bParallel) Parameters Type Name Description Boolean bParallel get_projected_collapse_position(Int32, Vector3d) Declaration protected virtual Vector3d get_projected_collapse_position(int vid, Vector3d vNewPos) Parameters Type Name Description Int32 vid Vector3d vNewPos Returns Type Description Vector3d InitializeVertexBufferForPass() Declaration protected virtual void InitializeVertexBufferForPass() next_edge(Int32, out Boolean) Declaration protected virtual int next_edge(int cur_eid, out bool bDone) Parameters Type Name Description Int32 cur_eid Boolean bDone Returns Type Description Int32 OnEdgeCollapse(Int32, Int32, Int32, DMesh3.EdgeCollapseInfo) Declaration protected virtual void OnEdgeCollapse(int edgeID, int va, int vb, DMesh3.EdgeCollapseInfo collapseInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeCollapseInfo collapseInfo OnEdgeSplit(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Declaration protected virtual void OnEdgeSplit(int edgeID, int va, int vb, DMesh3.EdgeSplitInfo splitInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeSplitInfo splitInfo Precompute() we can vastly speed things up if we precompute some invariants. You need to re-run this if you are changing the mesh externally between remesh passes, otherwise you will get weird results. But you will probably still come out ahead, computation-time-wise Declaration public virtual void Precompute() ProcessEdge(Int32) Declaration protected virtual Remesher.ProcessResult ProcessEdge(int edgeID) Parameters Type Name Description Int32 edgeID Returns Type Description Remesher.ProcessResult project_vertex(Int32, IProjectionTarget) Declaration protected virtual void project_vertex(int vID, IProjectionTarget targetIn) Parameters Type Name Description Int32 vID IProjectionTarget targetIn project_vertices() Declaration protected virtual IEnumerable<int> project_vertices() Returns Type Description IEnumerable < Int32 > SetProjectionTarget(IProjectionTarget) Declaration public void SetProjectionTarget(IProjectionTarget target) Parameters Type Name Description IProjectionTarget target SetTargetEdgeLength(Double) Set min/max edge-lengths to sane values for given target edge length Declaration public void SetTargetEdgeLength(double fLength) Parameters Type Name Description Double fLength smooth_vertices() Declaration protected virtual IEnumerable<int> smooth_vertices() Returns Type Description IEnumerable < Int32 > start_edges() Declaration protected virtual int start_edges() Returns Type Description Int32 update_after_split(Int32, Int32, Int32, ref DMesh3.EdgeSplitInfo) Declaration protected virtual void update_after_split(int edgeID, int va, int vb, ref DMesh3.EdgeSplitInfo splitInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeSplitInfo splitInfo"
  },
  "api/g3.Remesher.ProcessResult.html": {
    "href": "api/g3.Remesher.ProcessResult.html",
    "title": "Enum Remesher.ProcessResult | ViRGIS VR GIS",
    "keywords": "Enum Remesher.ProcessResult Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected enum ProcessResult Fields Name Description Failed_NotAnEdge Failed_OpNotSuccessful Ignored_EdgeIsFine Ignored_EdgeIsFullyConstrained Ok_Collapsed Ok_Flipped Ok_Split"
  },
  "api/g3.Remesher.SmoothTypes.html": {
    "href": "api/g3.Remesher.SmoothTypes.html",
    "title": "Enum Remesher.SmoothTypes | ViRGIS VR GIS",
    "keywords": "Enum Remesher.SmoothTypes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum SmoothTypes Fields Name Description Cotan MeanValue Uniform"
  },
  "api/g3.Remesher.TargetProjectionMode.html": {
    "href": "api/g3.Remesher.TargetProjectionMode.html",
    "title": "Enum Remesher.TargetProjectionMode | ViRGIS VR GIS",
    "keywords": "Enum Remesher.TargetProjectionMode Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum TargetProjectionMode Fields Name Description AfterRefinement Inline NoProjection"
  },
  "api/g3.Remesher.VertexControl.html": {
    "href": "api/g3.Remesher.VertexControl.html",
    "title": "Enum Remesher.VertexControl | ViRGIS VR GIS",
    "keywords": "Enum Remesher.VertexControl Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum VertexControl Fields Name Description AllowAll NoMovement NoProject NoSmooth"
  },
  "api/g3.RemoveTrianglesMeshChange.html": {
    "href": "api/g3.RemoveTrianglesMeshChange.html",
    "title": "Class RemoveTrianglesMeshChange | ViRGIS VR GIS",
    "keywords": "Class RemoveTrianglesMeshChange Remove triangles from mesh and store necessary data to be able to reverse the change. Vertex and Triangle IDs will be restored on Revert() Currently does not restore the same EdgeIDs Inheritance Object RemoveTrianglesMeshChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RemoveTrianglesMeshChange Constructors RemoveTrianglesMeshChange() Declaration public RemoveTrianglesMeshChange() Fields Colors Declaration protected DVector<Vector3f> Colors Field Value Type Description DVector < Vector3f > Normals Declaration protected DVector<Vector3f> Normals Field Value Type Description DVector < Vector3f > OnApplyF Declaration public Action<IEnumerable<int>, IEnumerable<int>> OnApplyF Field Value Type Description Action < IEnumerable < Int32 >, IEnumerable < Int32 >> OnRevertF Declaration public Action<IEnumerable<int>, IEnumerable<int>> OnRevertF Field Value Type Description Action < IEnumerable < Int32 >, IEnumerable < Int32 >> Positions Declaration protected DVector<Vector3d> Positions Field Value Type Description DVector < Vector3d > RemovedT Declaration protected DVector<int> RemovedT Field Value Type Description DVector < Int32 > RemovedV Declaration protected DVector<int> RemovedV Field Value Type Description DVector < Int32 > Triangles Declaration protected DVector<Index4i> Triangles Field Value Type Description DVector < Index4i > UVs Declaration protected DVector<Vector2f> UVs Field Value Type Description DVector < Vector2f > Methods Apply(DMesh3) Declaration public void Apply(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh InitializeFromApply(DMesh3, IEnumerable<Int32>) Declaration public void InitializeFromApply(DMesh3 mesh, IEnumerable<int> triangles) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > triangles InitializeFromExisting(DMesh3, IEnumerable<Int32>) Declaration public void InitializeFromExisting(DMesh3 mesh, IEnumerable<int> remove_t) Parameters Type Name Description DMesh3 mesh IEnumerable < Int32 > remove_t Revert(DMesh3) Declaration public void Revert(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh"
  },
  "api/g3.RoundRectGenerator.Corner.html": {
    "href": "api/g3.RoundRectGenerator.Corner.html",
    "title": "Enum RoundRectGenerator.Corner | ViRGIS VR GIS",
    "keywords": "Enum RoundRectGenerator.Corner Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Flags] public enum Corner Fields Name Description BottomLeft BottomRight TopLeft TopRight"
  },
  "api/g3.RoundRectGenerator.html": {
    "href": "api/g3.RoundRectGenerator.html",
    "title": "Class RoundRectGenerator | ViRGIS VR GIS",
    "keywords": "Class RoundRectGenerator Inheritance Object MeshGenerator RoundRectGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class RoundRectGenerator : MeshGenerator Fields CornerSteps Declaration public int CornerSteps Field Value Type Description Int32 Height Declaration public float Height Field Value Type Description Single Radius Declaration public float Radius Field Value Type Description Single SharpCorners Declaration public RoundRectGenerator.Corner SharpCorners Field Value Type Description RoundRectGenerator.Corner UVMode Declaration public RoundRectGenerator.UVModes UVMode Field Value Type Description RoundRectGenerator.UVModes Width Declaration public float Width Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate() GetBorderLoop() This is a utility function that returns the set of border points, which is useful when we use a roundrect as a UI element and want the border Declaration public Vector3d[] GetBorderLoop() Returns Type Description Vector3d []"
  },
  "api/g3.RoundRectGenerator.UVModes.html": {
    "href": "api/g3.RoundRectGenerator.UVModes.html",
    "title": "Enum RoundRectGenerator.UVModes | ViRGIS VR GIS",
    "keywords": "Enum RoundRectGenerator.UVModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum UVModes Fields Name Description BottomCornerUVRectangle CenteredUVRectangle FullUVSquare"
  },
  "api/g3.SafeListBuilder-1.html": {
    "href": "api/g3.SafeListBuilder-1.html",
    "title": "Class SafeListBuilder<T> | ViRGIS VR GIS",
    "keywords": "Class SafeListBuilder<T> Inheritance Object SafeListBuilder<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SafeListBuilder<T> Type Parameters Name Description T Constructors SafeListBuilder() Declaration public SafeListBuilder() Fields List Declaration public List<T> List Field Value Type Description List <T> spinlock Declaration public SpinLock spinlock Field Value Type Description SpinLock Properties Result Declaration public List<T> Result { get; } Property Value Type Description List <T> Methods SafeAdd(T) Declaration public void SafeAdd(T value) Parameters Type Name Description T value SafeOperation(Action<List<T>>) Declaration public void SafeOperation(Action<List<T>> opF) Parameters Type Name Description Action < List <T>> opF"
  },
  "api/g3.SampledArcLengthParam.html": {
    "href": "api/g3.SampledArcLengthParam.html",
    "title": "Class SampledArcLengthParam | ViRGIS VR GIS",
    "keywords": "Class SampledArcLengthParam Inheritance Object SampledArcLengthParam Implements IArcLengthParam Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SampledArcLengthParam : IArcLengthParam Constructors SampledArcLengthParam(IEnumerable<Vector3d>, Int32) Declaration public SampledArcLengthParam(IEnumerable<Vector3d> samples, int nCountHint = -1) Parameters Type Name Description IEnumerable < Vector3d > samples Int32 nCountHint Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Methods Sample(Double) Declaration public CurveSample Sample(double f) Parameters Type Name Description Double f Returns Type Description CurveSample tangent(Int32) Declaration protected Vector3d tangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d Implements IArcLengthParam"
  },
  "api/g3.SampledArcLengthParam2d.html": {
    "href": "api/g3.SampledArcLengthParam2d.html",
    "title": "Class SampledArcLengthParam2d | ViRGIS VR GIS",
    "keywords": "Class SampledArcLengthParam2d Inheritance Object SampledArcLengthParam2d Implements IArcLengthParam2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SampledArcLengthParam2d : IArcLengthParam2d Constructors SampledArcLengthParam2d(IEnumerable<Vector2d>, Int32) Declaration public SampledArcLengthParam2d(IEnumerable<Vector2d> samples, int nCountHint = -1) Parameters Type Name Description IEnumerable < Vector2d > samples Int32 nCountHint Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double Methods Sample(Double) Declaration public CurveSample2d Sample(double f) Parameters Type Name Description Double f Returns Type Description CurveSample2d tangent(Int32) Declaration protected Vector2d tangent(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d Implements IArcLengthParam2d"
  },
  "api/g3.ScalarMap.html": {
    "href": "api/g3.ScalarMap.html",
    "title": "Class ScalarMap | ViRGIS VR GIS",
    "keywords": "Class ScalarMap Scalar version of a ColorMap (ie interpolate between sample points) [TODO] could we make this a template? Inheritance Object ScalarMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ScalarMap Constructors ScalarMap() Declaration public ScalarMap() Methods AddPoint(Double, Double) Declaration public void AddPoint(double t, double value) Parameters Type Name Description Double t Double value Linear(Double) Declaration public double Linear(double t) Parameters Type Name Description Double t Returns Type Description Double"
  },
  "api/g3.ScaleGridIndexer2.html": {
    "href": "api/g3.ScaleGridIndexer2.html",
    "title": "Struct ScaleGridIndexer2 | ViRGIS VR GIS",
    "keywords": "Struct ScaleGridIndexer2 Map to/from grid coords Implements IGridWorldIndexer2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ScaleGridIndexer2 : IGridWorldIndexer2 Constructors ScaleGridIndexer2(Double) Declaration public ScaleGridIndexer2(double cellSize) Parameters Type Name Description Double cellSize Fields CellSize Declaration public double CellSize Field Value Type Description Double Methods FromGrid(Vector2d) Declaration public Vector2d FromGrid(Vector2d gridpointf) Parameters Type Name Description Vector2d gridpointf Returns Type Description Vector2d FromGrid(Vector2i) Declaration public Vector2d FromGrid(Vector2i gridpoint) Parameters Type Name Description Vector2i gridpoint Returns Type Description Vector2d ToGrid(Vector2d) Declaration public Vector2i ToGrid(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Vector2i Implements IGridWorldIndexer2"
  },
  "api/g3.ScaleGridIndexer3.html": {
    "href": "api/g3.ScaleGridIndexer3.html",
    "title": "Struct ScaleGridIndexer3 | ViRGIS VR GIS",
    "keywords": "Struct ScaleGridIndexer3 Map to/from grid coords Implements IGridWorldIndexer3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ScaleGridIndexer3 : IGridWorldIndexer3 Constructors ScaleGridIndexer3(Double) Declaration public ScaleGridIndexer3(double cellSize) Parameters Type Name Description Double cellSize Fields CellSize Declaration public double CellSize Field Value Type Description Double Methods FromGrid(Vector3d) Declaration public Vector3d FromGrid(Vector3d gridpointf) Parameters Type Name Description Vector3d gridpointf Returns Type Description Vector3d FromGrid(Vector3i) Declaration public Vector3d FromGrid(Vector3i gridpoint) Parameters Type Name Description Vector3i gridpoint Returns Type Description Vector3d ToGrid(Vector3d) Declaration public Vector3i ToGrid(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3i ToGridf(Vector3d) Declaration public Vector3d ToGridf(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3d Implements IGridWorldIndexer3"
  },
  "api/g3.SculptCurveDeformation.DeformInfo.html": {
    "href": "api/g3.SculptCurveDeformation.DeformInfo.html",
    "title": "Struct SculptCurveDeformation.DeformInfo | ViRGIS VR GIS",
    "keywords": "Struct SculptCurveDeformation.DeformInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct DeformInfo Fields bNoChange Declaration public bool bNoChange Field Value Type Description Boolean maxEdgeLenSqr Declaration public double maxEdgeLenSqr Field Value Type Description Double minEdgeLenSqr Declaration public double minEdgeLenSqr Field Value Type Description Double"
  },
  "api/g3.SculptCurveDeformation.html": {
    "href": "api/g3.SculptCurveDeformation.html",
    "title": "Class SculptCurveDeformation | ViRGIS VR GIS",
    "keywords": "Class SculptCurveDeformation Base-class for DCurve3 spatial deformations. Subclasses must implement abstract Apply() method. Inheritance Object SculptCurveDeformation StandardSculptCurveDeformation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public abstract class SculptCurveDeformation Constructors SculptCurveDeformation() Declaration public SculptCurveDeformation() Fields _curve Declaration protected DCurve3 _curve Field Value Type Description DCurve3 _weightfunc Declaration protected Func<double, double, double> _weightfunc Field Value Type Description Func < Double , Double , Double > radius Declaration protected double radius Field Value Type Description Double vPreviousPos Declaration protected Frame3f vPreviousPos Field Value Type Description Frame3f Properties Curve Declaration public DCurve3 Curve { get; set; } Property Value Type Description DCurve3 Radius Declaration public double Radius { get; set; } Property Value Type Description Double WeightFunc Declaration public Func<double, double, double> WeightFunc { get; set; } Property Value Type Description Func < Double , Double , Double > Methods Apply(Frame3f) Declaration public abstract SculptCurveDeformation.DeformInfo Apply(Frame3f vNextPos) Parameters Type Name Description Frame3f vNextPos Returns Type Description SculptCurveDeformation.DeformInfo BeginDeformation(Frame3f) Declaration public virtual void BeginDeformation(Frame3f vStartPos) Parameters Type Name Description Frame3f vStartPos UpdateDeformation(Frame3f) Declaration public virtual SculptCurveDeformation.DeformInfo UpdateDeformation(Frame3f vNextPos) Parameters Type Name Description Frame3f vNextPos Returns Type Description SculptCurveDeformation.DeformInfo"
  },
  "api/g3.SculptCurveMove.html": {
    "href": "api/g3.SculptCurveMove.html",
    "title": "Class SculptCurveMove | ViRGIS VR GIS",
    "keywords": "Class SculptCurveMove Inheritance Object SculptCurveDeformation StandardSculptCurveDeformation SculptCurveMove Inherited Members StandardSculptCurveDeformation.DeformF StandardSculptCurveDeformation.SmoothAlpha StandardSculptCurveDeformation.SmoothIterations StandardSculptCurveDeformation.NewV StandardSculptCurveDeformation.ModifiedV SculptCurveDeformation._curve SculptCurveDeformation.Curve SculptCurveDeformation._weightfunc SculptCurveDeformation.WeightFunc SculptCurveDeformation.radius SculptCurveDeformation.Radius SculptCurveDeformation.vPreviousPos SculptCurveDeformation.BeginDeformation(Frame3f) SculptCurveDeformation.UpdateDeformation(Frame3f) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SculptCurveMove : StandardSculptCurveDeformation Constructors SculptCurveMove() Declaration public SculptCurveMove() Methods Apply(Frame3f) Declaration public override SculptCurveDeformation.DeformInfo Apply(Frame3f vNextPos) Parameters Type Name Description Frame3f vNextPos Returns Type Description SculptCurveDeformation.DeformInfo Overrides StandardSculptCurveDeformation.Apply(Frame3f)"
  },
  "api/g3.SculptCurveSmooth.html": {
    "href": "api/g3.SculptCurveSmooth.html",
    "title": "Class SculptCurveSmooth | ViRGIS VR GIS",
    "keywords": "Class SculptCurveSmooth Inheritance Object SculptCurveDeformation StandardSculptCurveDeformation SculptCurveSmooth Inherited Members StandardSculptCurveDeformation.DeformF StandardSculptCurveDeformation.SmoothAlpha StandardSculptCurveDeformation.SmoothIterations StandardSculptCurveDeformation.NewV StandardSculptCurveDeformation.ModifiedV StandardSculptCurveDeformation.Apply(Frame3f) SculptCurveDeformation._curve SculptCurveDeformation.Curve SculptCurveDeformation._weightfunc SculptCurveDeformation.WeightFunc SculptCurveDeformation.radius SculptCurveDeformation.Radius SculptCurveDeformation.vPreviousPos SculptCurveDeformation.BeginDeformation(Frame3f) SculptCurveDeformation.UpdateDeformation(Frame3f) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SculptCurveSmooth : StandardSculptCurveDeformation Constructors SculptCurveSmooth() Declaration public SculptCurveSmooth()"
  },
  "api/g3.Segment2d.html": {
    "href": "api/g3.Segment2d.html",
    "title": "Struct Segment2d | ViRGIS VR GIS",
    "keywords": "Struct Segment2d Implements IParametricCurve2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Segment2d : IParametricCurve2d Constructors Segment2d(Vector2d, Vector2d) Declaration public Segment2d(Vector2d p0, Vector2d p1) Parameters Type Name Description Vector2d p0 Vector2d p1 Segment2d(Vector2d, Vector2d, Double) Declaration public Segment2d(Vector2d center, Vector2d direction, double extent) Parameters Type Name Description Vector2d center Vector2d direction Double extent Fields Center Declaration public Vector2d Center Field Value Type Description Vector2d Direction Declaration public Vector2d Direction Field Value Type Description Vector2d Extent Declaration public double Extent Field Value Type Description Double Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean IsTransformable Declaration public bool IsTransformable { get; } Property Value Type Description Boolean Length Declaration public double Length { get; } Property Value Type Description Double P0 Declaration public Vector2d P0 { get; set; } Property Value Type Description Vector2d P1 Declaration public Vector2d P1 { get; set; } Property Value Type Description Vector2d ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve2d Clone() Returns Type Description IParametricCurve2d DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Double DistanceSquared(Vector2d, out Double) Declaration public double DistanceSquared(Vector2d p, out double t) Parameters Type Name Description Vector2d p Double t Returns Type Description Double Endpoint(Int32) Declaration public Vector2d Endpoint(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2d FastDistanceSquared(ref Vector2d, ref Vector2d, ref Vector2d) distance from pt to segment (a,b), with no square roots Declaration public static double FastDistanceSquared(ref Vector2d a, ref Vector2d b, ref Vector2d pt) Parameters Type Name Description Vector2d a Vector2d b Vector2d pt Returns Type Description Double Intersects(Segment2d, Double, Double) Declaration public bool Intersects(Segment2d seg2, double dotThresh = 4.94065645841247E-324, double intervalThresh = 0) Parameters Type Name Description Segment2d seg2 Double dotThresh Double intervalThresh Returns Type Description Boolean Intersects(ref Segment2d, Double, Double) Test if segments intersect. Returns true for parallel-line overlaps. Returns same result as IntrSegment2Segment2. Declaration public bool Intersects(ref Segment2d seg2, double dotThresh = 4.94065645841247E-324, double intervalThresh = 0) Parameters Type Name Description Segment2d seg2 Double dotThresh Double intervalThresh Returns Type Description Boolean NearestPoint(Vector2d) Declaration public Vector2d NearestPoint(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Vector2d PointAt(Double) Declaration public Vector2d PointAt(double d) Parameters Type Name Description Double d Returns Type Description Vector2d PointBetween(Double) Declaration public Vector2d PointBetween(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Project(Vector2d) Declaration public double Project(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Double Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector2d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector2d SampleT(Double) Declaration public Vector2d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d TangentT(Double) Declaration public Vector2d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector2d Transform(ITransform2) Declaration public void Transform(ITransform2 xform) Parameters Type Name Description ITransform2 xform WhichSide(Vector2d, Double) Returns: +1, on right of line -1, on left of line 0, on the line Declaration public int WhichSide(Vector2d test, double tol = 0) Parameters Type Name Description Vector2d test Double tol Returns Type Description Int32 WhichSide(ref Vector2d, ref Vector2d, ref Vector2d, Double) Returns: +1, on right of line -1, on left of line 0, on the line Declaration public static int WhichSide(ref Vector2d a, ref Vector2d b, ref Vector2d test, double tol = 0) Parameters Type Name Description Vector2d a Vector2d b Vector2d test Double tol Returns Type Description Int32 Implements IParametricCurve2d"
  },
  "api/g3.Segment2dBox.html": {
    "href": "api/g3.Segment2dBox.html",
    "title": "Class Segment2dBox | ViRGIS VR GIS",
    "keywords": "Class Segment2dBox Inheritance Object Segment2dBox Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Segment2dBox Constructors Segment2dBox() Declaration public Segment2dBox() Segment2dBox(Segment2d) Declaration public Segment2dBox(Segment2d seg) Parameters Type Name Description Segment2d seg Fields Segment Declaration public Segment2d Segment Field Value Type Description Segment2d Operators Implicit(Segment2dBox to Segment2d) Declaration public static implicit operator Segment2d(Segment2dBox box) Parameters Type Name Description Segment2dBox box Returns Type Description Segment2d"
  },
  "api/g3.Segment2f.html": {
    "href": "api/g3.Segment2f.html",
    "title": "Struct Segment2f | ViRGIS VR GIS",
    "keywords": "Struct Segment2f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Segment2f Constructors Segment2f(Vector2f, Vector2f) Declaration public Segment2f(Vector2f p0, Vector2f p1) Parameters Type Name Description Vector2f p0 Vector2f p1 Segment2f(Vector2f, Vector2f, Single) Declaration public Segment2f(Vector2f center, Vector2f direction, float extent) Parameters Type Name Description Vector2f center Vector2f direction Single extent Fields Center Declaration public Vector2f Center Field Value Type Description Vector2f Direction Declaration public Vector2f Direction Field Value Type Description Vector2f Extent Declaration public float Extent Field Value Type Description Single Properties Length Declaration public float Length { get; } Property Value Type Description Single P0 Declaration public Vector2f P0 { get; set; } Property Value Type Description Vector2f P1 Declaration public Vector2f P1 { get; set; } Property Value Type Description Vector2f Methods DistanceSquared(Vector2f) Declaration public float DistanceSquared(Vector2f p) Parameters Type Name Description Vector2f p Returns Type Description Single FastDistanceSquared(ref Vector2f, ref Vector2f, ref Vector2f) distance from pt to segment (a,b), with no square roots Declaration public static float FastDistanceSquared(ref Vector2f a, ref Vector2f b, ref Vector2f pt) Parameters Type Name Description Vector2f a Vector2f b Vector2f pt Returns Type Description Single NearestPoint(Vector2f) Declaration public Vector2f NearestPoint(Vector2f p) Parameters Type Name Description Vector2f p Returns Type Description Vector2f PointAt(Single) Declaration public Vector2f PointAt(float d) Parameters Type Name Description Single d Returns Type Description Vector2f PointBetween(Single) Declaration public Vector2f PointBetween(float t) Parameters Type Name Description Single t Returns Type Description Vector2f Project(Vector2f) Declaration public float Project(Vector2f p) Parameters Type Name Description Vector2f p Returns Type Description Single"
  },
  "api/g3.Segment3d.html": {
    "href": "api/g3.Segment3d.html",
    "title": "Struct Segment3d | ViRGIS VR GIS",
    "keywords": "Struct Segment3d Implements IParametricCurve3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Segment3d : IParametricCurve3d Constructors Segment3d(Vector3d, Vector3d) Declaration public Segment3d(Vector3d p0, Vector3d p1) Parameters Type Name Description Vector3d p0 Vector3d p1 Segment3d(Vector3d, Vector3d, Double) Declaration public Segment3d(Vector3d center, Vector3d direction, double extent) Parameters Type Name Description Vector3d center Vector3d direction Double extent Fields Center Declaration public Vector3d Center Field Value Type Description Vector3d Direction Declaration public Vector3d Direction Field Value Type Description Vector3d Extent Declaration public double Extent Field Value Type Description Double Properties ArcLength Declaration public double ArcLength { get; } Property Value Type Description Double HasArcLength Declaration public bool HasArcLength { get; } Property Value Type Description Boolean IsClosed Declaration public bool IsClosed { get; } Property Value Type Description Boolean Length Declaration public double Length { get; } Property Value Type Description Double P0 Declaration public Vector3d P0 { get; set; } Property Value Type Description Vector3d P1 Declaration public Vector3d P1 { get; set; } Property Value Type Description Vector3d ParamLength Declaration public double ParamLength { get; } Property Value Type Description Double Methods Clone() Declaration public IParametricCurve3d Clone() Returns Type Description IParametricCurve3d DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double DistanceSquared(Vector3d, out Double) Declaration public double DistanceSquared(Vector3d p, out double t) Parameters Type Name Description Vector3d p Double t Returns Type Description Double NearestPoint(Vector3d) Declaration public Vector3d NearestPoint(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Vector3d PointAt(Double) Declaration public Vector3d PointAt(double d) Parameters Type Name Description Double d Returns Type Description Vector3d PointBetween(Double) Declaration public Vector3d PointBetween(double t) Parameters Type Name Description Double t Returns Type Description Vector3d Project(Vector3d) Declaration public double Project(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Double Reverse() Declaration public void Reverse() SampleArcLength(Double) Declaration public Vector3d SampleArcLength(double a) Parameters Type Name Description Double a Returns Type Description Vector3d SampleT(Double) Declaration public Vector3d SampleT(double t) Parameters Type Name Description Double t Returns Type Description Vector3d SetEndpoints(Vector3d, Vector3d) Declaration public void SetEndpoints(Vector3d p0, Vector3d p1) Parameters Type Name Description Vector3d p0 Vector3d p1 TangentT(Double) Declaration public Vector3d TangentT(double t) Parameters Type Name Description Double t Returns Type Description Vector3d Operators Explicit(Segment3d to Segment3f) Declaration public static explicit operator Segment3f(Segment3d v) Parameters Type Name Description Segment3d v Returns Type Description Segment3f Implicit(Segment3f to Segment3d) Declaration public static implicit operator Segment3d(Segment3f v) Parameters Type Name Description Segment3f v Returns Type Description Segment3d Implements IParametricCurve3d"
  },
  "api/g3.Segment3f.html": {
    "href": "api/g3.Segment3f.html",
    "title": "Struct Segment3f | ViRGIS VR GIS",
    "keywords": "Struct Segment3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Segment3f Constructors Segment3f(Vector3f, Vector3f) Declaration public Segment3f(Vector3f p0, Vector3f p1) Parameters Type Name Description Vector3f p0 Vector3f p1 Segment3f(Vector3f, Vector3f, Single) Declaration public Segment3f(Vector3f center, Vector3f direction, float extent) Parameters Type Name Description Vector3f center Vector3f direction Single extent Fields Center Declaration public Vector3f Center Field Value Type Description Vector3f Direction Declaration public Vector3f Direction Field Value Type Description Vector3f Extent Declaration public float Extent Field Value Type Description Single Properties Length Declaration public float Length { get; } Property Value Type Description Single P0 Declaration public Vector3f P0 { get; set; } Property Value Type Description Vector3f P1 Declaration public Vector3f P1 { get; set; } Property Value Type Description Vector3f Methods DistanceSquared(Vector3f) Declaration public float DistanceSquared(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single NearestPoint(Vector3f) Declaration public Vector3f NearestPoint(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Vector3f PointAt(Single) Declaration public Vector3f PointAt(float d) Parameters Type Name Description Single d Returns Type Description Vector3f PointBetween(Single) Declaration public Vector3f PointBetween(float t) Parameters Type Name Description Single t Returns Type Description Vector3f Project(Vector3f) Declaration public float Project(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Single SetEndpoints(Vector3f, Vector3f) Declaration public void SetEndpoints(Vector3f p0, Vector3f p1) Parameters Type Name Description Vector3f p0 Vector3f p1"
  },
  "api/g3.SegmentHashGrid2d-1.html": {
    "href": "api/g3.SegmentHashGrid2d-1.html",
    "title": "Class SegmentHashGrid2d<T> | ViRGIS VR GIS",
    "keywords": "Class SegmentHashGrid2d<T> Hash Grid for 2D segments. You provide the 'segment' type. If you have an indexable set of segments this can just be int, or can be more complex segment data structure (but be careful w/ structs...) Segments are stored in the grid cell that contains the segment center. We keep track of the extent of the longest segment that has been added. The search radius for distance queries is expanded by this extent. So, distance queries ARE NOT EFFICIENT if you even one very long segment. [TODO] make a multi-level hash Does not actually store 2D segments. So, to remove a segment you must also know it's 2D center, so we can look up the cell coordinates. Hence, to 'update' a segment, you need to know both it's old and new 2D centers. Inheritance Object SegmentHashGrid2d<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SegmentHashGrid2d<T> Type Parameters Name Description T Constructors SegmentHashGrid2d(Double, T) \"invalid\" value will be returned by queries if no valid result is found (eg bounded-distance query) Declaration public SegmentHashGrid2d(double cellSize, T invalidValue) Parameters Type Name Description Double cellSize T invalidValue Methods FindNearestInRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>) Find nearest segment in grid, within radius, without locking / thread-safety You must provided distF which returns distance between query_pt and the segment argument You can ignore specific segments via ignoreF lambda - return true to ignore Return value is pair (nearest_index,min_dist) or (invalidValue,double.MaxValue) Declaration public KeyValuePair<T, double> FindNearestInRadius(Vector2d query_pt, double radius, Func<T, double> distF, Func<T, bool> ignoreF = null) Parameters Type Name Description Vector2d query_pt Double radius Func <T, Double > distF Func <T, Boolean > ignoreF Returns Type Description KeyValuePair <T, Double > FindNearestInSquaredRadius(Vector2d, Double, Func<T, Double>, Func<T, Boolean>) Variant of FindNearestInRadius that works with squared-distances. Return value is pair (nearest_index,min_dist) or (invalidValue,double.MaxValue) Declaration public KeyValuePair<T, double> FindNearestInSquaredRadius(Vector2d query_pt, double radiusSqr, Func<T, double> distSqrF, Func<T, bool> ignoreF = null) Parameters Type Name Description Vector2d query_pt Double radiusSqr Func <T, Double > distSqrF Func <T, Boolean > ignoreF Returns Type Description KeyValuePair <T, Double > InsertSegment(T, Vector2d, Double) Insert segment at position. This function is thread-safe, uses a SpinLock internally Declaration public void InsertSegment(T value, Vector2d center, double extent) Parameters Type Name Description T value Vector2d center Double extent InsertSegmentUnsafe(T, Vector2d, Double) Insert segment without locking / thread-safety Declaration public void InsertSegmentUnsafe(T value, Vector2d center, double extent) Parameters Type Name Description T value Vector2d center Double extent RemoveSegment(T, Vector2d) Remove segment. This function is thread-safe, uses a SpinLock internally Declaration public bool RemoveSegment(T value, Vector2d center) Parameters Type Name Description T value Vector2d center Returns Type Description Boolean RemoveSegmentUnsafe(T, Vector2d) Remove segment without locking / thread-safety Declaration public bool RemoveSegmentUnsafe(T value, Vector2d center) Parameters Type Name Description T value Vector2d center Returns Type Description Boolean UpdateSegment(T, Vector2d, Vector2d, Double) Move segment from old to new position. This function is thread-safe, uses a SpinLock internally Declaration public void UpdateSegment(T value, Vector2d old_center, Vector2d new_center, double new_extent) Parameters Type Name Description T value Vector2d old_center Vector2d new_center Double new_extent UpdateSegmentUnsafe(T, Vector2d, Vector2d, Double) Move segment from old to new position without locking / thread-safety Declaration public void UpdateSegmentUnsafe(T value, Vector2d old_center, Vector2d new_center, double new_extent) Parameters Type Name Description T value Vector2d old_center Vector2d new_center Double new_extent"
  },
  "api/g3.SegmentSet2d.html": {
    "href": "api/g3.SegmentSet2d.html",
    "title": "Class SegmentSet2d | ViRGIS VR GIS",
    "keywords": "Class SegmentSet2d Inheritance Object SegmentSet2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SegmentSet2d Constructors SegmentSet2d() Declaration public SegmentSet2d() SegmentSet2d(GeneralPolygon2d) Declaration public SegmentSet2d(GeneralPolygon2d poly) Parameters Type Name Description GeneralPolygon2d poly SegmentSet2d(List<GeneralPolygon2d>) Declaration public SegmentSet2d(List<GeneralPolygon2d> polys) Parameters Type Name Description List < GeneralPolygon2d > polys Methods FindAllIntersections(Segment2d, List<Double>, List<Int32>, List<IntrSegment2Segment2>, Boolean) Declaration public void FindAllIntersections(Segment2d seg, List<double> segmentTs, List<int> indices = null, List<IntrSegment2Segment2> tests = null, bool bOnlySimple = true) Parameters Type Name Description Segment2d seg List < Double > segmentTs List < Int32 > indices List < IntrSegment2Segment2 > tests Boolean bOnlySimple FindAnyIntersection(Segment2d, out Int32) Find any segment in set that intersects input segment. Returns intersection test, and index of segment Declaration public IntrSegment2Segment2 FindAnyIntersection(Segment2d seg, out int iSegment) Parameters Type Name Description Segment2d seg Int32 iSegment Returns Type Description IntrSegment2Segment2"
  },
  "api/g3.SequentialProjectionTarget.html": {
    "href": "api/g3.SequentialProjectionTarget.html",
    "title": "Class SequentialProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class SequentialProjectionTarget Inheritance Object SequentialProjectionTarget Implements IProjectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SequentialProjectionTarget : IProjectionTarget Constructors SequentialProjectionTarget() Declaration public SequentialProjectionTarget() SequentialProjectionTarget(IProjectionTarget[]) Declaration public SequentialProjectionTarget(params IProjectionTarget[] targets) Parameters Type Name Description IProjectionTarget [] targets Properties Targets Declaration public IProjectionTarget[] Targets { get; set; } Property Value Type Description IProjectionTarget [] Methods Project(Vector3d, Int32) Declaration public Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Implements IProjectionTarget"
  },
  "api/g3.SetGroupBehavior.html": {
    "href": "api/g3.SetGroupBehavior.html",
    "title": "Struct SetGroupBehavior | ViRGIS VR GIS",
    "keywords": "Struct SetGroupBehavior Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct SetGroupBehavior Constructors SetGroupBehavior(SetGroupBehavior.Modes, Int32) Declaration public SetGroupBehavior(SetGroupBehavior.Modes mode, int id = 0) Parameters Type Name Description SetGroupBehavior.Modes mode Int32 id Properties AutoGenerate Declaration public static SetGroupBehavior AutoGenerate { get; } Property Value Type Description SetGroupBehavior Ignore Declaration public static SetGroupBehavior Ignore { get; } Property Value Type Description SetGroupBehavior Methods GetGroupID(DMesh3) Declaration public int GetGroupID(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description Int32 SetTo(Int32) Declaration public static SetGroupBehavior SetTo(int groupID) Parameters Type Name Description Int32 groupID Returns Type Description SetGroupBehavior"
  },
  "api/g3.SetGroupBehavior.Modes.html": {
    "href": "api/g3.SetGroupBehavior.Modes.html",
    "title": "Enum SetGroupBehavior.Modes | ViRGIS VR GIS",
    "keywords": "Enum SetGroupBehavior.Modes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum Modes Fields Name Description AutoGenerate Ignore UseConstant"
  },
  "api/g3.SetVerticesMeshChange.html": {
    "href": "api/g3.SetVerticesMeshChange.html",
    "title": "Class SetVerticesMeshChange | ViRGIS VR GIS",
    "keywords": "Class SetVerticesMeshChange Mesh change for full-mesh vertex deformations - more efficient than ModifyVerticesMeshChange. Note that this does not enforce that vertex count does not change! Inheritance Object SetVerticesMeshChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SetVerticesMeshChange Constructors SetVerticesMeshChange() Declaration public SetVerticesMeshChange() Fields NewColors Declaration public DVector<float> NewColors Field Value Type Description DVector < Single > NewNormals Declaration public DVector<float> NewNormals Field Value Type Description DVector < Single > NewPositions Declaration public DVector<double> NewPositions Field Value Type Description DVector < Double > NewUVs Declaration public DVector<float> NewUVs Field Value Type Description DVector < Single > OldColors Declaration public DVector<float> OldColors Field Value Type Description DVector < Single > OldNormals Declaration public DVector<float> OldNormals Field Value Type Description DVector < Single > OldPositions Declaration public DVector<double> OldPositions Field Value Type Description DVector < Double > OldUVs Declaration public DVector<float> OldUVs Field Value Type Description DVector < Single > OnApplyF Declaration public Action<SetVerticesMeshChange> OnApplyF Field Value Type Description Action < SetVerticesMeshChange > OnRevertF Declaration public Action<SetVerticesMeshChange> OnRevertF Field Value Type Description Action < SetVerticesMeshChange > Methods Apply(DMesh3) Declaration public void Apply(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Revert(DMesh3) Declaration public void Revert(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh"
  },
  "api/g3.ShiftGridIndexer2.html": {
    "href": "api/g3.ShiftGridIndexer2.html",
    "title": "Struct ShiftGridIndexer2 | ViRGIS VR GIS",
    "keywords": "Struct ShiftGridIndexer2 Map to/from grid coords, where grid is translated from origin Implements IGridWorldIndexer2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ShiftGridIndexer2 : IGridWorldIndexer2 Constructors ShiftGridIndexer2(Vector2d, Double) Declaration public ShiftGridIndexer2(Vector2d origin, double cellSize) Parameters Type Name Description Vector2d origin Double cellSize Fields CellSize Declaration public double CellSize Field Value Type Description Double Origin Declaration public Vector2d Origin Field Value Type Description Vector2d Methods FromGrid(Vector2d) Declaration public Vector2d FromGrid(Vector2d gridpointf) Parameters Type Name Description Vector2d gridpointf Returns Type Description Vector2d FromGrid(Vector2i) Declaration public Vector2d FromGrid(Vector2i gridpoint) Parameters Type Name Description Vector2i gridpoint Returns Type Description Vector2d ToGrid(Vector2d) Declaration public Vector2i ToGrid(Vector2d point) Parameters Type Name Description Vector2d point Returns Type Description Vector2i Implements IGridWorldIndexer2"
  },
  "api/g3.ShiftGridIndexer3.html": {
    "href": "api/g3.ShiftGridIndexer3.html",
    "title": "Struct ShiftGridIndexer3 | ViRGIS VR GIS",
    "keywords": "Struct ShiftGridIndexer3 Map to/from grid coords, where grid is translated from origin Implements IGridWorldIndexer3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct ShiftGridIndexer3 : IGridWorldIndexer3 Constructors ShiftGridIndexer3(Vector3d, Double) Declaration public ShiftGridIndexer3(Vector3d origin, double cellSize) Parameters Type Name Description Vector3d origin Double cellSize Fields CellSize Declaration public double CellSize Field Value Type Description Double Origin Declaration public Vector3d Origin Field Value Type Description Vector3d Methods FromGrid(Vector3d) Declaration public Vector3d FromGrid(Vector3d gridpointf) Parameters Type Name Description Vector3d gridpointf Returns Type Description Vector3d FromGrid(Vector3i) Declaration public Vector3d FromGrid(Vector3i gridpoint) Parameters Type Name Description Vector3i gridpoint Returns Type Description Vector3d ToGrid(Vector3d) Declaration public Vector3i ToGrid(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3i ToGridf(Vector3d) Declaration public Vector3d ToGridf(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3d Implements IGridWorldIndexer3"
  },
  "api/g3.ShiftIndexMap.html": {
    "href": "api/g3.ShiftIndexMap.html",
    "title": "Class ShiftIndexMap | ViRGIS VR GIS",
    "keywords": "Class ShiftIndexMap Inheritance Object ShiftIndexMap Implements IIndexMap Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class ShiftIndexMap : IIndexMap Constructors ShiftIndexMap(Int32) Declaration public ShiftIndexMap(int n) Parameters Type Name Description Int32 n Fields Shift Declaration public int Shift Field Value Type Description Int32 Properties Item[Int32] Declaration public int this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Int32 Implements IIndexMap"
  },
  "api/g3.SimpleHoleFiller.html": {
    "href": "api/g3.SimpleHoleFiller.html",
    "title": "Class SimpleHoleFiller | ViRGIS VR GIS",
    "keywords": "Class SimpleHoleFiller Inheritance Object SimpleHoleFiller Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SimpleHoleFiller Constructors SimpleHoleFiller(DMesh3, EdgeLoop) Declaration public SimpleHoleFiller(DMesh3 mesh, EdgeLoop loop) Parameters Type Name Description DMesh3 mesh EdgeLoop loop Fields Loop Declaration public EdgeLoop Loop Field Value Type Description EdgeLoop Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 NewTriangles Declaration public int[] NewTriangles Field Value Type Description Int32 [] NewVertex Declaration public int NewVertex Field Value Type Description Int32 Methods Fill(Int32) Declaration public virtual bool Fill(int group_id = -1) Parameters Type Name Description Int32 group_id Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/g3.SimpleMesh.html": {
    "href": "api/g3.SimpleMesh.html",
    "title": "Class SimpleMesh | ViRGIS VR GIS",
    "keywords": "Class SimpleMesh Inheritance Object SimpleMesh Implements IDeformableMesh IMesh IPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SimpleMesh : IDeformableMesh, IMesh, IPointSet Constructors SimpleMesh() Declaration public SimpleMesh() SimpleMesh(IMesh) Declaration public SimpleMesh(IMesh copy) Parameters Type Name Description IMesh copy Fields Colors Declaration public DVector<float> Colors Field Value Type Description DVector < Single > FaceGroups Declaration public DVector<int> FaceGroups Field Value Type Description DVector < Int32 > Normals Declaration public DVector<float> Normals Field Value Type Description DVector < Single > Triangles Declaration public DVector<int> Triangles Field Value Type Description DVector < Int32 > UVs Declaration public DVector<float> UVs Field Value Type Description DVector < Single > Vertices Declaration public DVector<double> Vertices Field Value Type Description DVector < Double > Properties Components Declaration public MeshComponents Components { get; } Property Value Type Description MeshComponents HasTriangleGroups Declaration public bool HasTriangleGroups { get; } Property Value Type Description Boolean HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean HasVertexUVs Declaration public bool HasVertexUVs { get; } Property Value Type Description Boolean MaxTriangleID Declaration public int MaxTriangleID { get; } Property Value Type Description Int32 MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 Timestamp Timestamp is incremented any time any change is made to the mesh Declaration public int Timestamp { get; } Property Value Type Description Int32 TriangleCount Declaration public int TriangleCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods AppendTriangle(Int32, Int32, Int32, Int32) Declaration public int AppendTriangle(int i, int j, int k, int g = -1) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 g Returns Type Description Int32 AppendTriangles(IndexArray3i, Int32[]) Declaration public void AppendTriangles(IndexArray3i t, int[] groups = null) Parameters Type Name Description IndexArray3i t Int32 [] groups AppendTriangles(Int32[], Int32[], Int32) Declaration public void AppendTriangles(int[] vTriangles, int[] vertexMap, int g = -1) Parameters Type Name Description Int32 [] vTriangles Int32 [] vertexMap Int32 g AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Double, Double, Double) Declaration public int AppendVertex(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Int32 AppendVertices(VectorArray3d, VectorArray3f, VectorArray3f, VectorArray2f) Declaration public void AppendVertices(VectorArray3d v, VectorArray3f n = null, VectorArray3f c = null, VectorArray2f uv = null) Parameters Type Name Description VectorArray3d v VectorArray3f n VectorArray3f c VectorArray2f uv ColorsItr() Declaration public IEnumerable<Vector3f> ColorsItr() Returns Type Description IEnumerable < Vector3f > GetFaceGroupsArray() Declaration public int[] GetFaceGroupsArray() Returns Type Description Int32 [] GetFaceGroupsBuffer(Int32*) Declaration public void GetFaceGroupsBuffer(int *pBuffer) Parameters Type Name Description Int32 * pBuffer GetTriangle(Int32) Declaration public Index3i GetTriangle(int i) Parameters Type Name Description Int32 i Returns Type Description Index3i GetTriangleArray() Declaration public int[] GetTriangleArray() Returns Type Description Int32 [] GetTriangleBuffer(Int32*) Declaration public void GetTriangleBuffer(int *pBuffer) Parameters Type Name Description Int32 * pBuffer GetTriangleGroup(Int32) Declaration public int GetTriangleGroup(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexAll(Int32) Declaration public NewVertexInfo GetVertexAll(int i) Parameters Type Name Description Int32 i Returns Type Description NewVertexInfo GetVertexArray() Declaration public double[] GetVertexArray() Returns Type Description Double [] GetVertexArrayFloat() Declaration public float[] GetVertexArrayFloat() Returns Type Description Single [] GetVertexBuffer(Double*) Declaration public void GetVertexBuffer(double *pBuffer) Parameters Type Name Description Double * pBuffer GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexColorArray() Declaration public float[] GetVertexColorArray() Returns Type Description Single [] GetVertexColorBuffer(Single*) Declaration public void GetVertexColorBuffer(float *pBuffer) Parameters Type Name Description Single * pBuffer GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexNormalArray() Declaration public float[] GetVertexNormalArray() Returns Type Description Single [] GetVertexNormalBuffer(Single*) Declaration public void GetVertexNormalBuffer(float *pBuffer) Parameters Type Name Description Single * pBuffer GetVertexUV(Int32) Declaration public Vector2f GetVertexUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f GetVertexUVArray() Declaration public float[] GetVertexUVArray() Returns Type Description Single [] GetVertexUVBuffer(Single*) Declaration public void GetVertexUVBuffer(float *pBuffer) Parameters Type Name Description Single * pBuffer Initialize(VectorArray3d, VectorArray3i, VectorArray3f, VectorArray3f, VectorArray2f, Int32[]) Declaration public void Initialize(VectorArray3d v, VectorArray3i t, VectorArray3f n = null, VectorArray3f c = null, VectorArray2f uv = null, int[] g = null) Parameters Type Name Description VectorArray3d v VectorArray3i t VectorArray3f n VectorArray3f c VectorArray2f uv Int32 [] g Initialize(Boolean, Boolean, Boolean, Boolean) Declaration public void Initialize(bool bWantNormals = true, bool bWantColors = true, bool bWantUVs = true, bool bWantFaceGroups = true) Parameters Type Name Description Boolean bWantNormals Boolean bWantColors Boolean bWantUVs Boolean bWantFaceGroups IsTriangle(Int32) Declaration public bool IsTriangle(int tID) Parameters Type Name Description Int32 tID Returns Type Description Boolean IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean NormalsItr() Declaration public IEnumerable<Vector3f> NormalsItr() Returns Type Description IEnumerable < Vector3f > Scale(Double) Declaration public void Scale(double s) Parameters Type Name Description Double s Scale(Double, Double, Double) Declaration public void Scale(double sx, double sy, double sz) Parameters Type Name Description Double sx Double sy Double sz SetVertex(Int32, Vector3d) Declaration public void SetVertex(int i, Vector3d v) Parameters Type Name Description Int32 i Vector3d v SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int i, Vector3f c) Parameters Type Name Description Int32 i Vector3f c SetVertexNormal(Int32, Vector3f) Declaration public void SetVertexNormal(int i, Vector3f n) Parameters Type Name Description Int32 i Vector3f n SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int i, Vector2f uv) Parameters Type Name Description Int32 i Vector2f uv Translate(Double, Double, Double) Declaration public void Translate(double tx, double ty, double tz) Parameters Type Name Description Double tx Double ty Double tz TriangleGroupsItr() Declaration public IEnumerable<int> TriangleGroupsItr() Returns Type Description IEnumerable < Int32 > TriangleIndices() Declaration public IEnumerable<int> TriangleIndices() Returns Type Description IEnumerable < Int32 > TrianglesItr() Declaration public IEnumerable<Index3i> TrianglesItr() Returns Type Description IEnumerable < Index3i > UVsItr() Declaration public IEnumerable<Vector2f> UVsItr() Returns Type Description IEnumerable < Vector2f > VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > VerticesItr() Declaration public IEnumerable<Vector3d> VerticesItr() Returns Type Description IEnumerable < Vector3d > Implements IDeformableMesh IMesh IPointSet"
  },
  "api/g3.SimpleMeshBuilder.html": {
    "href": "api/g3.SimpleMeshBuilder.html",
    "title": "Class SimpleMeshBuilder | ViRGIS VR GIS",
    "keywords": "Class SimpleMeshBuilder Inheritance Object SimpleMeshBuilder Implements IMeshBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SimpleMeshBuilder : IMeshBuilder Constructors SimpleMeshBuilder() Declaration public SimpleMeshBuilder() Fields MaterialAssignment Declaration public List<int> MaterialAssignment Field Value Type Description List < Int32 > Materials Declaration public List<GenericMaterial> Materials Field Value Type Description List < GenericMaterial > Meshes Declaration public List<SimpleMesh> Meshes Field Value Type Description List < SimpleMesh > Properties SupportsMetaData Declaration public bool SupportsMetaData { get; } Property Value Type Description Boolean Methods AppendMetaData(String, Object) Declaration public void AppendMetaData(string identifier, object data) Parameters Type Name Description String identifier Object data AppendNewMesh(DMesh3) Declaration public int AppendNewMesh(DMesh3 existingMesh) Parameters Type Name Description DMesh3 existingMesh Returns Type Description Int32 AppendNewMesh(Boolean, Boolean, Boolean, Boolean) Declaration public int AppendNewMesh(bool bHaveVtxNormals, bool bHaveVtxColors, bool bHaveVtxUVs, bool bHaveFaceGroups) Parameters Type Name Description Boolean bHaveVtxNormals Boolean bHaveVtxColors Boolean bHaveVtxUVs Boolean bHaveFaceGroups Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32) Declaration public int AppendTriangle(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Int32 AppendTriangle(Int32, Int32, Int32, Int32) Declaration public int AppendTriangle(int i, int j, int k, int g) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 g Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Double, Double, Double) Declaration public int AppendVertex(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Int32 AssignMaterial(Int32, Int32) Declaration public void AssignMaterial(int materialID, int meshID) Parameters Type Name Description Int32 materialID Int32 meshID BuildMaterial(GenericMaterial) Declaration public int BuildMaterial(GenericMaterial m) Parameters Type Name Description GenericMaterial m Returns Type Description Int32 SetActiveMesh(Int32) Declaration public void SetActiveMesh(int id) Parameters Type Name Description Int32 id SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int vID, Vector2f UV) Parameters Type Name Description Int32 vID Vector2f UV Implements IMeshBuilder"
  },
  "api/g3.SimpleQuadMesh.html": {
    "href": "api/g3.SimpleQuadMesh.html",
    "title": "Class SimpleQuadMesh | ViRGIS VR GIS",
    "keywords": "Class SimpleQuadMesh SimpleTriangleMesh but for quads. Data packed into buffers, no dynamics. Supports Per-Vertex Normals, Colors, UV, and Per-Quad Facegroup. use static WriteOBJ() to save. No loading, for now. Inheritance Object SimpleQuadMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SimpleQuadMesh Constructors SimpleQuadMesh() Declaration public SimpleQuadMesh() Fields Colors Declaration public DVector<float> Colors Field Value Type Description DVector < Single > FaceGroups Declaration public DVector<int> FaceGroups Field Value Type Description DVector < Int32 > Normals Declaration public DVector<float> Normals Field Value Type Description DVector < Single > Quads Declaration public DVector<int> Quads Field Value Type Description DVector < Int32 > UVs Declaration public DVector<float> UVs Field Value Type Description DVector < Single > Vertices Declaration public DVector<double> Vertices Field Value Type Description DVector < Double > Properties Components Declaration public MeshComponents Components { get; } Property Value Type Description MeshComponents HasFaceGroups Declaration public bool HasFaceGroups { get; } Property Value Type Description Boolean HasVertexColors Declaration public bool HasVertexColors { get; } Property Value Type Description Boolean HasVertexNormals Declaration public bool HasVertexNormals { get; } Property Value Type Description Boolean HasVertexUVs Declaration public bool HasVertexUVs { get; } Property Value Type Description Boolean MaxQuadID Declaration public int MaxQuadID { get; } Property Value Type Description Int32 MaxVertexID Declaration public int MaxVertexID { get; } Property Value Type Description Int32 QuadCount Declaration public int QuadCount { get; } Property Value Type Description Int32 VertexCount Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods AppendQuad(Int32, Int32, Int32, Int32, Int32) Declaration public int AppendQuad(int i, int j, int k, int l, int g = -1) Parameters Type Name Description Int32 i Int32 j Int32 k Int32 l Int32 g Returns Type Description Int32 AppendVertex(NewVertexInfo) Declaration public int AppendVertex(NewVertexInfo info) Parameters Type Name Description NewVertexInfo info Returns Type Description Int32 AppendVertex(Vector3d) Declaration public int AppendVertex(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Int32 AppendVertex(Double, Double, Double) Declaration public int AppendVertex(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Int32 ColorsItr() Declaration public IEnumerable<Vector3f> ColorsItr() Returns Type Description IEnumerable < Vector3f > FaceGroupsItr() Declaration public IEnumerable<int> FaceGroupsItr() Returns Type Description IEnumerable < Int32 > GetFaceGroup(Int32) Declaration public int GetFaceGroup(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 GetFaceGroupsArray() Declaration public int[] GetFaceGroupsArray() Returns Type Description Int32 [] GetQuad(Int32) Declaration public Index4i GetQuad(int i) Parameters Type Name Description Int32 i Returns Type Description Index4i GetQuadArray() Declaration public int[] GetQuadArray() Returns Type Description Int32 [] GetVertex(Int32) Declaration public Vector3d GetVertex(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d GetVertexAll(Int32) Declaration public NewVertexInfo GetVertexAll(int i) Parameters Type Name Description Int32 i Returns Type Description NewVertexInfo GetVertexArray() Declaration public double[] GetVertexArray() Returns Type Description Double [] GetVertexArrayFloat() Declaration public float[] GetVertexArrayFloat() Returns Type Description Single [] GetVertexColor(Int32) Declaration public Vector3f GetVertexColor(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexColorArray() Declaration public float[] GetVertexColorArray() Returns Type Description Single [] GetVertexNormal(Int32) Declaration public Vector3f GetVertexNormal(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3f GetVertexNormalArray() Declaration public float[] GetVertexNormalArray() Returns Type Description Single [] GetVertexUV(Int32) Declaration public Vector2f GetVertexUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2f GetVertexUVArray() Declaration public float[] GetVertexUVArray() Returns Type Description Single [] Initialize(Boolean, Boolean, Boolean, Boolean) Declaration public void Initialize(bool bWantNormals = true, bool bWantColors = true, bool bWantUVs = true, bool bWantFaceGroups = true) Parameters Type Name Description Boolean bWantNormals Boolean bWantColors Boolean bWantUVs Boolean bWantFaceGroups IsQuad(Int32) Declaration public bool IsQuad(int qID) Parameters Type Name Description Int32 qID Returns Type Description Boolean IsVertex(Int32) Declaration public bool IsVertex(int vID) Parameters Type Name Description Int32 vID Returns Type Description Boolean NormalsItr() Declaration public IEnumerable<Vector3f> NormalsItr() Returns Type Description IEnumerable < Vector3f > QuadIndices() Declaration public IEnumerable<int> QuadIndices() Returns Type Description IEnumerable < Int32 > QuadsItr() Declaration public IEnumerable<Index4i> QuadsItr() Returns Type Description IEnumerable < Index4i > SetVertex(Int32, Vector3d) Declaration public void SetVertex(int i, Vector3d v) Parameters Type Name Description Int32 i Vector3d v SetVertexColor(Int32, Vector3f) Declaration public void SetVertexColor(int i, Vector3f c) Parameters Type Name Description Int32 i Vector3f c SetVertexNormal(Int32, Vector3f) Declaration public void SetVertexNormal(int i, Vector3f n) Parameters Type Name Description Int32 i Vector3f n SetVertexUV(Int32, Vector2f) Declaration public void SetVertexUV(int i, Vector2f uv) Parameters Type Name Description Int32 i Vector2f uv UVsItr() Declaration public IEnumerable<Vector2f> UVsItr() Returns Type Description IEnumerable < Vector2f > VertexIndices() Declaration public IEnumerable<int> VertexIndices() Returns Type Description IEnumerable < Int32 > VerticesItr() Declaration public IEnumerable<Vector3d> VerticesItr() Returns Type Description IEnumerable < Vector3d > WriteOBJ(SimpleQuadMesh, String, WriteOptions) Declaration public static IOWriteResult WriteOBJ(SimpleQuadMesh mesh, string sPath, WriteOptions options) Parameters Type Name Description SimpleQuadMesh mesh String sPath WriteOptions options Returns Type Description IOWriteResult"
  },
  "api/g3.SimpleStore.html": {
    "href": "api/g3.SimpleStore.html",
    "title": "Class SimpleStore | ViRGIS VR GIS",
    "keywords": "Class SimpleStore Utility class that is intended to support things like writing and reading test cases, etc. You can write out a test case in a single line, eg SimpleStore.Store(path, new object[] { TestMesh, VertexList, PlaneNormal, ... }) The object list will be binned into the relevant sublists automatically. Then you can load this data via: SimpleStore s = SimpleStore.Restore(path) Inheritance Object SimpleStore Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SimpleStore Constructors SimpleStore() Declaration public SimpleStore() SimpleStore(Object[]) Declaration public SimpleStore(object[] objs) Parameters Type Name Description Object [] objs Fields IntLists Declaration public List<List<int>> IntLists Field Value Type Description List < List < Int32 >> Meshes Declaration public List<DMesh3> Meshes Field Value Type Description List < DMesh3 > Points Declaration public List<Vector3d> Points Field Value Type Description List < Vector3d > Strings Declaration public List<string> Strings Field Value Type Description List < String > Methods Add(Object[]) Declaration public void Add(object[] objs) Parameters Type Name Description Object [] objs Restore(String) Declaration public static SimpleStore Restore(string sPath) Parameters Type Name Description String sPath Returns Type Description SimpleStore Store(String, SimpleStore) Declaration public static void Store(string sPath, SimpleStore s) Parameters Type Name Description String sPath SimpleStore s Store(String, Object[]) Declaration public static void Store(string sPath, object[] objs) Parameters Type Name Description String sPath Object [] objs"
  },
  "api/g3.SingularValueDecomposition.html": {
    "href": "api/g3.SingularValueDecomposition.html",
    "title": "Class SingularValueDecomposition | ViRGIS VR GIS",
    "keywords": "Class SingularValueDecomposition Singular Value Decomposition of arbitrary matrix A Computes U/S/V of A = U * S * V^T Useful Properties: S = square-roots of eigenvalues of A U = eigenvectors of A * A^T V = eigenvectors of A^T * A U * V^T = rotation matrix closest to A V * Inv(S) * U^T = psuedoinverse of A U and/or V are rotation matrices but may also contain reflections Detection: det(U) or det(v) == -1 Removal: if ( det(U) == -1 ) { U *= -1; S *= -1 } if ( det(V) == -1 ) { V *= -1; S *= -1 } (right? seems to work) Inheritance Object SingularValueDecomposition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SingularValueDecomposition Constructors SingularValueDecomposition(Int32, Int32, Int32) Declaration public SingularValueDecomposition(int numRows, int numCols, int maxIterations) Parameters Type Name Description Int32 numRows Int32 numCols Int32 maxIterations Methods GetSingularValues(Double[]) Declaration public void GetSingularValues(double[] singularValues) Parameters Type Name Description Double [] singularValues GetU(Double[]) Declaration public void GetU(double[] uMatrix) Parameters Type Name Description Double [] uMatrix GetV(Double[]) Declaration public void GetV(double[] vMatrix) Parameters Type Name Description Double [] vMatrix Solve(Double[], Int32) Declaration public uint Solve(double[] input, int sortType = -1) Parameters Type Name Description Double [] input Int32 sortType Returns Type Description UInt32"
  },
  "api/g3.SkeletalBlend3d.html": {
    "href": "api/g3.SkeletalBlend3d.html",
    "title": "Class SkeletalBlend3d | ViRGIS VR GIS",
    "keywords": "Class SkeletalBlend3d sum-blend Inheritance Object SkeletalBlend3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SkeletalBlend3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.SkeletalRicciBlend3d.html": {
    "href": "api/g3.SkeletalRicciBlend3d.html",
    "title": "Class SkeletalRicciBlend3d | ViRGIS VR GIS",
    "keywords": "Class SkeletalRicciBlend3d Ricci blend Inheritance Object SkeletalRicciBlend3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SkeletalRicciBlend3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields A Declaration public BoundedImplicitFunction3d A Field Value Type Description BoundedImplicitFunction3d B Declaration public BoundedImplicitFunction3d B Field Value Type Description BoundedImplicitFunction3d BlendPower Declaration public double BlendPower Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.SkeletalRicciNaryBlend3d.html": {
    "href": "api/g3.SkeletalRicciNaryBlend3d.html",
    "title": "Class SkeletalRicciNaryBlend3d | ViRGIS VR GIS",
    "keywords": "Class SkeletalRicciNaryBlend3d Boolean Union of N implicit functions, A OR B. Assumption is that both have surface at zero isocontour and negative is inside. Inheritance Object SkeletalRicciNaryBlend3d Implements BoundedImplicitFunction3d ImplicitFunction3d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SkeletalRicciNaryBlend3d : BoundedImplicitFunction3d, ImplicitFunction3d Fields BlendPower Declaration public double BlendPower Field Value Type Description Double Children Declaration public List<BoundedImplicitFunction3d> Children Field Value Type Description List < BoundedImplicitFunction3d > FieldShift Declaration public double FieldShift Field Value Type Description Double Methods Bounds() Declaration public AxisAlignedBox3d Bounds() Returns Type Description AxisAlignedBox3d Value(ref Vector3d) Declaration public double Value(ref Vector3d pt) Parameters Type Name Description Vector3d pt Returns Type Description Double Implements BoundedImplicitFunction3d ImplicitFunction3d"
  },
  "api/g3.SmallListSet.html": {
    "href": "api/g3.SmallListSet.html",
    "title": "Class SmallListSet | ViRGIS VR GIS",
    "keywords": "Class SmallListSet SmallListSet stores a set of short integer-valued variable-size lists. The lists are encoded into a few large DVector buffers, with internal pooling, so adding/removing lists usually does not involve any new or delete ops. The lists are stored in two parts. The first N elements are stored in a linear subset of a dvector. If the list spills past these N elements, the extra elements are stored in a linked list (which is also stored in a flat array). Each list stores its count, so list-size operations are constant time. All the internal \"pointers\" are 32-bit. Inheritance Object SmallListSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SmallListSet Constructors SmallListSet() Declaration public SmallListSet() SmallListSet(SmallListSet) Declaration public SmallListSet(SmallListSet copy) Parameters Type Name Description SmallListSet copy Properties MemoryUsage Declaration public string MemoryUsage { get; } Property Value Type Description String Size returns largest current list_index Declaration public int Size { get; } Property Value Type Description Int32 Methods allocate_block() Declaration protected int allocate_block() Returns Type Description Int32 AllocateAt(Int32) create a new list at list_index Declaration public void AllocateAt(int list_index) Parameters Type Name Description Int32 list_index Clear(Int32) remove all elements from list at list_index Declaration public void Clear(int list_index) Parameters Type Name Description Int32 list_index Contains(Int32, Int32) search for val in list at list_index Declaration public bool Contains(int list_index, int val) Parameters Type Name Description Int32 list_index Int32 val Returns Type Description Boolean Count(Int32) return size of list at list_index Declaration public int Count(int list_index) Parameters Type Name Description Int32 list_index Returns Type Description Int32 Find(Int32, Func<Int32, Boolean>, Int32) search for findF(list_value) == true, of list at list_index, and return list_value Declaration public int Find(int list_index, Func<int, bool> findF, int invalidValue = -1) Parameters Type Name Description Int32 list_index Func < Int32 , Boolean > findF Int32 invalidValue Returns Type Description Int32 First(Int32) return the first item in the list at list_index (no zero-size-list checking) Declaration public int First(int list_index) Parameters Type Name Description Int32 list_index Returns Type Description Int32 Insert(Int32, Int32) insert val into list at list_index. Declaration public void Insert(int list_index, int val) Parameters Type Name Description Int32 list_index Int32 val Move(Int32, Int32) move list at from_index to to_index Declaration public void Move(int from_index, int to_index) Parameters Type Name Description Int32 from_index Int32 to_index Remove(Int32, Int32) remove val from the list at list_index. return false if val was not in list. Declaration public bool Remove(int list_index, int val) Parameters Type Name Description Int32 list_index Int32 val Returns Type Description Boolean Replace(Int32, Func<Int32, Boolean>, Int32) search for findF(list_value) == true, of list at list_index, and replace with new_value. returns false if not found Declaration public bool Replace(int list_index, Func<int, bool> findF, int new_value) Parameters Type Name Description Int32 list_index Func < Int32 , Boolean > findF Int32 new_value Returns Type Description Boolean Resize(Int32) resize the list-of-lists Declaration public void Resize(int new_size) Parameters Type Name Description Int32 new_size ValueItr(Int32) iterate over the values of list at list_index Declaration public IEnumerable<int> ValueItr(int list_index) Parameters Type Name Description Int32 list_index Returns Type Description IEnumerable < Int32 >"
  },
  "api/g3.Snapping.html": {
    "href": "api/g3.Snapping.html",
    "title": "Class Snapping | ViRGIS VR GIS",
    "keywords": "Class Snapping Inheritance Object Snapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Snapping Methods SnapToIncrement(Double, Double, Double) Declaration public static double SnapToIncrement(double fValue, double fIncrement, double offset = 0) Parameters Type Name Description Double fValue Double fIncrement Double offset Returns Type Description Double SnapToIncrementHigh(Double, Double, Double) Declaration public static double SnapToIncrementHigh(double fValue, double fIncrement, double offset = 0) Parameters Type Name Description Double fValue Double fIncrement Double offset Returns Type Description Double SnapToIncrementLow(Double, Double, Double) Declaration public static double SnapToIncrementLow(double fValue, double fIncrement, double offset = 0) Parameters Type Name Description Double fValue Double fIncrement Double offset Returns Type Description Double SnapToNearbyIncrement(Double, Double, Double) Declaration public static double SnapToNearbyIncrement(double fValue, double fIncrement, double fTolerance) Parameters Type Name Description Double fValue Double fIncrement Double fTolerance Returns Type Description Double"
  },
  "api/g3.SparseList-1.html": {
    "href": "api/g3.SparseList-1.html",
    "title": "Class SparseList<T> | ViRGIS VR GIS",
    "keywords": "Class SparseList<T> Inheritance Object SparseList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SparseList<T> where T : IEquatable<T> Type Parameters Name Description T Constructors SparseList(Int32, Int32, T) Declaration public SparseList(int MaxIndex, int SubsetCountEst, T ZeroValue) Parameters Type Name Description Int32 MaxIndex Int32 SubsetCountEst T ZeroValue Properties Item[Int32] Declaration public T this[int idx] { get; set; } Parameters Type Name Description Int32 idx Property Value Type Description T Methods Count(Func<T, Boolean>) Declaration public int Count(Func<T, bool> CountF) Parameters Type Name Description Func <T, Boolean > CountF Returns Type Description Int32 NonZeroValues() Declaration public IEnumerable<KeyValuePair<int, T>> NonZeroValues() Returns Type Description IEnumerable < KeyValuePair < Int32 , T>> Values() This enumeration will return pairs [index,0] for dense case Declaration public IEnumerable<KeyValuePair<int, T>> Values() Returns Type Description IEnumerable < KeyValuePair < Int32 , T>>"
  },
  "api/g3.SparseObjectList-1.html": {
    "href": "api/g3.SparseObjectList-1.html",
    "title": "Class SparseObjectList<T> | ViRGIS VR GIS",
    "keywords": "Class SparseObjectList<T> variant of SparseList for class objects, then \"zero\" is null TODO: can we combine these classes somehow? Inheritance Object SparseObjectList<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SparseObjectList<T> where T : class Type Parameters Name Description T Constructors SparseObjectList(Int32, Int32) Declaration public SparseObjectList(int MaxIndex, int SubsetCountEst) Parameters Type Name Description Int32 MaxIndex Int32 SubsetCountEst Properties Item[Int32] Declaration public T this[int idx] { get; set; } Parameters Type Name Description Int32 idx Property Value Type Description T Methods Clear() Declaration public void Clear() Count(Func<T, Boolean>) Declaration public int Count(Func<T, bool> CountF) Parameters Type Name Description Func <T, Boolean > CountF Returns Type Description Int32 NonZeroValues() Declaration public IEnumerable<KeyValuePair<int, T>> NonZeroValues() Returns Type Description IEnumerable < KeyValuePair < Int32 , T>> Values() This enumeration will return pairs [index,0] for dense case Declaration public IEnumerable<KeyValuePair<int, T>> Values() Returns Type Description IEnumerable < KeyValuePair < Int32 , T>>"
  },
  "api/g3.SparseSymmetricCG.html": {
    "href": "api/g3.SparseSymmetricCG.html",
    "title": "Class SparseSymmetricCG | ViRGIS VR GIS",
    "keywords": "Class SparseSymmetricCG Inheritance Object SparseSymmetricCG Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SparseSymmetricCG Fields B Declaration public double[] B Field Value Type Description Double [] Iterations Declaration public int Iterations Field Value Type Description Int32 MaxIterations Declaration public int MaxIterations Field Value Type Description Int32 MultiplyF Declaration public Action<double[], double[]> MultiplyF Field Value Type Description Action < Double [], Double []> PreconditionMultiplyF Declaration public Action<double[], double[]> PreconditionMultiplyF Field Value Type Description Action < Double [], Double []> UseXAsInitialGuess Declaration public bool UseXAsInitialGuess Field Value Type Description Boolean X Declaration public double[] X Field Value Type Description Double [] Methods Solve() Declaration public bool Solve() Returns Type Description Boolean SolvePreconditioned() Declaration public bool SolvePreconditioned() Returns Type Description Boolean"
  },
  "api/g3.SparseSymmetricCGMultipleRHS.html": {
    "href": "api/g3.SparseSymmetricCGMultipleRHS.html",
    "title": "Class SparseSymmetricCGMultipleRHS | ViRGIS VR GIS",
    "keywords": "Class SparseSymmetricCGMultipleRHS [RMS] this is a variant of SparseSymmetricCG that supports multiple right-hand-sides. Makes quite a big difference as matrix gets bigger, because MultiplyF can unroll inner loops (as long as you actually do that) However, if this is done then it is not really possible to do different numbers of iterations for different RHS's. We will not update that RHS once it has converged, however we still have to do the multiplies! Inheritance Object SparseSymmetricCGMultipleRHS Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SparseSymmetricCGMultipleRHS Fields B Declaration public double[][] B Field Value Type Description Double [][] ConvergeTolerance Declaration public double ConvergeTolerance Field Value Type Description Double Iterations Declaration public int Iterations Field Value Type Description Int32 MaxIterations Declaration public int MaxIterations Field Value Type Description Int32 MultiplyF Declaration public Action<double[][], double[][]> MultiplyF Field Value Type Description Action < Double [][], Double [][]> PreconditionMultiplyF Declaration public Action<double[][], double[][]> PreconditionMultiplyF Field Value Type Description Action < Double [][], Double [][]> UseXAsInitialGuess Declaration public bool UseXAsInitialGuess Field Value Type Description Boolean X Declaration public double[][] X Field Value Type Description Double [][] Methods Solve() standard CG solve Declaration public bool Solve() Returns Type Description Boolean SolvePreconditioned() Preconditioned variant Similar to non-preconditioned version, this can suffer if one solution converges much slower than others, as we can't skip matrix multiplies in that case. Declaration public bool SolvePreconditioned() Returns Type Description Boolean"
  },
  "api/g3.SpatialFunctions.html": {
    "href": "api/g3.SpatialFunctions.html",
    "title": "Class SpatialFunctions | ViRGIS VR GIS",
    "keywords": "Class SpatialFunctions Inheritance Object SpatialFunctions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class SpatialFunctions"
  },
  "api/g3.SpatialFunctions.NormalOffset.html": {
    "href": "api/g3.SpatialFunctions.NormalOffset.html",
    "title": "Class SpatialFunctions.NormalOffset | ViRGIS VR GIS",
    "keywords": "Class SpatialFunctions.NormalOffset Inheritance Object SpatialFunctions.NormalOffset Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax [Obsolete(\"NormalOffset is deprecated - is anybody using it? please lmk.\")] public class NormalOffset Fields Distance Declaration public double Distance Field Value Type Description Double Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Spatial Declaration public ISpatial Spatial Field Value Type Description ISpatial UseFaceNormal Declaration public bool UseFaceNormal Field Value Type Description Boolean Methods FindNearestAndOffset(Vector3d) Declaration public Vector3d FindNearestAndOffset(Vector3d pos) Parameters Type Name Description Vector3d pos Returns Type Description Vector3d"
  },
  "api/g3.Sphere3Generator_NormalizedCube.html": {
    "href": "api/g3.Sphere3Generator_NormalizedCube.html",
    "title": "Class Sphere3Generator_NormalizedCube | ViRGIS VR GIS",
    "keywords": "Class Sphere3Generator_NormalizedCube Generate a mesh of a sphere by first generating a mesh of a cube, and then normalizing the vertices and moving them to sphere of desired radius. Inheritance Object MeshGenerator GridBox3Generator Sphere3Generator_NormalizedCube Inherited Members GridBox3Generator.Box GridBox3Generator.EdgeVertices GridBox3Generator.NoSharedVertices MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class Sphere3Generator_NormalizedCube : GridBox3Generator Fields Radius Declaration public double Radius Field Value Type Description Double Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides GridBox3Generator.Generate()"
  },
  "api/g3.Sphere3Generator_NormalizedCube.NormalizationTypes.html": {
    "href": "api/g3.Sphere3Generator_NormalizedCube.NormalizationTypes.html",
    "title": "Enum Sphere3Generator_NormalizedCube.NormalizationTypes | ViRGIS VR GIS",
    "keywords": "Enum Sphere3Generator_NormalizedCube.NormalizationTypes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum NormalizationTypes Fields Name Description CubeMapping NormalizedVector"
  },
  "api/g3.SphericalFibonacciPointSet.html": {
    "href": "api/g3.SphericalFibonacciPointSet.html",
    "title": "Class SphericalFibonacciPointSet | ViRGIS VR GIS",
    "keywords": "Class SphericalFibonacciPointSet A Spherical Fibonacci Point Set is a set of points that are roughly evenly distributed on a sphere. Basically the points lie on a spiral, see pdf below. The i-th SF point of an N-point set can be calculated directly. For a given (normalized) point P, finding the nearest SF point (ie mapping back to i) can be done in constant time. math from http://lgdv.cs.fau.de/uploads/publications/spherical_fibonacci_mapping_opt.pdf Inheritance Object SphericalFibonacciPointSet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SphericalFibonacciPointSet Constructors SphericalFibonacciPointSet(Int32) Declaration public SphericalFibonacciPointSet(int n = 64) Parameters Type Name Description Int32 n Fields N Declaration public int N Field Value Type Description Int32 Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public Vector3d this[int i] { get; } Parameters Type Name Description Int32 i Property Value Type Description Vector3d Methods NearestPoint(Vector3d, Boolean) Find index of nearest point-set point for input arbitrary point Declaration public int NearestPoint(Vector3d p, bool bIsNormalized = false) Parameters Type Name Description Vector3d p Boolean bIsNormalized Returns Type Description Int32 Point(Int32) Compute i'th spherical point Declaration public Vector3d Point(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3d"
  },
  "api/g3.StandardMeshReader.html": {
    "href": "api/g3.StandardMeshReader.html",
    "title": "Class StandardMeshReader | ViRGIS VR GIS",
    "keywords": "Class StandardMeshReader Inheritance Object StandardMeshReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class StandardMeshReader Constructors StandardMeshReader(Boolean) Construct a MeshReader, optionally with default format handlers Initializes MeshBuilder to a DMesh3Builder Declaration public StandardMeshReader(bool bIncludeDefaultReaders = true) Parameters Type Name Description Boolean bIncludeDefaultReaders Fields ReadInvariantCulture If the mesh format we are writing is text, then the OS will write in the number style of the current language. So in Germany, numbers are written 1,00 instead of 1.00, for example. If this flag is true, we override this to always write in a consistent way. Declaration public bool ReadInvariantCulture Field Value Type Description Boolean Properties MeshBuilder The various format handlers will use this IMeshBuilder to construct meshes based on the file data and read options. Default is initialized to DMesh3Builder Declaration public IMeshBuilder MeshBuilder { get; set; } Property Value Type Description IMeshBuilder Methods AddFormatHandler(MeshFormatReader) Add a handler for a given formta Declaration public void AddFormatHandler(MeshFormatReader reader) Parameters Type Name Description MeshFormatReader reader Read(Stream, String, ReadOptions) Read mesh file at path, with given Options. Result is stored in MeshBuilder parameter Declaration public IOReadResult Read(Stream stream, string sExtension, ReadOptions options) Parameters Type Name Description Stream stream String sExtension ReadOptions options Returns Type Description IOReadResult Read(String, ReadOptions) Read mesh file at path, with given Options. Result is stored in MeshBuilder parameter Declaration public IOReadResult Read(string sFilename, ReadOptions options) Parameters Type Name Description String sFilename ReadOptions options Returns Type Description IOReadResult ReadFile(Stream, String, ReadOptions, IMeshBuilder) Read mesh file using options and builder. You must provide our own Builder here because the reader is not returned Declaration public static IOReadResult ReadFile(Stream stream, string sExtension, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description Stream stream String sExtension ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult ReadFile(String, ReadOptions, IMeshBuilder) Read mesh file using options and builder. You must provide our own Builder here because the reader is not returned Declaration public static IOReadResult ReadFile(string sFilename, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description String sFilename ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult ReadMesh(Stream, String) This is basically a utility function, returns first mesh in file, with default options. Declaration public static DMesh3 ReadMesh(Stream stream, string sExtension) Parameters Type Name Description Stream stream String sExtension Returns Type Description DMesh3 ReadMesh(String) This is basically a utility function, returns first mesh in file, with default options. Declaration public static DMesh3 ReadMesh(string sFilename) Parameters Type Name Description String sFilename Returns Type Description DMesh3 SupportsFormat(String) Check if extension type is supported Declaration public bool SupportsFormat(string sExtension) Parameters Type Name Description String sExtension Returns Type Description Boolean Events warningEvent Declaration public event ParsingMessagesHandler warningEvent Event Type Type Description ParsingMessagesHandler"
  },
  "api/g3.StandardMeshWriter.html": {
    "href": "api/g3.StandardMeshWriter.html",
    "title": "Class StandardMeshWriter | ViRGIS VR GIS",
    "keywords": "Class StandardMeshWriter Writes various mesh file formats. Format is determined from extension. Currently supports: .obj : Wavefront OBJ Format https://en.wikipedia.org/wiki/Wavefront_.obj_file .stl : ascii and binary STL formats https://en.wikipedia.org/wiki/STL_(file_format ) .off : OFF format https://en.wikipedia.org/wiki/OFF_(file_format ) .g3mesh : internal binary format for packed DMesh3 objects Each of these is implemented in a separate Writer class, eg OBJWriter, STLWriter, etc Inheritance Object StandardMeshWriter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class StandardMeshWriter : IDisposable Fields CloseStreamF called on Streams returned by OpenStreamF when we are done with them. Declaration public Action<Stream> CloseStreamF Field Value Type Description Action < Stream > OpenStreamF By default we write to files, but if you would like to write to some other Stream type (eg MemoryStream), you can replace this function. We also pass this function down into the XYZWriter classes that need to write additional files (eg OBJ mesh) Declaration public Func<string, Stream> OpenStreamF Field Value Type Description Func < String , Stream > WriteInvariantCulture If the mesh format we are writing is text, then the OS will write in the number style of the current language. So in Germany, numbers are written 1,00 instead of 1.00, for example. If this flag is true, we override this to always write in a consistent way. Declaration public bool WriteInvariantCulture Field Value Type Description Boolean Methods Dispose() Declaration public void Dispose() Write(String, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(string sFilename, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description String sFilename List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult WriteFile(String, List<WriteMesh>, WriteOptions) Declaration public static IOWriteResult WriteFile(string sFilename, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description String sFilename List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult WriteMesh(String, IMesh, WriteOptions) Declaration public static IOWriteResult WriteMesh(string sFilename, IMesh mesh, WriteOptions options) Parameters Type Name Description String sFilename IMesh mesh WriteOptions options Returns Type Description IOWriteResult WriteMeshes(String, List<DMesh3>, WriteOptions) Declaration public static IOWriteResult WriteMeshes(string sFilename, List<DMesh3> vMeshes, WriteOptions options) Parameters Type Name Description String sFilename List < DMesh3 > vMeshes WriteOptions options Returns Type Description IOWriteResult Implements System.IDisposable"
  },
  "api/g3.StandardSculptCurveDeformation.html": {
    "href": "api/g3.StandardSculptCurveDeformation.html",
    "title": "Class StandardSculptCurveDeformation | ViRGIS VR GIS",
    "keywords": "Class StandardSculptCurveDeformation Inheritance Object SculptCurveDeformation StandardSculptCurveDeformation SculptCurveMove SculptCurveSmooth Inherited Members SculptCurveDeformation._curve SculptCurveDeformation.Curve SculptCurveDeformation._weightfunc SculptCurveDeformation.WeightFunc SculptCurveDeformation.radius SculptCurveDeformation.Radius SculptCurveDeformation.vPreviousPos SculptCurveDeformation.BeginDeformation(Frame3f) SculptCurveDeformation.UpdateDeformation(Frame3f) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class StandardSculptCurveDeformation : SculptCurveDeformation Constructors StandardSculptCurveDeformation() Declaration public StandardSculptCurveDeformation() Fields DeformF Declaration public Func<int, double, Vector3d> DeformF Field Value Type Description Func < Int32 , Double , Vector3d > ModifiedV Declaration public BitArray ModifiedV Field Value Type Description BitArray NewV Declaration public DVector<Vector3d> NewV Field Value Type Description DVector < Vector3d > SmoothAlpha Declaration public double SmoothAlpha Field Value Type Description Double SmoothIterations Declaration public int SmoothIterations Field Value Type Description Int32 Methods Apply(Frame3f) Declaration public override SculptCurveDeformation.DeformInfo Apply(Frame3f vNextPos) Parameters Type Name Description Frame3f vNextPos Returns Type Description SculptCurveDeformation.DeformInfo Overrides SculptCurveDeformation.Apply(Frame3f)"
  },
  "api/g3.STLFormatReader.html": {
    "href": "api/g3.STLFormatReader.html",
    "title": "Class STLFormatReader | ViRGIS VR GIS",
    "keywords": "Class STLFormatReader Inheritance Object STLFormatReader Implements MeshFormatReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class STLFormatReader : MeshFormatReader Properties SupportedExtensions Declaration public List<string> SupportedExtensions { get; } Property Value Type Description List < String > Methods ReadFile(Stream, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(Stream stream, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description Stream stream IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult ReadFile(String, IMeshBuilder, ReadOptions, ParsingMessagesHandler) Declaration public IOReadResult ReadFile(string sFilename, IMeshBuilder builder, ReadOptions options, ParsingMessagesHandler messages) Parameters Type Name Description String sFilename IMeshBuilder builder ReadOptions options ParsingMessagesHandler messages Returns Type Description IOReadResult Implements MeshFormatReader"
  },
  "api/g3.STLReader.html": {
    "href": "api/g3.STLReader.html",
    "title": "Class STLReader | ViRGIS VR GIS",
    "keywords": "Class STLReader Inheritance Object STLReader Implements IMeshReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class STLReader : IMeshReader Fields PerTriAttribFlag ReadOptions.CustomFlags flag for configuring .WantPerTriAttribs Declaration public const string PerTriAttribFlag = \"-want-tri-attrib\" Field Value Type Description String PerTriAttribMetadataName name argument passed to IMeshBuilder.AppendMetaData Declaration public static string PerTriAttribMetadataName Field Value Type Description String RebuildStrategy Which algorithm is used to try to reconstruct mesh topology from STL triangle soup Declaration public STLReader.Strategy RebuildStrategy Field Value Type Description STLReader.Strategy StrategyFlag ReadOptions.CustomFlags flag for configuring .RebuildStrategy Declaration public const string StrategyFlag = \"-stl-weld-strategy\" Field Value Type Description String WantPerTriAttribs Binary STL supports per-triangle integer attribute, which is often used to store face colors. If this flag is true, we will attach these face colors to the returned mesh via IMeshBuilder.AppendMetaData Declaration public bool WantPerTriAttribs Field Value Type Description Boolean WeldTolerance Vertices within this distance are considered \"the same\" by welding strategies. Declaration public double WeldTolerance Field Value Type Description Double Methods BuildMesh(STLReader.STLSolid, IMeshBuilder) Declaration protected virtual void BuildMesh(STLReader.STLSolid solid, IMeshBuilder builder) Parameters Type Name Description STLReader.STLSolid solid IMeshBuilder builder BuildMesh_Auto(STLReader.STLSolid) Declaration protected virtual DMesh3 BuildMesh_Auto(STLReader.STLSolid solid) Parameters Type Name Description STLReader.STLSolid solid Returns Type Description DMesh3 BuildMesh_IdenticalWeld(STLReader.STLSolid) Declaration protected virtual DMesh3 BuildMesh_IdenticalWeld(STLReader.STLSolid solid) Parameters Type Name Description STLReader.STLSolid solid Returns Type Description DMesh3 BuildMesh_NoMerge(STLReader.STLSolid, IMeshBuilder) Declaration protected virtual void BuildMesh_NoMerge(STLReader.STLSolid solid, IMeshBuilder builder) Parameters Type Name Description STLReader.STLSolid solid IMeshBuilder builder BuildMesh_TolerantWeld(STLReader.STLSolid, Double) Declaration protected virtual DMesh3 BuildMesh_TolerantWeld(STLReader.STLSolid solid, double weld_tolerance) Parameters Type Name Description STLReader.STLSolid solid Double weld_tolerance Returns Type Description DMesh3 check_for_cracks(DMesh3, out Int32, Double) Declaration protected bool check_for_cracks(DMesh3 mesh, out int boundary_edge_count, double crack_tol = 9.9999999747524271E-07) Parameters Type Name Description DMesh3 mesh Int32 boundary_edge_count Double crack_tol Returns Type Description Boolean count_boundary_edges(DMesh3) Declaration protected int count_boundary_edges(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Returns Type Description Int32 Read(BinaryReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(BinaryReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description BinaryReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Read(TextReader, ReadOptions, IMeshBuilder) Declaration public IOReadResult Read(TextReader reader, ReadOptions options, IMeshBuilder builder) Parameters Type Name Description TextReader reader ReadOptions options IMeshBuilder builder Returns Type Description IOReadResult Events warningEvent connect to this event to get warning messages Declaration public event ParsingMessagesHandler warningEvent Event Type Type Description ParsingMessagesHandler Implements IMeshReader"
  },
  "api/g3.STLReader.STLSolid.html": {
    "href": "api/g3.STLReader.STLSolid.html",
    "title": "Class STLReader.STLSolid | ViRGIS VR GIS",
    "keywords": "Class STLReader.STLSolid Inheritance Object STLReader.STLSolid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax protected class STLSolid Fields Name Declaration public string Name Field Value Type Description String TriAttribs Declaration public DVector<short> TriAttribs Field Value Type Description DVector < Int16 > Vertices Declaration public DVectorArray3f Vertices Field Value Type Description DVectorArray3f"
  },
  "api/g3.STLReader.Strategy.html": {
    "href": "api/g3.STLReader.Strategy.html",
    "title": "Enum STLReader.Strategy | ViRGIS VR GIS",
    "keywords": "Enum STLReader.Strategy Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum Strategy Fields Name Description AutoBestResult IdenticalVertexWeld NoProcessing TolerantVertexWeld"
  },
  "api/g3.STLWriter.html": {
    "href": "api/g3.STLWriter.html",
    "title": "Class STLWriter | ViRGIS VR GIS",
    "keywords": "Class STLWriter Inheritance Object STLWriter Implements IMeshWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class STLWriter : IMeshWriter Methods Write(BinaryWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(BinaryWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description BinaryWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Write(TextWriter, List<WriteMesh>, WriteOptions) Declaration public IOWriteResult Write(TextWriter writer, List<WriteMesh> vMeshes, WriteOptions options) Parameters Type Name Description TextWriter writer List < WriteMesh > vMeshes WriteOptions options Returns Type Description IOWriteResult Implements IMeshWriter"
  },
  "api/g3.StringTagSet-1.html": {
    "href": "api/g3.StringTagSet-1.html",
    "title": "Class StringTagSet<T> | ViRGIS VR GIS",
    "keywords": "Class StringTagSet<T> Basic object->string mapping Inheritance Object StringTagSet<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class StringTagSet<T> Type Parameters Name Description T Constructors StringTagSet() Declaration public StringTagSet() Fields InvalidTag Declaration public const string InvalidTag = \"\" Field Value Type Description String Methods Add(T, String) Declaration public void Add(T reference, string tag) Parameters Type Name Description T reference String tag Get(T) Declaration public string Get(T reference) Parameters Type Name Description T reference Returns Type Description String Has(T) Declaration public bool Has(T reference) Parameters Type Name Description T reference Returns Type Description Boolean"
  },
  "api/g3.SVGWriter.html": {
    "href": "api/g3.SVGWriter.html",
    "title": "Class SVGWriter | ViRGIS VR GIS",
    "keywords": "Class SVGWriter Inheritance Object SVGWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SVGWriter Constructors SVGWriter() Declaration public SVGWriter() Fields BoundsPad Declaration public double BoundsPad Field Value Type Description Double DefaultArcStyle Declaration public SVGWriter.Style DefaultArcStyle Field Value Type Description SVGWriter.Style DefaultCircleStyle Declaration public SVGWriter.Style DefaultCircleStyle Field Value Type Description SVGWriter.Style DefaultDGraphStyle Declaration public SVGWriter.Style DefaultDGraphStyle Field Value Type Description SVGWriter.Style DefaultLineStyle Declaration public SVGWriter.Style DefaultLineStyle Field Value Type Description SVGWriter.Style DefaultPolygonStyle Declaration public SVGWriter.Style DefaultPolygonStyle Field Value Type Description SVGWriter.Style DefaultPolylineStyle Declaration public SVGWriter.Style DefaultPolylineStyle Field Value Type Description SVGWriter.Style FlipY Declaration public bool FlipY Field Value Type Description Boolean Precision Declaration public int Precision Field Value Type Description Int32 Methods AddArc(Arc2d) Declaration public void AddArc(Arc2d arc) Parameters Type Name Description Arc2d arc AddArc(Arc2d, SVGWriter.Style) Declaration public void AddArc(Arc2d arc, SVGWriter.Style style) Parameters Type Name Description Arc2d arc SVGWriter.Style style AddBox(AxisAlignedBox2d) Declaration public void AddBox(AxisAlignedBox2d box) Parameters Type Name Description AxisAlignedBox2d box AddBox(AxisAlignedBox2d, SVGWriter.Style) Declaration public void AddBox(AxisAlignedBox2d box, SVGWriter.Style style) Parameters Type Name Description AxisAlignedBox2d box SVGWriter.Style style AddCircle(Circle2d) Declaration public void AddCircle(Circle2d circle) Parameters Type Name Description Circle2d circle AddCircle(Circle2d, SVGWriter.Style) Declaration public void AddCircle(Circle2d circle, SVGWriter.Style style) Parameters Type Name Description Circle2d circle SVGWriter.Style style AddComplex(PlanarComplex) Declaration public void AddComplex(PlanarComplex complex) Parameters Type Name Description PlanarComplex complex AddGraph(DGraph2) Declaration public void AddGraph(DGraph2 graph) Parameters Type Name Description DGraph2 graph AddGraph(DGraph2, SVGWriter.Style) Declaration public void AddGraph(DGraph2 graph, SVGWriter.Style style) Parameters Type Name Description DGraph2 graph SVGWriter.Style style AddLine(Segment2d) Declaration public void AddLine(Segment2d segment) Parameters Type Name Description Segment2d segment AddLine(Segment2d, SVGWriter.Style) Declaration public void AddLine(Segment2d segment, SVGWriter.Style style) Parameters Type Name Description Segment2d segment SVGWriter.Style style AddPolygon(Polygon2d) Declaration public void AddPolygon(Polygon2d poly) Parameters Type Name Description Polygon2d poly AddPolygon(Polygon2d, SVGWriter.Style) Declaration public void AddPolygon(Polygon2d poly, SVGWriter.Style style) Parameters Type Name Description Polygon2d poly SVGWriter.Style style AddPolyline(PolyLine2d) Declaration public void AddPolyline(PolyLine2d poly) Parameters Type Name Description PolyLine2d poly AddPolyline(PolyLine2d, SVGWriter.Style) Declaration public void AddPolyline(PolyLine2d poly, SVGWriter.Style style) Parameters Type Name Description PolyLine2d poly SVGWriter.Style style MapPt(Vector2d) Declaration protected virtual Vector2d MapPt(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Vector2d QuickWrite(DGraph2, String, Double) Declaration public static void QuickWrite(DGraph2 graph, string sPath, double line_width = 1) Parameters Type Name Description DGraph2 graph String sPath Double line_width QuickWrite(List<GeneralPolygon2d>, String, Double) Declaration public static void QuickWrite(List<GeneralPolygon2d> polygons, string sPath, double line_width = 1) Parameters Type Name Description List < GeneralPolygon2d > polygons String sPath Double line_width QuickWrite(List<GeneralPolygon2d>, String, Single, List<GeneralPolygon2d>, String, Single, String) Declaration public static void QuickWrite(List<GeneralPolygon2d> polygons1, string color1, float width1, List<GeneralPolygon2d> polygons2, string color2, float width2, string sPath) Parameters Type Name Description List < GeneralPolygon2d > polygons1 String color1 Single width1 List < GeneralPolygon2d > polygons2 String color2 Single width2 String sPath SetDefaultLineWidth(Single) Declaration public void SetDefaultLineWidth(float width) Parameters Type Name Description Single width Write(String) Declaration public IOWriteResult Write(string sFilename) Parameters Type Name Description String sFilename Returns Type Description IOWriteResult"
  },
  "api/g3.SVGWriter.Style.html": {
    "href": "api/g3.SVGWriter.Style.html",
    "title": "Struct SVGWriter.Style | ViRGIS VR GIS",
    "keywords": "Struct SVGWriter.Style Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Style Fields Default Declaration public static readonly SVGWriter.Style Default Field Value Type Description SVGWriter.Style fill Declaration public string fill Field Value Type Description String stroke Declaration public string stroke Field Value Type Description String stroke_width Declaration public float stroke_width Field Value Type Description Single Methods Filled(String, String, Single) Declaration public static SVGWriter.Style Filled(string fillCol, string strokeCol = \"\", float strokeWidth = 0F) Parameters Type Name Description String fillCol String strokeCol Single strokeWidth Returns Type Description SVGWriter.Style Outline(String, Single) Declaration public static SVGWriter.Style Outline(string strokeCol, float strokeWidth) Parameters Type Name Description String strokeCol Single strokeWidth Returns Type Description SVGWriter.Style ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/g3.SymmetricEigenSolver.html": {
    "href": "api/g3.SymmetricEigenSolver.html",
    "title": "Class SymmetricEigenSolver | ViRGIS VR GIS",
    "keywords": "Class SymmetricEigenSolver Inheritance Object SymmetricEigenSolver Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SymmetricEigenSolver Constructors SymmetricEigenSolver(Int32, Int32) Declaration public SymmetricEigenSolver(int size, int maxIterations) Parameters Type Name Description Int32 size Int32 maxIterations Fields NO_CONVERGENCE Declaration public const int NO_CONVERGENCE = 2147483647 Field Value Type Description Int32 Methods GetEigenvalue(Int32) Declaration public double GetEigenvalue(int c) Parameters Type Name Description Int32 c Returns Type Description Double GetEigenvalues() Declaration public double[] GetEigenvalues() Returns Type Description Double [] GetEigenvalues(Double[]) Declaration public void GetEigenvalues(double[] eigenvalues) Parameters Type Name Description Double [] eigenvalues GetEigenvector(Int32) Declaration public double[] GetEigenvector(int c) Parameters Type Name Description Int32 c Returns Type Description Double [] GetEigenvector(Int32, Double[]) Declaration public void GetEigenvector(int c, double[] eigenvector) Parameters Type Name Description Int32 c Double [] eigenvector GetEigenvectors() Declaration public double[] GetEigenvectors() Returns Type Description Double [] GetEigenvectors(Double[]) Declaration public void GetEigenvectors(double[] eigenvectors) Parameters Type Name Description Double [] eigenvectors IsRotation() Declaration public bool IsRotation() Returns Type Description Boolean Solve(Double[], SymmetricEigenSolver.SortType) Declaration public int Solve(double[] input, SymmetricEigenSolver.SortType eSort) Parameters Type Name Description Double [] input SymmetricEigenSolver.SortType eSort Returns Type Description Int32"
  },
  "api/g3.SymmetricEigenSolver.SortType.html": {
    "href": "api/g3.SymmetricEigenSolver.SortType.html",
    "title": "Enum SymmetricEigenSolver.SortType | ViRGIS VR GIS",
    "keywords": "Enum SymmetricEigenSolver.SortType Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum SortType Fields Name Description Decreasing Increasing NoSorting"
  },
  "api/g3.SymmetricSparseMatrix.html": {
    "href": "api/g3.SymmetricSparseMatrix.html",
    "title": "Class SymmetricSparseMatrix | ViRGIS VR GIS",
    "keywords": "Class SymmetricSparseMatrix Basic sparse-symmetric-matrix class. Stores upper-triangular portion. Uses Dictionary as sparsifying data structure, which is probably not a good option. But it is easy. Inheritance Object SymmetricSparseMatrix Implements IMatrix Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class SymmetricSparseMatrix : IMatrix Constructors SymmetricSparseMatrix(DenseMatrix) Declaration public SymmetricSparseMatrix(DenseMatrix m) Parameters Type Name Description DenseMatrix m SymmetricSparseMatrix(SymmetricSparseMatrix) Declaration public SymmetricSparseMatrix(SymmetricSparseMatrix m) Parameters Type Name Description SymmetricSparseMatrix m SymmetricSparseMatrix(Int32) Declaration public SymmetricSparseMatrix(int setN = 0) Parameters Type Name Description Int32 setN Properties Columns Declaration public int Columns { get; } Property Value Type Description Int32 Item[Int32, Int32] Declaration public double this[int r, int c] { get; set; } Parameters Type Name Description Int32 r Int32 c Property Value Type Description Double Rows Declaration public int Rows { get; } Property Value Type Description Int32 Size Declaration public Index2i Size { get; } Property Value Type Description Index2i Methods EpsilonEqual(SymmetricSparseMatrix, Double) Declaration public bool EpsilonEqual(SymmetricSparseMatrix B, double eps = 2.2204460492503131E-16) Parameters Type Name Description SymmetricSparseMatrix B Double eps Returns Type Description Boolean Multiply(SymmetricSparseMatrix) Declaration public SymmetricSparseMatrix Multiply(SymmetricSparseMatrix M2) Parameters Type Name Description SymmetricSparseMatrix M2 Returns Type Description SymmetricSparseMatrix Multiply(SymmetricSparseMatrix, ref SymmetricSparseMatrix, Boolean) Declaration public void Multiply(SymmetricSparseMatrix M2, ref SymmetricSparseMatrix R, bool bParallel = true) Parameters Type Name Description SymmetricSparseMatrix M2 SymmetricSparseMatrix R Boolean bParallel Multiply(Double[], Double[]) Declaration public void Multiply(double[] X, double[] Result) Parameters Type Name Description Double [] X Double [] Result NonZeroIndices() Declaration public IEnumerable<Index2i> NonZeroIndices() Returns Type Description IEnumerable < Index2i > NonZeros() Declaration public IEnumerable<KeyValuePair<Index2i, double>> NonZeros() Returns Type Description IEnumerable < KeyValuePair < Index2i , Double >> Set(Int32, Int32, Double) Declaration public void Set(int r, int c, double value) Parameters Type Name Description Int32 r Int32 c Double value Square(Boolean) Declaration public SymmetricSparseMatrix Square(bool bParallel = true) Parameters Type Name Description Boolean bParallel Returns Type Description SymmetricSparseMatrix SquarePackedParallel() Returns this*this, as a packed sparse matrix. Computes in parallel. Declaration public PackedSparseMatrix SquarePackedParallel() Returns Type Description PackedSparseMatrix Implements IMatrix"
  },
  "api/g3.TilingUtil.html": {
    "href": "api/g3.TilingUtil.html",
    "title": "Class TilingUtil | ViRGIS VR GIS",
    "keywords": "Class TilingUtil Inheritance Object TilingUtil Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class TilingUtil Methods BoundedCircleTiling2(AxisAlignedBox2d, AxisAlignedBox2d, Double) hex-grid tiling of circles inside bounds, with spacing between elements Returns list of translations to element. Always allows at least one row and column, even if element overflows bounds in that dimension. Declaration public static List<Vector2d> BoundedCircleTiling2(AxisAlignedBox2d element, AxisAlignedBox2d bounds, double spacing) Parameters Type Name Description AxisAlignedBox2d element AxisAlignedBox2d bounds Double spacing Returns Type Description List < Vector2d > BoundedRegularTiling2(AxisAlignedBox2d, AxisAlignedBox2d, Double) Regular-grid tiling of element inside bounds, with spacing between elements Returns list of translations to element. Always allows at least one row and column, even if element overflows bounds in that dimension. Declaration public static List<Vector2d> BoundedRegularTiling2(AxisAlignedBox2d element, AxisAlignedBox2d bounds, double spacing) Parameters Type Name Description AxisAlignedBox2d element AxisAlignedBox2d bounds Double spacing Returns Type Description List < Vector2d >"
  },
  "api/g3.TransformedIntersectionTarget.html": {
    "href": "api/g3.TransformedIntersectionTarget.html",
    "title": "Class TransformedIntersectionTarget | ViRGIS VR GIS",
    "keywords": "Class TransformedIntersectionTarget Inheritance Object TransformedIntersectionTarget Implements IIntersectionTarget Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TransformedIntersectionTarget : IIntersectionTarget Fields MapFromBaseNormalF Declaration public Func<Vector3d, Vector3d> MapFromBaseNormalF Field Value Type Description Func < Vector3d , Vector3d > MapFromBasePosF Declaration public Func<Vector3d, Vector3d> MapFromBasePosF Field Value Type Description Func < Vector3d , Vector3d > MapToBaseF Declaration public Func<Ray3d, Ray3d> MapToBaseF Field Value Type Description Func < Ray3d , Ray3d > Properties HasNormal Declaration public bool HasNormal { get; } Property Value Type Description Boolean Methods RayIntersect(Ray3d, out Vector3d, out Vector3d) Declaration public bool RayIntersect(Ray3d ray, out Vector3d vHit, out Vector3d vHitNormal) Parameters Type Name Description Ray3d ray Vector3d vHit Vector3d vHitNormal Returns Type Description Boolean Implements IIntersectionTarget"
  },
  "api/g3.TransformedMeshProjectionTarget.html": {
    "href": "api/g3.TransformedMeshProjectionTarget.html",
    "title": "Class TransformedMeshProjectionTarget | ViRGIS VR GIS",
    "keywords": "Class TransformedMeshProjectionTarget Extension of MeshProjectionTarget that allows the target to have a transformation relative to it's internal space. Call SetTransform(), or initialize the transforms yourself Inheritance Object MeshProjectionTarget TransformedMeshProjectionTarget Implements IOrientedProjectionTarget IProjectionTarget Inherited Members MeshProjectionTarget.Mesh MeshProjectionTarget.Spatial MeshProjectionTarget.Auto(DMesh3, Boolean) MeshProjectionTarget.Auto(DMesh3, IEnumerable<Int32>, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TransformedMeshProjectionTarget : MeshProjectionTarget, IOrientedProjectionTarget, IProjectionTarget Constructors TransformedMeshProjectionTarget() Declaration public TransformedMeshProjectionTarget() TransformedMeshProjectionTarget(DMesh3) Declaration public TransformedMeshProjectionTarget(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh TransformedMeshProjectionTarget(DMesh3, ISpatial) Declaration public TransformedMeshProjectionTarget(DMesh3 mesh, ISpatial spatial) Parameters Type Name Description DMesh3 mesh ISpatial spatial Fields SourceToTargetXForm Declaration public TransformSequence SourceToTargetXForm Field Value Type Description TransformSequence TargetToSourceXForm Declaration public TransformSequence TargetToSourceXForm Field Value Type Description TransformSequence Methods Project(Vector3d, out Vector3d, Int32) Declaration public override Vector3d Project(Vector3d vPoint, out Vector3d vProjectNormal, int identifier = -1) Parameters Type Name Description Vector3d vPoint Vector3d vProjectNormal Int32 identifier Returns Type Description Vector3d Overrides MeshProjectionTarget.Project(Vector3d, out Vector3d, Int32) Project(Vector3d, Int32) Declaration public override Vector3d Project(Vector3d vPoint, int identifier = -1) Parameters Type Name Description Vector3d vPoint Int32 identifier Returns Type Description Vector3d Overrides MeshProjectionTarget.Project(Vector3d, Int32) SetTransform(TransformSequence) Declaration public void SetTransform(TransformSequence sourceToTargetX) Parameters Type Name Description TransformSequence sourceToTargetX Implements IOrientedProjectionTarget IProjectionTarget"
  },
  "api/g3.TransformSequence.html": {
    "href": "api/g3.TransformSequence.html",
    "title": "Class TransformSequence | ViRGIS VR GIS",
    "keywords": "Class TransformSequence TransformSequence stores an ordered list of basic transformations. This can be useful if you need to construct some modifications and want to use the same set later. For example, if you have a hierarchy of objects with relative transformations and want to \"save\" the nested transform sequence without having to hold references to the original objects. Use the Append() functions to add different transform types, and the TransformX() to apply the sequence Inheritance Object TransformSequence Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TransformSequence Constructors TransformSequence() Declaration public TransformSequence() TransformSequence(TransformSequence) Declaration public TransformSequence(TransformSequence copy) Parameters Type Name Description TransformSequence copy Methods Append(TransformSequence) Declaration public void Append(TransformSequence sequence) Parameters Type Name Description TransformSequence sequence AppendFromFrame(Frame3f) Declaration public void AppendFromFrame(Frame3f frame) Parameters Type Name Description Frame3f frame AppendRotation(Quaternionf) Declaration public void AppendRotation(Quaternionf q) Parameters Type Name Description Quaternionf q AppendRotation(Quaternionf, Vector3d) Declaration public void AppendRotation(Quaternionf q, Vector3d aroundPt) Parameters Type Name Description Quaternionf q Vector3d aroundPt AppendScale(Vector3d) Declaration public void AppendScale(Vector3d s) Parameters Type Name Description Vector3d s AppendScale(Vector3d, Vector3d) Declaration public void AppendScale(Vector3d s, Vector3d aroundPt) Parameters Type Name Description Vector3d s Vector3d aroundPt AppendToFrame(Frame3f) Declaration public void AppendToFrame(Frame3f frame) Parameters Type Name Description Frame3f frame AppendTranslation(Vector3d) Declaration public void AppendTranslation(Vector3d dv) Parameters Type Name Description Vector3d dv AppendTranslation(Double, Double, Double) Declaration public void AppendTranslation(double dx, double dy, double dz) Parameters Type Name Description Double dx Double dy Double dz MakeInverse() construct inverse transformation sequence Declaration public TransformSequence MakeInverse() Returns Type Description TransformSequence Restore(BinaryReader) Declaration public void Restore(BinaryReader reader) Parameters Type Name Description BinaryReader reader Store(BinaryWriter) Declaration public void Store(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer TransformP(Vector3d) Apply transforms to point Declaration public Vector3d TransformP(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Vector3d TransformP(Vector3f) Apply transforms to point Declaration public Vector3f TransformP(Vector3f p) Parameters Type Name Description Vector3f p Returns Type Description Vector3f TransformV(Vector3d) Apply transforms to vector. Includes scaling. Declaration public Vector3d TransformV(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d"
  },
  "api/g3.TransformSequence2.html": {
    "href": "api/g3.TransformSequence2.html",
    "title": "Class TransformSequence2 | ViRGIS VR GIS",
    "keywords": "Class TransformSequence2 TransformSequence stores an ordered list of basic transformations. This can be useful if you need to construct some modifications and want to use the same set later. For example, if you have a hierarchy of objects with relative transformations and want to \"save\" the nested transform sequence without having to hold references to the original objects. Use the Append() functions to add different transform types, and the TransformX() to apply the sequence Inheritance Object TransformSequence2 Implements ITransform2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TransformSequence2 : ITransform2 Constructors TransformSequence2() Declaration public TransformSequence2() Methods Append(ITransform2) Declaration public TransformSequence2 Append(ITransform2 t2) Parameters Type Name Description ITransform2 t2 Returns Type Description TransformSequence2 RotationDeg(Double) Declaration public TransformSequence2 RotationDeg(double angle) Parameters Type Name Description Double angle Returns Type Description TransformSequence2 RotationDeg(Double, Vector2d) Declaration public TransformSequence2 RotationDeg(double angle, Vector2d aroundPt) Parameters Type Name Description Double angle Vector2d aroundPt Returns Type Description TransformSequence2 RotationRad(Double) Declaration public TransformSequence2 RotationRad(double angle) Parameters Type Name Description Double angle Returns Type Description TransformSequence2 RotationRad(Double, Vector2d) Declaration public TransformSequence2 RotationRad(double angle, Vector2d aroundPt) Parameters Type Name Description Double angle Vector2d aroundPt Returns Type Description TransformSequence2 Scale(Vector2d) Declaration public TransformSequence2 Scale(Vector2d s) Parameters Type Name Description Vector2d s Returns Type Description TransformSequence2 Scale(Vector2d, Vector2d) Declaration public TransformSequence2 Scale(Vector2d s, Vector2d aroundPt) Parameters Type Name Description Vector2d s Vector2d aroundPt Returns Type Description TransformSequence2 TransformN(Vector2d) Apply transforms to normalized vector Declaration public Vector2d TransformN(Vector2d n) Parameters Type Name Description Vector2d n Returns Type Description Vector2d TransformP(Vector2d) Apply transforms to point Declaration public Vector2d TransformP(Vector2d p) Parameters Type Name Description Vector2d p Returns Type Description Vector2d TransformScalar(Double) Apply transforms to scalar dimension Declaration public double TransformScalar(double s) Parameters Type Name Description Double s Returns Type Description Double Translation(Vector2d) Declaration public TransformSequence2 Translation(Vector2d dv) Parameters Type Name Description Vector2d dv Returns Type Description TransformSequence2 Translation(Double, Double) Declaration public TransformSequence2 Translation(double dx, double dy) Parameters Type Name Description Double dx Double dy Returns Type Description TransformSequence2 Implements ITransform2"
  },
  "api/g3.Triangle2d.html": {
    "href": "api/g3.Triangle2d.html",
    "title": "Struct Triangle2d | ViRGIS VR GIS",
    "keywords": "Struct Triangle2d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Triangle2d Constructors Triangle2d(Vector2d, Vector2d, Vector2d) Declaration public Triangle2d(Vector2d v0, Vector2d v1, Vector2d v2) Parameters Type Name Description Vector2d v0 Vector2d v1 Vector2d v2 Fields V0 Declaration public Vector2d V0 Field Value Type Description Vector2d V1 Declaration public Vector2d V1 Field Value Type Description Vector2d V2 Declaration public Vector2d V2 Field Value Type Description Vector2d Properties Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d Methods PointAt(Vector3d) Declaration public Vector2d PointAt(Vector3d bary) Parameters Type Name Description Vector3d bary Returns Type Description Vector2d PointAt(Double, Double, Double) Declaration public Vector2d PointAt(double bary0, double bary1, double bary2) Parameters Type Name Description Double bary0 Double bary1 Double bary2 Returns Type Description Vector2d Operators Explicit(Triangle2d to Triangle2f) Declaration public static explicit operator Triangle2f(Triangle2d v) Parameters Type Name Description Triangle2d v Returns Type Description Triangle2f Implicit(Triangle2f to Triangle2d) Declaration public static implicit operator Triangle2d(Triangle2f v) Parameters Type Name Description Triangle2f v Returns Type Description Triangle2d"
  },
  "api/g3.Triangle2f.html": {
    "href": "api/g3.Triangle2f.html",
    "title": "Struct Triangle2f | ViRGIS VR GIS",
    "keywords": "Struct Triangle2f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Triangle2f Constructors Triangle2f(Vector2f, Vector2f, Vector2f) Declaration public Triangle2f(Vector2f v0, Vector2f v1, Vector2f v2) Parameters Type Name Description Vector2f v0 Vector2f v1 Vector2f v2 Fields V0 Declaration public Vector2f V0 Field Value Type Description Vector2f V1 Declaration public Vector2f V1 Field Value Type Description Vector2f V2 Declaration public Vector2f V2 Field Value Type Description Vector2f Properties Item[Int32] Declaration public Vector2f this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2f Methods PointAt(Vector3f) Declaration public Vector2f PointAt(Vector3f bary) Parameters Type Name Description Vector3f bary Returns Type Description Vector2f PointAt(Single, Single, Single) Declaration public Vector2f PointAt(float bary0, float bary1, float bary2) Parameters Type Name Description Single bary0 Single bary1 Single bary2 Returns Type Description Vector2f"
  },
  "api/g3.Triangle3d.html": {
    "href": "api/g3.Triangle3d.html",
    "title": "Struct Triangle3d | ViRGIS VR GIS",
    "keywords": "Struct Triangle3d Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Triangle3d Constructors Triangle3d(Vector3d, Vector3d, Vector3d) Declaration public Triangle3d(Vector3d v0, Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v0 Vector3d v1 Vector3d v2 Fields V0 Declaration public Vector3d V0 Field Value Type Description Vector3d V1 Declaration public Vector3d V1 Field Value Type Description Vector3d V2 Declaration public Vector3d V2 Field Value Type Description Vector3d Properties Area Declaration public double Area { get; } Property Value Type Description Double AspectRatio Declaration public double AspectRatio { get; } Property Value Type Description Double Item[Int32] Declaration public Vector3d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3d Normal Declaration public Vector3d Normal { get; } Property Value Type Description Vector3d Methods BarycentricCoords(Vector3d) Declaration public Vector3d BarycentricCoords(Vector3d point) Parameters Type Name Description Vector3d point Returns Type Description Vector3d PointAt(Vector3d) Declaration public Vector3d PointAt(Vector3d bary) Parameters Type Name Description Vector3d bary Returns Type Description Vector3d PointAt(Double, Double, Double) Declaration public Vector3d PointAt(double bary0, double bary1, double bary2) Parameters Type Name Description Double bary0 Double bary1 Double bary2 Returns Type Description Vector3d Operators Explicit(Triangle3d to Triangle3f) Declaration public static explicit operator Triangle3f(Triangle3d v) Parameters Type Name Description Triangle3d v Returns Type Description Triangle3f Implicit(Triangle3f to Triangle3d) Declaration public static implicit operator Triangle3d(Triangle3f v) Parameters Type Name Description Triangle3f v Returns Type Description Triangle3d"
  },
  "api/g3.Triangle3f.html": {
    "href": "api/g3.Triangle3f.html",
    "title": "Struct Triangle3f | ViRGIS VR GIS",
    "keywords": "Struct Triangle3f Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Triangle3f Constructors Triangle3f(Vector3f, Vector3f, Vector3f) Declaration public Triangle3f(Vector3f v0, Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v0 Vector3f v1 Vector3f v2 Fields V0 Declaration public Vector3f V0 Field Value Type Description Vector3f V1 Declaration public Vector3f V1 Field Value Type Description Vector3f V2 Declaration public Vector3f V2 Field Value Type Description Vector3f Properties Item[Int32] Declaration public Vector3f this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3f Methods BarycentricCoords(Vector3f) Declaration public Vector3f BarycentricCoords(Vector3f point) Parameters Type Name Description Vector3f point Returns Type Description Vector3f PointAt(Vector3f) Declaration public Vector3f PointAt(Vector3f bary) Parameters Type Name Description Vector3f bary Returns Type Description Vector3f PointAt(Single, Single, Single) Declaration public Vector3f PointAt(float bary0, float bary1, float bary2) Parameters Type Name Description Single bary0 Single bary1 Single bary2 Returns Type Description Vector3f"
  },
  "api/g3.TriangleBinsGrid2d.html": {
    "href": "api/g3.TriangleBinsGrid2d.html",
    "title": "Class TriangleBinsGrid2d | ViRGIS VR GIS",
    "keywords": "Class TriangleBinsGrid2d This class is a spatial data structure for 2D triangles. It is intended for point-containment and box-overlap queries. It does not store the triangles, only indices, so you must pass in the triangle vertices to add/remove functions, similar to PointHashGrid2d. However, unlike the hash classes, this one is based on a grid of \"bins\" which has a fixed size, so you must provide a bounding box on construction. Each triangle is inserted into every bin that it overlaps. [TODO] currently each triangle is inserted into every bin that it's bounding box overlaps. Need conservative rasterization to improve this. Can implement by testing each bin bbox for intersection w/ triangle Inheritance Object TriangleBinsGrid2d Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TriangleBinsGrid2d Constructors TriangleBinsGrid2d(AxisAlignedBox2d, Int32) \"invalid\" value will be returned by queries if no valid result is found (eg bounded-distance query) Declaration public TriangleBinsGrid2d(AxisAlignedBox2d bounds, int numCells) Parameters Type Name Description AxisAlignedBox2d bounds Int32 numCells Properties Bounds Declaration public AxisAlignedBox2d Bounds { get; } Property Value Type Description AxisAlignedBox2d Methods FindContainingTriangle(Vector2d, Func<Int32, Vector2d, Boolean>, Func<Int32, Boolean>) Find triangle that contains point. Not thread-safe. You provide containsF(), which does the containment check. If you provide ignoreF(), then tri is skipped if ignoreF(tid) == true Declaration public int FindContainingTriangle(Vector2d query_pt, Func<int, Vector2d, bool> containsF, Func<int, bool> ignoreF = null) Parameters Type Name Description Vector2d query_pt Func < Int32 , Vector2d , Boolean > containsF Func < Int32 , Boolean > ignoreF Returns Type Description Int32 FindTrianglesInRange(AxisAlignedBox2d, HashSet<Int32>) find all triangles that overlap range Declaration public void FindTrianglesInRange(AxisAlignedBox2d range, HashSet<int> triangles) Parameters Type Name Description AxisAlignedBox2d range HashSet < Int32 > triangles InsertTriangle(Int32, ref Vector2d, ref Vector2d, ref Vector2d) Insert triangle. This function is thread-safe, uses a SpinLock internally Declaration public void InsertTriangle(int triangle_id, ref Vector2d a, ref Vector2d b, ref Vector2d c) Parameters Type Name Description Int32 triangle_id Vector2d a Vector2d b Vector2d c InsertTriangleUnsafe(Int32, ref Vector2d, ref Vector2d, ref Vector2d) Insert triangle without locking / thread-safety Declaration public void InsertTriangleUnsafe(int triangle_id, ref Vector2d a, ref Vector2d b, ref Vector2d c) Parameters Type Name Description Int32 triangle_id Vector2d a Vector2d b Vector2d c RemoveTriangle(Int32, ref Vector2d, ref Vector2d, ref Vector2d) Remove triangle. This function is thread-safe, uses a SpinLock internally Declaration public void RemoveTriangle(int triangle_id, ref Vector2d a, ref Vector2d b, ref Vector2d c) Parameters Type Name Description Int32 triangle_id Vector2d a Vector2d b Vector2d c RemoveTriangleUnsafe(Int32, ref Vector2d, ref Vector2d, ref Vector2d) Remove triangle without locking / thread-safety Declaration public void RemoveTriangleUnsafe(int triangle_id, ref Vector2d a, ref Vector2d b, ref Vector2d c) Parameters Type Name Description Int32 triangle_id Vector2d a Vector2d b Vector2d c"
  },
  "api/g3.TriangulatedPolygonGenerator.html": {
    "href": "api/g3.TriangulatedPolygonGenerator.html",
    "title": "Class TriangulatedPolygonGenerator | ViRGIS VR GIS",
    "keywords": "Class TriangulatedPolygonGenerator Triangulate a 2D polygon-with-holes by inserting it's edges into a meshed rectangle and then removing the triangles outside the polygon. Inheritance Object MeshGenerator TriangulatedPolygonGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TriangulatedPolygonGenerator : MeshGenerator Fields FixedNormal Declaration public Vector3f FixedNormal Field Value Type Description Vector3f Polygon Declaration public GeneralPolygon2d Polygon Field Value Type Description GeneralPolygon2d Subdivisions Declaration public int Subdivisions Field Value Type Description Int32 UVMode Declaration public TrivialRectGenerator.UVModes UVMode Field Value Type Description TrivialRectGenerator.UVModes Methods ComputeResult(out MeshInsertPolygon) Actually computes the insertion. In some cases we would like more info coming back than we get by using Generate() api. Note that resulting mesh is not compacted. Declaration public DMesh3 ComputeResult(out MeshInsertPolygon insertion) Parameters Type Name Description MeshInsertPolygon insertion Returns Type Description DMesh3 Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.TrivialBox3Generator.html": {
    "href": "api/g3.TrivialBox3Generator.html",
    "title": "Class TrivialBox3Generator | ViRGIS VR GIS",
    "keywords": "Class TrivialBox3Generator Generate a minimal box Inheritance Object MeshGenerator TrivialBox3Generator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TrivialBox3Generator : MeshGenerator Fields Box Declaration public Box3d Box Field Value Type Description Box3d NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.TrivialDiscGenerator.html": {
    "href": "api/g3.TrivialDiscGenerator.html",
    "title": "Class TrivialDiscGenerator | ViRGIS VR GIS",
    "keywords": "Class TrivialDiscGenerator Inheritance Object MeshGenerator TrivialDiscGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TrivialDiscGenerator : MeshGenerator Fields EndAngleDeg Declaration public float EndAngleDeg Field Value Type Description Single Radius Declaration public float Radius Field Value Type Description Single Slices Declaration public int Slices Field Value Type Description Int32 StartAngleDeg Declaration public float StartAngleDeg Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.TrivialRectGenerator.html": {
    "href": "api/g3.TrivialRectGenerator.html",
    "title": "Class TrivialRectGenerator | ViRGIS VR GIS",
    "keywords": "Class TrivialRectGenerator Inheritance Object MeshGenerator TrivialRectGenerator GriddedRectGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TrivialRectGenerator : MeshGenerator Fields Height Declaration public float Height Field Value Type Description Single IndicesMap How to map 2D indices to 3D. Default is (x,0,z). Set this value to (1,2) if you want (x,y,0). Set values to negative to mirror on that axis. Declaration public Index2i IndicesMap Field Value Type Description Index2i Normal Declaration public Vector3f Normal Field Value Type Description Vector3f UVMode Declaration public TrivialRectGenerator.UVModes UVMode Field Value Type Description TrivialRectGenerator.UVModes Width Declaration public float Width Field Value Type Description Single Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate() make_vertex(Single, Single) Declaration protected virtual Vector3d make_vertex(float x, float y) Parameters Type Name Description Single x Single y Returns Type Description Vector3d"
  },
  "api/g3.TrivialRectGenerator.UVModes.html": {
    "href": "api/g3.TrivialRectGenerator.UVModes.html",
    "title": "Enum TrivialRectGenerator.UVModes | ViRGIS VR GIS",
    "keywords": "Enum TrivialRectGenerator.UVModes Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum UVModes Fields Name Description BottomCornerUVRectangle CenteredUVRectangle FullUVSquare"
  },
  "api/g3.TubeGenerator.html": {
    "href": "api/g3.TubeGenerator.html",
    "title": "Class TubeGenerator | ViRGIS VR GIS",
    "keywords": "Class TubeGenerator Sweep a 2D Profile Polygon along a 3D Path. Supports closed and open paths, and capping open paths. However caps are triangulated using a fan around a center vertex (which you can set using CapCenter). If Polygon is non-convex, this will have foldovers. In that case, you have to triangulate and append it yourself. If your profile curve does not contain the polygon bbox center, set OverrideCapCenter=true and set CapCenter to a suitable center point. The output normals are currently set to those for a circular profile. Call MeshNormals.QuickCompute() on the output DMesh to estimate proper vertex normals Inheritance Object MeshGenerator TubeGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class TubeGenerator : MeshGenerator Constructors TubeGenerator() Declaration public TubeGenerator() TubeGenerator(DCurve3, Polygon2d) Declaration public TubeGenerator(DCurve3 tubePath, Polygon2d tubeShape) Parameters Type Name Description DCurve3 tubePath Polygon2d tubeShape TubeGenerator(Polygon2d, Frame3f, Polygon2d, Int32) Declaration public TubeGenerator(Polygon2d tubePath, Frame3f pathPlane, Polygon2d tubeShape, int nPlaneNormal = 2) Parameters Type Name Description Polygon2d tubePath Frame3f pathPlane Polygon2d tubeShape Int32 nPlaneNormal TubeGenerator(PolyLine2d, Frame3f, Polygon2d, Int32) Declaration public TubeGenerator(PolyLine2d tubePath, Frame3f pathPlane, Polygon2d tubeShape, int nPlaneNormal = 2) Parameters Type Name Description PolyLine2d tubePath Frame3f pathPlane Polygon2d tubeShape Int32 nPlaneNormal Fields CapCenter Declaration public Vector2d CapCenter Field Value Type Description Vector2d Capped Declaration public bool Capped Field Value Type Description Boolean ClosedLoop Declaration public bool ClosedLoop Field Value Type Description Boolean endCapCenterIndex Declaration public int endCapCenterIndex Field Value Type Description Int32 Frame Declaration public Frame3f Frame Field Value Type Description Frame3f NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean OverrideCapCenter Declaration public bool OverrideCapCenter Field Value Type Description Boolean Polygon Declaration public Polygon2d Polygon Field Value Type Description Polygon2d startCapCenterIndex Declaration public int startCapCenterIndex Field Value Type Description Int32 Vertices Declaration public List<Vector3d> Vertices Field Value Type Description List < Vector3d > Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.Units.Angular.html": {
    "href": "api/g3.Units.Angular.html",
    "title": "Enum Units.Angular | ViRGIS VR GIS",
    "keywords": "Enum Units.Angular Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum Angular Fields Name Description Degrees Radians"
  },
  "api/g3.Units.html": {
    "href": "api/g3.Units.html",
    "title": "Class Units | ViRGIS VR GIS",
    "keywords": "Class Units Inheritance Object Units Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class Units Methods Convert(Units.Linear, Units.Linear) Declaration public static double Convert(Units.Linear from, Units.Linear to) Parameters Type Name Description Units.Linear from Units.Linear to Returns Type Description Double GetMetricPower(Units.Linear) Declaration public static double GetMetricPower(Units.Linear t) Parameters Type Name Description Units.Linear t Returns Type Description Double GetShortString(Units.Linear) Declaration public static string GetShortString(Units.Linear unit) Parameters Type Name Description Units.Linear unit Returns Type Description String IsMetric(Units.Linear) Declaration public static bool IsMetric(Units.Linear t) Parameters Type Name Description Units.Linear t Returns Type Description Boolean MetersTo(Units.Linear) Declaration public static double MetersTo(Units.Linear t) Parameters Type Name Description Units.Linear t Returns Type Description Double ParseLinear(String) Declaration public static Units.Linear ParseLinear(string units) Parameters Type Name Description String units Returns Type Description Units.Linear ToMeters(Units.Linear) Declaration public static double ToMeters(Units.Linear t) Parameters Type Name Description Units.Linear t Returns Type Description Double"
  },
  "api/g3.Units.Linear.html": {
    "href": "api/g3.Units.Linear.html",
    "title": "Enum Units.Linear | ViRGIS VR GIS",
    "keywords": "Enum Units.Linear Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum Linear Fields Name Description Centimeters Feet Inches Kilometers Meters Microns Miles Millimeters Nanometers UnknownUnits Yards"
  },
  "api/g3.Util.html": {
    "href": "api/g3.Util.html",
    "title": "Class Util | ViRGIS VR GIS",
    "keywords": "Class Util Inheritance Object Util Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public static class Util Fields DebugBreakOnDevAssert Declaration public static bool DebugBreakOnDevAssert Field Value Type Description Boolean Methods AppendArrays<T>(Object[]) Declaration public static T[] AppendArrays<T>(params object[] args) Parameters Type Name Description Object [] args Returns Type Description T[] Type Parameters Name Description T BufferCopy(Int32[], Int32[]) Declaration public static int[] BufferCopy(int[] from, int[] to) Parameters Type Name Description Int32 [] from Int32 [] to Returns Type Description Int32 [] BufferCopy(Single[], Single[]) Declaration public static float[] BufferCopy(float[] from, float[] to) Parameters Type Name Description Single [] from Single [] to Returns Type Description Single [] ByteArrayToStructure(Byte[], ref Object) Declaration public static void ByteArrayToStructure(byte[] bytearray, ref object obj) Parameters Type Name Description Byte [] bytearray Object obj gBreakToDebugger() Declaration public static void gBreakToDebugger() gDevAssert(Boolean, String) Declaration public static void gDevAssert(bool bValue, string message = \"gDevAssert\") Parameters Type Name Description Boolean bValue String message IsASCIIControlChar(Int32) test if character is ascii control character, which (presumably?) won't occur in unicode files? Declaration public static bool IsASCIIControlChar(int ch) Parameters Type Name Description Int32 ch Returns Type Description Boolean IsBinaryFile(String, Int32) check if file contains bytes that correspond to ascii control characters, which would not occur in a plain text file, but are likely in a binary file. (note: this is not conclusive! for example if binary file was all FF's, this would return true) Declaration public static bool IsBinaryFile(string path, int max_search_len = -1) Parameters Type Name Description String path Int32 max_search_len Returns Type Description Boolean IsBinaryStream(Stream, Int32) See IsBinaryFile() Declaration public static bool IsBinaryStream(Stream streamIn, int max_search_len = -1) Parameters Type Name Description Stream streamIn Int32 max_search_len Returns Type Description Boolean IsBitSet(Byte, Int32) Declaration public static bool IsBitSet(byte b, int pos) Parameters Type Name Description Byte b Int32 pos Returns Type Description Boolean IsBitSet(Int32, Int32) Declaration public static bool IsBitSet(int n, int pos) Parameters Type Name Description Int32 n Int32 pos Returns Type Description Boolean IsRunningOnMono() Declaration public static bool IsRunningOnMono() Returns Type Description Boolean IsTextString(Byte[]) Declaration public static bool IsTextString(byte[] array) Parameters Type Name Description Byte [] array Returns Type Description Boolean MakeFloatFormatString(Int32, Int32) Declaration public static string MakeFloatFormatString(int i, int nPrecision) Parameters Type Name Description Int32 i Int32 nPrecision Returns Type Description String MakeVec3FormatString(Int32, Int32, Int32, Int32) Declaration public static string MakeVec3FormatString(int i0, int i1, int i2, int nPrecision) Parameters Type Name Description Int32 i0 Int32 i1 Int32 i2 Int32 nPrecision Returns Type Description String ParseDouble(String, Double) Declaration public static double ParseDouble(string s, double fDefault) Parameters Type Name Description String s Double fDefault Returns Type Description Double ParseFloat(String, Single) Declaration public static float ParseFloat(string s, float fDefault) Parameters Type Name Description String s Single fDefault Returns Type Description Single ParseInt(String, Int32) Declaration public static float ParseInt(string s, int nDefault) Parameters Type Name Description String s Int32 nDefault Returns Type Description Single StructureToByteArray(Object) Declaration public static byte[] StructureToByteArray(object obj) Parameters Type Name Description Object obj Returns Type Description Byte [] ToHexString(Byte[], Boolean) Declaration public static string ToHexString(byte[] bytes, bool upperCase = false) Parameters Type Name Description Byte [] bytes Boolean upperCase Returns Type Description String ToSecMilli(TimeSpan) Declaration public static string ToSecMilli(TimeSpan t) Parameters Type Name Description TimeSpan t Returns Type Description String WriteDebugMesh(IMesh, String) Declaration public static void WriteDebugMesh(IMesh mesh, string sPath) Parameters Type Name Description IMesh mesh String sPath WriteDebugMeshAndMarkers(IMesh, List<Vector3d>, String) Declaration public static void WriteDebugMeshAndMarkers(IMesh mesh, List<Vector3d> Markers, string sPath) Parameters Type Name Description IMesh mesh List < Vector3d > Markers String sPath"
  },
  "api/g3.ValidationStatus.html": {
    "href": "api/g3.ValidationStatus.html",
    "title": "Enum ValidationStatus | ViRGIS VR GIS",
    "keywords": "Enum ValidationStatus Namespace : g3 Assembly : cs.temp.dll.dll Syntax public enum ValidationStatus Fields Name Description DuplicateTriangles IncorrectLoopOrientation NearDegenerateMeshEdges NearDenegerateInputGeometry NotATriangle NotAVertex NotBoundaryEdge NotBoundaryVertex Ok VerticesNotConnectedByEdge"
  },
  "api/g3.Vector2d.html": {
    "href": "api/g3.Vector2d.html",
    "title": "Struct Vector2d | ViRGIS VR GIS",
    "keywords": "Struct Vector2d Implements IComparable < Vector2d > IEquatable < Vector2d > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2d : IComparable<Vector2d>, IEquatable<Vector2d> Constructors Vector2d(Vector2d) Declaration public Vector2d(Vector2d copy) Parameters Type Name Description Vector2d copy Vector2d(Vector2f) Declaration public Vector2d(Vector2f copy) Parameters Type Name Description Vector2f copy Vector2d(Double) Declaration public Vector2d(double f) Parameters Type Name Description Double f Vector2d(Double, Double) Declaration public Vector2d(double x, double y) Parameters Type Name Description Double x Double y Vector2d(Double[]) Declaration public Vector2d(double[] v2) Parameters Type Name Description Double [] v2 Vector2d(Single) Declaration public Vector2d(float f) Parameters Type Name Description Single f Vector2d(Single, Single) Declaration public Vector2d(float x, float y) Parameters Type Name Description Single x Single y Vector2d(Single[]) Declaration public Vector2d(float[] v2) Parameters Type Name Description Single [] v2 Fields AxisX Declaration public static readonly Vector2d AxisX Field Value Type Description Vector2d AxisY Declaration public static readonly Vector2d AxisY Field Value Type Description Vector2d MaxValue Declaration public static readonly Vector2d MaxValue Field Value Type Description Vector2d MinValue Declaration public static readonly Vector2d MinValue Field Value Type Description Vector2d One Declaration public static readonly Vector2d One Field Value Type Description Vector2d x Declaration public double x Field Value Type Description Double y Declaration public double y Field Value Type Description Double Zero Declaration public static readonly Vector2d Zero Field Value Type Description Vector2d Properties IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public double this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Double Length Declaration public double Length { get; } Property Value Type Description Double LengthSquared Declaration public double LengthSquared { get; } Property Value Type Description Double Normalized Declaration public Vector2d Normalized { get; } Property Value Type Description Vector2d Perp returns right-perp vector, ie rotated 90 degrees to the right Declaration public Vector2d Perp { get; } Property Value Type Description Vector2d UnitPerp returns right-perp vector, ie rotated 90 degrees to the right Declaration public Vector2d UnitPerp { get; } Property Value Type Description Vector2d Methods Add(Vector2d) Declaration public void Add(Vector2d o) Parameters Type Name Description Vector2d o AngleD(Vector2d) Declaration public double AngleD(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double AngleD(Vector2d, Vector2d) Declaration public static double AngleD(Vector2d v1, Vector2d v2) Parameters Type Name Description Vector2d v1 Vector2d v2 Returns Type Description Double AngleR(Vector2d) Declaration public double AngleR(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double AngleR(Vector2d, Vector2d) Declaration public static double AngleR(Vector2d v1, Vector2d v2) Parameters Type Name Description Vector2d v1 Vector2d v2 Returns Type Description Double CompareTo(Vector2d) Declaration public int CompareTo(Vector2d other) Parameters Type Name Description Vector2d other Returns Type Description Int32 Cross(Vector2d) returns cross-product of this vector with v2 (same as DotPerp) Declaration public double Cross(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double Distance(Vector2d) Declaration public double Distance(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double DistanceSquared(Vector2d) Declaration public double DistanceSquared(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double Dot(Vector2d) Declaration public double Dot(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double DotPerp(Vector2d) returns dot-product of this vector with v2.Perp Declaration public double DotPerp(Vector2d v2) Parameters Type Name Description Vector2d v2 Returns Type Description Double EpsilonEqual(Vector2d, Double) Declaration public bool EpsilonEqual(Vector2d v2, double epsilon) Parameters Type Name Description Vector2d v2 Double epsilon Returns Type Description Boolean Equals(Vector2d) Declaration public bool Equals(Vector2d other) Parameters Type Name Description Vector2d other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) FromAngleDeg(Double) Declaration public static Vector2d FromAngleDeg(double angle) Parameters Type Name Description Double angle Returns Type Description Vector2d FromAngleRad(Double) Declaration public static Vector2d FromAngleRad(double angle) Parameters Type Name Description Double angle Returns Type Description Vector2d GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() GetInformation(IList<Vector2d>, Double, out Vector2d.Information) Declaration public static void GetInformation(IList<Vector2d> points, double epsilon, out Vector2d.Information info) Parameters Type Name Description IList < Vector2d > points Double epsilon Vector2d.Information info Lerp(Vector2d, Vector2d, Double) Declaration public static Vector2d Lerp(Vector2d a, Vector2d b, double t) Parameters Type Name Description Vector2d a Vector2d b Double t Returns Type Description Vector2d Lerp(ref Vector2d, ref Vector2d, Double) Declaration public static Vector2d Lerp(ref Vector2d a, ref Vector2d b, double t) Parameters Type Name Description Vector2d a Vector2d b Double t Returns Type Description Vector2d Normalize(Double) Declaration public double Normalize(double epsilon = 2.2204460492503131E-16) Parameters Type Name Description Double epsilon Returns Type Description Double Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals Set(Vector2d) Declaration public void Set(Vector2d o) Parameters Type Name Description Vector2d o Set(Double, Double) Declaration public void Set(double fX, double fY) Parameters Type Name Description Double fX Double fY Subtract(Vector2d) Declaration public void Subtract(Vector2d o) Parameters Type Name Description Vector2d o ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Vector2d, Vector2d) Declaration public static Vector2d operator +(Vector2d a, Vector2d o) Parameters Type Name Description Vector2d a Vector2d o Returns Type Description Vector2d Addition(Vector2d, Double) Declaration public static Vector2d operator +(Vector2d a, double f) Parameters Type Name Description Vector2d a Double f Returns Type Description Vector2d Division(Vector2d, Vector2d) Declaration public static Vector2d operator /(Vector2d a, Vector2d b) Parameters Type Name Description Vector2d a Vector2d b Returns Type Description Vector2d Division(Vector2d, Double) Declaration public static Vector2d operator /(Vector2d v, double f) Parameters Type Name Description Vector2d v Double f Returns Type Description Vector2d Division(Double, Vector2d) Declaration public static Vector2d operator /(double f, Vector2d v) Parameters Type Name Description Double f Vector2d v Returns Type Description Vector2d Equality(Vector2d, Vector2d) Declaration public static bool operator ==(Vector2d a, Vector2d b) Parameters Type Name Description Vector2d a Vector2d b Returns Type Description Boolean Explicit(Vector2d to Vector2f) Declaration public static explicit operator Vector2f(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Vector2f Implicit(Vector2f to Vector2d) Declaration public static implicit operator Vector2d(Vector2f v) Parameters Type Name Description Vector2f v Returns Type Description Vector2d Inequality(Vector2d, Vector2d) Declaration public static bool operator !=(Vector2d a, Vector2d b) Parameters Type Name Description Vector2d a Vector2d b Returns Type Description Boolean Multiply(Vector2d, Vector2d) Declaration public static Vector2d operator *(Vector2d a, Vector2d b) Parameters Type Name Description Vector2d a Vector2d b Returns Type Description Vector2d Multiply(Vector2d, Double) Declaration public static Vector2d operator *(Vector2d a, double f) Parameters Type Name Description Vector2d a Double f Returns Type Description Vector2d Multiply(Double, Vector2d) Declaration public static Vector2d operator *(double f, Vector2d a) Parameters Type Name Description Double f Vector2d a Returns Type Description Vector2d Subtraction(Vector2d, Vector2d) Declaration public static Vector2d operator -(Vector2d a, Vector2d o) Parameters Type Name Description Vector2d a Vector2d o Returns Type Description Vector2d Subtraction(Vector2d, Double) Declaration public static Vector2d operator -(Vector2d a, double f) Parameters Type Name Description Vector2d a Double f Returns Type Description Vector2d UnaryNegation(Vector2d) Declaration public static Vector2d operator -(Vector2d v) Parameters Type Name Description Vector2d v Returns Type Description Vector2d Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector2d.Information.html": {
    "href": "api/g3.Vector2d.Information.html",
    "title": "Struct Vector2d.Information | ViRGIS VR GIS",
    "keywords": "Struct Vector2d.Information Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Information Fields mDimension Declaration public int mDimension Field Value Type Description Int32 mDirection0 Declaration public Vector2d mDirection0 Field Value Type Description Vector2d mDirection1 Declaration public Vector2d mDirection1 Field Value Type Description Vector2d mExtreme Declaration public Vector3i mExtreme Field Value Type Description Vector3i mExtremeCCW Declaration public bool mExtremeCCW Field Value Type Description Boolean mMax Declaration public Vector2d mMax Field Value Type Description Vector2d mMaxRange Declaration public double mMaxRange Field Value Type Description Double mMin Declaration public Vector2d mMin Field Value Type Description Vector2d mOrigin Declaration public Vector2d mOrigin Field Value Type Description Vector2d"
  },
  "api/g3.Vector2dTuple2.html": {
    "href": "api/g3.Vector2dTuple2.html",
    "title": "Struct Vector2dTuple2 | ViRGIS VR GIS",
    "keywords": "Struct Vector2dTuple2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2dTuple2 Constructors Vector2dTuple2(Vector2d, Vector2d) Declaration public Vector2dTuple2(Vector2d v0, Vector2d v1) Parameters Type Name Description Vector2d v0 Vector2d v1 Fields V0 Declaration public Vector2d V0 Field Value Type Description Vector2d V1 Declaration public Vector2d V1 Field Value Type Description Vector2d Properties Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d"
  },
  "api/g3.Vector2dTuple3.html": {
    "href": "api/g3.Vector2dTuple3.html",
    "title": "Struct Vector2dTuple3 | ViRGIS VR GIS",
    "keywords": "Struct Vector2dTuple3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2dTuple3 Constructors Vector2dTuple3(Vector2d, Vector2d, Vector2d) Declaration public Vector2dTuple3(Vector2d v0, Vector2d v1, Vector2d v2) Parameters Type Name Description Vector2d v0 Vector2d v1 Vector2d v2 Fields V0 Declaration public Vector2d V0 Field Value Type Description Vector2d V1 Declaration public Vector2d V1 Field Value Type Description Vector2d V2 Declaration public Vector2d V2 Field Value Type Description Vector2d Properties Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d"
  },
  "api/g3.Vector2dTuple4.html": {
    "href": "api/g3.Vector2dTuple4.html",
    "title": "Struct Vector2dTuple4 | ViRGIS VR GIS",
    "keywords": "Struct Vector2dTuple4 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2dTuple4 Constructors Vector2dTuple4(Vector2d, Vector2d, Vector2d, Vector2d) Declaration public Vector2dTuple4(Vector2d v0, Vector2d v1, Vector2d v2, Vector2d v3) Parameters Type Name Description Vector2d v0 Vector2d v1 Vector2d v2 Vector2d v3 Fields V0 Declaration public Vector2d V0 Field Value Type Description Vector2d V1 Declaration public Vector2d V1 Field Value Type Description Vector2d V2 Declaration public Vector2d V2 Field Value Type Description Vector2d V3 Declaration public Vector2d V3 Field Value Type Description Vector2d Properties Item[Int32] Declaration public Vector2d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector2d"
  },
  "api/g3.Vector2f.html": {
    "href": "api/g3.Vector2f.html",
    "title": "Struct Vector2f | ViRGIS VR GIS",
    "keywords": "Struct Vector2f Implements IComparable < Vector2f > IEquatable < Vector2f > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2f : IComparable<Vector2f>, IEquatable<Vector2f> Constructors Vector2f(Vector2d) Declaration public Vector2f(Vector2d copy) Parameters Type Name Description Vector2d copy Vector2f(Vector2f) Declaration public Vector2f(Vector2f copy) Parameters Type Name Description Vector2f copy Vector2f(Double) Declaration public Vector2f(double f) Parameters Type Name Description Double f Vector2f(Double, Double) Declaration public Vector2f(double x, double y) Parameters Type Name Description Double x Double y Vector2f(Double[]) Declaration public Vector2f(double[] v2) Parameters Type Name Description Double [] v2 Vector2f(Single) Declaration public Vector2f(float f) Parameters Type Name Description Single f Vector2f(Single, Single) Declaration public Vector2f(float x, float y) Parameters Type Name Description Single x Single y Vector2f(Single[]) Declaration public Vector2f(float[] v2) Parameters Type Name Description Single [] v2 Fields AxisX Declaration public static readonly Vector2f AxisX Field Value Type Description Vector2f AxisY Declaration public static readonly Vector2f AxisY Field Value Type Description Vector2f MaxValue Declaration public static readonly Vector2f MaxValue Field Value Type Description Vector2f MinValue Declaration public static readonly Vector2f MinValue Field Value Type Description Vector2f One Declaration public static readonly Vector2f One Field Value Type Description Vector2f x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single Zero Declaration public static readonly Vector2f Zero Field Value Type Description Vector2f Properties IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public float this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Single Length Declaration public float Length { get; } Property Value Type Description Single LengthSquared Declaration public float LengthSquared { get; } Property Value Type Description Single Normalized Declaration public Vector2f Normalized { get; } Property Value Type Description Vector2f Perp Declaration public Vector2f Perp { get; } Property Value Type Description Vector2f UnitPerp Declaration public Vector2f UnitPerp { get; } Property Value Type Description Vector2f Methods Add(Vector2f) Declaration public void Add(Vector2f o) Parameters Type Name Description Vector2f o AngleD(Vector2f) Declaration public float AngleD(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single AngleD(Vector2f, Vector2f) Declaration public static float AngleD(Vector2f v1, Vector2f v2) Parameters Type Name Description Vector2f v1 Vector2f v2 Returns Type Description Single AngleR(Vector2f) Declaration public float AngleR(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single AngleR(Vector2f, Vector2f) Declaration public static float AngleR(Vector2f v1, Vector2f v2) Parameters Type Name Description Vector2f v1 Vector2f v2 Returns Type Description Single CompareTo(Vector2f) Declaration public int CompareTo(Vector2f other) Parameters Type Name Description Vector2f other Returns Type Description Int32 Cross(Vector2f) Declaration public float Cross(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single Distance(Vector2f) Declaration public float Distance(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single DistanceSquared(Vector2f) Declaration public float DistanceSquared(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single Dot(Vector2f) Declaration public float Dot(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single DotPerp(Vector2f) Declaration public float DotPerp(Vector2f v2) Parameters Type Name Description Vector2f v2 Returns Type Description Single EpsilonEqual(Vector2f, Single) Declaration public bool EpsilonEqual(Vector2f v2, float epsilon) Parameters Type Name Description Vector2f v2 Single epsilon Returns Type Description Boolean Equals(Vector2f) Declaration public bool Equals(Vector2f other) Parameters Type Name Description Vector2f other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Lerp(Vector2f, Vector2f, Single) Declaration public static Vector2f Lerp(Vector2f a, Vector2f b, float t) Parameters Type Name Description Vector2f a Vector2f b Single t Returns Type Description Vector2f Lerp(ref Vector2f, ref Vector2f, Single) Declaration public static Vector2f Lerp(ref Vector2f a, ref Vector2f b, float t) Parameters Type Name Description Vector2f a Vector2f b Single t Returns Type Description Vector2f Normalize(Single) Declaration public float Normalize(float epsilon = 1.1920929E-07F) Parameters Type Name Description Single epsilon Returns Type Description Single Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals Set(Vector2f) Declaration public void Set(Vector2f o) Parameters Type Name Description Vector2f o Set(Single, Single) Declaration public void Set(float fX, float fY) Parameters Type Name Description Single fX Single fY Subtract(Vector2f) Declaration public void Subtract(Vector2f o) Parameters Type Name Description Vector2f o ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Vector2f, Vector2f) Declaration public static Vector2f operator +(Vector2f a, Vector2f o) Parameters Type Name Description Vector2f a Vector2f o Returns Type Description Vector2f Addition(Vector2f, Single) Declaration public static Vector2f operator +(Vector2f a, float f) Parameters Type Name Description Vector2f a Single f Returns Type Description Vector2f Division(Vector2f, Vector2f) Declaration public static Vector2f operator /(Vector2f a, Vector2f b) Parameters Type Name Description Vector2f a Vector2f b Returns Type Description Vector2f Division(Vector2f, Single) Declaration public static Vector2f operator /(Vector2f v, float f) Parameters Type Name Description Vector2f v Single f Returns Type Description Vector2f Division(Single, Vector2f) Declaration public static Vector2f operator /(float f, Vector2f v) Parameters Type Name Description Single f Vector2f v Returns Type Description Vector2f Equality(Vector2f, Vector2f) Declaration public static bool operator ==(Vector2f a, Vector2f b) Parameters Type Name Description Vector2f a Vector2f b Returns Type Description Boolean Inequality(Vector2f, Vector2f) Declaration public static bool operator !=(Vector2f a, Vector2f b) Parameters Type Name Description Vector2f a Vector2f b Returns Type Description Boolean Multiply(Vector2f, Vector2f) Declaration public static Vector2f operator *(Vector2f a, Vector2f b) Parameters Type Name Description Vector2f a Vector2f b Returns Type Description Vector2f Multiply(Vector2f, Single) Declaration public static Vector2f operator *(Vector2f a, float f) Parameters Type Name Description Vector2f a Single f Returns Type Description Vector2f Multiply(Single, Vector2f) Declaration public static Vector2f operator *(float f, Vector2f a) Parameters Type Name Description Single f Vector2f a Returns Type Description Vector2f Subtraction(Vector2f, Vector2f) Declaration public static Vector2f operator -(Vector2f a, Vector2f o) Parameters Type Name Description Vector2f a Vector2f o Returns Type Description Vector2f Subtraction(Vector2f, Single) Declaration public static Vector2f operator -(Vector2f a, float f) Parameters Type Name Description Vector2f a Single f Returns Type Description Vector2f UnaryNegation(Vector2f) Declaration public static Vector2f operator -(Vector2f v) Parameters Type Name Description Vector2f v Returns Type Description Vector2f Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector2i.html": {
    "href": "api/g3.Vector2i.html",
    "title": "Struct Vector2i | ViRGIS VR GIS",
    "keywords": "Struct Vector2i Implements IComparable < Vector2i > IEquatable < Vector2i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2i : IComparable<Vector2i>, IEquatable<Vector2i> Constructors Vector2i(Int32) Declaration public Vector2i(int f) Parameters Type Name Description Int32 f Vector2i(Int32, Int32) Declaration public Vector2i(int x, int y) Parameters Type Name Description Int32 x Int32 y Vector2i(Int32[]) Declaration public Vector2i(int[] v2) Parameters Type Name Description Int32 [] v2 Fields AxisX Declaration public static readonly Vector2i AxisX Field Value Type Description Vector2i AxisY Declaration public static readonly Vector2i AxisY Field Value Type Description Vector2i One Declaration public static readonly Vector2i One Field Value Type Description Vector2i x Declaration public int x Field Value Type Description Int32 y Declaration public int y Field Value Type Description Int32 Zero Declaration public static readonly Vector2i Zero Field Value Type Description Vector2i Properties array Declaration public int[] array { get; } Property Value Type Description Int32 [] Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods Add(Int32) Declaration public void Add(int s) Parameters Type Name Description Int32 s CompareTo(Vector2i) Declaration public int CompareTo(Vector2i other) Parameters Type Name Description Vector2i other Returns Type Description Int32 Equals(Vector2i) Declaration public bool Equals(Vector2i other) Parameters Type Name Description Vector2i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Vector2i, Vector2i) Declaration public static Vector2i operator +(Vector2i v0, Vector2i v1) Parameters Type Name Description Vector2i v0 Vector2i v1 Returns Type Description Vector2i Addition(Vector2i, Int32) Declaration public static Vector2i operator +(Vector2i v0, int f) Parameters Type Name Description Vector2i v0 Int32 f Returns Type Description Vector2i Division(Vector2i, Vector2i) Declaration public static Vector2i operator /(Vector2i a, Vector2i b) Parameters Type Name Description Vector2i a Vector2i b Returns Type Description Vector2i Division(Vector2i, Int32) Declaration public static Vector2i operator /(Vector2i v, int f) Parameters Type Name Description Vector2i v Int32 f Returns Type Description Vector2i Division(Int32, Vector2i) Declaration public static Vector2i operator /(int f, Vector2i v) Parameters Type Name Description Int32 f Vector2i v Returns Type Description Vector2i Equality(Vector2i, Vector2i) Declaration public static bool operator ==(Vector2i a, Vector2i b) Parameters Type Name Description Vector2i a Vector2i b Returns Type Description Boolean Inequality(Vector2i, Vector2i) Declaration public static bool operator !=(Vector2i a, Vector2i b) Parameters Type Name Description Vector2i a Vector2i b Returns Type Description Boolean Multiply(Vector2i, Vector2i) Declaration public static Vector2i operator *(Vector2i a, Vector2i b) Parameters Type Name Description Vector2i a Vector2i b Returns Type Description Vector2i Multiply(Vector2i, Int32) Declaration public static Vector2i operator *(Vector2i v, int f) Parameters Type Name Description Vector2i v Int32 f Returns Type Description Vector2i Multiply(Int32, Vector2i) Declaration public static Vector2i operator *(int f, Vector2i v) Parameters Type Name Description Int32 f Vector2i v Returns Type Description Vector2i Subtraction(Vector2i, Vector2i) Declaration public static Vector2i operator -(Vector2i v0, Vector2i v1) Parameters Type Name Description Vector2i v0 Vector2i v1 Returns Type Description Vector2i Subtraction(Vector2i, Int32) Declaration public static Vector2i operator -(Vector2i v0, int f) Parameters Type Name Description Vector2i v0 Int32 f Returns Type Description Vector2i UnaryNegation(Vector2i) Declaration public static Vector2i operator -(Vector2i v) Parameters Type Name Description Vector2i v Returns Type Description Vector2i Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector2l.html": {
    "href": "api/g3.Vector2l.html",
    "title": "Struct Vector2l | ViRGIS VR GIS",
    "keywords": "Struct Vector2l Implements IComparable < Vector2l > IEquatable < Vector2l > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector2l : IComparable<Vector2l>, IEquatable<Vector2l> Constructors Vector2l(Int64) Declaration public Vector2l(long f) Parameters Type Name Description Int64 f Vector2l(Int64, Int64) Declaration public Vector2l(long x, long y) Parameters Type Name Description Int64 x Int64 y Vector2l(Int64[]) Declaration public Vector2l(long[] v2) Parameters Type Name Description Int64 [] v2 Fields AxisX Declaration public static readonly Vector2l AxisX Field Value Type Description Vector2l AxisY Declaration public static readonly Vector2l AxisY Field Value Type Description Vector2l One Declaration public static readonly Vector2l One Field Value Type Description Vector2l x Declaration public long x Field Value Type Description Int64 y Declaration public long y Field Value Type Description Int64 Zero Declaration public static readonly Vector2l Zero Field Value Type Description Vector2l Properties array Declaration public long[] array { get; } Property Value Type Description Int64 [] Item[Int64] Declaration public long this[long key] { get; set; } Parameters Type Name Description Int64 key Property Value Type Description Int64 Methods Add(Int64) Declaration public void Add(long s) Parameters Type Name Description Int64 s CompareTo(Vector2l) Declaration public int CompareTo(Vector2l other) Parameters Type Name Description Vector2l other Returns Type Description Int32 Equals(Vector2l) Declaration public bool Equals(Vector2l other) Parameters Type Name Description Vector2l other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Vector2l, Vector2l) Declaration public static Vector2l operator +(Vector2l v0, Vector2l v1) Parameters Type Name Description Vector2l v0 Vector2l v1 Returns Type Description Vector2l Addition(Vector2l, Int64) Declaration public static Vector2l operator +(Vector2l v0, long f) Parameters Type Name Description Vector2l v0 Int64 f Returns Type Description Vector2l Division(Vector2l, Vector2l) Declaration public static Vector2l operator /(Vector2l a, Vector2l b) Parameters Type Name Description Vector2l a Vector2l b Returns Type Description Vector2l Division(Vector2l, Int64) Declaration public static Vector2l operator /(Vector2l v, long f) Parameters Type Name Description Vector2l v Int64 f Returns Type Description Vector2l Division(Int64, Vector2l) Declaration public static Vector2l operator /(long f, Vector2l v) Parameters Type Name Description Int64 f Vector2l v Returns Type Description Vector2l Equality(Vector2l, Vector2l) Declaration public static bool operator ==(Vector2l a, Vector2l b) Parameters Type Name Description Vector2l a Vector2l b Returns Type Description Boolean Inequality(Vector2l, Vector2l) Declaration public static bool operator !=(Vector2l a, Vector2l b) Parameters Type Name Description Vector2l a Vector2l b Returns Type Description Boolean Multiply(Vector2l, Vector2l) Declaration public static Vector2l operator *(Vector2l a, Vector2l b) Parameters Type Name Description Vector2l a Vector2l b Returns Type Description Vector2l Multiply(Vector2l, Int64) Declaration public static Vector2l operator *(Vector2l v, long f) Parameters Type Name Description Vector2l v Int64 f Returns Type Description Vector2l Multiply(Int64, Vector2l) Declaration public static Vector2l operator *(long f, Vector2l v) Parameters Type Name Description Int64 f Vector2l v Returns Type Description Vector2l Subtraction(Vector2l, Vector2l) Declaration public static Vector2l operator -(Vector2l v0, Vector2l v1) Parameters Type Name Description Vector2l v0 Vector2l v1 Returns Type Description Vector2l Subtraction(Vector2l, Int64) Declaration public static Vector2l operator -(Vector2l v0, long f) Parameters Type Name Description Vector2l v0 Int64 f Returns Type Description Vector2l UnaryNegation(Vector2l) Declaration public static Vector2l operator -(Vector2l v) Parameters Type Name Description Vector2l v Returns Type Description Vector2l Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector3d.html": {
    "href": "api/g3.Vector3d.html",
    "title": "Struct Vector3d | ViRGIS VR GIS",
    "keywords": "Struct Vector3d Implements IComparable < Vector3d > IEquatable < Vector3d > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3d : IComparable<Vector3d>, IEquatable<Vector3d> Constructors Vector3d(Vector3d) Declaration public Vector3d(Vector3d copy) Parameters Type Name Description Vector3d copy Vector3d(Vector3f) Declaration public Vector3d(Vector3f copy) Parameters Type Name Description Vector3f copy Vector3d(Double) Declaration public Vector3d(double f) Parameters Type Name Description Double f Vector3d(Double, Double, Double) Declaration public Vector3d(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Vector3d(Double[]) Declaration public Vector3d(double[] v2) Parameters Type Name Description Double [] v2 Fields AxisX Declaration public static readonly Vector3d AxisX Field Value Type Description Vector3d AxisY Declaration public static readonly Vector3d AxisY Field Value Type Description Vector3d AxisZ Declaration public static readonly Vector3d AxisZ Field Value Type Description Vector3d MaxValue Declaration public static readonly Vector3d MaxValue Field Value Type Description Vector3d MinValue Declaration public static readonly Vector3d MinValue Field Value Type Description Vector3d One Declaration public static readonly Vector3d One Field Value Type Description Vector3d x Declaration public double x Field Value Type Description Double y Declaration public double y Field Value Type Description Double z Declaration public double z Field Value Type Description Double Zero Declaration public static readonly Vector3d Zero Field Value Type Description Vector3d Properties Abs Declaration public Vector3d Abs { get; } Property Value Type Description Vector3d IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public double this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Double Length Declaration public double Length { get; } Property Value Type Description Double LengthL1 Declaration public double LengthL1 { get; } Property Value Type Description Double LengthSquared Declaration public double LengthSquared { get; } Property Value Type Description Double Max Declaration public double Max { get; } Property Value Type Description Double MaxAbs Declaration public double MaxAbs { get; } Property Value Type Description Double Min Declaration public double Min { get; } Property Value Type Description Double MinAbs Declaration public double MinAbs { get; } Property Value Type Description Double Normalized Declaration public Vector3d Normalized { get; } Property Value Type Description Vector3d xy Declaration public Vector2d xy { get; set; } Property Value Type Description Vector2d xz Declaration public Vector2d xz { get; set; } Property Value Type Description Vector2d yz Declaration public Vector2d yz { get; set; } Property Value Type Description Vector2d Methods Add(Vector3d) Declaration public void Add(Vector3d o) Parameters Type Name Description Vector3d o AngleD(Vector3d) Declaration public double AngleD(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double AngleD(Vector3d, Vector3d) Declaration public static double AngleD(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Double AngleR(Vector3d) Declaration public double AngleR(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double AngleR(Vector3d, Vector3d) Declaration public static double AngleR(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Double CompareTo(Vector3d) Declaration public int CompareTo(Vector3d other) Parameters Type Name Description Vector3d other Returns Type Description Int32 ComputeOrthogonalComplement(Int32, Vector3d, ref Vector3d, ref Vector3d) this function is ported from GTEngine. Compute a right-handed orthonormal basis for the orthogonal complement of the input vectors. The function returns the smallest length of the unnormalized vectors computed during the process. If this value is nearly zero, it is possible that the inputs are linearly dependent (within numerical round-off errors). On input, numInputs must be 1 or 2 and v0 through v(numInputs-1) must be initialized. On output, the vectors v0 through v2 form an orthonormal set. Declaration public static double ComputeOrthogonalComplement(int numInputs, Vector3d v0, ref Vector3d v1, ref Vector3d v2) Parameters Type Name Description Int32 numInputs Vector3d v0 Vector3d v1 Vector3d v2 Returns Type Description Double Cross(Vector3d) Declaration public Vector3d Cross(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Vector3d Cross(Vector3d, Vector3d) Declaration public static Vector3d Cross(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Vector3d Cross(ref Vector3d) Declaration public Vector3d Cross(ref Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Vector3d Distance(Vector3d) Declaration public double Distance(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double Distance(ref Vector3d) Declaration public double Distance(ref Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double DistanceSquared(Vector3d) Declaration public double DistanceSquared(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double DistanceSquared(ref Vector3d) Declaration public double DistanceSquared(ref Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double Dot(Vector3d) Declaration public double Dot(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double Dot(Vector3d, Vector3d) Declaration public static double Dot(Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v1 Vector3d v2 Returns Type Description Double Dot(ref Vector3d) Declaration public double Dot(ref Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Double EpsilonEqual(Vector3d, Double) Declaration public bool EpsilonEqual(Vector3d v2, double epsilon) Parameters Type Name Description Vector3d v2 Double epsilon Returns Type Description Boolean Equals(Vector3d) Declaration public bool Equals(Vector3d other) Parameters Type Name Description Vector3d other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GenerateComplementBasis(ref Vector3d, ref Vector3d, Vector3d) Input W must be a unit-length vector. The output vectors {U,V} are unit length and mutually perpendicular, and {U,V,W} is an orthonormal basis. ported from WildMagic5 Declaration public static void GenerateComplementBasis(ref Vector3d u, ref Vector3d v, Vector3d w) Parameters Type Name Description Vector3d u Vector3d v Vector3d w GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Lerp(Vector3d, Vector3d, Double) Declaration public static Vector3d Lerp(Vector3d a, Vector3d b, double t) Parameters Type Name Description Vector3d a Vector3d b Double t Returns Type Description Vector3d Lerp(ref Vector3d, ref Vector3d, Double) Declaration public static Vector3d Lerp(ref Vector3d a, ref Vector3d b, double t) Parameters Type Name Description Vector3d a Vector3d b Double t Returns Type Description Vector3d MakePerpVectors(ref Vector3d, out Vector3d, out Vector3d) Returns two vectors perpendicular to n, as efficiently as possible. Duff et all method, from https://graphics.pixar.com/library/OrthonormalB/paper.pdf Declaration public static void MakePerpVectors(ref Vector3d n, out Vector3d b1, out Vector3d b2) Parameters Type Name Description Vector3d n Vector3d b1 Vector3d b2 Normalize(Double) Declaration public double Normalize(double epsilon = 2.2204460492503131E-16) Parameters Type Name Description Double epsilon Returns Type Description Double Orthonormalize(ref Vector3d, ref Vector3d, ref Vector3d) Gram-Schmidt orthonormalization of the input vectors. [RMS] this is from WildMagic5, but I added returning the minLength value from GTEngine, because I use this in place of GTEngine's Orthonormalize in ComputeOrthogonalComplement below Declaration public static double Orthonormalize(ref Vector3d u, ref Vector3d v, ref Vector3d w) Parameters Type Name Description Vector3d u Vector3d v Vector3d w Returns Type Description Double Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals Set(Vector3d) Declaration public void Set(Vector3d o) Parameters Type Name Description Vector3d o Set(Double, Double, Double) Declaration public void Set(double fX, double fY, double fZ) Parameters Type Name Description Double fX Double fY Double fZ Subtract(Vector3d) Declaration public void Subtract(Vector3d o) Parameters Type Name Description Vector3d o ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String UnitCross(Vector3d) Declaration public Vector3d UnitCross(Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Vector3d UnitCross(ref Vector3d) Declaration public Vector3d UnitCross(ref Vector3d v2) Parameters Type Name Description Vector3d v2 Returns Type Description Vector3d Operators Addition(Vector3d, Vector3d) Declaration public static Vector3d operator +(Vector3d v0, Vector3d v1) Parameters Type Name Description Vector3d v0 Vector3d v1 Returns Type Description Vector3d Addition(Vector3d, Double) Declaration public static Vector3d operator +(Vector3d v0, double f) Parameters Type Name Description Vector3d v0 Double f Returns Type Description Vector3d Division(Vector3d, Vector3d) Declaration public static Vector3d operator /(Vector3d a, Vector3d b) Parameters Type Name Description Vector3d a Vector3d b Returns Type Description Vector3d Division(Vector3d, Double) Declaration public static Vector3d operator /(Vector3d v, double f) Parameters Type Name Description Vector3d v Double f Returns Type Description Vector3d Division(Double, Vector3d) Declaration public static Vector3d operator /(double f, Vector3d v) Parameters Type Name Description Double f Vector3d v Returns Type Description Vector3d Equality(Vector3d, Vector3d) Declaration public static bool operator ==(Vector3d a, Vector3d b) Parameters Type Name Description Vector3d a Vector3d b Returns Type Description Boolean Explicit(Vector3d to Vector3f) Declaration public static explicit operator Vector3f(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3f Implicit(Vector3f to Vector3d) Declaration public static implicit operator Vector3d(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3d Inequality(Vector3d, Vector3d) Declaration public static bool operator !=(Vector3d a, Vector3d b) Parameters Type Name Description Vector3d a Vector3d b Returns Type Description Boolean Multiply(Vector3d, Vector3d) Declaration public static Vector3d operator *(Vector3d a, Vector3d b) Parameters Type Name Description Vector3d a Vector3d b Returns Type Description Vector3d Multiply(Vector3d, Double) Declaration public static Vector3d operator *(Vector3d v, double f) Parameters Type Name Description Vector3d v Double f Returns Type Description Vector3d Multiply(Double, Vector3d) Declaration public static Vector3d operator *(double f, Vector3d v) Parameters Type Name Description Double f Vector3d v Returns Type Description Vector3d Subtraction(Vector3d, Vector3d) Declaration public static Vector3d operator -(Vector3d v0, Vector3d v1) Parameters Type Name Description Vector3d v0 Vector3d v1 Returns Type Description Vector3d Subtraction(Vector3d, Double) Declaration public static Vector3d operator -(Vector3d v0, double f) Parameters Type Name Description Vector3d v0 Double f Returns Type Description Vector3d UnaryNegation(Vector3d) Declaration public static Vector3d operator -(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3d Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector3dTuple2.html": {
    "href": "api/g3.Vector3dTuple2.html",
    "title": "Struct Vector3dTuple2 | ViRGIS VR GIS",
    "keywords": "Struct Vector3dTuple2 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3dTuple2 Constructors Vector3dTuple2(Vector3d, Vector3d) Declaration public Vector3dTuple2(Vector3d v0, Vector3d v1) Parameters Type Name Description Vector3d v0 Vector3d v1 Fields V0 Declaration public Vector3d V0 Field Value Type Description Vector3d V1 Declaration public Vector3d V1 Field Value Type Description Vector3d Properties Item[Int32] Declaration public Vector3d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3d"
  },
  "api/g3.Vector3dTuple3.html": {
    "href": "api/g3.Vector3dTuple3.html",
    "title": "Struct Vector3dTuple3 | ViRGIS VR GIS",
    "keywords": "Struct Vector3dTuple3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3dTuple3 Constructors Vector3dTuple3(Vector3d, Vector3d, Vector3d) Declaration public Vector3dTuple3(Vector3d v0, Vector3d v1, Vector3d v2) Parameters Type Name Description Vector3d v0 Vector3d v1 Vector3d v2 Fields V0 Declaration public Vector3d V0 Field Value Type Description Vector3d V1 Declaration public Vector3d V1 Field Value Type Description Vector3d V2 Declaration public Vector3d V2 Field Value Type Description Vector3d Properties Item[Int32] Declaration public Vector3d this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3d"
  },
  "api/g3.Vector3f.html": {
    "href": "api/g3.Vector3f.html",
    "title": "Struct Vector3f | ViRGIS VR GIS",
    "keywords": "Struct Vector3f Implements IComparable < Vector3f > IEquatable < Vector3f > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3f : IComparable<Vector3f>, IEquatable<Vector3f> Constructors Vector3f(Vector3d) Declaration public Vector3f(Vector3d copy) Parameters Type Name Description Vector3d copy Vector3f(Vector3f) Declaration public Vector3f(Vector3f copy) Parameters Type Name Description Vector3f copy Vector3f(Double) Declaration public Vector3f(double f) Parameters Type Name Description Double f Vector3f(Double, Double, Double) Declaration public Vector3f(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Vector3f(Double[]) Declaration public Vector3f(double[] v2) Parameters Type Name Description Double [] v2 Vector3f(Single) Declaration public Vector3f(float f) Parameters Type Name Description Single f Vector3f(Single, Single, Single) Declaration public Vector3f(float x, float y, float z) Parameters Type Name Description Single x Single y Single z Vector3f(Single[]) Declaration public Vector3f(float[] v2) Parameters Type Name Description Single [] v2 Fields AxisX Declaration public static readonly Vector3f AxisX Field Value Type Description Vector3f AxisY Declaration public static readonly Vector3f AxisY Field Value Type Description Vector3f AxisZ Declaration public static readonly Vector3f AxisZ Field Value Type Description Vector3f Invalid Declaration public static readonly Vector3f Invalid Field Value Type Description Vector3f MaxValue Declaration public static readonly Vector3f MaxValue Field Value Type Description Vector3f MinValue Declaration public static readonly Vector3f MinValue Field Value Type Description Vector3f One Declaration public static readonly Vector3f One Field Value Type Description Vector3f OneNormalized Declaration public static readonly Vector3f OneNormalized Field Value Type Description Vector3f x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single Zero Declaration public static readonly Vector3f Zero Field Value Type Description Vector3f Properties IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public float this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Single Length Declaration public float Length { get; } Property Value Type Description Single LengthL1 Declaration public float LengthL1 { get; } Property Value Type Description Single LengthSquared Declaration public float LengthSquared { get; } Property Value Type Description Single Max Declaration public float Max { get; } Property Value Type Description Single MaxAbs Declaration public float MaxAbs { get; } Property Value Type Description Single Min Declaration public float Min { get; } Property Value Type Description Single MinAbs Declaration public float MinAbs { get; } Property Value Type Description Single Normalized Declaration public Vector3f Normalized { get; } Property Value Type Description Vector3f xy Declaration public Vector2f xy { get; set; } Property Value Type Description Vector2f xz Declaration public Vector2f xz { get; set; } Property Value Type Description Vector2f yz Declaration public Vector2f yz { get; set; } Property Value Type Description Vector2f Methods Add(Vector3f) Declaration public void Add(Vector3f o) Parameters Type Name Description Vector3f o AngleD(Vector3f) Declaration public float AngleD(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Single AngleD(Vector3f, Vector3f) Declaration public static float AngleD(Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v1 Vector3f v2 Returns Type Description Single AngleR(Vector3f) Declaration public float AngleR(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Single AngleR(Vector3f, Vector3f) Declaration public static float AngleR(Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v1 Vector3f v2 Returns Type Description Single CompareTo(Vector3f) Declaration public int CompareTo(Vector3f other) Parameters Type Name Description Vector3f other Returns Type Description Int32 Cross(Vector3f) Declaration public Vector3f Cross(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Vector3f Cross(Vector3f, Vector3f) Declaration public static Vector3f Cross(Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v1 Vector3f v2 Returns Type Description Vector3f Distance(Vector3f) Declaration public float Distance(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Single DistanceSquared(Vector3f) Declaration public float DistanceSquared(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Single Dot(Vector3f) Declaration public float Dot(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Single Dot(Vector3f, Vector3f) Declaration public static float Dot(Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v1 Vector3f v2 Returns Type Description Single EpsilonEqual(Vector3f, Single) Declaration public bool EpsilonEqual(Vector3f v2, float epsilon) Parameters Type Name Description Vector3f v2 Single epsilon Returns Type Description Boolean Equals(Vector3f) Declaration public bool Equals(Vector3f other) Parameters Type Name Description Vector3f other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Lerp(Vector3f, Vector3f, Single) Declaration public static Vector3f Lerp(Vector3f a, Vector3f b, float t) Parameters Type Name Description Vector3f a Vector3f b Single t Returns Type Description Vector3f Normalize(Single) Declaration public float Normalize(float epsilon = 1.1920929E-07F) Parameters Type Name Description Single epsilon Returns Type Description Single Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals Set(Vector3f) Declaration public void Set(Vector3f o) Parameters Type Name Description Vector3f o Set(Single, Single, Single) Declaration public void Set(float fX, float fY, float fZ) Parameters Type Name Description Single fX Single fY Single fZ Subtract(Vector3f) Declaration public void Subtract(Vector3f o) Parameters Type Name Description Vector3f o ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String UnitCross(Vector3f) Declaration public Vector3f UnitCross(Vector3f v2) Parameters Type Name Description Vector3f v2 Returns Type Description Vector3f Operators Addition(Vector3f, Vector3f) Declaration public static Vector3f operator +(Vector3f v0, Vector3f v1) Parameters Type Name Description Vector3f v0 Vector3f v1 Returns Type Description Vector3f Addition(Vector3f, Single) Declaration public static Vector3f operator +(Vector3f v0, float f) Parameters Type Name Description Vector3f v0 Single f Returns Type Description Vector3f Division(Vector3f, Vector3f) Declaration public static Vector3f operator /(Vector3f a, Vector3f b) Parameters Type Name Description Vector3f a Vector3f b Returns Type Description Vector3f Division(Vector3f, Single) Declaration public static Vector3f operator /(Vector3f v, float f) Parameters Type Name Description Vector3f v Single f Returns Type Description Vector3f Division(Single, Vector3f) Declaration public static Vector3f operator /(float f, Vector3f v) Parameters Type Name Description Single f Vector3f v Returns Type Description Vector3f Equality(Vector3f, Vector3f) Declaration public static bool operator ==(Vector3f a, Vector3f b) Parameters Type Name Description Vector3f a Vector3f b Returns Type Description Boolean Inequality(Vector3f, Vector3f) Declaration public static bool operator !=(Vector3f a, Vector3f b) Parameters Type Name Description Vector3f a Vector3f b Returns Type Description Boolean Multiply(Vector3f, Vector3f) Declaration public static Vector3f operator *(Vector3f a, Vector3f b) Parameters Type Name Description Vector3f a Vector3f b Returns Type Description Vector3f Multiply(Vector3f, Single) Declaration public static Vector3f operator *(Vector3f v, float f) Parameters Type Name Description Vector3f v Single f Returns Type Description Vector3f Multiply(Single, Vector3f) Declaration public static Vector3f operator *(float f, Vector3f v) Parameters Type Name Description Single f Vector3f v Returns Type Description Vector3f Subtraction(Vector3f, Vector3f) Declaration public static Vector3f operator -(Vector3f v0, Vector3f v1) Parameters Type Name Description Vector3f v0 Vector3f v1 Returns Type Description Vector3f Subtraction(Vector3f, Single) Declaration public static Vector3f operator -(Vector3f v0, float f) Parameters Type Name Description Vector3f v0 Single f Returns Type Description Vector3f UnaryNegation(Vector3f) Declaration public static Vector3f operator -(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3f Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector3fTuple3.html": {
    "href": "api/g3.Vector3fTuple3.html",
    "title": "Struct Vector3fTuple3 | ViRGIS VR GIS",
    "keywords": "Struct Vector3fTuple3 Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3fTuple3 Constructors Vector3fTuple3(Vector3f, Vector3f, Vector3f) Declaration public Vector3fTuple3(Vector3f v0, Vector3f v1, Vector3f v2) Parameters Type Name Description Vector3f v0 Vector3f v1 Vector3f v2 Fields V0 Declaration public Vector3f V0 Field Value Type Description Vector3f V1 Declaration public Vector3f V1 Field Value Type Description Vector3f V2 Declaration public Vector3f V2 Field Value Type Description Vector3f Properties Item[Int32] Declaration public Vector3f this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Vector3f"
  },
  "api/g3.Vector3i.html": {
    "href": "api/g3.Vector3i.html",
    "title": "Struct Vector3i | ViRGIS VR GIS",
    "keywords": "Struct Vector3i 3D integer vector type. This is basically the same as Index3i but with .x.y.z member names. This makes code far more readable in many places. Unfortunately I can't see a way to do this w/o so much duplication...we could have .x/.y/.z accessors but that is much less efficient... Implements IComparable < Vector3i > IEquatable < Vector3i > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector3i : IComparable<Vector3i>, IEquatable<Vector3i> Constructors Vector3i(Int32) Declaration public Vector3i(int f) Parameters Type Name Description Int32 f Vector3i(Int32, Int32, Int32) Declaration public Vector3i(int x, int y, int z) Parameters Type Name Description Int32 x Int32 y Int32 z Vector3i(Int32[]) Declaration public Vector3i(int[] v2) Parameters Type Name Description Int32 [] v2 Fields AxisX Declaration public static readonly Vector3i AxisX Field Value Type Description Vector3i AxisY Declaration public static readonly Vector3i AxisY Field Value Type Description Vector3i AxisZ Declaration public static readonly Vector3i AxisZ Field Value Type Description Vector3i One Declaration public static readonly Vector3i One Field Value Type Description Vector3i x Declaration public int x Field Value Type Description Int32 y Declaration public int y Field Value Type Description Int32 z Declaration public int z Field Value Type Description Int32 Zero Declaration public static readonly Vector3i Zero Field Value Type Description Vector3i Properties array Declaration public int[] array { get; } Property Value Type Description Int32 [] Item[Int32] Declaration public int this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Int32 LengthSquared Declaration public int LengthSquared { get; } Property Value Type Description Int32 Methods Add(Vector3i) Declaration public void Add(Vector3i o) Parameters Type Name Description Vector3i o Add(Int32) Declaration public void Add(int s) Parameters Type Name Description Int32 s CompareTo(Vector3i) Declaration public int CompareTo(Vector3i other) Parameters Type Name Description Vector3i other Returns Type Description Int32 Equals(Vector3i) Declaration public bool Equals(Vector3i other) Parameters Type Name Description Vector3i other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Set(Vector3i) Declaration public void Set(Vector3i o) Parameters Type Name Description Vector3i o Set(Int32, Int32, Int32) Declaration public void Set(int fX, int fY, int fZ) Parameters Type Name Description Int32 fX Int32 fY Int32 fZ Subtract(Vector3i) Declaration public void Subtract(Vector3i o) Parameters Type Name Description Vector3i o ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(Vector3i, Vector3i) Declaration public static Vector3i operator +(Vector3i v0, Vector3i v1) Parameters Type Name Description Vector3i v0 Vector3i v1 Returns Type Description Vector3i Addition(Vector3i, Int32) Declaration public static Vector3i operator +(Vector3i v0, int f) Parameters Type Name Description Vector3i v0 Int32 f Returns Type Description Vector3i Division(Vector3i, Vector3i) Declaration public static Vector3i operator /(Vector3i a, Vector3i b) Parameters Type Name Description Vector3i a Vector3i b Returns Type Description Vector3i Division(Vector3i, Int32) Declaration public static Vector3i operator /(Vector3i v, int f) Parameters Type Name Description Vector3i v Int32 f Returns Type Description Vector3i Division(Int32, Vector3i) Declaration public static Vector3i operator /(int f, Vector3i v) Parameters Type Name Description Int32 f Vector3i v Returns Type Description Vector3i Equality(Vector3i, Vector3i) Declaration public static bool operator ==(Vector3i a, Vector3i b) Parameters Type Name Description Vector3i a Vector3i b Returns Type Description Boolean Explicit(Vector3d to Vector3i) Declaration public static explicit operator Vector3i(Vector3d v) Parameters Type Name Description Vector3d v Returns Type Description Vector3i Explicit(Vector3f to Vector3i) Declaration public static explicit operator Vector3i(Vector3f v) Parameters Type Name Description Vector3f v Returns Type Description Vector3i Explicit(Vector3i to Vector3d) Declaration public static explicit operator Vector3d(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3d Explicit(Vector3i to Vector3f) Declaration public static explicit operator Vector3f(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3f Implicit(Index3i to Vector3i) Declaration public static implicit operator Vector3i(Index3i v) Parameters Type Name Description Index3i v Returns Type Description Vector3i Implicit(Vector3i to Index3i) Declaration public static implicit operator Index3i(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Index3i Inequality(Vector3i, Vector3i) Declaration public static bool operator !=(Vector3i a, Vector3i b) Parameters Type Name Description Vector3i a Vector3i b Returns Type Description Boolean Multiply(Vector3i, Vector3i) Declaration public static Vector3i operator *(Vector3i a, Vector3i b) Parameters Type Name Description Vector3i a Vector3i b Returns Type Description Vector3i Multiply(Vector3i, Int32) Declaration public static Vector3i operator *(Vector3i v, int f) Parameters Type Name Description Vector3i v Int32 f Returns Type Description Vector3i Multiply(Int32, Vector3i) Declaration public static Vector3i operator *(int f, Vector3i v) Parameters Type Name Description Int32 f Vector3i v Returns Type Description Vector3i Subtraction(Vector3i, Vector3i) Declaration public static Vector3i operator -(Vector3i v0, Vector3i v1) Parameters Type Name Description Vector3i v0 Vector3i v1 Returns Type Description Vector3i Subtraction(Vector3i, Int32) Declaration public static Vector3i operator -(Vector3i v0, int f) Parameters Type Name Description Vector3i v0 Int32 f Returns Type Description Vector3i UnaryNegation(Vector3i) Declaration public static Vector3i operator -(Vector3i v) Parameters Type Name Description Vector3i v Returns Type Description Vector3i Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector4d.html": {
    "href": "api/g3.Vector4d.html",
    "title": "Struct Vector4d | ViRGIS VR GIS",
    "keywords": "Struct Vector4d Implements IComparable < Vector4d > IEquatable < Vector4d > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector4d : IComparable<Vector4d>, IEquatable<Vector4d> Constructors Vector4d(Vector4d) Declaration public Vector4d(Vector4d copy) Parameters Type Name Description Vector4d copy Vector4d(Double) Declaration public Vector4d(double f) Parameters Type Name Description Double f Vector4d(Double, Double, Double, Double) Declaration public Vector4d(double x, double y, double z, double w) Parameters Type Name Description Double x Double y Double z Double w Vector4d(Double[]) Declaration public Vector4d(double[] v2) Parameters Type Name Description Double [] v2 Fields One Declaration public static readonly Vector4d One Field Value Type Description Vector4d w Declaration public double w Field Value Type Description Double x Declaration public double x Field Value Type Description Double y Declaration public double y Field Value Type Description Double z Declaration public double z Field Value Type Description Double Zero Declaration public static readonly Vector4d Zero Field Value Type Description Vector4d Properties IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public double this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Double Length Declaration public double Length { get; } Property Value Type Description Double LengthL1 Declaration public double LengthL1 { get; } Property Value Type Description Double LengthSquared Declaration public double LengthSquared { get; } Property Value Type Description Double Normalized Declaration public Vector4d Normalized { get; } Property Value Type Description Vector4d Methods AngleD(Vector4d) Declaration public double AngleD(Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double AngleD(Vector4d, Vector4d) Declaration public static double AngleD(Vector4d v1, Vector4d v2) Parameters Type Name Description Vector4d v1 Vector4d v2 Returns Type Description Double AngleR(Vector4d) Declaration public double AngleR(Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double AngleR(Vector4d, Vector4d) Declaration public static double AngleR(Vector4d v1, Vector4d v2) Parameters Type Name Description Vector4d v1 Vector4d v2 Returns Type Description Double CompareTo(Vector4d) Declaration public int CompareTo(Vector4d other) Parameters Type Name Description Vector4d other Returns Type Description Int32 Distance(Vector4d) Declaration public double Distance(Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double Distance(ref Vector4d) Declaration public double Distance(ref Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double DistanceSquared(Vector4d) Declaration public double DistanceSquared(Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double DistanceSquared(ref Vector4d) Declaration public double DistanceSquared(ref Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double Dot(Vector4d) Declaration public double Dot(Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double Dot(Vector4d, Vector4d) Declaration public static double Dot(Vector4d v1, Vector4d v2) Parameters Type Name Description Vector4d v1 Vector4d v2 Returns Type Description Double Dot(ref Vector4d) Declaration public double Dot(ref Vector4d v2) Parameters Type Name Description Vector4d v2 Returns Type Description Double EpsilonEqual(Vector4d, Double) Declaration public bool EpsilonEqual(Vector4d v2, double epsilon) Parameters Type Name Description Vector4d v2 Double epsilon Returns Type Description Boolean Equals(Vector4d) Declaration public bool Equals(Vector4d other) Parameters Type Name Description Vector4d other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Normalize(Double) Declaration public double Normalize(double epsilon = 2.2204460492503131E-16) Parameters Type Name Description Double epsilon Returns Type Description Double Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Operators Addition(Vector4d, Vector4d) Declaration public static Vector4d operator +(Vector4d v0, Vector4d v1) Parameters Type Name Description Vector4d v0 Vector4d v1 Returns Type Description Vector4d Addition(Vector4d, Double) Declaration public static Vector4d operator +(Vector4d v0, double f) Parameters Type Name Description Vector4d v0 Double f Returns Type Description Vector4d Division(Vector4d, Vector4d) Declaration public static Vector4d operator /(Vector4d a, Vector4d b) Parameters Type Name Description Vector4d a Vector4d b Returns Type Description Vector4d Division(Vector4d, Double) Declaration public static Vector4d operator /(Vector4d v, double f) Parameters Type Name Description Vector4d v Double f Returns Type Description Vector4d Division(Double, Vector4d) Declaration public static Vector4d operator /(double f, Vector4d v) Parameters Type Name Description Double f Vector4d v Returns Type Description Vector4d Equality(Vector4d, Vector4d) Declaration public static bool operator ==(Vector4d a, Vector4d b) Parameters Type Name Description Vector4d a Vector4d b Returns Type Description Boolean Inequality(Vector4d, Vector4d) Declaration public static bool operator !=(Vector4d a, Vector4d b) Parameters Type Name Description Vector4d a Vector4d b Returns Type Description Boolean Multiply(Vector4d, Vector4d) Declaration public static Vector4d operator *(Vector4d a, Vector4d b) Parameters Type Name Description Vector4d a Vector4d b Returns Type Description Vector4d Multiply(Vector4d, Double) Declaration public static Vector4d operator *(Vector4d v, double f) Parameters Type Name Description Vector4d v Double f Returns Type Description Vector4d Multiply(Double, Vector4d) Declaration public static Vector4d operator *(double f, Vector4d v) Parameters Type Name Description Double f Vector4d v Returns Type Description Vector4d Subtraction(Vector4d, Vector4d) Declaration public static Vector4d operator -(Vector4d v0, Vector4d v1) Parameters Type Name Description Vector4d v0 Vector4d v1 Returns Type Description Vector4d Subtraction(Vector4d, Double) Declaration public static Vector4d operator -(Vector4d v0, double f) Parameters Type Name Description Vector4d v0 Double f Returns Type Description Vector4d UnaryNegation(Vector4d) Declaration public static Vector4d operator -(Vector4d v) Parameters Type Name Description Vector4d v Returns Type Description Vector4d Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.Vector4f.html": {
    "href": "api/g3.Vector4f.html",
    "title": "Struct Vector4f | ViRGIS VR GIS",
    "keywords": "Struct Vector4f Implements IComparable < Vector4f > IEquatable < Vector4f > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct Vector4f : IComparable<Vector4f>, IEquatable<Vector4f> Constructors Vector4f(Vector4f) Declaration public Vector4f(Vector4f copy) Parameters Type Name Description Vector4f copy Vector4f(Single) Declaration public Vector4f(float f) Parameters Type Name Description Single f Vector4f(Single, Single, Single, Single) Declaration public Vector4f(float x, float y, float z, float w) Parameters Type Name Description Single x Single y Single z Single w Vector4f(Single[]) Declaration public Vector4f(float[] v2) Parameters Type Name Description Single [] v2 Fields One Declaration public static readonly Vector4f One Field Value Type Description Vector4f w Declaration public float w Field Value Type Description Single x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single Zero Declaration public static readonly Vector4f Zero Field Value Type Description Vector4f Properties IsFinite Declaration public bool IsFinite { get; } Property Value Type Description Boolean IsNormalized Declaration public bool IsNormalized { get; } Property Value Type Description Boolean Item[Int32] Declaration public float this[int key] { get; set; } Parameters Type Name Description Int32 key Property Value Type Description Single Length Declaration public float Length { get; } Property Value Type Description Single LengthL1 Declaration public float LengthL1 { get; } Property Value Type Description Single LengthSquared Declaration public float LengthSquared { get; } Property Value Type Description Single Normalized Declaration public Vector4f Normalized { get; } Property Value Type Description Vector4f Methods AngleD(Vector4f) Declaration public float AngleD(Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single AngleD(Vector4f, Vector4f) Declaration public static float AngleD(Vector4f v1, Vector4f v2) Parameters Type Name Description Vector4f v1 Vector4f v2 Returns Type Description Single AngleR(Vector4f) Declaration public float AngleR(Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single AngleR(Vector4f, Vector4f) Declaration public static float AngleR(Vector4f v1, Vector4f v2) Parameters Type Name Description Vector4f v1 Vector4f v2 Returns Type Description Single CompareTo(Vector4f) Declaration public int CompareTo(Vector4f other) Parameters Type Name Description Vector4f other Returns Type Description Int32 Distance(Vector4f) Declaration public float Distance(Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single Distance(ref Vector4f) Declaration public float Distance(ref Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single DistanceSquared(Vector4f) Declaration public float DistanceSquared(Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single DistanceSquared(ref Vector4f) Declaration public float DistanceSquared(ref Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single Dot(Vector4f) Declaration public float Dot(Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single Dot(Vector4f, Vector4f) Declaration public static float Dot(Vector4f v1, Vector4f v2) Parameters Type Name Description Vector4f v1 Vector4f v2 Returns Type Description Single Dot(ref Vector4f) Declaration public float Dot(ref Vector4f v2) Parameters Type Name Description Vector4f v2 Returns Type Description Single EpsilonEqual(Vector4f, Single) Declaration public bool EpsilonEqual(Vector4f v2, float epsilon) Parameters Type Name Description Vector4f v2 Single epsilon Returns Type Description Boolean Equals(Vector4f) Declaration public bool Equals(Vector4f other) Parameters Type Name Description Vector4f other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Normalize(Single) Declaration public float Normalize(float epsilon = 1.1920929E-07F) Parameters Type Name Description Single epsilon Returns Type Description Single Round(Int32) Declaration public void Round(int nDecimals) Parameters Type Name Description Int32 nDecimals ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToString(String) Declaration public string ToString(string fmt) Parameters Type Name Description String fmt Returns Type Description String Operators Addition(Vector4f, Vector4f) Declaration public static Vector4f operator +(Vector4f v0, Vector4f v1) Parameters Type Name Description Vector4f v0 Vector4f v1 Returns Type Description Vector4f Addition(Vector4f, Single) Declaration public static Vector4f operator +(Vector4f v0, float f) Parameters Type Name Description Vector4f v0 Single f Returns Type Description Vector4f Division(Vector4f, Vector4f) Declaration public static Vector4f operator /(Vector4f a, Vector4f b) Parameters Type Name Description Vector4f a Vector4f b Returns Type Description Vector4f Division(Vector4f, Single) Declaration public static Vector4f operator /(Vector4f v, float f) Parameters Type Name Description Vector4f v Single f Returns Type Description Vector4f Division(Single, Vector4f) Declaration public static Vector4f operator /(float f, Vector4f v) Parameters Type Name Description Single f Vector4f v Returns Type Description Vector4f Equality(Vector4f, Vector4f) Declaration public static bool operator ==(Vector4f a, Vector4f b) Parameters Type Name Description Vector4f a Vector4f b Returns Type Description Boolean Inequality(Vector4f, Vector4f) Declaration public static bool operator !=(Vector4f a, Vector4f b) Parameters Type Name Description Vector4f a Vector4f b Returns Type Description Boolean Multiply(Vector4f, Vector4f) Declaration public static Vector4f operator *(Vector4f a, Vector4f b) Parameters Type Name Description Vector4f a Vector4f b Returns Type Description Vector4f Multiply(Vector4f, Single) Declaration public static Vector4f operator *(Vector4f v, float f) Parameters Type Name Description Vector4f v Single f Returns Type Description Vector4f Multiply(Single, Vector4f) Declaration public static Vector4f operator *(float f, Vector4f v) Parameters Type Name Description Single f Vector4f v Returns Type Description Vector4f Subtraction(Vector4f, Vector4f) Declaration public static Vector4f operator -(Vector4f v0, Vector4f v1) Parameters Type Name Description Vector4f v0 Vector4f v1 Returns Type Description Vector4f Subtraction(Vector4f, Single) Declaration public static Vector4f operator -(Vector4f v0, float f) Parameters Type Name Description Vector4f v0 Single f Returns Type Description Vector4f UnaryNegation(Vector4f) Declaration public static Vector4f operator -(Vector4f v) Parameters Type Name Description Vector4f v Returns Type Description Vector4f Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/g3.VectorArray2-1.html": {
    "href": "api/g3.VectorArray2-1.html",
    "title": "Class VectorArray2<T> | ViRGIS VR GIS",
    "keywords": "Class VectorArray2<T> Inheritance Object VectorArray2<T> IndexArray2i VectorArray2d VectorArray2f Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray2<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors VectorArray2(T[]) Declaration public VectorArray2(T[] data) Parameters Type Name Description T[] data VectorArray2(Int32) Declaration public VectorArray2(int nCount = 0) Parameters Type Name Description Int32 nCount Fields array Declaration public T[] array Field Value Type Description T[] Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Resize(Int32) Declaration public void Resize(int Count) Parameters Type Name Description Int32 Count Set(Int32, T, T) Declaration public void Set(int i, T a, T b) Parameters Type Name Description Int32 i T a T b Set(Int32, Int32, VectorArray2<T>) Declaration public void Set(int iStart, int iCount, VectorArray2<T> source) Parameters Type Name Description Int32 iStart Int32 iCount VectorArray2 <T> source Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray2d.html": {
    "href": "api/g3.VectorArray2d.html",
    "title": "Class VectorArray2d | ViRGIS VR GIS",
    "keywords": "Class VectorArray2d Inheritance Object VectorArray2 < Double > VectorArray2d Implements IEnumerable < Double > IEnumerable Inherited Members VectorArray2<Double>.array VectorArray2<Double>.Count VectorArray2<Double>.GetEnumerator() VectorArray2<Double>.Resize(Int32) VectorArray2<Double>.Set(Int32, Double, Double) VectorArray2<Double>.Set(Int32, Int32, VectorArray2<Double>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray2d : VectorArray2<double>, IEnumerable<double>, IEnumerable Constructors VectorArray2d(Double[]) Declaration public VectorArray2d(double[] data) Parameters Type Name Description Double [] data VectorArray2d(Int32) Declaration public VectorArray2d(int nCount) Parameters Type Name Description Int32 nCount Properties Item[Int32] Declaration public Vector2d this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector2d Methods AsVector2d() Declaration public IEnumerable<Vector2d> AsVector2d() Returns Type Description IEnumerable < Vector2d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray2f.html": {
    "href": "api/g3.VectorArray2f.html",
    "title": "Class VectorArray2f | ViRGIS VR GIS",
    "keywords": "Class VectorArray2f Inheritance Object VectorArray2 < Single > VectorArray2f Implements IEnumerable < Single > IEnumerable Inherited Members VectorArray2<Single>.array VectorArray2<Single>.Count VectorArray2<Single>.GetEnumerator() VectorArray2<Single>.Resize(Int32) VectorArray2<Single>.Set(Int32, Single, Single) VectorArray2<Single>.Set(Int32, Int32, VectorArray2<Single>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray2f : VectorArray2<float>, IEnumerable<float>, IEnumerable Constructors VectorArray2f(Int32) Declaration public VectorArray2f(int nCount) Parameters Type Name Description Int32 nCount VectorArray2f(Single[]) Declaration public VectorArray2f(float[] data) Parameters Type Name Description Single [] data Properties Item[Int32] Declaration public Vector2f this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector2f Methods AsVector2f() Declaration public IEnumerable<Vector2d> AsVector2f() Returns Type Description IEnumerable < Vector2d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray3-1.html": {
    "href": "api/g3.VectorArray3-1.html",
    "title": "Class VectorArray3<T> | ViRGIS VR GIS",
    "keywords": "Class VectorArray3<T> Inheritance Object VectorArray3<T> IndexArray3i VectorArray3d VectorArray3f VectorArray3i Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray3<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors VectorArray3(T[]) Declaration public VectorArray3(T[] data) Parameters Type Name Description T[] data VectorArray3(Int32) Declaration public VectorArray3(int nCount = 0) Parameters Type Name Description Int32 nCount Fields array Declaration public T[] array Field Value Type Description T[] Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Resize(Int32) Declaration public void Resize(int Count) Parameters Type Name Description Int32 Count Set(Int32, T, T, T) Declaration public void Set(int i, T a, T b, T c) Parameters Type Name Description Int32 i T a T b T c Set(Int32, Int32, VectorArray3<T>) Declaration public void Set(int iStart, int iCount, VectorArray3<T> source) Parameters Type Name Description Int32 iStart Int32 iCount VectorArray3 <T> source Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray3d.html": {
    "href": "api/g3.VectorArray3d.html",
    "title": "Class VectorArray3d | ViRGIS VR GIS",
    "keywords": "Class VectorArray3d Inheritance Object VectorArray3 < Double > VectorArray3d Implements IEnumerable < Double > IEnumerable Inherited Members VectorArray3<Double>.array VectorArray3<Double>.Count VectorArray3<Double>.GetEnumerator() VectorArray3<Double>.Resize(Int32) VectorArray3<Double>.Set(Int32, Double, Double, Double) VectorArray3<Double>.Set(Int32, Int32, VectorArray3<Double>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray3d : VectorArray3<double>, IEnumerable<double>, IEnumerable Constructors VectorArray3d(Double[]) Declaration public VectorArray3d(double[] data) Parameters Type Name Description Double [] data VectorArray3d(Int32, Boolean) Declaration public VectorArray3d(int nCount, bool debug = false) Parameters Type Name Description Int32 nCount Boolean debug Properties Item[Int32] Declaration public Vector3d this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3d Methods AsVector3d() Declaration public IEnumerable<Vector3d> AsVector3d() Returns Type Description IEnumerable < Vector3d > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray3f.html": {
    "href": "api/g3.VectorArray3f.html",
    "title": "Class VectorArray3f | ViRGIS VR GIS",
    "keywords": "Class VectorArray3f Inheritance Object VectorArray3 < Single > VectorArray3f Implements IEnumerable < Single > IEnumerable Inherited Members VectorArray3<Single>.array VectorArray3<Single>.Count VectorArray3<Single>.GetEnumerator() VectorArray3<Single>.Resize(Int32) VectorArray3<Single>.Set(Int32, Single, Single, Single) VectorArray3<Single>.Set(Int32, Int32, VectorArray3<Single>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray3f : VectorArray3<float>, IEnumerable<float>, IEnumerable Constructors VectorArray3f(Int32) Declaration public VectorArray3f(int nCount) Parameters Type Name Description Int32 nCount VectorArray3f(Single[]) Declaration public VectorArray3f(float[] data) Parameters Type Name Description Single [] data Properties Item[Int32] Declaration public Vector3f this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3f Methods AsVector3f() Declaration public IEnumerable<Vector3f> AsVector3f() Returns Type Description IEnumerable < Vector3f > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray3i.html": {
    "href": "api/g3.VectorArray3i.html",
    "title": "Class VectorArray3i | ViRGIS VR GIS",
    "keywords": "Class VectorArray3i Inheritance Object VectorArray3 < Int32 > VectorArray3i Implements IEnumerable < Int32 > IEnumerable Inherited Members VectorArray3<Int32>.array VectorArray3<Int32>.Count VectorArray3<Int32>.GetEnumerator() VectorArray3<Int32>.Resize(Int32) VectorArray3<Int32>.Set(Int32, Int32, Int32, Int32) VectorArray3<Int32>.Set(Int32, Int32, VectorArray3<Int32>) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray3i : VectorArray3<int>, IEnumerable<int>, IEnumerable Constructors VectorArray3i(Int32) Declaration public VectorArray3i(int nCount) Parameters Type Name Description Int32 nCount VectorArray3i(Int32[]) Declaration public VectorArray3i(int[] data) Parameters Type Name Description Int32 [] data Properties Item[Int32] Declaration public Vector3i this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Vector3i Methods AsVector3i() Declaration public IEnumerable<Vector3i> AsVector3i() Returns Type Description IEnumerable < Vector3i > Set(Int32, Int32, Int32, Int32, Boolean) Declaration public void Set(int i, int a, int b, int c, bool bCycle = false) Parameters Type Name Description Int32 i Int32 a Int32 b Int32 c Boolean bCycle Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VectorArray4-1.html": {
    "href": "api/g3.VectorArray4-1.html",
    "title": "Class VectorArray4<T> | ViRGIS VR GIS",
    "keywords": "Class VectorArray4<T> Inheritance Object VectorArray4<T> IndexArray4i Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VectorArray4<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors VectorArray4(T[]) Declaration public VectorArray4(T[] data) Parameters Type Name Description T[] data VectorArray4(Int32) Declaration public VectorArray4(int nCount = 0) Parameters Type Name Description Int32 nCount Fields array Declaration public T[] array Field Value Type Description T[] Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Resize(Int32) Declaration public void Resize(int Count) Parameters Type Name Description Int32 Count Set(Int32, T, T, T, T) Declaration public void Set(int i, T a, T b, T c, T d) Parameters Type Name Description Int32 i T a T b T c T d Set(Int32, Int32, VectorArray4<T>) Declaration public void Set(int iStart, int iCount, VectorArray4<T> source) Parameters Type Name Description Int32 iStart Int32 iCount VectorArray4 <T> source Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/g3.VertexConstraint.html": {
    "href": "api/g3.VertexConstraint.html",
    "title": "Struct VertexConstraint | ViRGIS VR GIS",
    "keywords": "Struct VertexConstraint Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct VertexConstraint Constructors VertexConstraint(IProjectionTarget) Declaration public VertexConstraint(IProjectionTarget target) Parameters Type Name Description IProjectionTarget target VertexConstraint(Boolean, Int32) Declaration public VertexConstraint(bool isFixed, int setID = -1) Parameters Type Name Description Boolean isFixed Int32 setID Fields Fixed Declaration public bool Fixed Field Value Type Description Boolean FixedSetID Declaration public int FixedSetID Field Value Type Description Int32 InvalidSetID Declaration public const int InvalidSetID = -1 Field Value Type Description Int32 Pinned Declaration public static readonly VertexConstraint Pinned Field Value Type Description VertexConstraint Target Declaration public IProjectionTarget Target Field Value Type Description IProjectionTarget Unconstrained Declaration public static readonly VertexConstraint Unconstrained Field Value Type Description VertexConstraint"
  },
  "api/g3.VerticalGeneralizedCylinderGenerator.html": {
    "href": "api/g3.VerticalGeneralizedCylinderGenerator.html",
    "title": "Class VerticalGeneralizedCylinderGenerator | ViRGIS VR GIS",
    "keywords": "Class VerticalGeneralizedCylinderGenerator Inheritance Object MeshGenerator VerticalGeneralizedCylinderGenerator Radial3DArrowGenerator Inherited Members MeshGenerator.vertices MeshGenerator.uv MeshGenerator.normals MeshGenerator.triangles MeshGenerator.groups MeshGenerator.WantUVs MeshGenerator.WantNormals MeshGenerator.WantGroups MeshGenerator.Clockwise MeshGenerator.MakeMesh(SimpleMesh) MeshGenerator.MakeSimpleMesh() MeshGenerator.MakeMesh(DMesh3) MeshGenerator.MakeDMesh() MeshGenerator.MakeMesh(NTMesh3) MeshGenerator.MakeNTMesh() MeshGenerator.duplicate_vertex_span(Int32, Int32) MeshGenerator.append_disc(Int32, Int32, Int32, Boolean, Boolean, Int32, Int32) MeshGenerator.append_rectangle(Int32, Int32, Int32, Int32, Boolean, Int32, Int32) MeshGenerator.append_2d_disc_segment(Int32, Int32, Int32, Int32, Boolean, Int32, Int32, Int32, Double) MeshGenerator.estimate_normal(Int32, Int32, Int32) MeshGenerator.bilerp(Vector3d, Vector3d, Vector3d, Vector3d, Double, Double) MeshGenerator.bilerp(Vector2d, Vector2d, Vector2d, Vector2d, Double, Double) MeshGenerator.bilerp(Vector2f, Vector2f, Vector2f, Vector2f, Single, Single) MeshGenerator.bilerp(Vector3i, Vector3i, Vector3i, Vector3i, Double, Double) MeshGenerator.lerp(Vector3i, Vector3i, Double) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VerticalGeneralizedCylinderGenerator : MeshGenerator Fields Capped Declaration public bool Capped Field Value Type Description Boolean endCapCenterIndex Declaration public int endCapCenterIndex Field Value Type Description Int32 NoSharedVertices Declaration public bool NoSharedVertices Field Value Type Description Boolean Sections Declaration public MeshGenerator.CircularSection[] Sections Field Value Type Description MeshGenerator.CircularSection [] Slices Declaration public int Slices Field Value Type Description Int32 startCapCenterIndex Declaration public int startCapCenterIndex Field Value Type Description Int32 Methods Generate() Declaration public override MeshGenerator Generate() Returns Type Description MeshGenerator Overrides MeshGenerator.Generate()"
  },
  "api/g3.VoxelSurfaceGenerator.html": {
    "href": "api/g3.VoxelSurfaceGenerator.html",
    "title": "Class VoxelSurfaceGenerator | ViRGIS VR GIS",
    "keywords": "Class VoxelSurfaceGenerator Inheritance Object VoxelSurfaceGenerator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public class VoxelSurfaceGenerator Fields CapAtBoundary Declaration public bool CapAtBoundary Field Value Type Description Boolean Clockwise Declaration public bool Clockwise Field Value Type Description Boolean ColorSourceF Declaration public Func<Vector3i, Colorf> ColorSourceF Field Value Type Description Func < Vector3i , Colorf > MaxMeshElementCount Declaration public int MaxMeshElementCount Field Value Type Description Int32 Meshes Declaration public List<DMesh3> Meshes Field Value Type Description List < DMesh3 > SkipInteriorFaces Declaration public bool SkipInteriorFaces Field Value Type Description Boolean Voxels Declaration public IBinaryVoxelGrid Voxels Field Value Type Description IBinaryVoxelGrid Methods Generate() Declaration public void Generate()"
  },
  "api/g3.WriteMesh.html": {
    "href": "api/g3.WriteMesh.html",
    "title": "Struct WriteMesh | ViRGIS VR GIS",
    "keywords": "Struct WriteMesh Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct WriteMesh Constructors WriteMesh(IMesh, String) Declaration public WriteMesh(IMesh mesh, string name = \"\") Parameters Type Name Description IMesh mesh String name Fields Materials Declaration public List<GenericMaterial> Materials Field Value Type Description List < GenericMaterial > Mesh Declaration public IMesh Mesh Field Value Type Description IMesh Name Declaration public string Name Field Value Type Description String TriToMaterialMap Declaration public IIndexMap TriToMaterialMap Field Value Type Description IIndexMap UVs Declaration public DenseUVMesh UVs Field Value Type Description DenseUVMesh"
  },
  "api/g3.WriteOptions.html": {
    "href": "api/g3.WriteOptions.html",
    "title": "Struct WriteOptions | ViRGIS VR GIS",
    "keywords": "Struct WriteOptions Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : g3 Assembly : cs.temp.dll.dll Syntax public struct WriteOptions Fields AsciiHeaderFunc Declaration public Func<string> AsciiHeaderFunc Field Value Type Description Func < String > bCombineMeshes Declaration public bool bCombineMeshes Field Value Type Description Boolean bPerVertexColors Declaration public bool bPerVertexColors Field Value Type Description Boolean bPerVertexNormals Declaration public bool bPerVertexNormals Field Value Type Description Boolean bPerVertexUVs Declaration public bool bPerVertexUVs Field Value Type Description Boolean bWriteBinary Declaration public bool bWriteBinary Field Value Type Description Boolean bWriteGroups Declaration public bool bWriteGroups Field Value Type Description Boolean bWriteMaterials Declaration public bool bWriteMaterials Field Value Type Description Boolean Defaults Declaration public static readonly WriteOptions Defaults Field Value Type Description WriteOptions GroupNameF Declaration public Func<int, string> GroupNameF Field Value Type Description Func < Int32 , String > groupNamePrefix Declaration public string groupNamePrefix Field Value Type Description String MaterialFilePath Declaration public string MaterialFilePath Field Value Type Description String ProgressFunc Declaration public Action<int, int> ProgressFunc Field Value Type Description Action < Int32 , Int32 > RealPrecisionDigits Declaration public int RealPrecisionDigits Field Value Type Description Int32"
  },
  "api/gs.AutoHoleFill.html": {
    "href": "api/gs.AutoHoleFill.html",
    "title": "Class AutoHoleFill | ViRGIS VR GIS",
    "keywords": "Class AutoHoleFill Work in progress. Idea is that this class will analyze the hole and choose correct filling strategy. Mainly just calling other fillers. Also contains prototype of filler that decomposes hole into spans based on normals and then uses PlanarSpansFiller. See comments, is not really functional. Inheritance Object AutoHoleFill Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class AutoHoleFill Constructors AutoHoleFill(DMesh3, EdgeLoop) Declaration public AutoHoleFill(DMesh3 mesh, EdgeLoop fillLoop) Parameters Type Name Description DMesh3 mesh EdgeLoop fillLoop Fields FillLoop Declaration public EdgeLoop FillLoop Field Value Type Description EdgeLoop FillTriangles Final fill triangles. May include triangles outside initial fill loop, if ConstrainToHoleInterior=false Declaration public int[] FillTriangles Field Value Type Description Int32 [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 TargetEdgeLength Declaration public double TargetEdgeLength Field Value Type Description Double Methods Apply() Declaration public bool Apply() Returns Type Description Boolean"
  },
  "api/gs.EditMeshSpatial.html": {
    "href": "api/gs.EditMeshSpatial.html",
    "title": "Class EditMeshSpatial | ViRGIS VR GIS",
    "keywords": "Class EditMeshSpatial For use case where we are making local edits to a source mesh. We mask out removed triangles from base mesh SpatialDS, and raycast new triangles separately. Inheritance Object EditMeshSpatial Namespace : gs Assembly : cs.temp.dll.dll Syntax public class EditMeshSpatial : ISpatial Fields EditMesh Declaration public DMesh3 EditMesh Field Value Type Description DMesh3 SourceMesh Declaration public DMesh3 SourceMesh Field Value Type Description DMesh3 SourceSpatial Declaration public DMeshAABBTree3 SourceSpatial Field Value Type Description DMeshAABBTree3 Properties SupportsNearestTriangle Declaration public bool SupportsNearestTriangle { get; } Property Value Type Description Boolean SupportsPointContainment Declaration public bool SupportsPointContainment { get; } Property Value Type Description Boolean SupportsTriangleRayIntersection Declaration public bool SupportsTriangleRayIntersection { get; } Property Value Type Description Boolean Methods AddTriangle(Int32) Declaration public void AddTriangle(int tid) Parameters Type Name Description Int32 tid FindNearestHitTriangle(Ray3d, Double) Declaration public int FindNearestHitTriangle(Ray3d ray, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Ray3d ray Double fMaxDist Returns Type Description Int32 FindNearestTriangle(Vector3d, Double) Declaration public int FindNearestTriangle(Vector3d p, double fMaxDist = 1.7976931348623157E+308) Parameters Type Name Description Vector3d p Double fMaxDist Returns Type Description Int32 IsInside(Vector3d) Declaration public bool IsInside(Vector3d p) Parameters Type Name Description Vector3d p Returns Type Description Boolean RemoveTriangle(Int32) Declaration public void RemoveTriangle(int tid) Parameters Type Name Description Int32 tid"
  },
  "api/gs.html": {
    "href": "api/gs.html",
    "title": "Namespace gs | ViRGIS VR GIS",
    "keywords": "Namespace gs Classes AutoHoleFill Work in progress. Idea is that this class will analyze the hole and choose correct filling strategy. Mainly just calling other fillers. Also contains prototype of filler that decomposes hole into spans based on normals and then uses PlanarSpansFiller. See comments, is not really functional. EditMeshSpatial For use case where we are making local edits to a source mesh. We mask out removed triangles from base mesh SpatialDS, and raycast new triangles separately. LinearFalloff returns 1 in range [0,ConstantRange], and then falls off to 0 in range [ConstantRange,1] MarchingCubesPro MergeCoincidentEdges Merge coincident edges. MeshAssembly Given an input mesh, try to decompose it's connected components into parts with some semantics - solids, open meshes, etc. MeshAutoRepair Mesh Auto Repair top-level driver. TODO: remove degenerate faces (which may still have all edges > length) this is tricky, in many CAD meshes these faces can't just be collapsed. But can often remove via flipping...? MeshInsertProjectedPolygon Inserts a polygon into a mesh using a planar projection. You provide a projection frame and either the polygon in the frame's XY-coordinate system, or a DCurve3 space curve that will be projected. Currently you must also provide a seed triangle, that intersects the curve. We flood-fill from the vertices of that triangle to find the interior vertices, and hence the set of faces that are modified. The insertion operation splits the existing mesh edges, so the inserted polygon will have more segments than the input polygon, in general. If you set SimplifyInsertion = true, then we collapse these extra edges, so you (should) get back an edge loop with the same number of vertices. However, on a non-planar mesh this means the edges will no longer lie on the input surface. If RemovePolygonInterior = true, the faces inside the polygon are deleted returns: ModifiedRegion: this is the RegionOperator created to subset the mesh for editing. You can use this to access the modified mesh InsertedPolygonVerts: the output vertex ID for Polygon[i]. This does not include the intermediate vertices, it's a 1-1 correspondence. InsertedLoop: inserted edge loop on output mesh InteriorTriangles: the triangles inside the polygon, null if RemovePolygonInterior=true If you would like to change the behavior after the insertion is computed, you can subclass and override BackPropagate(). [TODO] currently we construct a planar BVTree (but 3D) to map the new vertices to 3D via barycentric interpolation. However we could do this inline. MeshInsertUVPolyCurve needs to fully support working on separate coordinate set (it tries via Get/Set PointF, but it is not 100% working), and it needs to let client know about poke and split events, w/ bary-coords, so that we can compute the new 3D positions. MeshRepairOrientation MeshScalarSamplingGrid Sample a scalar function on a discrete grid. Can sample full grid, or compute values around a specific iso-contour and then fill in rest of grid with correctly-signed values via fast sweeping (this is the default) TODO: I think we are over-exploring the grid most of the time. eg along an x-ray that intersects the surface, we only need at most 2 cells, but we are computing at least 3, and possibly 5. it may be better to use something like bloomenthal polygonizer continuation? where we are keeping track of active edges instead of active cells? MeshSpatialSort This class sorts a set of mesh components. MeshSpatialSort.ComponentMesh MeshSpatialSort.MeshSolid MeshStitchLoops Stitch together two edge loops without any constraint that they have the same vertex count (otherwise can use MeshEditor.StitchLoop / StitchUnorderedEdges). [TODO] something smarter than stitch_span_simple(). For example, equalize length we have travelled along the span. Could also use normals to try to keep span \"smooth\" currently Loop0 and Loop1 need to be reversed/not depending on whether we are stitching \"through\" mesh or not. If not set properly, then fill self-intersects. Could we (optionally) resolve this automatically, eg by checking total of the two alternatives? MeshTopology Extract topological information about the mesh based on identifying semantic edges/vertices/etc WIP MeshWindingNumberGrid Sample mesh winding number (MWN) on a discrete grid. Can sample full grid, or compute MWN values along a specific iso-contour and then fill in rest of grid with correctly-signed values via fast sweeping (this is the default) TODO: I think we are over-exploring the grid most of the time. eg along an x-ray that intersects the surface, we only need at most 2 cells, but we are computing at least 3, and possibly 5. it may be better to use something like bloomenthal polygonizer continuation? where we are keeping track of active edges instead of active cells? MinimalHoleFill Construct a \"minimal\" fill surface for the hole. This surface is often quasi-developable, reconstructs sharp edges, etc. There are various options. PointSetHashtable PointSetHashtable.PointList RemesherPro Extension to Remesher that is smarter about which edges/vertices to touch: queue tracks edges that were affected on last pass, and hence might need to be updated FastSplitIteration() just does splits, to reach target edge length as quickly as possible RemeshIteration() applies remesh pass for modified edges TrackedSmoothPass() smooths all vertices but only adds to queue if edge changes enough TrackedProjectionPass() same RemoveDuplicateTriangles Remove duplicate triangles. RemoveOccludedTriangles Remove \"occluded\" triangles, ie triangles on the \"inside\" of the mesh. This is a fuzzy definition, current implementation is basically computing something akin to ambient occlusion, and if face is fully occluded, then we classify it as inside and remove it. SmoothedHoleFill This fills a hole in a mesh by doing a trivial fill, optionally offsetting along a fixed vector, then doing a remesh, then a laplacian smooth, then a second remesh. WyvillFalloff returns 1 in range [0,ConstantRange], and then falls off to 0 in range [ConstantRange,1] Interfaces IFalloffFunction Enums MarchingCubesPro.RootfindingModes MeshAutoRepair.RemoveModes MeshScalarSamplingGrid.ComputeModes MeshWindingNumberGrid.ComputeModes RemoveOccludedTriangles.CalculationMode"
  },
  "api/gs.IFalloffFunction.html": {
    "href": "api/gs.IFalloffFunction.html",
    "title": "Interface IFalloffFunction | ViRGIS VR GIS",
    "keywords": "Interface IFalloffFunction Namespace : gs Assembly : cs.temp.dll.dll Syntax public interface IFalloffFunction Methods Duplicate() In most cases, users of IFalloffFunction will make a local copy Declaration IFalloffFunction Duplicate() Returns Type Description IFalloffFunction FalloffT(Double) t is value in range [0,1], returns value in range [0,1] Declaration double FalloffT(double t) Parameters Type Name Description Double t Returns Type Description Double"
  },
  "api/gs.LinearFalloff.html": {
    "href": "api/gs.LinearFalloff.html",
    "title": "Class LinearFalloff | ViRGIS VR GIS",
    "keywords": "Class LinearFalloff returns 1 in range [0,ConstantRange], and then falls off to 0 in range [ConstantRange,1] Inheritance Object LinearFalloff Implements IFalloffFunction Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class LinearFalloff : IFalloffFunction Fields ConstantRange Declaration public double ConstantRange Field Value Type Description Double Methods Duplicate() Declaration public IFalloffFunction Duplicate() Returns Type Description IFalloffFunction FalloffT(Double) Declaration public double FalloffT(double t) Parameters Type Name Description Double t Returns Type Description Double Implements IFalloffFunction"
  },
  "api/gs.MarchingCubesPro.html": {
    "href": "api/gs.MarchingCubesPro.html",
    "title": "Class MarchingCubesPro | ViRGIS VR GIS",
    "keywords": "Class MarchingCubesPro Inheritance Object MarchingCubesPro Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MarchingCubesPro Constructors MarchingCubesPro() Declaration public MarchingCubesPro() Fields Bounds bounding-box we will mesh inside of. We use the min-corner and the width/height/depth, but do not clamp vertices to stay within max-corner, we may spill one cell over Declaration public AxisAlignedBox3d Bounds Field Value Type Description AxisAlignedBox3d CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellDimensions Declaration public Vector3i CellDimensions Field Value Type Description Vector3i CubeSize Length of edges of cubes that are marching. currently, # of cells along axis = (int)(bounds_dimension / CellSize) + 1 Declaration public double CubeSize Field Value Type Description Double Implicit this is the function we will evaluate Declaration public ImplicitFunction3d Implicit Field Value Type Description ImplicitFunction3d IsoValue mesh surface will be at this isovalue. Normally 0 unless you want offset surface or field is not a distance-field. Declaration public double IsoValue Field Value Type Description Double Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ParallelCompute Use multi-threading? Generally a good idea unless problem is very small or you are multi-threading at a higher level (which may be more efficient as we currently use very fine-grained spinlocks to synchronize) Declaration public bool ParallelCompute Field Value Type Description Boolean RootMode Which rootfinding method will be used to converge on surface along edges Declaration public MarchingCubesPro.RootfindingModes RootMode Field Value Type Description MarchingCubesPro.RootfindingModes RootModeSteps number of iterations of rootfinding method (ignored for SingleLerp) Declaration public int RootModeSteps Field Value Type Description Int32 Methods Generate() Run MC algorithm and generate Output mesh Declaration public void Generate() GenerateContinuation(IEnumerable<Vector3d>) Declaration public void GenerateContinuation(IEnumerable<Vector3d> seeds) Parameters Type Name Description IEnumerable < Vector3d > seeds"
  },
  "api/gs.MarchingCubesPro.RootfindingModes.html": {
    "href": "api/gs.MarchingCubesPro.RootfindingModes.html",
    "title": "Enum MarchingCubesPro.RootfindingModes | ViRGIS VR GIS",
    "keywords": "Enum MarchingCubesPro.RootfindingModes Namespace : gs Assembly : cs.temp.dll.dll Syntax public enum RootfindingModes Fields Name Description Bisection LerpSteps SingleLerp"
  },
  "api/gs.MergeCoincidentEdges.html": {
    "href": "api/gs.MergeCoincidentEdges.html",
    "title": "Class MergeCoincidentEdges | ViRGIS VR GIS",
    "keywords": "Class MergeCoincidentEdges Merge coincident edges. Inheritance Object MergeCoincidentEdges Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MergeCoincidentEdges Constructors MergeCoincidentEdges(DMesh3) Declaration public MergeCoincidentEdges(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields MergeDistance Declaration public double MergeDistance Field Value Type Description Double Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OnlyUniquePairs Declaration public bool OnlyUniquePairs Field Value Type Description Boolean Methods Apply() Declaration public virtual bool Apply() Returns Type Description Boolean"
  },
  "api/gs.MeshAssembly.html": {
    "href": "api/gs.MeshAssembly.html",
    "title": "Class MeshAssembly | ViRGIS VR GIS",
    "keywords": "Class MeshAssembly Given an input mesh, try to decompose it's connected components into parts with some semantics - solids, open meshes, etc. Inheritance Object MeshAssembly Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshAssembly Constructors MeshAssembly(DMesh3) Declaration public MeshAssembly(DMesh3 sourceMesh) Parameters Type Name Description DMesh3 sourceMesh Fields ClosedSolids Declaration public List<DMesh3> ClosedSolids Field Value Type Description List < DMesh3 > HasNoVoids Declaration public bool HasNoVoids Field Value Type Description Boolean OpenMeshes Declaration public List<DMesh3> OpenMeshes Field Value Type Description List < DMesh3 > SourceMesh Declaration public DMesh3 SourceMesh Field Value Type Description DMesh3 Methods Decompose() Declaration public void Decompose()"
  },
  "api/gs.MeshAutoRepair.html": {
    "href": "api/gs.MeshAutoRepair.html",
    "title": "Class MeshAutoRepair | ViRGIS VR GIS",
    "keywords": "Class MeshAutoRepair Mesh Auto Repair top-level driver. TODO: remove degenerate faces (which may still have all edges > length) this is tricky, in many CAD meshes these faces can't just be collapsed. But can often remove via flipping...? Inheritance Object MeshAutoRepair Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshAutoRepair Constructors MeshAutoRepair(DMesh3) Declaration public MeshAutoRepair(DMesh3 mesh3) Parameters Type Name Description DMesh3 mesh3 Fields ErosionIterations Declaration public int ErosionIterations Field Value Type Description Int32 Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 MinEdgeLengthTol Declaration public double MinEdgeLengthTol Field Value Type Description Double Progress Set this to be able to cancel running remesher Declaration public ProgressCancel Progress Field Value Type Description ProgressCancel RemoveMode Declaration public MeshAutoRepair.RemoveModes RemoveMode Field Value Type Description MeshAutoRepair.RemoveModes RepairTolerance Declaration public double RepairTolerance Field Value Type Description Double Methods Apply() Declaration public bool Apply() Returns Type Description Boolean Cancelled() if this returns true, abort computation. Declaration protected virtual bool Cancelled() Returns Type Description Boolean"
  },
  "api/gs.MeshAutoRepair.RemoveModes.html": {
    "href": "api/gs.MeshAutoRepair.RemoveModes.html",
    "title": "Enum MeshAutoRepair.RemoveModes | ViRGIS VR GIS",
    "keywords": "Enum MeshAutoRepair.RemoveModes Namespace : gs Assembly : cs.temp.dll.dll Syntax public enum RemoveModes Fields Name Description Interior None Occluded"
  },
  "api/gs.MeshInsertProjectedPolygon.html": {
    "href": "api/gs.MeshInsertProjectedPolygon.html",
    "title": "Class MeshInsertProjectedPolygon | ViRGIS VR GIS",
    "keywords": "Class MeshInsertProjectedPolygon Inserts a polygon into a mesh using a planar projection. You provide a projection frame and either the polygon in the frame's XY-coordinate system, or a DCurve3 space curve that will be projected. Currently you must also provide a seed triangle, that intersects the curve. We flood-fill from the vertices of that triangle to find the interior vertices, and hence the set of faces that are modified. The insertion operation splits the existing mesh edges, so the inserted polygon will have more segments than the input polygon, in general. If you set SimplifyInsertion = true, then we collapse these extra edges, so you (should) get back an edge loop with the same number of vertices. However, on a non-planar mesh this means the edges will no longer lie on the input surface. If RemovePolygonInterior = true, the faces inside the polygon are deleted returns: ModifiedRegion: this is the RegionOperator created to subset the mesh for editing. You can use this to access the modified mesh InsertedPolygonVerts: the output vertex ID for Polygon[i]. This does not include the intermediate vertices, it's a 1-1 correspondence. InsertedLoop: inserted edge loop on output mesh InteriorTriangles: the triangles inside the polygon, null if RemovePolygonInterior=true If you would like to change the behavior after the insertion is computed, you can subclass and override BackPropagate(). [TODO] currently we construct a planar BVTree (but 3D) to map the new vertices to 3D via barycentric interpolation. However we could do this inline. MeshInsertUVPolyCurve needs to fully support working on separate coordinate set (it tries via Get/Set PointF, but it is not 100% working), and it needs to let client know about poke and split events, w/ bary-coords, so that we can compute the new 3D positions. Inheritance Object MeshInsertProjectedPolygon Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshInsertProjectedPolygon Constructors MeshInsertProjectedPolygon(DMesh3, DCurve3, Frame3f, Int32) create Polygon by projecting polygon3 into frame Declaration public MeshInsertProjectedPolygon(DMesh3 mesh, DCurve3 polygon3, Frame3f frame, int seedTri) Parameters Type Name Description DMesh3 mesh DCurve3 polygon3 Frame3f frame Int32 seedTri MeshInsertProjectedPolygon(DMesh3, Polygon2d, Frame3f, Int32) insert polygon in given frame Declaration public MeshInsertProjectedPolygon(DMesh3 mesh, Polygon2d poly, Frame3f frame, int seedTri) Parameters Type Name Description DMesh3 mesh Polygon2d poly Frame3f frame Int32 seedTri Fields InsertedLoop Declaration public EdgeLoop InsertedLoop Field Value Type Description EdgeLoop InsertedPolygonVerts Declaration public int[] InsertedPolygonVerts Field Value Type Description Int32 [] InteriorTriangles Declaration public int[] InteriorTriangles Field Value Type Description Int32 [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ModifiedRegion Declaration public RegionOperator ModifiedRegion Field Value Type Description RegionOperator Polygon Declaration public Polygon2d Polygon Field Value Type Description Polygon2d ProjectFrame Declaration public Frame3f ProjectFrame Field Value Type Description Frame3f RemovePolygonInterior Declaration public bool RemovePolygonInterior Field Value Type Description Boolean SeedTriangle Declaration public int SeedTriangle Field Value Type Description Int32 SimplifyInsertion Declaration public bool SimplifyInsertion Field Value Type Description Boolean Methods BackPropagate(RegionOperator, Int32[], EdgeLoop) Declaration protected virtual bool BackPropagate(RegionOperator regionOp, int[] insertedPolyVerts, EdgeLoop insertedLoop) Parameters Type Name Description RegionOperator regionOp Int32 [] insertedPolyVerts EdgeLoop insertedLoop Returns Type Description Boolean Insert() Declaration public bool Insert() Returns Type Description Boolean Validate() Declaration public virtual ValidationStatus Validate() Returns Type Description ValidationStatus"
  },
  "api/gs.MeshRepairOrientation.html": {
    "href": "api/gs.MeshRepairOrientation.html",
    "title": "Class MeshRepairOrientation | ViRGIS VR GIS",
    "keywords": "Class MeshRepairOrientation Inheritance Object MeshRepairOrientation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshRepairOrientation Constructors MeshRepairOrientation(DMesh3, DMeshAABBTree3) Declaration public MeshRepairOrientation(DMesh3 mesh3, DMeshAABBTree3 spatial = null) Parameters Type Name Description DMesh3 mesh3 DMeshAABBTree3 spatial Fields Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Properties Spatial Declaration protected DMeshAABBTree3 Spatial { get; } Property Value Type Description DMeshAABBTree3 Methods ComputeStatistics() Declaration public void ComputeStatistics() OrientComponents() Declaration public void OrientComponents() SolveGlobalOrientation() Declaration public void SolveGlobalOrientation()"
  },
  "api/gs.MeshScalarSamplingGrid.ComputeModes.html": {
    "href": "api/gs.MeshScalarSamplingGrid.ComputeModes.html",
    "title": "Enum MeshScalarSamplingGrid.ComputeModes | ViRGIS VR GIS",
    "keywords": "Enum MeshScalarSamplingGrid.ComputeModes Namespace : gs Assembly : cs.temp.dll.dll Syntax public enum ComputeModes Fields Name Description FullGrid NarrowBand"
  },
  "api/gs.MeshScalarSamplingGrid.html": {
    "href": "api/gs.MeshScalarSamplingGrid.html",
    "title": "Class MeshScalarSamplingGrid | ViRGIS VR GIS",
    "keywords": "Class MeshScalarSamplingGrid Sample a scalar function on a discrete grid. Can sample full grid, or compute values around a specific iso-contour and then fill in rest of grid with correctly-signed values via fast sweeping (this is the default) TODO: I think we are over-exploring the grid most of the time. eg along an x-ray that intersects the surface, we only need at most 2 cells, but we are computing at least 3, and possibly 5. it may be better to use something like bloomenthal polygonizer continuation? where we are keeping track of active edges instead of active cells? Inheritance Object MeshScalarSamplingGrid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshScalarSamplingGrid Constructors MeshScalarSamplingGrid(DMesh3, Double, Func<Vector3d, Double>) Declaration public MeshScalarSamplingGrid(DMesh3 mesh, double cellSize, Func<Vector3d, double> scalarF) Parameters Type Name Description DMesh3 mesh Double cellSize Func < Vector3d , Double > scalarF Fields BufferCells Declaration public int BufferCells Field Value Type Description Int32 CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellSize Declaration public double CellSize Field Value Type Description Double ComputeMode Declaration public MeshScalarSamplingGrid.ComputeModes ComputeMode Field Value Type Description MeshScalarSamplingGrid.ComputeModes DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean IsoValue Declaration public float IsoValue Field Value Type Description Single Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 ScalarF Declaration public Func<Vector3d, double> ScalarF Field Value Type Description Func < Vector3d , Double > WantMeshSDFGrid Declaration public bool WantMeshSDFGrid Field Value Type Description Boolean Properties Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid scalar-values grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single SDFGrid If ComputeMode==NarrowBand, then we internally compute a signed-distance grid, which will hang onto Declaration public MeshSignedDistanceGrid SDFGrid { get; } Property Value Type Description MeshSignedDistanceGrid Methods CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f Compute() Declaration public void Compute()"
  },
  "api/gs.MeshSpatialSort.ComponentMesh.html": {
    "href": "api/gs.MeshSpatialSort.ComponentMesh.html",
    "title": "Class MeshSpatialSort.ComponentMesh | ViRGIS VR GIS",
    "keywords": "Class MeshSpatialSort.ComponentMesh Inheritance Object MeshSpatialSort.ComponentMesh Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class ComponentMesh Constructors ComponentMesh(DMesh3, Object, DMeshAABBTree3) Declaration public ComponentMesh(DMesh3 mesh, object identifier, DMeshAABBTree3 spatial) Parameters Type Name Description DMesh3 mesh Object identifier DMeshAABBTree3 spatial Fields Bounds Declaration public AxisAlignedBox3d Bounds Field Value Type Description AxisAlignedBox3d Identifier Declaration public object Identifier Field Value Type Description Object InsideOf Declaration public List<MeshSpatialSort.ComponentMesh> InsideOf Field Value Type Description List < MeshSpatialSort.ComponentMesh > InsideSet Declaration public List<MeshSpatialSort.ComponentMesh> InsideSet Field Value Type Description List < MeshSpatialSort.ComponentMesh > IsClosed Declaration public bool IsClosed Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Spatial Declaration public DMeshAABBTree3 Spatial Field Value Type Description DMeshAABBTree3 Methods Contains(MeshSpatialSort.ComponentMesh, Double) Declaration public bool Contains(MeshSpatialSort.ComponentMesh mesh2, double fIso = 0.5) Parameters Type Name Description MeshSpatialSort.ComponentMesh mesh2 Double fIso Returns Type Description Boolean"
  },
  "api/gs.MeshSpatialSort.html": {
    "href": "api/gs.MeshSpatialSort.html",
    "title": "Class MeshSpatialSort | ViRGIS VR GIS",
    "keywords": "Class MeshSpatialSort This class sorts a set of mesh components. Inheritance Object MeshSpatialSort Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshSpatialSort Constructors MeshSpatialSort() Declaration public MeshSpatialSort() Fields AllowOpenContainers Declaration public bool AllowOpenContainers Field Value Type Description Boolean Components Declaration public List<MeshSpatialSort.ComponentMesh> Components Field Value Type Description List < MeshSpatialSort.ComponentMesh > FastWindingIso Declaration public double FastWindingIso Field Value Type Description Double Solids Declaration public List<MeshSpatialSort.MeshSolid> Solids Field Value Type Description List < MeshSpatialSort.MeshSolid > Methods AddMesh(DMesh3, Object, DMeshAABBTree3) Declaration public void AddMesh(DMesh3 mesh, object identifier, DMeshAABBTree3 spatial = null) Parameters Type Name Description DMesh3 mesh Object identifier DMeshAABBTree3 spatial Sort() Declaration public void Sort()"
  },
  "api/gs.MeshSpatialSort.MeshSolid.html": {
    "href": "api/gs.MeshSpatialSort.MeshSolid.html",
    "title": "Class MeshSpatialSort.MeshSolid | ViRGIS VR GIS",
    "keywords": "Class MeshSpatialSort.MeshSolid Inheritance Object MeshSpatialSort.MeshSolid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshSolid Fields Cavities Declaration public List<MeshSpatialSort.ComponentMesh> Cavities Field Value Type Description List < MeshSpatialSort.ComponentMesh > Outer Declaration public MeshSpatialSort.ComponentMesh Outer Field Value Type Description MeshSpatialSort.ComponentMesh"
  },
  "api/gs.MeshStitchLoops.html": {
    "href": "api/gs.MeshStitchLoops.html",
    "title": "Class MeshStitchLoops | ViRGIS VR GIS",
    "keywords": "Class MeshStitchLoops Stitch together two edge loops without any constraint that they have the same vertex count (otherwise can use MeshEditor.StitchLoop / StitchUnorderedEdges). [TODO] something smarter than stitch_span_simple(). For example, equalize length we have travelled along the span. Could also use normals to try to keep span \"smooth\" currently Loop0 and Loop1 need to be reversed/not depending on whether we are stitching \"through\" mesh or not. If not set properly, then fill self-intersects. Could we (optionally) resolve this automatically, eg by checking total of the two alternatives? Inheritance Object MeshStitchLoops Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshStitchLoops Constructors MeshStitchLoops(DMesh3, EdgeLoop, EdgeLoop) Declaration public MeshStitchLoops(DMesh3 mesh, EdgeLoop l0, EdgeLoop l1) Parameters Type Name Description DMesh3 mesh EdgeLoop l0 EdgeLoop l1 Fields Group Declaration public SetGroupBehavior Group Field Value Type Description SetGroupBehavior Loop0 Declaration public EdgeLoop Loop0 Field Value Type Description EdgeLoop Loop1 Declaration public EdgeLoop Loop1 Field Value Type Description EdgeLoop Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 TrustLoopOrientations Declaration public bool TrustLoopOrientations Field Value Type Description Boolean Methods AddKnownCorrespondences(Int32[], Int32[]) specify subset of vertices that have known correspondences. Declaration public void AddKnownCorrespondences(int[] verts0, int[] verts1) Parameters Type Name Description Int32 [] verts0 Int32 [] verts1 Stitch() Declaration public bool Stitch() Returns Type Description Boolean"
  },
  "api/gs.MeshTopology.html": {
    "href": "api/gs.MeshTopology.html",
    "title": "Class MeshTopology | ViRGIS VR GIS",
    "keywords": "Class MeshTopology Extract topological information about the mesh based on identifying semantic edges/vertices/etc WIP Inheritance Object MeshTopology Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshTopology Constructors MeshTopology(DMesh3) Declaration public MeshTopology(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields AllEdges Declaration public HashSet<int> AllEdges Field Value Type Description HashSet < Int32 > AllVertices Declaration public HashSet<int> AllVertices Field Value Type Description HashSet < Int32 > BoundaryEdges Declaration public HashSet<int> BoundaryEdges Field Value Type Description HashSet < Int32 > CreaseEdges Declaration public HashSet<int> CreaseEdges Field Value Type Description HashSet < Int32 > IgnoreTimestamp Declaration public bool IgnoreTimestamp Field Value Type Description Boolean JunctionVertices Declaration public HashSet<int> JunctionVertices Field Value Type Description HashSet < Int32 > Loops Declaration public EdgeLoop[] Loops Field Value Type Description EdgeLoop [] Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Spans Declaration public EdgeSpan[] Spans Field Value Type Description EdgeSpan [] Properties CreaseAngle Declaration public double CreaseAngle { get; set; } Property Value Type Description Double Methods AddRemeshConstraints(MeshConstraints) add topological edges/vertices as constraints for remeshing Declaration public void AddRemeshConstraints(MeshConstraints constraints) Parameters Type Name Description MeshConstraints constraints Compute() Compute the topology elements Declaration public void Compute() MakeElementsMesh(Polygon2d, Polygon2d) Declaration public DMesh3 MakeElementsMesh(Polygon2d spanProfile, Polygon2d loopProfile) Parameters Type Name Description Polygon2d spanProfile Polygon2d loopProfile Returns Type Description DMesh3"
  },
  "api/gs.MeshWindingNumberGrid.ComputeModes.html": {
    "href": "api/gs.MeshWindingNumberGrid.ComputeModes.html",
    "title": "Enum MeshWindingNumberGrid.ComputeModes | ViRGIS VR GIS",
    "keywords": "Enum MeshWindingNumberGrid.ComputeModes Namespace : gs Assembly : cs.temp.dll.dll Syntax public enum ComputeModes Fields Name Description FullGrid NarrowBand"
  },
  "api/gs.MeshWindingNumberGrid.html": {
    "href": "api/gs.MeshWindingNumberGrid.html",
    "title": "Class MeshWindingNumberGrid | ViRGIS VR GIS",
    "keywords": "Class MeshWindingNumberGrid Sample mesh winding number (MWN) on a discrete grid. Can sample full grid, or compute MWN values along a specific iso-contour and then fill in rest of grid with correctly-signed values via fast sweeping (this is the default) TODO: I think we are over-exploring the grid most of the time. eg along an x-ray that intersects the surface, we only need at most 2 cells, but we are computing at least 3, and possibly 5. it may be better to use something like bloomenthal polygonizer continuation? where we are keeping track of active edges instead of active cells? Inheritance Object MeshWindingNumberGrid Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MeshWindingNumberGrid Constructors MeshWindingNumberGrid(DMesh3, DMeshAABBTree3, Double) Declaration public MeshWindingNumberGrid(DMesh3 mesh, DMeshAABBTree3 spatial, double cellSize) Parameters Type Name Description DMesh3 mesh DMeshAABBTree3 spatial Double cellSize Fields BufferCells Declaration public int BufferCells Field Value Type Description Int32 CancelF if this function returns true, we should abort calculation Declaration public Func<bool> CancelF Field Value Type Description Func < Boolean > CellSize Declaration public double CellSize Field Value Type Description Double ComputeMode Declaration public MeshWindingNumberGrid.ComputeModes ComputeMode Field Value Type Description MeshWindingNumberGrid.ComputeModes DebugPrint Declaration public bool DebugPrint Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 MeshSpatial Declaration public DMeshAABBTree3 MeshSpatial Field Value Type Description DMeshAABBTree3 WantMeshSDFGrid Declaration public bool WantMeshSDFGrid Field Value Type Description Boolean WindingIsoValue Declaration public float WindingIsoValue Field Value Type Description Single Properties Dimensions Declaration public Vector3i Dimensions { get; } Property Value Type Description Vector3i Grid winding-number grid available after calling Compute() Declaration public DenseGrid3f Grid { get; } Property Value Type Description DenseGrid3f GridOrigin Origin of the winding-number grid, in same coordinates as mesh Declaration public Vector3f GridOrigin { get; } Property Value Type Description Vector3f Item[Int32, Int32, Int32] Declaration public float this[int i, int j, int k] { get; } Parameters Type Name Description Int32 i Int32 j Int32 k Property Value Type Description Single SDFGrid If ComputeMode==NarrowBand, then we internally compute a signed-distance grid, which will hang onto Declaration public MeshSignedDistanceGrid SDFGrid { get; } Property Value Type Description MeshSignedDistanceGrid Methods CellCenter(Int32, Int32, Int32) Declaration public Vector3f CellCenter(int i, int j, int k) Parameters Type Name Description Int32 i Int32 j Int32 k Returns Type Description Vector3f Compute() Declaration public void Compute()"
  },
  "api/gs.MinimalHoleFill.html": {
    "href": "api/gs.MinimalHoleFill.html",
    "title": "Class MinimalHoleFill | ViRGIS VR GIS",
    "keywords": "Class MinimalHoleFill Construct a \"minimal\" fill surface for the hole. This surface is often quasi-developable, reconstructs sharp edges, etc. There are various options. Inheritance Object MinimalHoleFill Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class MinimalHoleFill Constructors MinimalHoleFill(DMesh3, EdgeLoop) Declaration public MinimalHoleFill(DMesh3 mesh, EdgeLoop fillLoop) Parameters Type Name Description DMesh3 mesh EdgeLoop fillLoop Fields DevelopabilityTolerance Declaration public double DevelopabilityTolerance Field Value Type Description Double FillLoop Declaration public EdgeLoop FillLoop Field Value Type Description EdgeLoop FillTriangles Final fill triangles Declaration public int[] FillTriangles Field Value Type Description Int32 [] FillVertices Final fill vertices (should be empty?) Declaration public int[] FillVertices Field Value Type Description Int32 [] IgnoreBoundaryTriangles Declaration public bool IgnoreBoundaryTriangles Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OptimizeDevelopability Declaration public bool OptimizeDevelopability Field Value Type Description Boolean OptimizeTriangles Declaration public bool OptimizeTriangles Field Value Type Description Boolean Methods Apply() Declaration public bool Apply() Returns Type Description Boolean"
  },
  "api/gs.PointSetHashtable.html": {
    "href": "api/gs.PointSetHashtable.html",
    "title": "Class PointSetHashtable | ViRGIS VR GIS",
    "keywords": "Class PointSetHashtable Inheritance Object PointSetHashtable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class PointSetHashtable Constructors PointSetHashtable(IPointSet) Declaration public PointSetHashtable(IPointSet points) Parameters Type Name Description IPointSet points Methods Build(Double, Vector3d) Declaration public void Build(double cellSize, Vector3d origin) Parameters Type Name Description Double cellSize Vector3d origin Build(Int32) Declaration public void Build(int maxAxisSubdivs = 64) Parameters Type Name Description Int32 maxAxisSubdivs FindInBall(Vector3d, Double, Int32[], out Int32) Declaration public bool FindInBall(Vector3d pt, double r, int[] buffer, out int buffer_count) Parameters Type Name Description Vector3d pt Double r Int32 [] buffer Int32 buffer_count Returns Type Description Boolean"
  },
  "api/gs.PointSetHashtable.PointList.html": {
    "href": "api/gs.PointSetHashtable.PointList.html",
    "title": "Class PointSetHashtable.PointList | ViRGIS VR GIS",
    "keywords": "Class PointSetHashtable.PointList Inheritance Object List < Int32 > PointSetHashtable.PointList Implements IList < Int32 > ICollection < Int32 > IList ICollection IReadOnlyList < Int32 > IReadOnlyCollection < Int32 > IEnumerable < Int32 > IEnumerable IGridElement3 Inherited Members System.Collections.Generic.List<System.Int32>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<System.Int32>.System.Collections.IList.set_Item(System.Int32, System.Object) List<Int32>.Add(Int32) List<Int32>.IList.Add(Object) List<Int32>.AddRange(IEnumerable<Int32>) List<Int32>.AsReadOnly() List<Int32>.BinarySearch(Int32, Int32, Int32, IComparer<Int32>) List<Int32>.BinarySearch(Int32) List<Int32>.BinarySearch(Int32, IComparer<Int32>) List<Int32>.Clear() List<Int32>.Contains(Int32) List<Int32>.IList.Contains(Object) List<Int32>.ConvertAll<TOutput>(Converter<Int32, TOutput>) List<Int32>.CopyTo(Int32[]) List<Int32>.ICollection.CopyTo(Array, Int32) List<Int32>.CopyTo(Int32, Int32[], Int32, Int32) List<Int32>.CopyTo(Int32[], Int32) List<Int32>.Exists(Predicate<Int32>) List<Int32>.Find(Predicate<Int32>) List<Int32>.FindAll(Predicate<Int32>) List<Int32>.FindIndex(Predicate<Int32>) List<Int32>.FindIndex(Int32, Predicate<Int32>) List<Int32>.FindIndex(Int32, Int32, Predicate<Int32>) List<Int32>.FindLast(Predicate<Int32>) List<Int32>.FindLastIndex(Predicate<Int32>) List<Int32>.FindLastIndex(Int32, Predicate<Int32>) List<Int32>.FindLastIndex(Int32, Int32, Predicate<Int32>) List<Int32>.ForEach(Action<Int32>) List<Int32>.GetEnumerator() List<Int32>.IEnumerable<Int32>.GetEnumerator() List<Int32>.IEnumerable.GetEnumerator() List<Int32>.GetRange(Int32, Int32) List<Int32>.IndexOf(Int32) List<Int32>.IList.IndexOf(Object) List<Int32>.IndexOf(Int32, Int32) List<Int32>.IndexOf(Int32, Int32, Int32) List<Int32>.Insert(Int32, Int32) List<Int32>.IList.Insert(Int32, Object) List<Int32>.InsertRange(Int32, IEnumerable<Int32>) List<Int32>.LastIndexOf(Int32) List<Int32>.LastIndexOf(Int32, Int32) List<Int32>.LastIndexOf(Int32, Int32, Int32) List<Int32>.Remove(Int32) List<Int32>.IList.Remove(Object) List<Int32>.RemoveAll(Predicate<Int32>) List<Int32>.RemoveAt(Int32) List<Int32>.RemoveRange(Int32, Int32) List<Int32>.Reverse() List<Int32>.Reverse(Int32, Int32) List<Int32>.Sort() List<Int32>.Sort(IComparer<Int32>) List<Int32>.Sort(Int32, Int32, IComparer<Int32>) List<Int32>.Sort(Comparison<Int32>) List<Int32>.ToArray() List<Int32>.TrimExcess() List<Int32>.TrueForAll(Predicate<Int32>) List<Int32>.Capacity List<Int32>.Count List<Int32>.IList.IsFixedSize List<Int32>.ICollection<Int32>.IsReadOnly List<Int32>.IList.IsReadOnly List<Int32>.ICollection.IsSynchronized List<Int32>.ICollection.SyncRoot List<Int32>.Item[Int32] List<Int32>.IList.Item[Int32] Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class PointList : List<int>, IList<int>, ICollection<int>, IList, ICollection, IReadOnlyList<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable, IGridElement3 Methods CreateNewGridElement(Boolean) Declaration public IGridElement3 CreateNewGridElement(bool bCopy) Parameters Type Name Description Boolean bCopy Returns Type Description IGridElement3 Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.IList System.Collections.ICollection System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IGridElement3"
  },
  "api/gs.RemesherPro.html": {
    "href": "api/gs.RemesherPro.html",
    "title": "Class RemesherPro | ViRGIS VR GIS",
    "keywords": "Class RemesherPro Extension to Remesher that is smarter about which edges/vertices to touch: queue tracks edges that were affected on last pass, and hence might need to be updated FastSplitIteration() just does splits, to reach target edge length as quickly as possible RemeshIteration() applies remesh pass for modified edges TrackedSmoothPass() smooths all vertices but only adds to queue if edge changes enough TrackedProjectionPass() same Inheritance Object RemesherPro Namespace : gs Assembly : cs.temp.dll.dll Syntax public class RemesherPro : Remesher Constructors RemesherPro(DMesh3) Declaration public RemesherPro(DMesh3 m) Parameters Type Name Description DMesh3 m Fields FaceProjectionPassesPerIteration Declaration public int FaceProjectionPassesPerIteration Field Value Type Description Int32 UseFaceAlignedProjection Declaration public bool UseFaceAlignedProjection Field Value Type Description Boolean vBufferVWeights Declaration protected DVector<double> vBufferVWeights Field Value Type Description DVector < Double > Methods ComputeProjectedVertexPos(Int32, out Boolean) This computes projected position w/ proper constraints/etc. Does not modify mesh. Declaration protected virtual Vector3d ComputeProjectedVertexPos(int vID, out bool bModified) Parameters Type Name Description Int32 vID Boolean bModified Returns Type Description Vector3d EdgesIterator() Declaration protected IEnumerable<int> EdgesIterator() Returns Type Description IEnumerable < Int32 > FastestRemesh(Int32, Boolean) Converge on remeshed result as quickly as possible Declaration public void FastestRemesh(int nMaxIterations = 25, bool bDoFastSplits = true) Parameters Type Name Description Int32 nMaxIterations Boolean bDoFastSplits FastSplitIteration() This pass only does edge splits. Returns number of split edges. Tracks previously-split Declaration public int FastSplitIteration() Returns Type Description Int32 InitializeBuffersForFacePass() Declaration protected virtual void InitializeBuffersForFacePass() OnEdgeSplit(Int32, Int32, Int32, DMesh3.EdgeSplitInfo) Declaration protected override void OnEdgeSplit(int edgeID, int va, int vb, DMesh3.EdgeSplitInfo splitInfo) Parameters Type Name Description Int32 edgeID Int32 va Int32 vb DMesh3.EdgeSplitInfo splitInfo PopState() Declaration public void PopState() PushState() Declaration public void PushState() RemeshIteration() Declaration public virtual void RemeshIteration() ResetQueue() Reset tracked-edges queue. Should be called if mesh is modified by external functions between passes, and also between different types of passes (eg FastSplitIteration vs RemeshIteration) Declaration public void ResetQueue() SharpEdgeReprojectionRemesh(Int32, Int32, Boolean) This is a remesh that tries to recover sharp edges by aligning triangles to face normals of our projection target (similar to Ohtake RZN-flow). Declaration public void SharpEdgeReprojectionRemesh(int nRemeshIterations, int nTuneIterations, bool bDoFastSplits = true) Parameters Type Name Description Int32 nRemeshIterations Int32 nTuneIterations Boolean bDoFastSplits TrackedFaceProjectionPass() Declaration protected virtual void TrackedFaceProjectionPass() TrackedProjectionPass(Boolean) Declaration protected virtual void TrackedProjectionPass(bool bParallel) Parameters Type Name Description Boolean bParallel TrackedSmoothPass(Boolean) Declaration protected virtual void TrackedSmoothPass(bool bParallel) Parameters Type Name Description Boolean bParallel"
  },
  "api/gs.RemoveDuplicateTriangles.html": {
    "href": "api/gs.RemoveDuplicateTriangles.html",
    "title": "Class RemoveDuplicateTriangles | ViRGIS VR GIS",
    "keywords": "Class RemoveDuplicateTriangles Remove duplicate triangles. Inheritance Object RemoveDuplicateTriangles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class RemoveDuplicateTriangles Constructors RemoveDuplicateTriangles(DMesh3) Declaration public RemoveDuplicateTriangles(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh Fields CheckOrientation Declaration public bool CheckOrientation Field Value Type Description Boolean Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 Removed Declaration public int Removed Field Value Type Description Int32 VertexTolerance Declaration public double VertexTolerance Field Value Type Description Double Methods Apply() Declaration public virtual bool Apply() Returns Type Description Boolean"
  },
  "api/gs.RemoveOccludedTriangles.CalculationMode.html": {
    "href": "api/gs.RemoveOccludedTriangles.CalculationMode.html",
    "title": "Enum RemoveOccludedTriangles.CalculationMode | ViRGIS VR GIS",
    "keywords": "Enum RemoveOccludedTriangles.CalculationMode Namespace : gs Assembly : cs.temp.dll.dll Syntax public enum CalculationMode Fields Name Description AnalyticWindingNumber FastWindingNumber RayParity SimpleOcclusionTest"
  },
  "api/gs.RemoveOccludedTriangles.html": {
    "href": "api/gs.RemoveOccludedTriangles.html",
    "title": "Class RemoveOccludedTriangles | ViRGIS VR GIS",
    "keywords": "Class RemoveOccludedTriangles Remove \"occluded\" triangles, ie triangles on the \"inside\" of the mesh. This is a fuzzy definition, current implementation is basically computing something akin to ambient occlusion, and if face is fully occluded, then we classify it as inside and remove it. Inheritance Object RemoveOccludedTriangles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class RemoveOccludedTriangles Constructors RemoveOccludedTriangles(DMesh3) Declaration public RemoveOccludedTriangles(DMesh3 mesh) Parameters Type Name Description DMesh3 mesh RemoveOccludedTriangles(DMesh3, DMeshAABBTree3) Declaration public RemoveOccludedTriangles(DMesh3 mesh, DMeshAABBTree3 spatial) Parameters Type Name Description DMesh3 mesh DMeshAABBTree3 spatial Fields InsideMode Declaration public RemoveOccludedTriangles.CalculationMode InsideMode Field Value Type Description RemoveOccludedTriangles.CalculationMode Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 NormalOffset Declaration public double NormalOffset Field Value Type Description Double PerVertex Declaration public bool PerVertex Field Value Type Description Boolean Progress Set this to be able to cancel running remesher Declaration public ProgressCancel Progress Field Value Type Description ProgressCancel RemovedT Declaration public List<int> RemovedT Field Value Type Description List < Int32 > RemoveFailed Declaration public bool RemoveFailed Field Value Type Description Boolean Spatial Declaration public DMeshAABBTree3 Spatial Field Value Type Description DMeshAABBTree3 WindingIsoValue Declaration public double WindingIsoValue Field Value Type Description Double Methods Apply() Declaration public virtual bool Apply() Returns Type Description Boolean Cancelled() if this returns true, abort computation. Declaration protected virtual bool Cancelled() Returns Type Description Boolean"
  },
  "api/gs.SmoothedHoleFill.html": {
    "href": "api/gs.SmoothedHoleFill.html",
    "title": "Class SmoothedHoleFill | ViRGIS VR GIS",
    "keywords": "Class SmoothedHoleFill This fills a hole in a mesh by doing a trivial fill, optionally offsetting along a fixed vector, then doing a remesh, then a laplacian smooth, then a second remesh. Inheritance Object SmoothedHoleFill Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class SmoothedHoleFill Constructors SmoothedHoleFill(DMesh3, EdgeLoop) Declaration public SmoothedHoleFill(DMesh3 mesh, EdgeLoop fillLoop = null) Parameters Type Name Description DMesh3 mesh EdgeLoop fillLoop Fields BorderHintTris Declaration public List<int> BorderHintTris Field Value Type Description List < Int32 > ConfigureRemesherF Declaration public Action<Remesher, bool> ConfigureRemesherF Field Value Type Description Action < Remesher , Boolean > ConstrainToHoleInterior If this is true, we don't modify any triangles outside hole (often results in lower-quality fill) Declaration public bool ConstrainToHoleInterior Field Value Type Description Boolean EnableLaplacianSmooth Declaration public bool EnableLaplacianSmooth Field Value Type Description Boolean FillLoop Declaration public EdgeLoop FillLoop Field Value Type Description EdgeLoop FillTriangles Final fill triangles. May include triangles outside initial fill loop, if ConstrainToHoleInterior=false Declaration public int[] FillTriangles Field Value Type Description Int32 [] FillVertices Final fill vertices Declaration public int[] FillVertices Field Value Type Description Int32 [] InitialRemeshPasses Declaration public int InitialRemeshPasses Field Value Type Description Int32 Mesh Declaration public DMesh3 Mesh Field Value Type Description DMesh3 OffsetDirection Declaration public Vector3d OffsetDirection Field Value Type Description Vector3d OffsetDistance Declaration public double OffsetDistance Field Value Type Description Double RemeshAfterSmooth Declaration public bool RemeshAfterSmooth Field Value Type Description Boolean RemeshBeforeSmooth Declaration public bool RemeshBeforeSmooth Field Value Type Description Boolean SmoothAlpha Declaration public double SmoothAlpha Field Value Type Description Double SmoothSolveIterations Declaration public int SmoothSolveIterations Field Value Type Description Int32 TargetEdgeLength Declaration public double TargetEdgeLength Field Value Type Description Double Methods Apply() Declaration public bool Apply() Returns Type Description Boolean"
  },
  "api/gs.WyvillFalloff.html": {
    "href": "api/gs.WyvillFalloff.html",
    "title": "Class WyvillFalloff | ViRGIS VR GIS",
    "keywords": "Class WyvillFalloff returns 1 in range [0,ConstantRange], and then falls off to 0 in range [ConstantRange,1] Inheritance Object WyvillFalloff Implements IFalloffFunction Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : gs Assembly : cs.temp.dll.dll Syntax public class WyvillFalloff : IFalloffFunction Fields ConstantRange Declaration public double ConstantRange Field Value Type Description Double Methods Duplicate() Declaration public IFalloffFunction Duplicate() Returns Type Description IFalloffFunction FalloffT(Double) Declaration public double FalloffT(double t) Parameters Type Name Description Double t Returns Type Description Double Implements IFalloffFunction"
  }
}